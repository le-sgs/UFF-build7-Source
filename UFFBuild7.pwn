                                                                                                                                                                                                                                                /*


________________________________________________________________________________

--------------------------------------------------------------------------------

|||||||----------------------------------------------------------------|||||||||

	 		          (¯`·._.·Ultimate Funky Freeroam._.·´¯)

          				      Release: 7 (June 2018)
                                0.3.7 R2 compatible
					      Total Number of Lines : 50000+
						  Total Number of Objects : 50000+
						  
								      By,
	                    Build by Reckon aka Eclipse (2018)
		                    Updates by Oblivion (2018)
							 Hosted by Node (2018)


|||||||---------------------------   -------    -----------------------|||||||||
_______________________________________________________________________________

|||||||----------------------------------------------------------------|||||||||

                                Special thanks to

                   (¯`·.     UFF Administrative Team      .·´¯)
						 `·.  UFF Community Players  .·´
				             `·.UFF Mapper Team..·´

|||||||---------------------------   -------    -----------------------|||||||||

--------------------------------------------------------------------------------
________________________________________________________________________________


================================================================================
  							   Includes
================================================================================                                                                                                                                             */

#include <a_samp.inc>         // Samp Include

#include <a_mysql.inc>  	  // MySQL Plugin

#include <streamer.inc>	      // Streamer Plugin

#include <geolocation.inc>   // Get Your Country Include

#include <foreach.inc> 		 // foreach

#include <irc.inc> 			// IRC Plugin

#include <mSelection.inc>   // Menu Selections

#include <youtube.inc>      // Youtube Streamer

#include <CTime.inc> 		// CTimeLibrary v1.0

//#include <dl-compat.inc>
#include <md-sort.inc>      // Y-Less

#include <YSI\y_ini>        // Y-Less

#include <YSI\y_areas>     // Y-Less.

//===============Server Main Include==========
#include "UFF_config.pwn" 	//  UFF Config`
//========================================
#undef MAX_PLAYERS
#define MAX_PLAYERS 500
#define DREWARDSPATH "/DailyRewards/%s.ini" // rewards saves herre
#undef MAX_VEHICLES
#define MAX_VEHICLES 1600
/*==============================================================================
         					     Colors
===============================================================================*/
#define COLOR_WHITE 		0xFFFFFFFF

#define COLOR_WHITEP 		0xFFE4C4FF

#define COLOR_ORANGE   		0xDB881AFF

#define COLOR_ORANGE2		0xFF5000FF

#define COLOR_IVORY 		0xFFFF82FF

#define COLOR_LIME 			0xD2D2ABFF

#define COLOR_BLUE			0x004BFFFF

#define COLOR_SBLUE			0x56A4E4FF

#define COLOR_RCONBLUE      0x0080FF99

#define COLOR_PURPLE 		0x5A00FFFF

#define COLOR_RED 			0xFF0000FF

#define COLOR_LRED 			0xE65555FF

#define COLOR_LIGHTGREEN 	0x00FF00FF

#define COLOR_YELLOW 		0xFFFF00FF

#define COLOR_YELLOW2 		0xF5DEB3FF

#define COLOR_LB 			0x15D4EDFF

#define COLOR_PINK			0xEE82EEFF

#define COLOR_GOLD			0xFFD700FF

#define COLOR_FIREBRICK 	0xB22222FF

#define COLOR_GREEN 		0x3BBD44FF

#define COLOR_GREY			0xBABABAFF

#define COLOR_GREY2 		0x778899FF

#define COLOR_GREY3			0xC8C8C8FF

#define COLOR_DARK 			0x7A7A7AFF

#define COLOR_BROWN 		0x8B4513FF

#define COLOR_SYSTEM 		0xEFEFF7FF

#define StatsBlue   "{12C7E1}"
#define GANG_CHAT   "{00FFB4}"
#define RED_E 		"{FF0000}"
#define BLUE_E 		"{004BFF}"
#define SBLUE_E 	"{56A4E4}"
#define VPINK_E     "{e600ac}"
#define VGREEN_E    "{00ff99}"
#define PINK_E 		"{FFB6C1}"
#define YELLOW_E 	"{FFFF00}"
#define LG_E 		"{00FF00}"
#define LB_E 		"{15D4ED}"
#define LB2_E 		"{87CEFA}"
#define GREY_E 		"{BABABA}"
#define GREY2_E 	"{778899}"
#define GREY3_E 	"{C8C8C8}"
#define DARK_E 		"{7A7A7A}"
#define WHITE_E 	"{FFFFFF}"
#define WHITEP_E 	"{FFE4C4}"
#define IVORY_E 	"{FFFF82}"
#define GOLD_E 	    "{FFD700}"
#define ORANGE_E 	"{DB881A}"
#define GREEN_E 	"{3BBD44}"
#define PURPLE_E 	"{5A00FF}"
#define LIME_E 		"{D2D2AB}"
#define LRED_E		"{E65555}"
//=== Color ===
#define COLOR_RGB(%1,%2,%3,%4) (((((%1) & 0xff) << 24) | (((%2) & 0xff) << 16) | (((%3) & 0xff) << 8) | ((%4) & 0xff)))
#define StripAlpha(%0) ((%0) >>> 8)

//=== Functions ===
#define Error(%1,%2) SendClientMessage(%1, COLOR_GREY3, ""RED_E"[INFO] "RED_E""%2)
#define Info(%1,%2) SendClientMessage(%1, COLOR_WHITEP, ""LB_E"INFO: "WHITEP_E""%2)
#define Usage(%1,%2) SendClientMessage(%1, COLOR_WHITEP, ""YELLOW_E"USAGE: "YELLOW_E""%2)
#define PreloadAnimLib(%1,%2) ApplyAnimation(%1,%2,"NULL",0.0,0,0,0,0,0)
#define function%0(%1) forward %0(%1); public %0(%1)
#define UFF "{004BFF}UFF{FFFFFF}"
#define RACE "{FFFFFF}[{5A00FF}RACE{FFFFFF}]{FFFFFF}"
#define EVENT "{DBED15}[{7A7A7A}EVENT{DBED15}]{FFFFFF}"
#define FALLOUT "{FFFFFF}[{D2D2AB}FALLOUT{FFFFFF}]{FFFFFF}"
#define DERBY "{FFFFFF}[{FF0000}DERBY{FFFFFF}]{FFFFFF}"
#define SHOOTER "{FFFFFF}[{FF0000}SHOOTER{FFFFFF}]{FFFFFF}"
#define LMS "{7A7A7A}[{FF0000}LMS{7A7A7A}]{FFE4C4}"
#define DUEL "[DUEL]"
#define GANG "{FFFFFF}[{FFA000}GANG{FFFFFF}]"
#define CSDM "{FFFFFF}[{FFFF00}CSDM{FFFFFF}]{88FF82}"
#define MB "{FFFFFF}[{D2D2AB}MB HUNT{FFFFFF}]"
#define GB "{FFFFFF}[{BABABA}GB HUNT{FFFFFF}]"
#define arrow "{FFFFFF}»"
#define dot "{F2F853}• {F0F0F0}"
#define GROUP_DIALOG 245
#define MUSIC 999
#define DIALOG_CNVRT_GBTOCASH 1999
#define HOUSE_ENTER_PASSWORD 290

#define D_MUSIC 	3000
#define D_MFORALL   3001
#define D_MFORSELF  3002
#define D_MPOS      3003
#define D_MPOS1     3004
#define D_MFORP     3005
#define D_MFORP1    3006
#define D_MFORALL1  3007
#define D_MFORP2    3008

#define SendFormatMessage(%0,%1,%2,%3) do{format(str, 150, %2, %3); SendClientMessage(%0, %1, str);} while(FALSE)

#define MAX_PMS			(10)
#define MAX_REPORTS 	(10)
/*
//----------------------- Informatios ------

Unused pickups and checkponits are moved to virtual world 4042. if needed will be setted back in future development!
*/

/*
//================Actors Defines===========
new UFFPGUARD1;
new UFFPGUARD2;
new UFFPGUARD3;
new UFFPBEERBOY;
new UFFHGUARD1;
new UFFHGUARD2;

new UFFGD1;
new UFFGD2;
new UFFGD3;
new UFFGD4;*/
#define terror 1
#define CounterTerrorist 2
new DB:Database;

new ggWeapons[14] = { 23,22,27,26,29,32,30,31,24,33,34,35,36,38 };
new GGLevel[MAX_PLAYERS], InGGMap[MAX_PLAYERS];
//================

new IsPlanted[MAX_PLAYERS];
new BombTimer;
new DefuseTimer;
new BombC;
new link[255];
new link1[255];
//----------
//=== MySQL Connection (Xampp)===
#define HOSTNAME  "localhost"
#define USERNAME  "root"
#define PASS  ""
#define DB  "uff2"
//===============
//=== MySQL ===
new mysqlQueries, query[300];
new g_SQL_handle = 1;
#define MySQL_query(%0,%1,%2,%3,%4) mysql_function_query(g_SQL_handle, %0,%1,%2,%3,%4),mysqlQueries++
#define MySQL_updateQuery(%0) mysql_function_query(g_SQL_handle, %0, false, "", ""),mysqlQueries++

#define MySQL_getInt(%0,%1) cache_get_row_int(%0,%1,g_SQL_handle)
#define MySQL_getString(%0,%1,%2) cache_get_row(%0,%1,%2,g_SQL_handle)
#define MySQL_getFloat(%0,%1) cache_get_row_float(%0,%1,g_SQL_handle)
#define MySQL_rowCount(%0) cache_get_row_count(%0)

//=== Bind Protection ===
//#define BIND_LOCAL 	"127.0.0.1"
//#define BIND_MAIN 	"198.245.51.214"
//=== Bind Protection ===
#define BIND_LOCAL 	"127.0.0.1"
//#define BIND_MAIN 	"34.228.165.73"
#define BIND_MAIN 	"192.168.42.242"
// === Anti Map Stealer ===
#define USE_ANTI_STEALER (true)
#if USE_ANTI_STEALER == true

#define DISALLOWED_ADDRESS "DA0E5085558CCACC88ECCA40C4CEC49A9408EEE8"
native gpci(playerid, const serial[], maxlen);
#endif

// Sha1 Hash System
native sha1(const text[], hesh[]);


/*==============================================================================
         					     Defines
===============================================================================*/
/*// P VARS
GetPVarInt(playerid, "test") == 1)
SetPVarInt(playerid, "test", 0/1);

 Cookie Shop
Heal yourself - 10 cookies
Purchase Jetpack 15 cookies
Buy 50% armour 25 cookies*/

//=== HostName ===
#define HOSTNAME_1  ".::Ultimate Funky Freeroam::."
#define BUILD      	"7.5"
//=== Dialogs ===
#define TUNE_DIALOG 144
#define DIALOG_TYPE_PAINTJOBS 145
#define DIALOG_TYPE_COLORS 146
#define DIALOG_TYPE_WHEELS 154
#define DIALOG_TYPE_NITRO 159
#define NO_DIALOG 17
#define TOPLIST_DIALOG 42
#define TELE_DIALOG 22
#define DUEL_DIALOG 92
#define DUEL_MAP_DIALOG 91
#define ADMIN_WEAPON 92
#define EVENTMENU 6378
#define EINVITEMENU 6372
#define EVENTCAGE 6380
#define EVENTSHAMAL 6315
#define EVENTDERBY 6314
#define EVENTCAGE2 6381
#define EVENTCAGE3 6382
#define TOY_DIALOG 559
#define EMAIL_DIALOG 213
#define DESCRIPTION_DIALOG 216
#define DIALOG_HOLD 3012
#define VEHICLE_CONTROL_DIALOG  1234
#define CARBUY_DIALOG 3066
#define WEAPON_DIALOG 8777
#define SETTINGS_DIALOG 7
#define DERBY_VOTING_DIALOG 432
#define SHOOTER_VOTING_DIALOG 430
#define TDM_VOTING_DIALOG 435
#define GAMG_DIALOG 245
#define GC_DIALOG 487
#define AUTOLOGIN_DIALOG 991
#define EDITOBJ_DIALOG 1124
#define INTERIORMENU 4012
#define DIALOG_SONGINFO 6969

//===============lOTTO==========
#define LOTTO_JACKPOT 50000   //How much it goes up every 30 seconds or whenever someone buys a ticket
#define LOTTO_START   10000   //How much the lotto starts off at every draw
#define TICKET_COST   200     //How much a ticket will cost
#define LOTTO_DRAW    25         //How many minutes between each lotto draw

//=== Object Attachments===
#define ATTACHOBJECT_SLOT_CUSTOM  4
#define ATTACHOBJECT_SLOT_CUSTOM2 3
#define ATTACHOBJECT_SLOT_CUSTOM3 1
#define ATTACHOBJECT_SLOT_CUSTOM4 2
#define ATTACHOBJECT_SLOT_CUSTOM5 0

//=== Pickups ===
//=== Pickups ===
#define parachute_1 1
#define parachute_2 2
#define parachute_3 3
#define StuntPC_1 	4
#define StuntPC_2 	5
#define StuntPC_3 	6
#define StuntPC_4 	7
#define StuntPC_5 	28
#define StuntPC_6   29
#define StuntPC_7   30
#define StuntPC_8   31
#define TelePC_1 	8
#define TelePC_2 	9
#define TelePC_3 	10
#define TelePC_4 	11
#define TelePC_5 	12
#define TelePC_6 	13
#define TelePC_7 	14
#define TelePC_8 	15
#define TelePC_9 	16
#define vPC_1 		17
#define vPC_2 		18
#define vPC_3 		19
#define vPC_4 		20
#define vPC_5 		21
#define vPC_6 		22
#define vPC_7 		23
#define vPC_8 		24
#define vPC_9 		25
#define BarPC 		26
#define mbPC 		27
#define BarPC2 		32
#define TelePC_10 	33
#define vPC_10      34
#define gbPC 		35
#define TelePC_11 	36
#define TelePC_12 	37
#define vPC_11 		38
#define vPC_12      39
#define SHVEH1      40
#define SHVEH2 		41
#define SHNOS1 		42
#define SHNOS2 		43
#define PVMENU 		44
#define PVEXIT 		45

// Menu
#define VEHICLE_MENU 1

//=== AntiCaps ===
#define UpperToLower(%1) for( new ToLowerChar; ToLowerChar < strlen( %1 ); ToLowerChar ++ ) if ( %1[ ToLowerChar ]> 64 && %1[ ToLowerChar ] < 91 ) %1[ ToLowerChar ] += 32


//DCCMD
#define DCCMD:%1(%2) \
	forward dccmd_%1(%2); \
	public dccmd_%1(%2)
	
#define dccmd(%1,%2,%3,%4,%5,%6) \
	DCCMD:%1(%2, %3, %4, %5, %6)


// ZCMD
#define CMD:%1(%2)		\
	forward cmd_%1(%2); \
	public cmd_%1(%2)

#if !defined isnull
	#define isnull(%1) \
		((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif

//=== IRC Config ===
#define IRC
#define IRC_SERVER  	"" // IRC disbaled!
#define IRC_PORT    	6667
#define IRC_REALNAME    "UFF"
#define IRC_HOSTNAME    "UFF"
#define IRC_CHANNEL     "#UFF.user"
#define IRC_aCHANNEL    "#UFF.staff"
#define IRC_BOT_1_NAME  "UFF-1"
#define IRC_BOT_2_NAME  "UFF-2"
#define IRC_BOT_3_NAME  "UFF-3"
#define IRC_BOT_4_NAME  "UFF-4"
#define IRC_BOT_5_NAME  "UFF-5"
#define IRC_BOT_6_NAME  "UFF-6"
#define IRC_BOT_7_NAME  "UFF-7"
#define IRC_BOT_8_NAME  "UFF-8"
#define IRC_NICKSERV            "Nickserv"
#define IRC_NOTICE_REGISTER     "This nickname is registered and protected"
#define IRC_NOTICE_NOREGISTER   "Your nick isn't registered"
#define IRC_NOTICE_PASSWORD_OK  "Password accepted"
#define IRC_NOTICE_PASSWORD_NO  "Password incorrect"
#define IRC_IDENTIFY_RAW        "PRIVMSG NickServ :IDENTIFY 9840395793"
#define IRC_REGISTER_RAW        "PRIVMSG NickServ :REGISTER Raaj raajparker@gmail.com"
#define IRC_NOTICE_REGISTERED   "registered under your account"

//==Cbug Record==
// * DEFINES FUNCS * //
#define Msg SendClientMessage
#define MsgAll SendClientMessageToAll
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
// * CORES * //

// * VARS * //
new bool:disparou[MAX_PLAYERS+1] = false;
new Float:ccount[4][MAX_PLAYERS+1];
new sstr[128];
new str1[256];
new fileToWrite[] = "topcbug.ini";
new Float:tops[5];
new jogtops[5][MAX_PLAYER_NAME+1];

//=LOTTO=
new bool:IsLottoRunning;
new	tLottoTimer = -1;
new Jackpot = LOTTO_START;       //Jackpot amount
new Numbers[90];                //So 2 people don't get the same #
//==
new
	bool: InAMEvent[MAX_PLAYERS];
// * STOCKS * //


// * CONSTANTES * //
#define DIALOG_TOPS 874
//=== [IRC Vars] ===
#define MAX_BOTS (9)
new ircName[MAX_BOTS][16];
new	ircBot[MAX_BOTS];
new ircGroup;
new bool:ircBotConnected[9],
	bool:ircBotInChannel[9],
	bool:ircIdentified[9];
//=== Global Variables ===
new tmp[128],
	str[150],
 	line[512];


new bool: isRelogging[MAX_PLAYERS], relogPlayerIP[MAX_PLAYERS][17];


// Player Information
enum Info
{
	pKills,
	pDeaths,
	pSeePMs,
	pEventsWon,
	pRacesWon,
	pMBFound,
	pSaveSkin,
	pRainbow,
	phitsound,
	pSeeGC,
	pHearSong,
	pVipLogin,
	
}
enum dInfo
{
	dClaimed,
	dAgain
}
new DailyInfo[MAX_PLAYERS][dInfo];

new pInfo[MAX_PLAYERS][Info];
new pName[MAX_PLAYERS][24];
new pIP[MAX_PLAYERS][25];
new pCountry[MAX_PLAYERS][30];

new bool:pLogged[MAX_PLAYERS],
	pAdmin[MAX_PLAYERS],
	Mapper[MAX_PLAYERS],
	pPremium[MAX_PLAYERS],
	pSpawned[MAX_PLAYERS],
	pAutoTune[MAX_PLAYERS],
	pMute[MAX_PLAYERS],
	pBlocked[MAX_PLAYERS],
	pJail[MAX_PLAYERS],
	pWarns[MAX_PLAYERS],
	pScore[MAX_PLAYERS],
	pTotalHours[MAX_PLAYERS],
	pTotalMinutes[MAX_PLAYERS],
	pTotalSeconds[MAX_PLAYERS],
	pCurrHours[MAX_PLAYERS],
	pCurrMinutes[MAX_PLAYERS],
	pCurrSeconds[MAX_PLAYERS],
	pGBs[MAX_PLAYERS],
	pGGWins[MAX_PLAYERS],
	pBMX[MAX_PLAYERS],
	pDuelsWon[MAX_PLAYERS],
	pFallouts[MAX_PLAYERS],
	pDerbys[MAX_PLAYERS],
//	pReportPoints[MAX_PLAYERS],
	pWeaponSet[MAX_PLAYERS],
	pGoldBlocks[MAX_PLAYERS],
	specOFF[MAX_PLAYERS],
    pShooters[MAX_PLAYERS],
    pWarns2[MAX_PLAYERS],
	pSpawnPlace[MAX_PLAYERS];

new pRegDate[MAX_PLAYERS][50];
new pLastDate[MAX_PLAYERS][50];
new pTime[MAX_PLAYERS];
new houseID[MAX_PLAYERS];
new pWeather[MAX_PLAYERS];
new SavedVehicle[MAX_PLAYERS];
new reactionsWon[MAX_PLAYERS];
new mathsWon[MAX_PLAYERS];
new RobberyCount[MAX_PLAYERS];
new pRegID[MAX_PLAYERS];
new pAutoFix[MAX_PLAYERS];
new pSpawnVehicle[MAX_PLAYERS];
new pPlate[MAX_PLAYERS][20];
new pGoTo[MAX_PLAYERS];
new pJoinTick[MAX_PLAYERS];
new pDescription[MAX_PLAYERS][60];
new GOD[MAX_PLAYERS];
new pHidden[MAX_PLAYERS];
new doingStunt[MAX_PLAYERS];
new pLastVehicle[MAX_PLAYERS];
new LastSeat[MAX_PLAYERS];
new premiumExpired[MAX_PLAYERS];
new hideMSG[MAX_PLAYERS];
new autoLogin[MAX_PLAYERS];
new duelsOFF[MAX_PLAYERS];
new pReportPoints[MAX_PLAYERS];
new bool:PlayerHit[MAX_PLAYERS];
new bool:PurchasedToy[MAX_PLAYERS];
new bool:canUseKey[MAX_PLAYERS];
new bool:Freezed[MAX_PLAYERS];
//new bool:justSpawnedVehicle[MAX_PLAYERS];

new housestring[8196];
// Group System
new pGroupID[MAX_PLAYERS],
	pGroupRank[MAX_PLAYERS],
	pGroupTag[MAX_PLAYERS][24],
	pGroupName[MAX_PLAYERS][24],
	pGroupCar[MAX_PLAYERS],
	pGcolor[MAX_PLAYERS];


// CnR Stats
new pArrests[MAX_PLAYERS],
	pTakedowns[MAX_PLAYERS],
	pRobberies[MAX_PLAYERS],
	pPlayerRobberies[MAX_PLAYERS],
	pCopKills[MAX_PLAYERS],
	pTimesArrested[MAX_PLAYERS];

new pJailTimer[MAX_PLAYERS];
// Anti-Spam (Chat)
new RepeatMsg[MAX_PLAYERS];
new LastText[MAX_PLAYERS][128];

new PMs[MAX_PLAYERS][MAX_PMS][150];
new Reports[MAX_REPORTS][150];

// DM Variables
new CnR,
 BattleField,
	WarDM,
	TDM,
	Mini,
	GunGame,
	SawnDM,
	Rocket,
	dm1,
	dm2;

// Warp Hack
new vehxTime[MAX_PLAYERS];
new myzobject;

// Remote Jacking
//new LastState[MAX_PLAYERS];
//new Float:LastFootPos[3][MAX_PLAYERS];

// Objects
new Gate[11];

// Player Info
new otherid;
new	PlayerIP[16];
new	PlayerName[24];
new	giveplayer[24];
new Float:POS[3], Float:A;
//new RedCount = 0;
//new BlueCount = 0;

// DM check
new InDM[MAX_PLAYERS];


// Custom Vehicle Objects
new sObjects[13][MAX_PLAYERS];

// Neon
new NeonObject[2][MAX_PLAYERS];

// Bounty System
new bounty[MAX_PLAYERS];

// Random Messages
new msgTDswitch;
new DTDswitch;
// Server Statistics
new serverStartTime;
new joinPlayerCount;
new totalPlayersJoined;
new pRegs;
new RegisteredPlayers;
new telesUsed;
new msgsSent;
new cmdsUsed;
new StatsObject;

// [3D Texts]
new Text3D:god3D[MAX_PLAYERS];
new Text3D:admin3D[MAX_PLAYERS];
new Text3D:mapper3D[MAX_PLAYERS];
new Text3D:clan3D[MAX_PLAYERS];
new Text3D:PV_3DLabel[MAX_PLAYERS];
new Text3D:GangLabel[MAX_PLAYERS];
// Message Box
new Text:TD_line[4],
	szString_0[60],
	szString_1[60],
	szString_2[60],
	szString_3[60];

// mSelection
new skinlist = mS_INVALID_LISTID,
	toyslist = mS_INVALID_LISTID;

new canBet;
new betTimer = -1;
new rampTimer[MAX_PLAYERS] = -1;

// killCam
new killCam[MAX_PLAYERS];
new bool:killCamON[MAX_PLAYERS];
new killCamCounter[MAX_PLAYERS];
new killCamTimer[MAX_PLAYERS];

// Achivements
new pAch1[MAX_PLAYERS], // 150 kills. - Grim Reaper
	pAch2[MAX_PLAYERS], // 20 killstreak. - Mass Killer
	pAch3[MAX_PLAYERS], // Earned 5 million - You're Rich
	pAch4[MAX_PLAYERS], // Played for more than 24 hours. - Official Stunter
	pAch5[MAX_PLAYERS], // Played for more than 200 hours. - No Lifer
	pAch6[MAX_PLAYERS], // Win race more than 10 times - Elite Racer
	pAch7[MAX_PLAYERS], // Get 2000 score - Score Whore
	pAch8[MAX_PLAYERS], // Win 20 events. - Event Champion
	pAch9[MAX_PLAYERS], // Answer 50 reaction tests. - TooFast
	pAch10[MAX_PLAYERS], // Earned 20 million - Filthy Rich
	pAch11[MAX_PLAYERS], // Finish 3 skydives in a row. - SkyDiver
	pAch12[MAX_PLAYERS], // Get killed 50 times. - Rest In Peace
	pAch13[MAX_PLAYERS], // 50 gbs. - Gold Block Monster
	pAch14[MAX_PLAYERS], // Kill a player with a knife. - Silent Killer
	pAch15[MAX_PLAYERS], // Complete a hit - Hitman
	pAch16[MAX_PLAYERS], // Beat a race record - Pro Racer
	pAch17[MAX_PLAYERS], // Make 50 arrests in CnR - Elite Cop.
	pAch18[MAX_PLAYERS], // Win 50+ duels - Duelist
	pAch19[MAX_PLAYERS], // Pro Biker, complete all bike challenges in one connect
	pAch20[MAX_PLAYERS], // Fallout King, win 50 fallout minigames.
	pAch21[MAX_PLAYERS], // Human Calculator - Answer 80 math questions
	pAch22[MAX_PLAYERS], // Derby Pro - Win 50 derbies.
	pAch23[MAX_PLAYERS], // Pro Cop - Make 50 takedowns in CnR.
	pAch24[MAX_PLAYERS], // Pro Thief - Rob 50 shops in /CnR
	pAch25[MAX_PLAYERS], // Pickpocketer- Rob 50 players in /CnR
	pAch26[MAX_PLAYERS], // Ruthless - Kill 100 cops in /CnR
	pAch27[MAX_PLAYERS], // GoldBlocks Hunter - Find 100 Gold Blocks bags
    pAch28[MAX_PLAYERS], // Win 10 Shooters- Shooter Master
    pAch29[MAX_PLAYERS], // Buy a Business - BusinessMan
    pAch30[MAX_PLAYERS], // Buy a House - Settled
    pAch31[MAX_PLAYERS], // Wib 15 Gungames - One Shot Two Kills
    pAch32[MAX_PLAYERS]; // Wib 15 Gungames - One Shot Two Kills


// Countdown
new Count = -1;
new countTimer;
new showCD[MAX_PLAYERS];
new CountText[5][5] =
{
	"~r~1",
	"~g~2",
	"~y~3",
	"~g~4",
	"~b~5"
};

// Connection flood
new ipCheck[16], IPfound, IPtime;

// Vehicle Lock
new bool: CarLocked[MAX_VEHICLES] = false;

// Reaction Test
new bool:reactionActive,
	xCharacters[][] =
	{
	    "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M",
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "m",
		"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
	},
 	xChars[28] = "",
	reactionAward,
	reactionTimeStart,
	reactionWinnerID,
	mathTimeStart;


// Siren
new Siren[MAX_PLAYERS];
new SirenObject[MAX_PLAYERS];

new controlPlayer[MAX_PLAYERS];
new muteSec[MAX_PLAYERS];

new pLastCommandTick[MAX_PLAYERS],
	SpamCount[MAX_PLAYERS],
	SpawnHack[MAX_PLAYERS],
	pLastSpawnTick[MAX_PLAYERS];

new pChallengeCompleted[MAX_PLAYERS];
new pLastCapsed[MAX_PLAYERS];

new ignore[MAX_PLAYERS][MAX_PLAYERS];
new iTemp;

// Vehicle Control
new engine, lights, alarm, doors, bonnet, boot, objective;

new Float:speedBoost[MAX_PLAYERS];
new pSuperJump[MAX_PLAYERS];
new speedBreak[MAX_PLAYERS];
new pColor[MAX_PLAYERS];
new pChatColor[MAX_PLAYERS];
new pIDColor[MAX_PLAYERS];
new pBounce[MAX_PLAYERS];
new RainbowTimer[MAX_PLAYERS];
new RobberyTimer[MAX_PLAYERS];
new bool:pAirbreak[MAX_PLAYERS];
new bool:pInvincible[MAX_PLAYERS];

// Tops
enum e_top_score
{
	E_playerid,
	E_pscore
}
enum e_top_wanted
{
	E_playerid,
	E_pwanted
}
enum e_top_richlist
{
	E_playerid,
	E_money
}
enum e_top_kills
{
	E_playerid,
	E_kills
}
enum e_top_deaths
{
	E_playerid,
	E_deaths
}
enum e_top_time
{
	E_playerid,
	E_time,
	E_time2
}
enum e_top_eventwins
{
	E_playerid,
	E_eWins
}
enum e_top_racewins
{
	E_playerid,
	E_races
}
enum e_top_mbsfound
{
	E_playerid,
	E_mbs
}
enum e_top_duels
{
	E_playerid,
	E_duels
}
enum e_top_cookies
{
	E_playerid,
	E_cookies
}
enum e_top_ks
{
	E_playerid,
	E_ks
}
enum e_top_rec
{
	E_playerid,
	E_rec
}
enum e_top_math
{
	E_playerid,
	E_math
}
enum e_top_ar
{
	E_playerid,
	E_ar
}


// Race Position Data
enum e_race_position
{
	RP_iPlayer,
	RP_iValue
}

// Save Position Feature
enum SpawnPosENUM { Float:sX, Float:sY, Float:sZ, Float:sA, SpawnSavedPos };
new SpawnPos[MAX_PLAYERS][SpawnPosENUM];


// Save Position Feature
enum ParkPosENUM { Float:pX, Float:pY, Float:pZ, Float:pA, ParkSavedPos };
new  ParkPos[MAX_PLAYERS][ParkPosENUM];

// AFK System
new cAFK[MAX_PLAYERS];

// Maths
new mathsAnswered = -1,
	mathsCurrent[14],
	mathsAnswer,
	mathsAward;


// Fake-Kill AntiCheat
new LastDeath[ MAX_PLAYERS ];
new DeathSpam[ MAX_PLAYERS char ];

// Kill-Streak
new killStreak[MAX_PLAYERS]; // Kill-Streak
new TotalKillStreak[MAX_PLAYERS]; // Total Kill-Streak



// Speedometer
new Speedo[MAX_PLAYERS];

// Gangzones
new Zone[9];

new changeHostname;

//=== RoadBlock ===
new  pblock[MAX_PLAYERS];
//new block[10][MAX_PLAYERS];

new pWheels[MAX_PLAYERS];

//Event System
//=== Locations ===
new CageFight, CageFightOn;
new EventGoingOn;
new EventStarted;
new evcd, ecd, dcd;
new EStartTimer;
new DerbyStartTimer;
new Shamal;
//=== Counters ===
new NumEventPlayers;
new DerbyPlayers;
new PlayersJoined;

//=== Weapons ===
new EventWeap;
new duelWeap[MAX_PLAYERS];
new duelWeapon[MAX_PLAYERS][28];
//=== Weapons ===
new duelLoc[MAX_PLAYERS];
new duelLocation[MAX_PLAYERS][28];
//=== Other ===
new InEvent[MAX_PLAYERS];
new InDerby[MAX_PLAYERS];
new DerbyEvent;

// Duel
new InDuel[MAX_PLAYERS];
new	g_DuelTimer,
    g_DuelCountDown,
	DuelOverTimer,
	g_DuelInProgress;

//=== Money System ===
new pCash[MAX_PLAYERS];
new BankMoney[MAX_PLAYERS];

stock GivePlayerCash(playerid, cashgiven)
{
	pCash[playerid] += cashgiven;
	GivePlayerMoney(playerid, cashgiven);
	if(pCash[playerid] > 20000000)
	{
		if(pAch10[playerid] == 0)
		{
			pAch10[playerid] = 1;
			pAch3[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a3=1,a10=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "Filthy Rich", "Congrats you earned $20,000,000!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
	}
	else if(pCash[playerid] > 5000000)
	{
		if(pAch3[playerid] == 0)
		{
			pAch3[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a3=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "You're Rich", "Congrats you earned $5,000,000!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
	}
}
stock ResetPlayerCash(playerid)
{
	pCash[playerid] = 0;
	ResetPlayerMoney(playerid);
}
stock SetPlayerMoney(playerid, cash)
{
  ResetPlayerMoney(playerid);
  return GivePlayerMoney(playerid, cash);
}
// == Score ==
stock GivePlayerScore(playerid, score)
{
	pScore[playerid] += score;
	SetPlayerScore(playerid, pScore[playerid]);
}

// gbs
stock GivePlayerGB(playerid, gbs)
{
	pGBs[playerid] += gbs;

	if(pGBs[playerid] >= 50)
	{
		if(pAch13[playerid] == 0)
		{
			pAch13[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a13=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "Gold Block Monster", "Congrats you've earned 50 gbs!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
    }
}
//==== Shooter and Derby===
new derbyCountdown;
new ShooterCountdown;
new TdmCountdown;
new derbycd;
new shootercd;
//=======================

//=== [Race System] ===
#define MAX_RACECHECKPOINTS 50
#define Race_End (30)
new raceVehicleName,
	bool:raceVehicles;




new eCountdown;


new RaceActive = 0;

new Float:RaceCheckpoints[MAX_RACECHECKPOINTS][3];  //Current race CP array
new CurrentCheckpoint[MAX_PLAYERS];                 //Current race array pointer array
new bool:RaceParticipant[MAX_PLAYERS];                  //Has the player /joined the race
new Airrace;
new BCurrentCheckpoints;
new BSelectedCheckpoint;
new RaceBuilders[MAX_PLAYERS];
new Float:BRaceCheckpoints[MAX_RACECHECKPOINTS][3];
new Float:BCPsize;
new BAirrace;
new CRaceName[48];
new raceName[48];
new datez;
new tm <tmParam>;
new RacePosition[MAX_PLAYERS];




// Toy System
enum e_toy_data
{
	toy_model,
	toy_bone,
	Float:toy_x,
	Float:toy_y,
	Float:toy_z,
	Float:toy_rx,
	Float:toy_ry,
	Float:toy_rz,
	Float:toy_sx,
	Float:toy_sy,
	Float:toy_sz
}
new pToys[MAX_PLAYERS][6][e_toy_data];
new toySelected[MAX_PLAYERS];


// Private Vehicles
new bool:BoughtVehicle[MAX_PLAYERS],
	PlayerVehicle[MAX_PLAYERS],
	pVehicle[MAX_PLAYERS];

// Loading/Saving System
new Float:sPOS_X[MAX_PLAYERS],
	Float:sPOS_Y[MAX_PLAYERS],
	Float:sPOS_Z[MAX_PLAYERS],
	Float:sPOS_A[MAX_PLAYERS];
new sPOS_VW[MAX_PLAYERS], sPOS_Int[MAX_PLAYERS];

new Float:sPOS2_X[MAX_PLAYERS],
	Float:sPOS2_Y[MAX_PLAYERS],
	Float:sPOS2_Z[MAX_PLAYERS],
	Float:sPOS2_A[MAX_PLAYERS];
new sPOS2_VW[MAX_PLAYERS],
    sPOS2_Int[MAX_PLAYERS];

//============ FS Scripts =================
//#include "UFF_OBJ.pwn"      // UFF Objects
//#include "UFF_OBJ2.pwn"      // UFF Objects
//#include "UFF_OBJ3.pwn"      // UFF Objects
#include "UFF_houses.pwn" 	 //  UFF House System
#include "UFF_fireworks.pwn" //  UFF Fireworks
#include "UFF_RACE.pwn" 	//  UFF Race
#include "UFF_textdraws.pwn" //  UFF Textdraws
#include "UFF_BUS.pwn"      // UFF Business
#include "UFF_fallout.pwn" 	//  UFF Fallout
#include "UFF_Derby.pwn" 	//  UFF Derby
#include "UFF_Shooter.pwn" 	//  UFF Shooter
#include "UFF_TDM.pwn" 	 //  UFF House System
#include "UFF_LMS.pwn" 		//  UFF LMS
#include "UFF_Gang.pwn" 	//  UFF Gang System
#include "UFF_snow.pwn" 	// UFF Snow FS
#include "UFF_anticheat.pwn" // UFF Anticheat FS
/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
==============================[|SA:MP CALLBACKS|]===============================
=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
main(){}

public OnPlayerText(playerid, text[])
{
    if(isnull(text)) return 0;
    if(pSpawned[playerid] == 0)
    {
        Error(playerid, "You must be spawned in to use chat!");
        return false;
    }
	if(text[0] == '!' && pGroupID[playerid] != -1)
	{
		cmd_g(playerid, text[1]);
		return false;
	}
    // Trim the message from the end
    new iu = strlen(text) - 1;
    while(text[iu] == ' ')
        iu --;

    iu++;
    if(!iu)
        return false;
    text[iu] = EOS;

    if(pAdmin[playerid] == 0)
    {
        if(pMute[playerid] > 0)
        {
            format(str, sizeof(str), "*You can't speak while muted, mute will be lifted in %d seconds.", pMute[playerid]);
            SendClientMessage(playerid, COLOR_ORANGE, str);
            GameTextForPlayer(playerid, "~r~You are muted~y~!", 3000, 3);
            return false;
        }
        if(strfind(LastText[playerid], text, false) != -1)
        {
            RepeatMsg[playerid]++;
            if(RepeatMsg[playerid] >= 2)
            {
                GameTextForPlayer(playerid, "~y~Do not repeat your message.", 3000, 3);
                return false;
            }
        }
        else RepeatMsg[playerid] = 0;
        strmid(LastText[playerid], text, 0, strlen(text), sizeof(LastText[]));

        // Check for frequent text lines
        SpamCount[playerid]++;
        if(SpamCount[playerid] > 6)
        {
            format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been kicked for excessive spam.", pName[playerid], playerid);
            SendClientMessageToAll(COLOR_RED, str);
            SendClientMessage(playerid, COLOR_RED, ""UFF" "RED_E"You have been kicked for excessive spamming!");
            format(str, sizeof(str), "4Anti-Spam:3 %s(%i) has been kicked for excessive spam.", pName[playerid], playerid);
            IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
            Kick(playerid);
            return false;
        }
        else if(SpamCount[playerid] > 2)
        {
            SendClientMessage(playerid, COLOR_RED, ""GREY2_E"Anti-Spam: "RED_E"Please wait before speaking again!");
            return false;
        }
        if(ignore[otherid][playerid] == 1)
		{
			  return 0;
		}
		new numCount=0;
        for(new i = 0; i < strlen(text); i++)
        {
            if(text[i] >= '0' && text[i] <= '9')
            {
                numCount++;
            }
        }

        if(numCount > 8)
        {
            if(strfind(text, "34.228.165.73:7777") == -1)
            {
                format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (Text: %s)", pName[playerid], playerid, text);
                SendAdminMessage(COLOR_RED, str);
                SendClientMessage(playerid, COLOR_RED, ""RED_E"Failed to send the message");
                format(str, sizeof(str), "4Server:2 %s(%d) has attempted to advertise! (Text: %s)", pName[playerid], playerid, text);
                IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
                return false;
            }
        }

        // Anti-Caps
        if(GetPVarType(playerid, "Caps"))
            UpperToLower(text);
    }
    if(text[0] == '@')
    {
        switch(GetPVarInt(playerid, "lastPMer"))
        {
            case -1:
            {
                SendClientMessage(playerid, COLOR_YELLOW, ""UFF" The last person that pm'ed you isn't online anymore!");
                return false;
            }
            case -2:
            {
                SendClientMessage(playerid, COLOR_YELLOW, ""UFF" '@' is the prefix for chatting with the last person that PM'ed you, no one has PM'ed you.");
                return false;
            }
            default:
            {
                if(text[1] == ' ')
                {
                    format(tmp, sizeof(tmp), "%i %s", GetPVarInt(playerid, "lastPMer"), text[2]);
                }
                else
                {
                    format(tmp, sizeof(tmp), "%i %s", GetPVarInt(playerid, "lastPMer"), text[1]);
                }
                cmd_pm(playerid, tmp);
                return false;
            }
        }
    }
    else if(text[0] == '#' && pAdmin[playerid] != 0)
    {
        cmd_a(playerid, text[1]);
        return false;
    }
    else if(text[0] == '*')
    {
        cmd_ans(playerid, text[1]);
        return false;
    }
    else if(text[0] == '$')
    {
        cmd_p(playerid, text[1]);
        return false;
    }
    if(strfind(text, "/q", true) != -1)
    {
        Error(playerid, "You are not allowed to type /q in chat!");
        return false;
    }
/*    if(strfind(text, "MF", true) != -1 || strfind(text, "Modern freeroam", true) != -1 || strfind(text, "SEF", true) != -1 ||  strfind(text, "stunt evolution freeroam", true) != -1
	||strfind(text, "XSF ", true) != -1 || strfind(text, "xtreme stunt evolution", true) != -1 || strfind(text, "BS", true) != -1 || strfind(text, "banana Stuntings", true) != -1
	|| strfind(text, "ultra stuntigs", true) != -1 || strfind(text, "stunt evolution ", true) != -1  || strfind(text, "Gammix", true) != -1)
    {
    format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (Text: %s)", pName[playerid], playerid, text);
    SendAdminMessage(COLOR_RED, str);
    SendClientMessage(playerid, COLOR_RED, ""RED_E"Failed to send the message");
	return false;
	}
    if(strfind(text, "www.uffserver.com") == -1)
	{
		format(str, sizeof(str), "** ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (Text: %s)", pName[playerid], playerid, text);
		SendAdminMessage(COLOR_RED, str);
		SendClientMessage(playerid, COLOR_RED, ""RED_E"Failed to send the message");
		return false;
	}*/
    //GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
    // Check if we need to send a multi-line message
    if(strlen(text) > 100)
    {
        // Find the first space, start looking at 70 characters
        new i = strfind(text, " ", false, 70);
        // If no spaces were found or one was found at 90+ characters, default it to 80
        if(i == -1 || i > 90) i = 100;

        tmp[0] = EOS;
        if(pAdmin[playerid] != 0 && pHidden[playerid] == 0) tmp = "{12C7E1}";
        if(pChatColor[playerid] != 1 && pHidden[playerid] == 0)
        {
            new cStr[20];
            format(cStr, sizeof(cStr), "{%06x}", pChatColor[playerid]);
            tmp = cStr;
        }
        strcat(tmp, text[i]);
        text[i] = EOS;
        if(pHidden[playerid] != 0)
        {
            format(str, sizeof(str), "%s"WHITE_E"(%i)"WHITE_E" %s", pNameTag(playerid), playerid, text);
        }
        else if(pChatColor[playerid] != 0)
        {
            if(pIDColor[playerid] != 0) format(str, sizeof(str), "%s{%06x}(%i){%06x} %s", pNameTag(playerid), pIDColor[playerid], playerid, pChatColor[playerid], text);
            else format(str, sizeof(str), "%s"WHITE_E"(%i) {%06x} %s", pNameTag(playerid), playerid, pChatColor[playerid], text);
        }
        else if(pIDColor[playerid] != 0)
        {
            switch(pAdmin[playerid])
            {
                case 0:
                {
                    if(pPremium[playerid] != 0)
                    {
                        format(str, sizeof(str), "%s {%06x}(%i) "WHITE_E"%s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                    }
                    else format(str, sizeof(str), "%s {%06x}(%i) "WHITE_E"%s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                }
                case 1: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 2: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 3: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 4: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 5: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
            }
        }
        else switch(pAdmin[playerid] != 0)
        {
            case 0:
            {
                if(pPremium[playerid] != 0)
                {
                    format(str, sizeof(str), "%s"WHITE_E"(%i)"WHITE_E" %s", pNameTag(playerid), playerid, text);
                }
                else format(str, sizeof(str), "%s"WHITE_E"(%i)"WHITE_E" %s", pNameTag(playerid), playerid, text);
            }
            case 1: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 2: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 3: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 4: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 5: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
        }
        SendClientMessageToAll(COLOR_WHITE, str);
        SendClientMessageToAll(COLOR_WHITE, tmp);
    }
    else
    {
        if(strfind(text[0], xChars, false) == 0)
        {
            if(pLogged[playerid] == false)
            {
                Error(playerid, "Sorry, you must be logged in in order to participate in reaction test (/register)!");
                return false;
            }
            else if(reactionActive == false)
            {
                format(str, sizeof(str), ""RED_E"ReactionTest :: "WHITE_E"The reaction test is already over! %s(%d) already won!", pName[reactionWinnerID], reactionWinnerID);
                SendClientMessage(playerid, COLOR_LB, str);
                return false;
            }
            else
            {
                reactionActive = false;

                // Calculate seconds and milliseconds from tickcount
                datez = GetTickCount() - reactionTimeStart;
                hour = datez;
                second = datez / 1000;
                datez = datez - second * 1000;

                reactionsWon[playerid]++;
                GivePlayerScore(playerid, 4);
                GivePlayerCash(playerid, reactionAward);
                format(query, sizeof(query), "UPDATE players SET rtests=rtests+1 WHERE reg_id=%d", pRegID[playerid]);
                MySQL_updateQuery(query);

                format(str, sizeof(str), ""RED_E"ReactionTest :: "WHITE_E"{%06x}%s(%i) "WHITE_E"has won the reaction test in %2d.%03d seconds!", pColor[playerid], pName[playerid], playerid, second, datez);
                SendClientMessageToAll(COLOR_YELLOW, str);
                reactionWinnerID = playerid;

                format(str, sizeof(str), "~g~~h~~h~+$%d~w~~n~~y~~h~+4 score", reactionAward);
	            MSTD_MSG(playerid, 3500, str);
                format(str, sizeof(str), "3,1[REACTION]4 %s(%i) has won the reaction test in %2d.%03d seconds!", pName[playerid], playerid, second, datez);
                IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
                format(str, sizeof(str), "Won the Reaction Test in %02d.%03d seconds!", second, datez);
                SetPlayerChatBubble(playerid, str, COLOR_ORANGE, 40.0, 4000);
                reactionTimeStart = 0;

                if(reactionsWon[playerid] == 50)
                {
                    if(pAch9[playerid] == 0)
                    {
                        pAch9[playerid] = 1;
                        format(query, sizeof(query), "UPDATE achievements SET a9=1 WHERE reg_id=%d", pRegID[playerid]);
                        MySQL_updateQuery(query);
                        GivePlayerAchievement(playerid, "Too Fast", "Congrats you've won 50 reaction tests!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
                    }
                }
            }
            return false;
        }
        if(pHidden[playerid] != 0)
        {
            format(str, sizeof(str), "%s"WHITE_E"(%i)"WHITE_E" %s", pNameTag(playerid), playerid, text);
        }
        else if(pChatColor[playerid] != 0)
        {
            if(pIDColor[playerid] != 0) format(str, sizeof(str), "%s{%06x}(%i){%06x} %s", pNameTag(playerid), pIDColor[playerid], playerid, pChatColor[playerid], text);
            else format(str, sizeof(str), "%s"WHITE_E"(%i){%06x} %s", pNameTag(playerid), playerid, pChatColor[playerid], text);
        }
        else if(pIDColor[playerid] != 0)
        {
            switch(pAdmin[playerid])
            {
                case 0:
                {
                    if(pPremium[playerid] != 0)
                    {
                        format(str, sizeof(str), "%s{%06x}(%i) "WHITE_E"%s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                    }
                    else format(str, sizeof(str), "%s{%06x}(%i) "WHITE_E"%s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                }
                case 1: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 2: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 3: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 4: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
                case 5: format(str, sizeof(str), "%s{%06x}(%i){12C7E1} %s", pNameTag(playerid), pIDColor[playerid], playerid, text);
            }
        }
        else switch(pAdmin[playerid])
        {
            case 0:
            {
                if(pPremium[playerid] != 0)
                {
                    format(str, sizeof(str), "%s"WHITE_E"(%i) "WHITE_E"%s", pNameTag(playerid), playerid, text);
                }
                else format(str, sizeof(str), "%s"WHITE_E"(%i) "WHITE_E"%s", pNameTag(playerid), playerid, text);
            }
            case 1: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 2: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 3: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 4: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
            case 5: format(str, sizeof(str), "%s"WHITE_E"(%i){12C7E1} %s", pNameTag(playerid), playerid, text);
        }
        SendClientMessageToAll(COLOR_WHITE, str);
    }
    format(str, sizeof(str), "3%s2[%i]1: %s", pName[playerid], playerid, text);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
    format(str, sizeof(str), "Says: "WHITE_E"%s", text);
    SetPlayerChatBubble(playerid, str, COLOR_BLUE, 20.0, 4000);
    msgsSent++;
    return false;
}
stock GetPlayerN(playerid)
{
   new nomeJog[MAX_PLAYER_NAME];
   GetPlayerName(playerid, nomeJog, MAX_PLAYER_NAME);
   return nomeJog;
}



forward ini_tempos_topcbug(name[], value[]);
public ini_tempos_topcbug(name[], value[])
{
	INI_Float("1", tops[0]);
	INI_Float("2", tops[1]);
	INI_Float("3", tops[2]);
	INI_Float("4", tops[3]);
	INI_Float("5", tops[4]);
	return 1;
}

forward ini_jogadores_topcbug(name[], value[]);
public ini_jogadores_topcbug(name[], value[])
{
	INI_String("j1", jogtops[0], MAX_PLAYER_NAME+1);
	INI_String("j2", jogtops[1], MAX_PLAYER_NAME+1);
	INI_String("j3", jogtops[2], MAX_PLAYER_NAME+1);
	INI_String("j4", jogtops[3], MAX_PLAYER_NAME+1);
	INI_String("j5", jogtops[4], MAX_PLAYER_NAME+1);
	return 1;
}
WaitReset(playerid)
{
    SetTimerEx("FuncPart2", 999, 0, "i", playerid);
}


// * FUNÇÕES * //
forward FuncPart2(playerid);
public FuncPart2(playerid)
{
    ccount[0][playerid] = 0; ccount[1][playerid] = 0; ccount[2][playerid] = 0; ccount[3][playerid] = 0;
    InDM[playerid] = 0;
    ResetPlayerWeapons(playerid);
    SetPlayerVirtualWorld(playerid, 0);
    LoadPlayerPosition(playerid);
}

stock pNameTag(playerid)
{
    new string3[36+MAX_PLAYER_NAME];
    if(pGroupID[playerid] != -1)
        format(string3,sizeof(string3),"{%06x}[%s] %s",pColor[playerid], pGroupTag[playerid], pName[playerid]);
    else
        format(string3,sizeof(string3),"{%06x}%s",pColor[playerid],pName[playerid]);
    return string3;
}

public OnGameModeInit()
{
	// Basic Config
	GetServerVarAsString( "bind", str, 16);
	if(strcmp(str, BIND_LOCAL) && strcmp(str, BIND_MAIN))
	{
	    SetGameModeText( "fail" );
		for( ;; )
			print( "Sorry, UFF is not authenticated to run on this server!" );
	}
//	SetTimer("Change_TD_colour",3000,true);
	SetGameModeText("×DM/Stunt/Race/Freeroam/Minigames×");
	SendRconCommand("hostname "HOSTNAME_1"");
	SendRconCommand("mapname " "UFF Release "BUILD"");
	SendRconCommand("weburl " "www.uffserver.com");
	SendRconCommand("language " "English");
	/*// Config
	Streamer_MaxItems(STREAMER_TYPE_OBJECT, 90000);
	Streamer_MaxItems(STREAMER_TYPE_CP, 200);
	Streamer_MaxItems(STREAMER_TYPE_MAP_ICON, 2000);
	Streamer_MaxItems(STREAMER_TYPE_PICKUP, 2000);
	for(new playerid = (GetMaxPlayers() - 1); playerid != -1; playerid--)
	{
		Streamer_DestroyAllVisibleItems(playerid, 0);
	}
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 500);*/
	if(!fexist(fileToWrite))
    {
            new INI:iniFile = INI_Open(fileToWrite);
            INI_SetTag(iniFile, "tempos");
            INI_WriteFloat(iniFile, "1", 9999999.0, 4);
            INI_WriteFloat(iniFile, "2", 9999999.0, 4);
            INI_WriteFloat(iniFile, "3", 9999999.0, 4);
            INI_WriteFloat(iniFile, "4", 9999999.0, 4);
            INI_WriteFloat(iniFile, "5", 9999999.0, 4);
            INI_SetTag(iniFile, "jogadores");
            INI_WriteString(iniFile, "j1", "N/D");
            INI_WriteString(iniFile, "j2", "N/D");
            INI_WriteString(iniFile, "j3", "N/D");
            INI_WriteString(iniFile, "j4", "N/D");
            INI_WriteString(iniFile, "j5", "N/D");
            INI_Close(iniFile);
    }
	UsePlayerPedAnims();
	EnableVehicleFriendlyFire();
	AllowInteriorWeapons(1);
	DisableInteriorEnterExits();
	DisableNameTagLOS();
    EnableStuntBonusForAll(0);
	SetWorldTime(10);
	SetWeather(1);
	//=============Race system======
	SRaces = true;
	AutomaticRace = true;
	AutoRaceTimer = SetTimer("AutoRace", 240000, true);
	//AutoRaceTimer = SetTimer("AutoRace", 60000, true);
	Database = db_open("RacesDB.db");
	db_query(Database, "CREATE TABLE IF NOT EXISTS RACES (RACE_ID INTEGER NOT NULL PRIMARY KEY, RACE_NAME TEXT NOT NULL, VEH_MODEL INTEGER NOT NULL, RACE_TYPE INTEGER NOT NULL)");
	db_query(Database, "CREATE TABLE IF NOT EXISTS RACE_TIME (RACE_ID INTEGER NOT NULL REFERENCES RACES(RACE_ID), RACE_POS INTEGER NOT NULL, TIME_RECORD INTEGER NOT NULL, RACER_NAME TEXT, PRIMARY KEY (RACE_ID, RACE_POS))");
	db_query(Database, "CREATE TABLE IF NOT EXISTS RACE_POSITIONS (RACE_ID INTEGER NOT NULL REFERENCES RACES(RACE_ID), RACE_POS INTEGER NOT NULL, R_POSX REAL NOT NULL, R_POSY REAL NOT NULL, R_POSZ REAL NOT NULL, ANGLE REAL NOT NULL, PRIMARY KEY (RACE_ID, RACE_POS))");
	db_query(Database, "CREATE TABLE IF NOT EXISTS RACE_CHECKPOINT (RACE_ID INTEGER NOT NULL REFERENCES RACES(RACE_ID), RACE_CP_ID INTEGER NOT NULL, R_POSX REAL NOT NULL, R_POSY REAL NOT NULL, R_POSZ REAL NOT NULL, PRIMARY KEY (RACE_ID, RACE_CP_ID))");
	//======================================
	// Initialize the sscanf system
	SSCANF_Init(MAX_PLAYERS, INVALID_PLAYER_ID, MAX_PLAYER_NAME);
    BusinessSQL = mysql_connect(""HOSTNAME"", ""USERNAME"", ""DB"", ""PASS""); // Business Connection
    mysql_connect(""HOSTNAME"", ""USERNAME"", ""DB"", ""PASS"");  // Server Connection

	// Reset active row
	MySQL_updateQuery("UPDATE players SET active=0 WHERE active=1");
	
	//--------------------------Actor System---------------------
//	UFFPGUARD1 = CreateActor(295, 3351.9065,-1039.1024,4.4590,178.4328);
//	ApplyActorAnimation(UFFPGUARD1, "COP_AMBIENT","Coplook_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
//	UFFPGUARD2 = CreateActor(163, 3523.6104,-1060.0662,4.4590,87.7783);
//	ApplyActorAnimation(UFFPGUARD2, "COP_AMBIENT","Coplook_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
//	UFFPGUARD3 = CreateActor(166, 3523.4138,-1031.2610,4.4590,92.1417);
//	ApplyActorAnimation(UFFPGUARD3, "COP_AMBIENT","Coplook_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
	
//	UFFPBEERBOY = CreateActor(189, 840.1976,-1664.1189,10004.4365,273.6906);  // 
//    UFFHGUARD1 = CreateActor(164, 3351.9065,-1039.1024,4.4590,178.4328); // gate 1
  //  UFFHGUARD2 = CreateActor(165, 3459.6455,-1134.1918,4.4700,91.9557); // Gta 2
    
    //Girl Dancers
/*  UFFGD1 = CreateActor(87, 881.6792,-1676.1527,10005.1670,0.2574);
    ApplyActorAnimation(UFFGD1, "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
    UFFGD2 = CreateActor(87, 881.3005,-1651.1713,10005.1602,182.7421);
    ApplyActorAnimation(UFFGD2,  "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
	UFFGD3 = CreateActor(87, 861.5105,-1650.9921,10005.1680,176.3082);
	ApplyActorAnimation(UFFGD3,  "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim
	UFFGD4 = CreateActor(87, 861.1780,-1675.8315,10005.1895,0.8423);
	ApplyActorAnimation(UFFGD4,  "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0); // Pay anim*/

	new query[1024];
	format(query, sizeof(query), "CREATE TABLE IF NOT EXISTS `business` (\
	  `ID` int(11) NOT NULL default '0',\
	  `Name` varchar(%d) default NULL,\
	  `Owner` varchar(24) default '-',\
	  `BusinessX` float default NULL,\
	  `BusinessY` float default NULL,\
	  `BusinessZ` float default NULL,\
	  `Closed` tinyint(1) default NULL,\
	  `Price` int(11) default NULL,\
	  `SalePrice` int(11) default NULL,\
      `Earning` int(11) default NULL,", MAX_BUSINESS_NAME);

	format(query, sizeof(query), "%s\
	  `Money` int(11) default NULL,\
	  `Type` int(11) default NULL,\
	  `LastVisited` int(11) default NULL,\
	  PRIMARY KEY  (`ID`),\
	  UNIQUE KEY `ID` (`ID`)\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;", query);

	mysql_tquery(BusinessSQL, query, "", "");

	mysql_tquery(BusinessSQL, "CREATE TABLE IF NOT EXISTS `business_perms` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Name` varchar(24) default NULL,\
	  `BusinessID` int(11) default NULL,\
	  `Can_Deposit` tinyint(1) default NULL,\
	  `Can_Take` tinyint(1) default NULL,\
	  PRIMARY KEY  (`ID`),\
	  KEY `BusinessID` (`BusinessID`),\
	  CONSTRAINT `business_perms_ibfk_1` FOREIGN KEY (`BusinessID`) REFERENCES `business` (`ID`) ON DELETE CASCADE\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(BusinessSQL, "CREATE TABLE IF NOT EXISTS `business_safelogs` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Name` varchar(24) default NULL,\
	  `BusinessID` int(11) default NULL,\
	  `Amount` int(11) default NULL,\
	  `Date` int(11) default NULL,\
	  PRIMARY KEY  (`ID`),\
	  KEY `BusinessID` (`BusinessID`),\
	  CONSTRAINT `business_safelogs_ibfk_1` FOREIGN KEY (`BusinessID`) REFERENCES `business` (`ID`) ON DELETE CASCADE\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(BusinessSQL, "CREATE TABLE IF NOT EXISTS `business_transactions` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `OldOwner` varchar(24) default NULL,\
	  `NewOwner` varchar(24) default NULL,\
	  `Amount` int(11) default NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	for(new i; i < MAX_BUSINESS; ++i)
	{
	    format(BusinessData[i][Name], MAX_PLAYER_NAME, "Business");
	    format(BusinessData[i][Owner], MAX_PLAYER_NAME, "-");
		BusinessData[i][BusinessLabel] = Text3D: INVALID_3DTEXT_ID;
		BusinessData[i][BusinessPickup] = -1;
		BusinessData[i][BusinessMapIcon] = -1;
	}

	mysql_tquery(BusinessSQL, "SELECT * FROM business", "LoadBusinesses", "");
	SetTimer("BusinessTimer", BUSINESS_INTERVAL * 60000, true);
	//=============================Business
	
	// Reaction Test
	xChars = "1+1=fish";
	// Pickups
	CreateDynamicPickup(371, 23, 1524.3234, -1358.6941, 330.0000, 4042); // Parachute (1)
 	CreateDynamicPickup(371, 23, 1526.6659, -1346.5205, 329.9922, 4042); // Parachute (2)
	CreateDynamicPickup(371, 23, 1537.1620, -1338.4463, 330.0536, 4042); // Parachute (3)
	CreateDynamicPickup(1310, 23, 415.9042,2437.7454,17.4480, -1); // Dive (4)
	CreateDynamicPickup(1310, 23, -2630.8696,1399.9384,7.0938, -1); // Dive (5)
	CreateDynamicPickup(1310, 3, -1826.1458, 567.2424, 277.6880,-1); // HayClimb (6)
	CreateDynamicPickup(1310, 3, 2688.4822,-1860.4713,186.3743,-1); // Parkour (7)

	CreateDynamicPickup(19130, 2, 402.5533,2437.6123,17.4152, 4042); // TelePC AA (8) // remove (changed  virtual word)
	CreateDynamicPickup(19130, 2, 375.4116,2531.5325,19.0481, 4042); // TelePC AA 2 (9)

	CreateDynamicPickup(19130, 2, -2316.8037,-1605.4543,486.5482, -1); // TelePC Chilliad(10)
	CreateDynamicPickup(19130, 2, -2662.8928,1355.0502,17.0603, -1); // TelePC SF (11)
	CreateDynamicPickup(19130, 2, -2646.5132,1380.1563,7.1702, -1); // TelePC SF 2 (12)
	CreateDynamicPickup(19130, 2, -1349.5970,-248.5725,16.5244, -1); // TelePC SFAir (13)
	CreateDynamicPickup(19130, 2, 1891.6702,-2281.6514,15.6198, -1); // TelePC LV (14)
	CreateDynamicPickup(19130, 2, 1581.7434,1441.4991,13.3583, -1); // TelePC LVAir (15)
	CreateDynamicPickup(19130, 2, 2506.7280,-1676.0291,13.3791, -1); // TelePC Chilliad (16)
	
	
	CreateDynamicPickup(19132, 2, 840.5698,-1663.3701,10004.4365, -1); // vPC AA (17)
	CreateDynamicPickup(19132, 2, 355.6121,2534.8896,17.7123, 4042); // vPC AA 2 (18)
	CreateDynamicPickup(19132, 2, 2499.0027,-1655.6356,13.4018, -1); // vPC LS (18)
	CreateDynamicPickup(19132, 2, 982.9910,-2128.9790,13.2000, -1); // vPC LV (20)
	CreateDynamicPickup(19132, 2, -2617.2319,1365.7798,7.0803, -1); // vPC SF (21)
	CreateDynamicPickup(19132, 2, -1340.2716,-243.7654,14.1484, -1); // vPC SFAir (22)
	CreateDynamicPickup(19132, 2, -2352.7610,-1636.7083,484.5541, -1); // vPC Chilliad (23)
	CreateDynamicPickup(19132, 2, 1898.8671,-2275.4043,13.5469, -1); // vPC LSAir (24)
	CreateDynamicPickup(19132, 2, 1567.1873,1464.8679,10.8241, -1); // vPC LVAir (25)


	CreateDynamicPickup(1313, 1, -3957.7227,1312.4315,2.2741, -1); // Bar (26)
	CreateDynamicPickup(1550, 2, 0, 0, 400, -1); // MoneyBag (27)
	CreateDynamicPickup(1310, 23, 376.7911,2475.7769,17.0000, -1); // Dive (28)
	CreateDynamicPickup(1310, 23, 2139.6990,-2589.4055,13.5469, -1); // LS Air Dive (29)
	CreateDynamicPickup(1310, 23, -1369.2114,-222.2828,14.1440, -1); // Dive (30)
	CreateDynamicPickup(1310, 23, -2291.8450,-1635.5745,484.5541, -1); // Dive (31)

	CreateDynamicPickup(1313, 1, 602.7739,-1520.6984,15.1956, -1); // Bar 2(32)
	CreateDynamicPickup(19130, 2, 9531.38184, 5744.16602, -0.17980, -1); // TelePC AAJump (33)
	CreateDynamicPickup(19132, 2,  9531.38184, 5744.16602, -0.17980, -1); // vPC AAJump (34)


	CreateDynamicPickup(19941, 2, 0, 0, 400, -1); // gbs Jar (38)

	CreateDynamicPickup(19130, 2, 415.7794,-1860.5656,6.1413, -1); // TelePC Beach (39)
	CreateDynamicPickup(19130, 2, -779.9718,2210.8589,45.1079, -1); // TelePC Sherman Dam (40)

	CreateDynamicPickup(19132, 2, 439.9143,-1872.2731,3.0064, -1); // vPC Beach (41)
	CreateDynamicPickup(19132, 2, -798.2406,2201.8960,43.3971, -1); // vPC Sherman Dam (42)

    CreateDynamic3DTextLabel(""RED_E".::Vehicle Fix::.", COLOR_WHITE, 1478.5712, -3884.0618, 21.3218, 30.0, .testlos = 1); //Veh 43
	CreateDynamicPickup(1247, 1, 1478.5712,-3884.0618,21.3218, 5052); // Veh health
	CreateDynamic3DTextLabel(""RED_E".::Vehicle Fix::.", COLOR_WHITE, 241.0601, 8453.6973, 42.7395, 30.0, .testlos = 1); //Veh 44
	CreateDynamicPickup(1247, 1, 241.0601, 8453.6973, 42.7395, 5052); // Veh health
	CreateDynamic3DTextLabel(""RED_E".::Vehicle Nitro::.", COLOR_WHITE,  1301.7468, -3874.6809, 21.2991, 30.0, .testlos = 1); //Nos 45
	CreateDynamicPickup(1010, 1,  1301.7468, -3874.6809, 21.2991, 5052); // Nos
	CreateDynamic3DTextLabel(""RED_E".::Vehicle Nitro::.", COLOR_WHITE, 34.1588, 8381.7480, 42.7593, 30.0, .testlos = 1); //Nos  46
	CreateDynamicPickup(1010, 1, 34.1588,8381.7480,42.7593, 5052); // Nos
	
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"Custom Car Shop"WHITE_E"]", COLOR_WHITE, -1406.6357, 1017.9899, 1049.0288, 30.0, .testlos = 1); //PVMEnu  47
	CreateDynamicPickup(1559, 2, -1406.6357,1017.9899,1049.0288, -1); // PVMEnu
	
	CreateDynamicPickup(1559, 1, -1405.8702,981.0186,1049.0078, -1); // PVexit
	
	
	// Health Pickups
	CreateDynamicPickup(1240, 15, 399.7331,2542.7388,19.6311, 4042); // AA 1
	CreateDynamicPickup(1240, 15, 399.7331,2542.7388,19.6311, 4042); // AA 2
	CreateDynamicPickup(1240, 15, 2029.2423,-2612.2285,13.5469, 4042); // LSAIR
	CreateDynamicPickup(1240, 15, 1589.5382,1462.7930,13.3405, 4042); // LV
	CreateDynamicPickup(1240, 15, -2634.4128,1398.4274,7.0938, 4042); // SF
	CreateDynamicPickup(1240, 15, -1364.1110,-233.9697,16.5244, 4042); // SFAIR
	CreateDynamicPickup(1240, 15, 437.8626,-1861.9650,6.1413, 4042); // Beach
	CreateDynamicPickup(1240, 15, -806.1234,2207.6155,45.1079, 4042); // Sherman Dam


	// Checkpoints
	CreateDynamicCP(344.3928,2541.4458,16.7672, 1.0, 4042, -1, -1, 40.0);
//	CreateDynamic3DTextLabel(""ORANGE_E"Tune Menu", COLOR_WHITE, 344.3928,2541.4458,16.7672, 30.0, .testlos = 1); //AA
	CreateDynamicCP(1589.3759,1421.8540,10.8672, 1.0, -1, -1, -1, 40.0);
	CreateDynamic3DTextLabel(""ORANGE_E"Tune Menu)", COLOR_WHITE, 1589.3759,1421.8540,10.8672, 40.0, .testlos = 1); //LV
	CreateDynamicCP(-2614.5774,1354.7023,7.1495, 1.0, -1, -1, -1, 40.0);
	CreateDynamic3DTextLabel(""ORANGE_E"Tune Menu", COLOR_WHITE, -2614.3748,1354.5983,7.1515, 40.0, .testlos = 1); //SF
	CreateDynamicCP(-1341.8521,-254.4972,14.1484, 1.0, -1, -1, -1, 40.0);
	CreateDynamic3DTextLabel(""ORANGE_E"Tune Menu", COLOR_WHITE, -1341.8521,-254.4972,14.1484, 40.0, .testlos = 1); //SFAir

	CreateDynamicCP(-2624.0850,1411.7439,7.0938, 2.0, -1, -1, -1, 80.0);
	CreateDynamic3DTextLabel(""WHITE_E"Regular Players Club "LB2_E"SF", COLOR_WHITE, -2624.0850,1411.7439,7.0938, 60.0, .testlos = 1); //RPC SF
	CreateDynamicCP(4087.1162,1343.3811,5.3000, 2.0, -1, -1, -1, 80.0);
	CreateDynamic3DTextLabel(""WHITE_E"Regular Players Club "LB2_E"AA", COLOR_WHITE, 4087.1162,1343.3811,5.3000, 60.0, .testlos = 0); //RPC AA


	CreateDynamicCP(-3936.5137,1303.7280,1.4587, 1.5, -1, -1, -1, 100.0, 20); //RPC Exit

	CreateDynamicCP(2225.7664,1838.6151,10.8203, 2.0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel(""WHITE_E"Regular Players Club "LB2_E"LV", COLOR_WHITE, 2225.7664,1838.6151,10.8203, 60.0, .testlos = 1); //RPC
	CreateDynamicCP(967.5002,-53.1265,1001.1246, 1.5, 10, -1, -1, 100.0); //RPC Exit

	//HQ
	CreateDynamicCP(4087.1162,1343.3811,5.3000, 2.0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("UFF\n"LB_E"HQ", COLOR_GREY, 4087.1162,1343.3811,5.3000, 90.0, .testlos = 1); //HQ
	CreateDynamicCP(4087.1162,1343.3811,5.3000, 2.0, -1, -1, -1, 100.0); //hq exit
	CreateDynamicCP(-3249.0808,990.8794,40.6221, 5.0, -1, -1, -1, 100.0); // QuadParkour Reward
	CreateDynamicCP(209.0467, -509.5170, 208.0213, 5.0, -1, -1, -1, 100.0); // Bike Challenge Reward

	 ///UFF Info Text Label
	CreateDynamic3DTextLabel(" "RED_E"(¯`·._.·"WHITE_E"Ultimate Funky Freeroam"RED_E"·._.·´¯)\n"GREY_E"Register at www.uffserver.com.\n"WHITE_E"Type "YELLOW_E"/t "WHITE_E"for teleports and "YELLOW_E"/c "WHITE_E"for commands\n"GREEN_E"Type /god to enbale godmode.", COLOR_GREY, 426.6373,-1860.9346,6.1413, 90.0, .testlos = 1); //HQ

	// Refill Stations
	CreateDynamicCP(2199.9460,2474.7231,10.8203, 2.0, 20, -1, -1, 100.0); //
	CreateDynamicCP(1596.1165,2196.8958,10.8203, 2.0, 20, -1, -1, 100.0); //
	CreateDynamicCP(2116.7163,922.6126,10.8203, 2.0, 20, -1, -1, 100.0); //
	CreateDynamicCP(2637.9185,1103.4926,10.8203, 2.0, 20, -1, -1, 100.0); //

	// Robbery Locations
	CreateDynamicCP(2097.5847,2224.0974,11.0234, 2.0, -1, -1, -1, 100.0); //24/7
	CreateDynamicCP(2194.4106,1990.7670,12.2969, 2.0, -1, -1, -1, 100.0); // 24/7 2
	CreateDynamicCP(2167.2432,2114.3831,10.8203, 2.0, 20, -1, -1, 100.0); // Casino
	CreateDynamicCP(2159.0449,943.1320,10.8203, 2.0, 20, -1, -1, 100.0); // Ammunation

	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\n24/7", COLOR_ORANGE, 2097.5847,2224.0974,11.0234, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\n24/7", COLOR_ORANGE, 2194.4106,1990.7670,12.2969, 80.0, .testlos = 1);

	// Exits
	CreateDynamicCP(-31.0415,-92.0112,1003.5469, 2.0, -1, -1, -1, 50.0); //24/7
	CreateDynamicCP(-25.4077,-188.2529,1003.5469, 2.0, -1, -1, -1, 50.0); // 24/7 2
	CreateDynamicCP(1132.9701,-14.2267,1000.6797, 2.0, 20, -1, -1, 50.0); // Casino
	CreateDynamicCP(286.1115,-41.6959,1001.5156, 2.0, 20, -1, -1, 50.0); // Ammunation

	CreateDynamicCP(294.4077,-38.3232,1001.5156, 1.5, 20, -1, -1, 50.0); // Ammunation Menu

	CreateDynamicCP(2297.6804,2466.7480,3.2734, 1.5, 20, -1, -1, 50.0); // PD Refill
	CreateDynamicCP(1291.7106,2672.7725,11.2392, 1.5, 20, -1, -1, 50.0); // Robber Refill
	CreateDynamic3DTextLabel("LVPD Refill", COLOR_BLUE, 2297.6804,2466.7480,3.2734, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel("LVPD Refill", COLOR_LB, 1308.5222,1272.5101,10.9766, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel("Robber Refill", COLOR_ORANGE, 1291.7106,2672.7725,11.2392, 60.0, .testlos = 1);
	//CreateDynamic3DTextLabel("Robber Refill", COLOR_ORANGE, 2817.0408,1281.1465,11.9609, 60.0, .testlos = 1);

	CreateDynamicCP(3257.1375,-1835.1937,170.1105, 3.0, -1, -1, -1, 100.0); // BMX Reward

	CreateDynamicCP(2287.0718,2432.3665,10.8203, 2.0, 20, -1, -1, 75.0); // PD Entrance
	CreateDynamicCP(238.7167,138.6336,1003.0234, 2.0, 20, -1, -1, 75.0); // PD Exit

	CreateDynamicCP(2271.0574,2293.2908,10.8203, 2.0, -1, -1, -1, 75.0); // Roca Escalente Bank
	CreateDynamicCP(2355.3020,1544.3804,10.8203, 2.0, -1, -1, -1, 75.0); // LV Bank
	CreateDynamicCP(2305.3713,-16.0632,26.7496, 2.0, 20, -1, -1, 75.0); // Roca/LV Bank Exit

	CreateDynamicCP(2019.7651,1007.6656,10.8203, 2.0, 20, -1, -1, 75.0); // 4D Casino
	CreateDynamicCP(2019.0719,1017.8808,996.8750, 2.0, 20, -1, -1, 75.0); // 4D Exit

	CreateDynamicCP(2089.7944,1514.4180,10.8203, 2.0, 20, -1, -1, 75.0); // Royal Casino
	CreateDynamicCP(2539.2773,2083.7363,10.8203, 2.0, 20, -1, -1, 75.0); // Ammunation

	CreateDynamicCP(2196.8345,1677.1240,12.3672, 2.0, 20, -1, -1, 75.0); // Caligulas Casino
	CreateDynamicCP(2234.1003,1714.3649,1012.3828, 2.0, 20, -1, -1, 75.0); // Caligulas Exit

	CreateDynamicCP(0,0,9999, 1.5, 20, -1, -1, 75.0); // Robbers Gate
	CreateDynamicCP(0,0,9999, 1.5, 20, -1, -1, 75.0); // Robbers Gate

	CreateDynamicCP(0,0,400, 1.5, 20, -1, -1, 75.0); // Cheetah PC

	CreateDynamicCP(-1550.4073,1168.7106,7.1875, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(-2455.3555,503.9716,30.0781, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(1877.7257,-1737.5585,13.3501, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(1550.1409,-1790.7477,15.2916, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(1462.5692,-1010.9126,26.8438, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(1498.3008,-1581.9375,13.5498, 2.0, -1, -1, -1, 75.0); // Bank
	CreateDynamicCP(4070.4075,1339.1023,2.2457, 2.0, -1, -1, -1, 75.0); // Bank AA

	CreateDynamicCP(2315.8379,-4.8086,26.7422, 1.5, -1, -1, -1, 75.0); // Bank Inside Checkpoint

	CreateDynamicCP(-1957.1733,288.4365,35.4688, 1.5, -1, -1, -1, 75.0); // Wang PV CP
	CreateDynamicCP(-1653.4993,1209.7307,7.2500, 1.5, -1, -1, -1, 75.0); // Otto's PV CP

	CreateDynamicCP(1260.0801,2672.7668,10.8203, 2.5, 20, -1, -1, 75.0); // Robbers HQ
	CreateDynamicCP(2575.7275,-1302.3394,1060.9844, 2.0, 20, -1, -1, 75.0); // Robbers HQ Exit

	CreateDynamicCP(0,0,400, 2.0, -1, -1, -1, 40.0); // AA NRG

	CreateDynamicCP(3616.5427,-1151.7488,86.2469, 3.0, -1, -1, -1, 40.0); // Parkour 2
	CreateDynamicCP(2146.9536,2750.5154,10.5925, 3.0, 20, -1, -1, 100.0); // Fuel Station

	CreateDynamicCP(2102.1699,2257.5537,11.0234, 2.0, 20, -1, -1, 75.0); // Binco (Rosca Escalente)
	CreateDynamicCP(1657.0355,1733.4517,10.8281, 2.0, 20, -1, -1, 75.0); // Binco (LV Airport)
	CreateDynamicCP(2367.0540,2071.0762,10.8203, 2.0, 20, -1, -1, 75.0); // Burger Shot (Old Venturas Strip)
	CreateDynamicCP(2472.6411,2034.1434,11.0625, 2.0, 20, -1, -1, 75.0); // Burger Shot (Old Venturas Strip 2)
	CreateDynamicCP(1872.4919,2071.8708,11.0625, 2.0, 20, -1, -1, 75.0); // Burger Shot (Redsands East)
	CreateDynamicCP(1158.1429,2072.3584,11.0625, 2.0, 20, -1, -1, 75.0); // Burger Shot (Whitewood Estates)
	CreateDynamicCP(2170.1819,2795.7898,10.8203, 2.0, 20, -1, -1, 75.0); // Burger Shot (Spinybed)
	CreateDynamicCP(2638.5867,1671.8126,11.0234, 2.0, 20, -1, -1, 75.0); // Cluckin Bells (Pilgrim)
	CreateDynamicCP(2845.8511,2415.3596,11.0690, 2.0, 20, -1, -1, 75.0); // ClucknBell (Creek)
	CreateDynamicCP(2638.6157,1850.0154,11.0234, 2.0, 20, -1, -1, 75.0); // Well Stacked Pizza (Pilgrim)
	CreateDynamicCP(2764.2209,2469.4253,11.0625, 2.0, 20, -1, -1, 75.0); // Well Stacked Pizza (Creek)
	CreateDynamicCP(1937.3093,2307.4780,10.8203, 2.0, -1, -1, -1, 75.0); // 24/7 (Redsands East)
	CreateDynamicCP(2884.6494,2453.7583,11.0690, 2.0, -1, -1, -1, 75.0); // 24/7 (Creek)
	CreateDynamicCP(1672.8607,1447.8022,10.7871, 3.0, 20, -1, -1, 75.0); // LV Airport (CNR)

	CreateDynamicCP(207.71178, -110.65179, 1004.8626, 2.0, 20, -1, -1, 40.0); // Binco Exit
	CreateDynamicCP(364.1826,-74.0648,1001.5078, 2.0, -1, -1, -1, 40.0); // Burger Shot Exit
	CreateDynamicCP(364.9849,-11.8441,1001.8516, 2.0, -1, -1, -1, 40.0); // Cluckin Bell Exit
	CreateDynamicCP(372.3303,-133.5167,1001.4922, 2.0, 20, -1, -1, 40.0); // Well Stackd Pizza Exit
	CreateDynamicCP(-26.6171,-58.2687,1003.5469, 2.0, -1, -1, -1, 40.0); // 24/7 Exit
	CreateDynamicCP(-1842.5950,21.9902,1061.1436, 2.0, 20, -1, -1, 40.0); // LVAir Exit

	CreateDynamicCP(2597.8889,2271.3315,239.8409, 5.0, -1, -1, -1, 40.0); // Parkour3 Reward

	CreateDynamicCP(1995.1925,1858.6514,159.4060, 3.0, -1, -1, -1, 40.0); // Hayclimb 2 Reward

    CreateDynamicCP(2479.9429,1060.2668,57.5016, 4.0, -1, -1, -1, 40.0); // Parkour4 End
    CreateDynamicCP(-2806.978,-2219.0698,146.9553, 4.0, -1, -1, -1, 40.0); // Parkour5 End
   	CreateDynamicCP(2834.9199,1288.3715,10.7795, 1.0, 22, -1, -1, 40.0); // Robbers HQ 2
   	CreateDynamicCP(4218.2129,1825.8020,897.0482, 1.0, 20, -1, -1, 50.0); // Robber Refill 2
   	CreateDynamicCP(1308.5222,1272.5101,10.9766, 1.0, 20, -1, -1, 50.0); // PD Refill (LVAIR)

   	CreateDynamicCP(2540.7410,4254.3701,42.9403, 15.0, -1, -1, -1, 100.0); // ip
	CreateDynamicCP(-5787.4155, -819.5548, 2.3760, 15.0, -1, -1, -1, 100.0); // ip2
	CreateDynamicCP(-3258.8074,1439.1371,142.2397, 3.0, -1, -1, -1, 40.0); //bmx2 Reward
	CreateDynamicCP(346.5312, -8034.3931, 22.5220, 15.0, -1, -1, -1, 40.0); //tm1 Reward
	CreateDynamicCP(-4000.1646, 7950.5557, 239.5070, 15.0, -1, -1, -1, 40.0); //tm2 Reward
	CreateDynamicCP(-2565.6726, 6323.7036, 1.6332, 15.0, -1, -1, -1, 40.0); //tm3 Reward
	CreateDynamicCP(-141.62520, 7723.70752, 1008.71411, 15.0, -1, -1, -1, 40.0); //skydive7 Reward
	CreateDynamicCP(350.4405,3133.6189,110.3593, 3.0, -1, -1, -1, 40.0); //bc 4 Reward
	CreateDynamicCP(1070.2043,-897.1776,89.4451, 3.0, -1, -1, -1, 100.0); //bmx3 Reward
	CreateDynamicCP(1456.2716,-838.5818,416.4825, 8.0, -1, -1, -1, 100.0); //skydive 8 Reward
	CreateDynamicCP(-90.8374,-1195.8319,603.4153, 8.0, -1, -1, -1, 100.0); //skydive 9 Reward
	CreateDynamicCP(-2045.2705,-140.7660,35.3203, 3.0, -1, -1, -1, 40.0); //bc 5 Reward
	CreateDynamicCP(2401.2153,-624.7803,124.5964, 3.0, -1, -1, -1, 40.0); //offroad Reward

    CreateDynamicCP(2411.6670,-1230.4202,1062.3944, 4.0, -1, -1, -1, 100.0); // Parkour6 End
    CreateDynamicCP(1063.4752,-1803.6013,14.1881, 3.0, -1, -1, -1, 10.0); // Cshop
    CreateDynamicCP(901.9266,-1663.0449,13.5628, 3.0, -1, -1, -1, 40.0); // discocp
    CreateDynamicCP(-4439.0532, -60.8768, 218.3321, 15.0, -1, -1, -1, 100.0); // challenge 6
    CreateDynamicCP(-1208.5787, -3780.6482, 125.5958, 15.0, -1, -1, -1, 100.0); // Challenge 7
    CreateDynamicCP(1713.6095, 1307.3164, 27.4229, 15.0, 18, -1, -1, 100.0); // Challenge 8
    CreateDynamicCP(1543.9436,-1351.9976,329.4764, 8.0, 12, -1, -1, 100.0); //skydive 4 Reward
    CreateDynamicCP(2975.8293, -2457.6516, 13.2967, 8.0, -1, -1, -1, 100.0); //skydive 5 Reward
    CreateDynamicCP(3150.2136, 2037.8535, 275.5424, 5.0, 12, -1, -1, 100.0); // Bike Challenge  4 Reward
    CreateDynamicCP(892.9832, 2653.3782, 92.6831, 15.0, 18, -1, -1, 100.0); // Challenge 9
    CreateDynamicCP(1732.7562,4883.8818,17.3743, 15.0, 75, -1, -1, 100.0); // Challenge 10
    CreateDynamic3DTextLabel(""RED_E"End of Challenge 10", COLOR_WHITE,  1732.7562,4883.8818,17.3743, 30.0, .testlos = 1); 
//----------- Challenge 10 CPS
	CreateDynamicCP(2002.3705, 3928.3730, 60.6475, 2.0, 75, -1, -1, 100.0); //veh1
	CreateDynamicCP(2051.9722, 3924.9050, 70.6044, 2.0, 75, -1, -1, 100.0); //veh2
	CreateDynamicCP(2747.68188, 4223.33984, 48.62060, 2.0, 75, -1, -1, 100.0); //veh3
	CreateDynamicCP(2766.9189, 4205.1475, 179.0674, 2.0, 75, -1, -1, 100.0); //veh4
	CreateDynamicCP(3051.2444,3887.1089,-0.9979, 10.0, 75, -1, -1, 100.0); //veh5
	CreateDynamicCP(2957.2371, 4200.6328, 0.429, 2.0, 75, -1, -1, 100.0); //veh6
	CreateDynamicCP(3100.8289, 4780.2314, 66.6832, 2.0, 75, -1, -1, 100.0); //veh7
	CreateDynamicCP(2821.2449, 4722.4517, 44.2586, 2.0, 75, -1, -1, 100.0); //veh9
	CreateDynamicCP(2144.6323, 4837.6465, 21.1115, 2.0, 75, -1, -1, 100.0); //veh9
	CreateDynamic3DTextLabel(""RED_E".::Mountain Bike::.", COLOR_WHITE,  2002.3705, 3928.3730, 60.6475, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Infernus::.", COLOR_WHITE,  2051.9722, 3924.9050, 70.6044, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::RC Goblin::.", COLOR_WHITE, 2747.68188, 4223.33984, 48.62060, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Infernus::.", COLOR_WHITE,  2766.9189, 4205.1475, 179.0674, 830.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Dinghy::.", COLOR_WHITE, 3051.2444,3887.1089,-0.9979, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Infernus::.", COLOR_WHITE, 2957.2371,4200.6328,0.429, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Monster::.", COLOR_WHITE,   3100.8289,4780.2314,66.6832, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::Infernus::.", COLOR_WHITE, 2821.2449,4722.4517,44.2586, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""RED_E".::NRG-500::.", COLOR_WHITE,  2144.6323,4837.6465,21.1115, 80.0, .testlos = 1);
//-------------------
	// Map Icons
	CreateDynamicMapIcon(314.0212,2527.3538,16.9800, 23, 0, -1, -1, -1, 250); //AA
	CreateDynamicMapIcon(1874.8475,-2287.9719,15.6110, 23 ,0, -1, -1, -1, 250); //lsa
	CreateDynamicMapIcon(-2311.0715,-1594.7805,486.5644, 23 , 0, -1, -1, -1, 250); //CHILLIAD
	CreateDynamicMapIcon(-1367.8977,-251.4580,17.7342, 23, 0, -1, -1, -1, 250); //SFAIR
	CreateDynamicMapIcon(-2636.6479,1394.6975,7.1016, 23, 0, -1, -1, -1, 250); //SF
	CreateDynamicMapIcon(2025.7063,1916.8048,12.3382, 23, 0, -1, -1, -1, 250); //LV	Creed
	CreateDynamicMapIcon(1307.9390,2673.0037,11.2392, 23, 0, 20, -1, -1, 400); //Robber Base
	CreateDynamicMapIcon(2282.3904,2457.2788,10.8203, 23, 0, 20, -1, -1, 400); //PD BASE
	CreateDynamicMapIcon(1318.7045,1250.7703,10.8268, 23, 0, 20, -1, -1, 400); //PD BASE LVAIR
	CreateDynamicMapIcon(-792.8638,2222.7407,45.1242, 23, 0, -1, -1, -1, 250); // Dam Stunt
    CreateDynamicMapIcon(426.1482,-1843.4329,6.1496, 23, 0, -1, -1, -1, 250);
	// Stores
	CreateDynamicMapIcon(2539.3477,2081.2295,10.8203, 6, 0, 20, 20, -1, 200); //Ammunation 1
	CreateDynamicMapIcon(2159.0449,943.1320,10.8203, 6, 0, 20, 20, -1, 200); //Ammunation 2
	CreateDynamicMapIcon(2097.5847,2224.0974,11.0234, 49, -1, 20, -1, -1, 200); //24/7 1
	CreateDynamicMapIcon(2194.4106,1990.7670,12.2969, 49, -1, 20, -1, -1, 200); //24/7 2
	CreateDynamicMapIcon(2196.8345,1677.1240,12.3672, 25, 20, 20, -1, -1, 200); //Caligulas
	CreateDynamicMapIcon(2019.7651,1007.6656,10.8203, 25, 20, 20, -1, -1, 200); //4D
	CreateDynamicMapIcon(2167.2432,2114.3831,10.8203, 25, 20, 20, -1, -1, 200); //Other Casino
	
	//Carshop
	CreateDynamicMapIcon(-1954.2668,276.2099,35.4688, 55, 0, -1, -1, -1, 200); //carshop
	CreateDynamicMapIcon(-1626.0443,1202.7482,7.0391, 55, 0, -1, -1, -1, 200); //Other Casino
	

	CreateDynamicMapIcon(2102.1699,2257.5537,11.0234, 45, 0, 20, -1, -1, 200); // Binco (Rosca Escalente)
	CreateDynamicMapIcon(1657.0355,1733.4517,10.8281, 45, 0, 20, -1, -1, 200); // Binco (LVAirport)
	CreateDynamicMapIcon(2367.0540,2071.0762,10.8203, 10, 0, 20, -1, -1, 200); // BurgerShot (OLD Venturas Strip)
	CreateDynamicMapIcon(2472.6411,2034.1434,11.0625, 10, 0, 20, -1, -1, 200); // BurgerShot (OLD Venturas Strip 2)
	CreateDynamicMapIcon(2170.1819,2795.7898,10.8203, 10, 0, 20, -1, -1, 200); // BurgerShot (Spinybed)
	CreateDynamicMapIcon(1872.4919,2071.8708,11.0625, 10, 0, 20, -1, -1, 200); // BurgerShot (Redsands East)
	CreateDynamicMapIcon(1158.1429,2072.3584,11.0625, 10, 0, 20, -1, -1, 200); // BurgerShot (Whitewood Estates)
	CreateDynamicMapIcon(1937.3093,2307.4780,10.8203, 49, 0, -1, -1, -1, 200); // 24/7 (Redsands East)
	CreateDynamicMapIcon(2884.6494,2453.7583,11.0690, 49, 0, -1, -1, -1, 200); // 24/7 (Creek)
	CreateDynamicMapIcon(2845.8511,2415.3596,11.0690, 14, 0, 20, -1, -1, 200); // Cluck'nBell (Creek)
	CreateDynamicMapIcon(2638.5867,1671.8126,11.0234, 14, 0, 20, -1, -1, 200); // Cluck'nBell (Pilgrim)
	CreateDynamicMapIcon(2638.6157,1850.0154,11.0234, 29, 0, 20, -1, -1, 200); // Well Stacked Pizza (Pilgrim)
	CreateDynamicMapIcon(2764.2209,2469.4253,11.0625, 29, 0, 20, -1, -1, 200); // Well Stacked Pizza (Creek)
	CreateDynamicMapIcon(1672.8607,1447.8022,10.7871, 5, 0, 20, -1, -1, 200); // LV Airport

	CreateDynamicMapIcon(2271.0574,2293.2908,10.8203, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(2355.3020,1544.3804,10.8203, 25, 0, -1, -1, -1, 200); //Bank 2
	CreateDynamicMapIcon(-1550.4073,1168.7106,7.1875, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(-2455.3555,503.9716,30.0781, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(1877.7257,-1737.5585,13.3501, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(1550.1409,-1790.7477,15.2916, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(1462.5692,-1010.9126,26.8438, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(1498.3008,-1581.9375,13.5498, 25, 0, -1, -1, -1, 200); //Bank
	CreateDynamicMapIcon(4070.4075,1339.1023,2.2457, 25, 0, -1, -1, -1, 200); //Bank

	CreateDynamicMapIcon(2225.7664,1838.6151,10.8203, 48, 0, -1, -1, -1, 200); // RPC 1
	CreateDynamicMapIcon(28.1916,2599.5283,26.6703, 48, 0, -1, -1, -1, 200); // RPC 2
	CreateDynamicMapIcon(-2624.0850,1411.7439,7.0938, 48, 0, -1, -1, -1, 200); // RPC 3

	// Private Vehicle
	CreateDynamicMapIcon(-1957.1733,288.4365,35.4688, 55, 0, -1, -1, -1, 200); // Wang
	CreateDynamicMapIcon(-1653.4993,1209.7307,7.2500, 55, 0, -1, -1, -1, 200); // Otto's

 	// 3D Text Labels
//	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 402.5533,2437.6123,17.4152, 30.0, .testlos = 1); aa shed
//	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 375.4116,2531.5325,19.0481, 30.0, .testlos = 1); aa near tp
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, -2316.8037,-1605.4543,486.5482, 30.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, -2662.8928,1355.0502,17.0603, 30.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, -2646.5132,1380.1563,7.1702, 30.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, -1349.5970,-248.5725,16.5244, 30.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 1891.6702,-2281.6514,15.6198, 30.0, .testlos = 1);//lv
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 1581.7434,1441.4991,13.3583, 30.0, .testlos = 1); //lva
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 2506.7280,-1676.0291,13.3791, 30.0, .testlos = 1);// ls
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, -779.9718,2210.8589,45.1079, 30.0, .testlos = 1); // Sherman Dam
	CreateDynamic3DTextLabel(""WHITEP_E"Teleport Menu", COLOR_WHITE, 415.7794,-1860.5656,6.1413, 30.0, .testlos = 1); // beach

	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, -2617.2319,1365.7798,7.0803, 40.0, .testlos = 1); //bordel
//	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 355.6121,2534.8896,17.7123, 40.0, .testlos = 1); //AA 2 aa near tp
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 2499.0027,-1655.6356,13.4018, 40.0, .testlos = 1); // LS
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 982.9910,-2128.9790,13.2000, 40.0, .testlos = 1); //sf
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 1567.1873,1464.8679,10.8241, 40.0, .testlos = 1); //lv
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, -1340.2716,-243.7654,14.1484, 40.0, .testlos = 1); // SFAIR
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 1898.8671,-2275.4043,13.5469, 40.0, .testlos = 1); // LS Air
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, -2352.7610,-1636.7083,484.5541, 40.0, .testlos = 1); // Chilliad
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 1293.2189,1311.0533,10.8203, 40.0, .testlos = 1); //SF
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, 439.9143,-1872.2731,3.0064, 40.0, .testlos = 1); //beach
	CreateDynamic3DTextLabel(""LB_E"Vehicle Menu", COLOR_WHITE, -798.2406,2201.8960,43.3971, 40.0, .testlos = 1); // Sherman Dam


	CreateDynamic3DTextLabel("Bar", COLOR_ORANGE, -3957.7227,1312.4315,2.2741, 60.0, .testlos = 1); //Bar
	CreateDynamic3DTextLabel("Bar", COLOR_ORANGE, 602.7739,-1520.6984,15.1956, 60.0, .testlos = 1); //Bar

    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Beach (/lsb)", COLOR_WHITE, 426.1482,-1843.4329,6.1496, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Abandoned Airport (/aa)", COLOR_WHITE, 383.2916,2541.8506,19.0481, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Los Santos Airport (/lsa)", COLOR_WHITE, 1874.8475,-2287.9719,15.6110, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Mount Chilliad (/mc)", COLOR_WHITE, -2311.0715,-1594.7805,486.5644, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Las Venturas Airport (/lva)", COLOR_WHITE,1584.9973,1450.9233,13.3351, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Docks (/docks)", COLOR_WHITE, 2751.4578,-2797.1592,7.2700, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"San Fierro (/sf)", COLOR_WHITE, -2027.3507,145.1084,28.8359, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Bordel (/Bordel)", COLOR_WHITE, -2682.6252,1342.3229,19.5723, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"San Fierro Airport (/sfa)", COLOR_WHITE, -1367.8977,-251.4580,16.5441, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Las Venturas (/lv)", COLOR_WHITE,2025.7063,1916.8048,12.3382, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Restaurant (/restaurant)", COLOR_WHITE,370.7622,-1706.8873,17.0337, 80.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Los Santos (/ls)", COLOR_WHITE,2511.1853,-1670.5634,13.2147, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Quarry (/quarry)", COLOR_WHITE, 820.5833,844.2854,10.7252, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Transfender (/trans)", COLOR_WHITE, -1923.7697,227.9386,34.4886, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Film (/film)", COLOR_WHITE, 902.8856,-1222.3805,16.9766, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"SF Police Department (/sfpd)", COLOR_WHITE, -1627.0214,679.1722,7.1901, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LS Police Department (/lspd)", COLOR_WHITE, 1536.1853,-1671.6768,13.1804, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LV Police Department (/lvpd)", COLOR_WHITE, 2291.3708,2426.2910,10.8203, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Burger Shot (/bs)", COLOR_WHITE, 1214.2946,-919.7642,42.9251, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Burger Shot 2(/bs2)", COLOR_WHITE, 816.3478,-1616.1917,13.8682, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"SF Station (/sfs)", COLOR_WHITE, -1964.3641,137.4357,27.6875, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LS Station (/lss)", COLOR_WHITE, 1707.9177,-1938.9253,13.5747, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LV Staiton (/lvs)", COLOR_WHITE, 433.4941,2620.2773,11.3926, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LV Staiton 2 (/lvs2)", COLOR_WHITE, 2859.7373,1290.5717,11.3906, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Glen (/glen)", COLOR_WHITE, 1892.9528,-1166.0863,24.0361, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Angel Pine (/ap)", COLOR_WHITE, -2108.6292,-2420.0344,30.6250, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Easter Egg (/ee)", COLOR_WHITE, -2668.5190,1594.9980,217.2739, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Easter Egg Jump (/eej)", COLOR_WHITE, -2662.7100,1594.9298,225.7578, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Ghost Town (/ghostown)", COLOR_WHITE, -375.1327,2201.6697,42.0938, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LS Hospital (/lsh)", COLOR_WHITE, 2031.6591,-1415.4594,16.9922, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LV Hospital (/lvh)", COLOR_WHITE, 1606.7942,1817.6559,10.8203, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"SF Hospital (/sfh)", COLOR_WHITE, -2662.0291,622.5660,14.4531, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Jump (/jump)", COLOR_WHITE, -676.8105,2304.9836,133.9152, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"SF Tunnel Jump (/sftj)", COLOR_WHITE, -1753.5540,885.6595,295.8750, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Golf Park (/golfpark)", COLOR_WHITE, -2398.3789,-249.2502,39.9121, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Motel (/motel)", COLOR_WHITE, -28.1667,-2511.9443,36.6555, 80.0, .testlos = 1);

    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Fleisch Berg (/fb)", COLOR_WHITE, -50.2161,-423.5979,2.2003, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Forest (/forest)", COLOR_WHITE, -548.3801,-191.2100,78.4063, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"a51 (/a51)", COLOR_WHITE, 218.2246,1911.6061,17.6406, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Villa (/villa)", COLOR_WHITE, -1497.6943,2604.6890,55.6875, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Motel 2 (/motel2)", COLOR_WHITE,-837.7318,2751.3228,45.6619, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Junkyard (/junkyard)", COLOR_WHITE, -1878.5913,-1686.3582,21.7538, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Trans 3 (/Trans3)", COLOR_WHITE, 1036.8824,-1038.8718,31.6917, 80.0, .testlos = 1);

	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"LVPD", COLOR_LB, 2287.0718,2432.3665,10.8203, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 2271.0574,2293.2908,10.8203, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 2355.3020,1544.3804,10.8203, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, -1550.4073,1168.7106,7.1875, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, -2455.3555,503.9716,30.0781, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 1550.1409,-1790.7477,15.2916, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 1877.7257,-1737.5585,13.3501, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 1462.5692,-1010.9126,26.8438, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\nBANK", COLOR_GREEN, 1498.3008,-1581.9375,13.5498, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel("Las Venturas Airport", COLOR_WHITEP, 1672.8607,1447.8022,10.7871, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\n24/7", COLOR_ORANGE, 1937.3093,2307.4780,10.8203, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\n24/7", COLOR_ORANGE, 2884.6494,2453.7583,11.0690, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"STORE"WHITE_E"]\n24/7", COLOR_ORANGE, 546.7483,1972.5259,10.8203, 60.0, .testlos = 1);
	CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"UFF headquarters (/uffhq)", COLOR_WHITE, 2834.8164,-1047.6646,23.1963, 80.0, .testlos = 1);
//=================== Challenges
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Skydive (/skydive)", COLOR_WHITE, 13.4397,7467.0752,3184.3162, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Skydive2 (/skydive2)", COLOR_WHITE,1436.8721,-848.7169,2511.2512  , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Skydive3 (/skydive3)", COLOR_WHITE, -113.0264,-1169.6085,2237.7954 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Skydive4 (/skydive4)", COLOR_WHITE, 1541.5452, -1363.4098, 3945.7163 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Skydive5 (/skydive5)", COLOR_WHITE, 3617.8762, -2455.4170, 1536.6774 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Bike Challenge (/bikec)", COLOR_WHITE,  923.5046, -2184.3843, 184.2818 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Bike Challenge2 (/bikec2)", COLOR_WHITE, 348.8365,3113.9822,102.8512   , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Bike Challenge3 (/bikec3)", COLOR_WHITE, -2091.8909,-107.3381,34.8897 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Bike Challenge4 (/bikec4)", COLOR_WHITE, 2267.3738, 1582.6492, 101.3537 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Hayclimb (/hayclimb)", COLOR_WHITE, -1788.4408, 575.2750, 35.1641 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Hayclimb2 (/hayclimb2)", COLOR_WHITE, 2019.9073,1842.4590,27.4609 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour (/Parkour)", COLOR_WHITE, 2442.7419,-1442.4756,156.9503 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour2 (/Parkour2)", COLOR_WHITE, 2896.8303,-790.8215,10.8643 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour3 (/Parkour3)", COLOR_WHITE, 2264.8516,1648.2788,107.8200 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour4 (/Parkour4)", COLOR_WHITE, 2330.4365,1056.0087,10.8203 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour5 (/Parkour5)", COLOR_WHITE, -2747.4697,-2089.6350,2.5285, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Parkour6 (/Parkour6)", COLOR_WHITE, 1442.9529,-1703.5264,913.3972 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 1 (/chal1)", COLOR_WHITE, -297.6044, 3682.8264, 24.0, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 2 (/chal2)", COLOR_WHITE, -5051.7461, -2237.2556, 10.9, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 6 (/chal6)", COLOR_WHITE, -2881.4773, -139.5330, 834.7387, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 7 (/chal7)", COLOR_WHITE, -1713.5878, -2840.1958, 658.7973, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 8 (/chal8)", COLOR_WHITE, 2760.2363, 3142.4570, 317.5373, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 9 (/chal9)", COLOR_WHITE, 2996.3474, 745.4448, 1000.9217, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"BMX Challenge (/bmx)", COLOR_WHITE, 3362.586, -1939.724, 43.027 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"BMX Challenge2 (/bmx2)", COLOR_WHITE, -3163.9106,1371.8523,10.5007 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"BMX Challenge3 (/bmx3)", COLOR_WHITE, 946.8004,-1053.1334,37.3226, 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 3 (/chal3)", COLOR_WHITE, 1297.3998, -5626.5122, 81.7 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 4 (/chal4)", COLOR_WHITE, -1929.1312, 6627.0327, 12.0 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Challenge 5 (/chal5))", COLOR_WHITE, -5697.0776,2790.4976,5.5507 , 80.0, .testlos = 1);
    CreateDynamic3DTextLabel(""BLUE_E"UFF\n"WHITE_E"Quad Parkour(/qp)", COLOR_WHITE, -2904.806, 880.312, 5.354, 80.0, .testlos = 1);
//=================
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE, 376.7911,2475.7769,17.0000, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE, -2630.8696,1399.9384,7.0938, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE, 415.9042,2437.7454,17.4480, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE, 2139.6990,-2589.4055,13.5469, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE, -2291.8450,-1635.5745,484.5541, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel("Dive", COLOR_WHITE,-1369.2114,-222.2828,14.1440, 65.0, .testlos = 1); 

	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"Custom Vehicle Shop"WHITE_E"]", COLOR_WHITE, -1957.1733,288.4365,35.4688, 65.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["YELLOW_E"Custom Vehicle Shop"WHITE_E"]", COLOR_WHITE, -1653.4993,1209.7307,7.2500, 65.0, .testlos = 1);

	CreateDynamic3DTextLabel("Robber's\n"WHITE_E"HQ", COLOR_ORANGE, 1260.0801,2672.7668,10.8203, 65.0, .testlos = 1);

	CreateDynamic3DTextLabel("/open", COLOR_ORANGE, 297.1934,1833.7173,994.2360, 7.0, .testlos = 1);
    CreateDynamic3DTextLabel("Oblivion's Island", COLOR_SBLUE, 993.6609,-2164.8252,13.1636, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Reckon's Room"WHITE_E"]", COLOR_SBLUE, -716.3295,1999.1312,6.1959, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel(""WHITE_E"["RED_E"Plant Bomb"WHITE_E"]", COLOR_SBLUE, -1149.7280,2390.5259,146.7129, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Gold Block Shop"WHITE_E"]", COLOR_SBLUE, 1063.3060,-1803.2732,13.6867, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Node's Room"WHITE_E"]", COLOR_SBLUE, -733.7452,1984.7922,6.1959, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Reckon's Office"WHITE_E"]", COLOR_SBLUE, 1829.4944,-1292.6610,38.5781, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Oblivion's Office"WHITE_E"]", COLOR_SBLUE, 1830.2120,-1273.5594,27.6719, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Node's Office"WHITE_E"]", COLOR_SBLUE, 1776.1575,-1303.4895,38.5711, 20.0, .testlos = 1);
    CreateDynamic3DTextLabel(""WHITE_E"["SBLUE_E"Admin's Office"WHITE_E"]", COLOR_SBLUE, 1786.9150,-1298.1913,27.6719, 20.0, .testlos = 1);
   	CreateDynamic3DTextLabel("Reckon's Island", COLOR_SBLUE, -4624.2349,2207.1050,5.1413, 20.0, .testlos = 1);
   	CreateDynamic3DTextLabel("Node's Island", COLOR_SBLUE, -3801.8572, 498.8828, 16.5183, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel("Reckon's Club", COLOR_SBLUE, -4686.6094,2216.7708,5.1759, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel("Admin's House", COLOR_SBLUE, -720.2568,1947.2202,1.5159, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel("Node's House", COLOR_SBLUE, 974.5857,-667.3214,121.1484, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel("Reckon's House", COLOR_SBLUE, -2014.0759,409.3484,35.1719, 20.0, .testlos = 1);
	CreateDynamic3DTextLabel("Oblivion's House", COLOR_SBLUE, 1857.4556,-1708.5945,1720.0699, 20.0, .testlos = 1);

	// Areas
    CreateDynamicRectangle(1245.0, 2600.0, 1541.0, 2726.0, 20); // CnR Robbers Area (1)
	CreateDynamicSphere(1396.8389,2694.4736,10.8203, 9.0); // Robbers Gate (5)
	CreateDynamicSphere(2236.8572,2453.1323,10.6935, 7.0); // Cops Gate (6)
	CreateDynamicRectangle(2728.0, 1215.0, 2873.0, 1409.0, 20); // CnR Robbers Area 2 (9)

	Create_TextDraws(); // Create Server Objects
	//CreateServerObjects(); // Build Srver Objects
	//CreateServerObjects2(); // Build Srver Objects
	//CreateServerObjects3(); // Build Srver Objects


 	// Skins
  	AddPlayerClass(170 , 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//0
    AddPlayerClass(291, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//1
    AddPlayerClass(293, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//2
    AddPlayerClass(0,   2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//3
    AddPlayerClass(29,  2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//4
    AddPlayerClass(292, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//5
    AddPlayerClass(264, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//6
    AddPlayerClass(297, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//7
	AddPlayerClass(289, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //8
	AddPlayerClass(290, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //9
	AddPlayerClass(295, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //10
	AddPlayerClass(298, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //11
	AddPlayerClass(119, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //12
	AddPlayerClass(270, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //13
	AddPlayerClass(271, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //14
	AddPlayerClass(149, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //15
	AddPlayerClass(1, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //16
	AddPlayerClass(2, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //17
	AddPlayerClass(4, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0); //18
	AddPlayerClass(193, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//19
    AddPlayerClass(152, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//20
    AddPlayerClass(181, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//21
    AddPlayerClass(285, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//22
    AddPlayerClass(287, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//23
    AddPlayerClass(294, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//24
	AddPlayerClass(296, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//25
    AddPlayerClass(98,  2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//26
    AddPlayerClass(82,  2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//27
    AddPlayerClass(84,  2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//28
   	AddPlayerClass(126, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//29
	AddPlayerClass(171, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//30
   	AddPlayerClass(177, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//31
   	AddPlayerClass(180, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//32
   	AddPlayerClass(100, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//33
   	AddPlayerClass(99,  2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//34
   	AddPlayerClass(211, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//35
   	AddPlayerClass(217, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//36
   	AddPlayerClass(299, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//37
   	AddPlayerClass(167, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//38
    AddPlayerClass(23, 2506.3972, -1664.0464, 13.4025, 0, 0, 0, 0, 0, 0, 0);//38
	// Variables that need to be reset.
	NumEventPlayers = 0;
	DerbyPlayers = 0;
	CageFight = 0;
	CageFightOn = 0;
	EventGoingOn = 0;
	EventStarted = 0;
	CurrentDerbyMap = 1;
	CurrentShooterMap = 1;
	CurrentTdmMap = 1;
	bDerbyPlayers = 0;
	bShooterPlayers = 0;
	bTdmPlayers = 0;
	Shamal = 0;
    CurrentDerbyPlayers = 0;
    CurrentShooterPlayers = 0;
    CurrentTdmPlayers = 0;
    IsDerbyRunning = false;
    IsShooterRunning = false;
    IsLottoRunning = false;
    IsTdmRunning = false;
	iTemp = 0;

	// Timers
	derbyCountdown = -1;
	ShooterCountdown = -1;
	TdmCountdown = -1;
    betTimer = -1;
    g_DuelTimer = -1;

	DerbyGameTime = DEFAULT_DERBY_TIME;
	ShooterGameTime = DEFAULT_SHOOTER_TIME;
	TdmGameTime = DEFAULT_TDM_TIME;
	FalloutGameTime = DEFAULT_FALLOUT_TIME;

	ExecDerbyVotingTimer();
	ClearDerbyVotes();

	ExecShooterVotingTimer();
	ExecTdmVotingTimer();
	ClearShooterVotes();
    ClearTdmVotes();
	// Load player models
	skinlist = LoadModelSelectionMenu("skins.txt");
	toyslist = LoadModelSelectionMenu("toys.txt");

	// Static Objects.
	CreateObject(18759, 2736.0537109375, -1765.4870605469, 78.151954650879, 0, 0, 0); // Event Cage
	CreateObject(986, 1385.98, 2643.14, 11.81,   0.00, 0.00, 90.13); // Robbers Gate
	CreateObject(6522, 1236.99, 2672.97, 17.34,   0.00, 0.00, 0.00); // Robbers HQ
	Gate[0] = CreateObject(976, 1397.24, 2694.51, 9.91,   0.00, 0.00, 269.23);
	Gate[1] = CreateObject(976, 1397.24, 2693.86, 9.91,   0.00, 0.00, 90.07);
	Gate[2] = CreateDynamicObject(976, 297.65, 1829.88, 993.17,   0.00, 0.00, 90.16);
	Gate[3] = CreateDynamicObject(3851, 2181.28, -2265.28, 924.07,   0.00, 0.00, 270.51);
	Gate[4] = CreateDynamicObject(3851, 2180.94, -2224.84, 924.07,   0.00, 0.00, 269.87);
    Gate[7] = CreateObject(976, 2237.28, 2448.85, 9.88,   0.00, 0.00, 90.29); // Cop's Gate

	 //mc
	StatsObject = CreateDynamicObject(7914, -2363.52344, -1670.58423, 501.33691,   0.00000, 0.00000, 118.00000);
	SetDynamicObjectMaterialText(StatsObject, 0, ""RED_E" Welcme To UFF :: Ultimate Funky Freeroam\n"ORANGE_E"Release "BUILD" "RED_E"- www.UFFserver.com\n\n"RED_E"Players Online: 0", OBJECT_MATERIAL_SIZE_256x128, "Arial", 22, 0, 0xFF0000FF, 9, 0);


    SetTimer("GoldBlocks", 320000, true);
    SetTimer("Maths", 400000, true);
//	SetTimer("MoneyBag", 320000, true); // maybe if player wants enable in future developemts
	SetTimer("ReactionTest", 180000, true);
	SetTimer("RandMsgs", 120000, true);
	SetTimer("DRandMsgs", 60000, true);
	SetTimer("RandomSM", BUSINESS_INTERVAL * 60000, true);
	SetTimer("AntiCheat", 3800, true);
	SetTimer("onlineTimer", 1000, true);
	SetTimer("xSFTimer", 470, true);
    SetTimer("RAISEJP", 120000, true); //Updates the jackpot
    SetTimer("STARTLOTTO", 180000, true); //Updates the jackpot
    print("\n - - - - - - - - - - - - - - - - - - -	");
	print("\n       Ultimate Funky Freeeroam	");
	print("\n      	(C) 2018 - Release "BUILD"!     	");
	print("\n - - - - - - - - - - - - - - - - - - - ");
	serverStartTime = gettime(); // Store the current UNIX timestamp.

	// Load IRC
	IRC_SetUp();

	// Load Houses, Vehicles
	LoadHouses();

	LoadVehicles();
	// Display some info
	printf("Number of objects loaded: %d", CountDynamicObjects());
	new tmpVeh;
	tmpVeh = CreateVehicle(411, 0.0, 0.0, -100.0, 0.0, 0, 0, -1);
	DestroyVehicle(tmpVeh);
	printf("Number of vehicles loaded: %d", (tmpVeh-1));
	for(new veh = 0; veh != MAX_VEHICLES; ++veh)
	{
		SetVehicleNumberPlate(veh, ""BLUE_E"UFF");
	}
	return true;
}

public OnPlayerDeath(playerid, killerid, reason)
{

	GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
 	GetPlayerName(killerid, giveplayer, sizeof(giveplayer));
 	PlayerPlaySound(playerid,1009,0.0,0.0,0.0);
 	SetPlayerWorldBounds(playerid, 20000.0, -20000.0, 20000.0, -20000.0);
	pSpawned[playerid] = 0;
	SetPlayerWantedLevel(playerid, 0);
	/*switch(random(10))
	{
		case 0: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Damn... ~r~You ~h~~h~noob", 3500, 3);
		case 1: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~O~h~M~h~G.. ~b~O~h~M~h~G~h~G~h~G.. ~b~OM~h~GG~h~GGG", 3500, 3);
		case 2: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~it would be ~g~EZ", 3500, 3);
		case 3: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Nice ~h~Shit", 3500, 3);
		case 4: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Aham... An you think you are ~r~pro?", 3500, 3);
		case 5: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Just leave it... ~h~For God Sake", 3500, 3);
		case 7: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~I~h~C~h~E~h~D", 3500, 3);
		case 8: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~RE~h~ST ~h~IN ~h~PEA~h~CE", 3500, 3);
		case 9: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~T~h~A~h~S~h~T~h~E ~r~T~h~H~h~E ~r~CO~h~CK", 3500, 3);
    }*/
	if(doingStunt[playerid] == 0)
	{
		format(str, sizeof(str), "~r~~h~~h~-$100");
	    MSTD_MSG(playerid, 3500, str);
	    GivePlayerCash(playerid, -100);
    	pInfo[playerid][pDeaths] ++;
	}
	if(pSpectating[playerid] != -1)
	{
	    TogglePlayerSpectating(playerid, 0);
	}
    if(RaceParticipant[playerid] == true)
    {
        JoinCount--;
		RaceParticipant[playerid] = false;
		SetVehicleHealth(GetPlayerVehicleID(playerid),1250.0);
		DisablePlayerRaceCheckpoint(playerid);
		HidePlayerRaceTextdraws(playerid);
		rpInfo[playerid][CPProgess] = 0;
		KillTimer(rpInfo[playerid][InfoTimer]);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		if(JoinCount <= 0) StopRace();
        DisableRemoteVehicleCollisions(playerid, 0);
        if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
		{
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
	    	GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
		    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
	  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
	  		GodModeLabel(playerid, true);
		}
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 100);
        TextDrawShowForPlayer(playerid, TeleTD);
		format(str, sizeof(str), ""RACE" "RED_E"%s(%i) has died.", pName[playerid], playerid);
		SendClientMessageToAll(COLOR_RED, str);

		CarLocked[vID] = false;
		foreach(Player, ii)
	 	{
	  		SetVehicleParamsForPlayer(vID, ii, 0, 0);
	    }
	}
	if(InDM[playerid] == 63)
	{
		if(GGLevel[playerid] > 0)
		{
		    GGLevel[playerid]--;
		    GameTextForPlayer(playerid, "~r~Humiliated~n~~y~Your level has reduced!", 1650, 6);
		    TextDrawHideForPlayer(playerid, GGBOX);
			PlayerTextDrawHide(playerid, GGTD[playerid]);
			TextDrawHideForPlayer(playerid, GGTD2);
		}
		if(killerid != INVALID_PLAYER_ID)
		{
		    GameTextForPlayer(killerid, "~r~Player Killed!~n~~y~Advanced to the next tier!", 1650, 6);
			GGLevel[killerid]++;
		    GivePlayerCash(killerid, GGLevel[killerid]*1000);
			GivePlayerWeapon(killerid, ggWeapons[GGLevel[killerid]], 9999);
			new Float:vida; GetPlayerHealth(killerid, vida);
			if(vida < 100){ SetPlayerHealth(killerid, vida+15); }
		}
	}
	if(Speedo[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, vSpeed[playerid]);
		PlayerTextDrawHide(playerid, vSpeedBox[playerid]);
		PlayerTextDrawHide(playerid, vSpeedModel[playerid] );
	}
	if(playerSpectated[playerid] != 0)
	{
		format(str, sizeof(str), "** "YELLOW_E"%s(%i) died, you will return spectating when the player respawns.", pName[playerid], playerid);
		foreach(Player, ii)
		{
		    if(pSpectating[ii] == playerid)
		    {
		        SendClientMessage(ii, COLOR_RED, str);
      		}
		}
	}
	new time = gettime();
    switch(time - LastDeath[playerid])
    {
        case 0..2:
        {
            if(reason != 38 && InDM[playerid] != 16 && InDM[playerid] != 18)
			{
	            DeathSpam{playerid}++;
	            if(DeathSpam{playerid} == 3)
	            {
	                GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
				//	format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has been detected for fake killing!", PlayerName, playerid);
				//	SendAdminMessage(COLOR_RED, str);
					return 1;
	            }
			}
        }
        default: DeathSpam{playerid} = 0;
    }
    LastDeath[playerid] = time;
    if(InDM[playerid] == 94)
	{
       WaitReset(playerid);
	}
   	if(InDerby[playerid] != 0)
	{
   		InDerby[playerid] = 0;
		doingStunt[playerid] = 0;
		canUseKey[playerid] = true;
   		InEvent[playerid] = 0;
		DeletePVar(playerid, "DerbyVeh");
   		DerbyPlayers--;
   		SetTimer("EndDerbyCheck", 1000, 0);
     	format(str,sizeof(str),""PINK_E"[DERBY] "DARK_E"%s(%i) has been eliminated in the derby!", pName[playerid], playerid);
    	SendEventMessage(COLOR_DARK, str);
    	SendClientMessage(playerid, COLOR_PINK, "[DERBY] "GREY_E"You have been eliminated in the derby, you will now respawn..");
	}
	if(doingStunt[playerid] == 97)
	{
	    SetShooterDeath(playerid);
	}
	if(doingStunt[playerid] == 18) // Fallout
	{
		format(str, sizeof(str), ""FALLOUT" %s(%d) has been eliminated!", pName[playerid], playerid);
		SendClientMessageToAll(COLOR_WHITEP, str);
		GameTextForPlayer(playerid, "~r~~h~You have been eliminated!", 3000, 3);
		RemoveFromFallout(playerid);
	}
	else if(doingStunt[playerid] == 19) // Derby
	{
		if(IsDerbyRunning && DerbyWinner[playerid])
  		{
   			format(str,sizeof(str),""DERBY" "WHITEP_E"%s(%d) has been eliminated! (Vehicle Destroyed)", pName[playerid], playerid);
    		SendDerbyMessage(COLOR_WHITEP, str);
            bDerbyPlayers--;
	    	DerbyWinner[playerid] = false;
	    	if(pSpawnVehicle[playerid] != -1)
	    	{
			   	DestroyVehicle(pSpawnVehicle[playerid]);
		    	pSpawnVehicle[playerid] = -1;
			}
			if(bDerbyPlayers == 1 || bDerbyPlayers <= 0)
			{
			    CheckDerby();
			    
		    }
		}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    format(str, sizeof(str), "~y~~h~you killed~n~~w~~h~%s", pName[playerid]);
		GameTextForPlayer(killerid,str, 3500,3);
		format(str, sizeof(str), "~y~~h~killed BY~n~~w~~h~%s", pName[killerid]);
		GameTextForPlayer(playerid ,str, 3500,3);
		new dstr[400];
		format(dstr, sizeof(dstr), "~g~~h~~h~+$2,000~n~~y~~h~~h~+1 score");
		MSTD_MSG(killerid, 3500, dstr);
		GivePlayerCash(killerid, 2000);
		GivePlayerScore(killerid, 1);
		//-----
		if(InDM[killerid] == 87)
		{
		    if(gTeam[killerid] == Ranger)
		    {
		        RangerKills++;
			}
			else if(gTeam[killerid] == Mafia)
			{
			    MafiaKills++;
			}
		}
	    if(reason == 4 && GOD[playerid] == 1 && InDM[playerid] == 0)
	    {
	    	SendClientMessage(killerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You are not allowed kill players with godmode using a knife!");
	    	SetPlayerHealth(killerid, 0);
	    }
		pInfo[killerid][pKills] ++;
		if(pInfo[killerid][pKills] >= 150)
		{
			if(pAch1[killerid] == 0)
			{
				pAch1[killerid] = 1;
				format(query, sizeof(query), "UPDATE achievements SET a1=1 WHERE reg_id=%d", pRegID[killerid]);
				MySQL_updateQuery(query);
				GivePlayerAchievement(killerid, "Grim Reaper", "Congrats you killed 150 players!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
			}
		}
		if(pInfo[playerid][pDeaths] >= 50)
		{
			if(pAch12[playerid] == 0)
			{
				pAch12[playerid] = 1;
				format(query, sizeof(query), "UPDATE achievements SET a12=1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
				GivePlayerAchievement(playerid, "Rest In Peace", "Congrats you've died 50 times!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
			}
		}
		vID = GetPlayerVehicleID(killerid);

		if(InDuel[playerid] != 0 && InDuel[killerid] != 0)
		{
			new Float:Health;
			GetPlayerHealth(killerid, Health);

			pDuelsWon[killerid]++;
			ResetPlayerWeapons(killerid);
			ResetPlayerWeapons(playerid);
			format(query, sizeof(query), "UPDATE players SET duels_won=duels_won+1 WHERE reg_id=%d", pRegID[killerid]);
			MySQL_updateQuery(query);
			if(Health > 90.0)
	 		{
	  			format(str, sizeof(str), ""DUEL" "LB2_E"%s(%i) has destroyed %s(%i) in the duel %.2f health left!", giveplayer, killerid, PlayerName, playerid, Health);
	    		SendClientMessageToAll(COLOR_LB, str);
			}
	 		else
	  		{
	  			format(str, sizeof(str),""DUEL" "LB2_E"%s(%i) has won the duel against %s(%i) and has %.2f health left!", giveplayer, killerid, PlayerName, playerid, Health);
	    		SendClientMessageToAll(COLOR_LB, str);
			}
			format(str, sizeof(str), "4DUEL: 2%s(%i) has won the duel against %s(%i) with %.2f health left.", giveplayer, killerid, PlayerName, playerid, Health);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			InDuel[playerid] = 0;
	  		InDuel[killerid] = 0;
	  		InDM[playerid] = 0;
	  		InDM[killerid] = 0;
	   		g_DuelInProgress = 0;
	 		LoadPlayerPosition(killerid);
	 		GodModeLabel(killerid, true);
	 		GivePlayerCash(killerid, 7000);
			GivePlayerScore(killerid, 1);
			GivePlayerScore(playerid, -1);
			canUseKey[playerid] = true;
			canUseKey[killerid] = true;
			CloseDuelGate();
			KillTimer(DuelOverTimer);
			if(GetPVarInt(killerid, "wasDoingStunt") == 1)
			{
				doingStunt[killerid] = 2;
				DeletePVar(killerid, "wasDoingStunt");
				ResetPlayerWeapons(killerid);
			}
			if(pDuelsWon[killerid] == 50)
			{
				if(pAch18[killerid] == 0)
				{
					pAch18[killerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a18=1 WHERE reg_id=%d", pRegID[killerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(killerid, "Duelist", "Congrats you have won 50 duels!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
				}
			}
			// Give Bets
			foreach(Player, ii)
			{
				if(GetPVarInt(ii, "betPlayer") == killerid)
				{
					new amount = (GetPVarInt(ii, "betAmount") * 2);
					GivePlayerCash(ii, amount);
					format(str,sizeof(str),""RED_E"[BET] "WHITEP_E"%s(%i) has won the duel, you have received "LG_E"$%s!", pName[killerid], killerid, ToCurrency(amount));
	    			SendClientMessage(ii, COLOR_WHITEP, str);
				}
				SetPVarInt(ii, "betPlayer", -1);
				DeletePVar(ii, "betAmount");
			}
		}
		else if(InEvent[playerid] != 0)
		{
	 		SetTimer("EndEventCheck", 1000, 0);
	   		if(CageFightOn == 1) NumEventPlayers--;
	   		InEvent[playerid] = 0;
	   		canUseKey[playerid] = true;
	        format(str,sizeof(str),""EVENT" "DARK_E"%s(%i) has been eliminated by %s(%i)", pName[playerid], playerid, giveplayer, killerid);
	    	SendEventMessage(COLOR_DARK, str);
	    	format(str,sizeof(str),""EVENT" "WHITEP_E"You have been eliminated by "LIME_E"%s(%i)!", giveplayer, killerid);
	    	SendClientMessage(playerid, COLOR_GREY, str);
		}
		else
		{
			if(killStreak[playerid] >= 5)
			{
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "LRED_E"has ended %s's(%i) killstreak of %d kills.", pColor[killerid], giveplayer, killerid, PlayerName, playerid, killStreak[playerid]);
				SendClientMessageToAll(COLOR_WHITEP, str);
			}
			if(doingStunt[playerid] == 33 && doingStunt[killerid] == 33)
			{
				LMS_Players--;
	   			doingStunt[playerid] = 0;
	   			InDM[playerid] = 0;
	        	format(str,sizeof(str),""LMS" %s(%i) has been eliminated by %s(%i)", pName[playerid], playerid, giveplayer, killerid);
	    		SendLMSMessage(COLOR_DARK, str);
	    		format(str,sizeof(str),""LMS" You have been eliminated by %s(%i)!", giveplayer, killerid);
	    		SendClientMessage(playerid, COLOR_GREY, str);
                UpdateDMText();
	    		LMS_LoseGame();
	    	}
			if(doingStunt[playerid] == 20 && doingStunt[killerid] == 20)
   			{
   				if(pAdmin[killerid] == 0)
				{
	   				format(str, sizeof(str), ""RED_E"Server: "GREY2_E"%s(%i) has been jailed for dming inside the club.", giveplayer, killerid);
					SendClientMessageToAll(COLOR_GREY2, str);
					format(str, sizeof(str), "3%s(%i)2 has been jailed for club dming.", giveplayer, killerid);
					IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
					SendClientMessage(killerid, COLOR_GREY, ""UFF" "RED_E"You have been jailed for 20 seconds for killing someone while in the club.");
	   				pJail[killerid] = 20;
					JailPlayer(killerid);
					doingStunt[killerid] = 0;
				}
   			}
			if(InDM[playerid] != 0 && InDM[killerid] != 0)
			{
			    switch(reason)
				{
					case 0: tmp = "Unarmed";
					case 1: tmp = "Brass Knuckles";
					case 2: tmp = "Golf Club";
					case 3: tmp = "Night Stick";
					case 4:
					{
						tmp = "Knife";
						if(pAch14[killerid] == 0)
						{
							pAch14[killerid] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a14=1 WHERE reg_id=%d", pRegID[killerid]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(killerid, "Silent Killer", "Congrats you have knifed a player!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
					case 5: tmp = "Baseball Bat";
					case 6: tmp = "Shovel";
					case 7: tmp = "Pool Cue";
					case 8: tmp = "Katana";
					case 9: tmp = "Chainsaw";
					case 10: tmp = "Dildo";
					case 11: tmp = "Dildo";
					case 12: tmp = "Vibrator";
					case 13: tmp = "Vibrator";
					case 14: tmp = "Flowers";
					case 15: tmp = "Cane";
					case 22: tmp = "Pistol";
					case 23: tmp = "Silenced Pistol";
					case 24: tmp = "Desert Eagle";
					case 25: tmp = "Shotgun";
					case 26: tmp = "Sawn-off Shotgun";
					case 27: tmp = "Combat Shotgun";
					case 28: tmp = "MAC-10";
					case 29: tmp = "MP5";
					case 30: tmp = "AK-47";
					case 31:
					{
						if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
						{
							switch(GetVehicleModel(vID))
							{
								case 447: tmp = "Sea Sparrow Machine Gun";
								default: tmp = "M4";
							}
						}
						else tmp = "M4";
					}
					case 32: tmp = "TEC-9";
					case 33: tmp = "Rifle";
					case 34: tmp = "Sniper Rifle";
					case 37: tmp = "Fire";
					case 38:
					{
						if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
						{
							switch(GetVehicleModel(vID))
							{
								case 425: tmp = "Hunter Machine Gun";
								default: tmp = "Minigun";
							}
						}
						else tmp = "Minigun";
					}
					case 41: tmp = "Spraycan";
					case 42: tmp = "Fire Extinguisher";
					case 49: tmp = "Vehicle Collision";
					case 50:
					{
						if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
						{
							switch(GetVehicleModel(vID))
							{
								case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: tmp = "Helicopter Blades";
								default: tmp = "Vehicle Collision";
							}
						}
						else tmp = "Vehicle Collision";
					}
					case 51:
					{
						if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
						{
							switch(GetVehicleModel(vID))
							{
								case 425: tmp = "Hunter Rockets";
								case 432: tmp = "Rhino Turret";
								case 520: tmp = "Hydra Rockets";
								default: tmp = "Explosion";
							}
						}
						else tmp = "Explosion";
					}
					default: tmp = "Unknown";
				}
				format(str, sizeof(str), "5[%s] 12%s(%i)1 killed 12%s(%i)1 (%s)", GetDMName(playerid), giveplayer, killerid, pName[playerid], playerid, tmp);
    			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
                GivePlayerCash(killerid, 2000);
				if(GetPVarInt(killerid, "Cop") != 0 && GetPVarInt(playerid, "Robber") != 0)
				{
					format(str, sizeof(str), ""DARK_E"[CnR] "LIME_E"Suspect %s(%d) has been taken down by Officer %s(%d).", pName[playerid], playerid, giveplayer, killerid);
					SendCNRMessage(COLOR_GREY2, str);
					format(str, sizeof(str), "4CNR:3 Suspect %s(%i) has been taken down by Officer %s(%d)", pName[playerid], playerid, giveplayer, killerid);
					IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
					format(str, sizeof(str), ""RED_E"- CnR -  "GREY_E"You have been taken down by Officer %s(%d)", giveplayer, killerid);
				    SendClientMessage(playerid, COLOR_GREY, str);
				    if(GetPVarInt(playerid, "cnrMsgSent") == 0)
					{
					    SetPVarInt(playerid, "cnrMsgSent", 1);
						format(str, sizeof(str), "> "GREY_E"You can earn more score and money by arresting the player! (/ar)", giveplayer, killerid);
				    	SendClientMessage(killerid, COLOR_YELLOW, str);
					}
				    SetPVarInt(playerid, "InStore", 0);
				    GameTextForPlayer(killerid, "~g~~h~Suspect Takedown!", 3500, 3);
				    GivePlayerCash(killerid, 4000);
					GivePlayerScore(killerid, 1);
					SendClientMessage(killerid, COLOR_GREEN, ""RED_E"- CnR - "GREEN_E"You have received 1 score and $4000 for a takedown!");
					pTakedowns[killerid]++;
					format(query, sizeof(query), "UPDATE players SET takedowns=takedowns+1 WHERE reg_id=%d", pRegID[killerid]);
					MySQL_updateQuery(query);
					// Check if achievement was completed
					if(pTakedowns[killerid] >= 50)
					{
			  			if(pAch23[killerid] == 0)
						{
							pAch23[killerid] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a23=1 WHERE reg_id=%d", pRegID[killerid]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(killerid, "Pro Cop", "Congrats you took down 50 criminals!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
				}
				else if(GetPVarInt(killerid, "Robber") != 0 && GetPVarInt(playerid, "Cop") != 0)
				{
					GivePlayerCash(killerid, 5000);
					new wanted = GetPlayerWantedLevel(killerid) + 1;
				    SetPlayerWantedLevel(killerid, wanted);
					GivePlayerScore(killerid, 1);
					SendClientMessage(killerid, COLOR_GREEN, ""RED_E"- CnR -  "GREEN_E"You have received 1 score and $5000 for killing an officer!");
					pCopKills[killerid]++;
					format(query, sizeof(query), "UPDATE players SET cop_kills=cop_kills+1 WHERE reg_id=%d", pRegID[killerid]);
					MySQL_updateQuery(query);
					// Check if achievement was completed
					if(pCopKills[killerid] >= 100)
					{
			  			if(pAch26[killerid] == 0)
						{
							pAch26[killerid] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a26=1 WHERE reg_id=%d", pRegID[killerid]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(killerid, "Ruthless", "Congrats you have killed 100 cops!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
				}
				if(pGroupID[killerid] != -1)
				{
				   if(pGroupID[killerid] != pGroupID[playerid])
				   {
				  	 UpdateGroupScore(pGroupID[killerid], 5);
				   }
			 	}
			 	// KillCam

				if(IsPlayerInAnyVehicle(killerid))
				{
				    // Anti-Driveby for Spawns
					    if(IsPlayerInArea(playerid, 370.922729, 2528.936523, 391.916717, 2550.296142)
						|| IsPlayerInArea(playerid, 410.901855, -1865.048950, 441.800323, -1833.564453)
						|| IsPlayerInArea(playerid, -189.839828, 1872.175292, -173.387283, 1903.181030)
						|| IsPlayerInArea(playerid, -1366.380981, -270.557952, -1364.495483, -229.168777)) // AA, BEACH,Party,sfaair
						{
						GetPlayerPos(killerid, POS[0], POS[1], POS[2]);
						SetPlayerPos(killerid, POS[0], POS[1], POS[2] + 10);
						new failz = GetPVarInt(killerid, "sKills") + 1;
						SetPVarInt(killerid, "sKills", failz);
						if(GetPVarInt(killerid, "sKills") == 3)
			   			{
	        				format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has been kicked for excessive driveby.", pName[killerid], killerid);
				        	SendClientMessageToAll(COLOR_GREY, str);
				    		format(str, sizeof(str), "4Server:3 %s(%i) has been kicked for excessive driveby.", pName[killerid], killerid);
							IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
							KickEx(killerid);
		    				return true;
		 				}
						SendClientMessage(killerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You are not allowed to driveby players near spawnzone, you have been warned!");
					}
					// Anti-HeliKill
					else switch(GetVehicleModel(vID))
					{
						case 487, 488, 497, 469, 548, 476, 464, 465, 501:
						{
							GetPlayerPos(killerid, POS[0], POS[1], POS[2]);
							SetPlayerPos(killerid, POS[0], POS[1], POS[2] + 10);
							SetVehicleToRespawn(vID);
							if(pSpawnVehicle[killerid] != -1)
							{
								DestroyVehicle(pSpawnVehicle[killerid]);
								pSpawnVehicle[killerid] = -1;
							}
							new failz = GetPVarInt(killerid, "vKills") + 1;
							SetPVarInt(killerid, "vKills", failz);
							if(GetPVarInt(killerid, "vKills") == 3)
						    {
						        format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has been kicked for excessive vehicle killing.", pName[killerid], killerid);
						        SendClientMessageToAll(COLOR_GREY, str);
						    	format(str, sizeof(str), "4Server:3 %s(%i) has been kicked for excessive vehicle killing.", pName[killerid], killerid);
								IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
								KickEx(killerid);
						    	return true;
			 				}
							SendClientMessage(killerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You are not allowed to kill players using this aircraft, you have been warned!");
						}
					}
				}
				if(IsPlayerInAnyVehicle(killerid))
				{
				    if(GetPlayerState(killerid) == PLAYER_STATE_PASSENGER)
					{
				 		if(!hasDriver(vID))
			 			{
			    			GetPlayerPos(killerid, POS[0], POS[1], POS[2]);
							SetPlayerPos(killerid, POS[0], POS[1], POS[2] + 10);
							SetVehicleToRespawn(vID);
							if(pSpawnVehicle[killerid] != -1)
							{
								DestroyVehicle(pSpawnVehicle[killerid]);
								pSpawnVehicle[killerid] = -1;
							}

							SendClientMessage(killerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You are not allowed to kill players from an unoccpied vehicle, you have been warned!");
						}
					}
				}
			}
		}
        killStreak[killerid]++;
		KillStreak(killerid);
		if(bounty[playerid] > 0 && GetPVarInt(playerid, "Hitman") != killerid)
		{
			format(str, sizeof(str), ""UFF" {%06x}%s(%d) "DARK_E"has earned a bounty of "LG_E"$%s "DARK_E"for killing %s(%d).", pColor[killerid], pName[killerid], killerid, ToCurrency(bounty[playerid]), pName[playerid], playerid);
			SendClientMessageToAll(COLOR_DARK, str);

			if(pAch15[killerid] == 0)
			{
				pAch15[killerid] = 1;
				format(query, sizeof(query), "UPDATE achievements SET a15=1 WHERE reg_id=%d", pRegID[killerid]);
				MySQL_updateQuery(query);
				GivePlayerAchievement(killerid, "Hitman", "Congrats you completed a hit!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
			}
			format(str, sizeof(str), ""UFF" "LB2_E"You earned a bounty of "LG_E"$%d "LB2_E"for killing %s.", bounty[playerid], pName[playerid]);
			SendClientMessage(killerid, COLOR_LB, str);
			GivePlayerCash(killerid, bounty[playerid]);
			bounty[playerid] = 0;
			SetPVarInt(playerid, "Hitman", -1);
			new hits = GetPVarInt(playerid, "hits") - 1;
			SetPVarInt(playerid, "hits", hits);
		}
	}
    killStreak[playerid] = 0;
	pLastVehicle[playerid] = 0;
	LastSeat[playerid] = 0;
	SetPVarInt(playerid, "InStore", 0);
	RemoveComponents(playerid, true);
	if(pSpawnVehicle[playerid] != -1)
	{
		DestroyVehicle(pSpawnVehicle[playerid]);
		pSpawnVehicle[playerid] = -1;
	}
	if(GetPVarInt(playerid, "killCamSpectator"))
	{
	    new watcherid = GetPVarInt(playerid, "killCamSpectator");
	    KillTimer(killCamTimer[watcherid]);
		TogglePlayerSpectating(watcherid, 0);
		killCamON[watcherid] = false;
	    DeletePVar(playerid, "killCamSpectator");
	}

	if(BuildRace == playerid+1)
	{
	    new stringr[400], str2[500];

		strcat(str2, "{FFFFFF}You died while creating a race, this has been deleted from system\nTemp race data:\n");
		format(stringr, 400, "\
		{FFFFFF}Race type {00FF00}%s race\n\
		{FFFFFF}Race Name: {00FF00}%s\n\
		{FFFFFF}Race vehicle: {00FF00}%s\n\
		{FFFFFF}Race pos: {00FF00}%s\n\
		{FFFFFF}Race CP: {00FF00}%d\n",BuildRaceType == 0 ? ("Land") : ("Air"),BuildName,BuildModeVID != -1 ? (GetVehicleName(BuildModeVID)) : ("You didn't put a car"),BuildVehPosCount,BuildCheckPointCount);
		strcat(str2, stringr);
		strcat(str2,"{FFFFFF}Press 'Exit' to close the dialog.");
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Create a new race {FF0000}(Failed)",str2, "Exit", "");

		BuildRace = 0;
		BuildCheckPointCount = 0;
		BuildVehPosCount = 0;
		BuildTakeCheckpoints = false;
		BuildTakeVehPos = false;
		DeleteRace(BuildName);
	}
	if(InEvent[playerid] != 0)
	{
		SetTimer("EndEventCheck", 1000, 0);
		if(CageFightOn == 1) NumEventPlayers--;
		InEvent[playerid] = 0;
		canUseKey[playerid] = true;
  		format(str,sizeof(str),""EVENT" "DARK_E"%s(%i) has been eliminated.", pName[playerid], playerid);
   		SendEventMessage(COLOR_DARK, str);
	}
	if(InDuel[playerid] != 0)
	{
		new Float:Health;
		GetPlayerHealth(killerid, Health);

		format(str, sizeof(str), ""DUEL" "LB2_E"%s(%i) died, duel has been ended.", PlayerName, playerid);
		SendClientMessageToAll(COLOR_LB, str);
		format(str, sizeof(str), "4DUEL: 2%s(%i) died, duel has been ended.", PlayerName, playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		foreach(Player, i)
  		{
  		    // Give Bets back
			if(GetPVarInt(i, "betPlayer") != -1)
			{
				GivePlayerCash(i, GetPVarInt(i, "betAmount"));
				format(str,sizeof(str),""RED_E"[BET] "WHITEP_E"%s(%i) has died, you have recived your money back.", pName[playerid], playerid);
 				SendClientMessage(i, COLOR_WHITEP, str);
			}
			SetPVarInt(i, "betPlayer", -1);
			DeletePVar(i, "betAmount");
			if(InDuel[i] != 0)
  			{
  			    InDuel[i] = 0;
  			    InDM[i] = 0;
  			    g_DuelInProgress = 0;
  			    LoadPlayerPosition(i);
  			    ResetPlayerWeapons(i);
  			    canUseKey[i] = true;
  			    CloseDuelGate();
  			    GodModeLabel(i, true);
				if(GetPVarInt(i, "wasDoingStunt") == 1)
				{
					doingStunt[i] = 2;
					DeletePVar(i, "wasDoingStunt");
				}
  			}
  		}
	}
	if(doingStunt[playerid] == 33)
	{
		LMS_Players--;
		doingStunt[playerid] = 0;
		InDM[playerid] = 0;
 		format(str,sizeof(str),""LMS" %s(%i) has been eliminated.", pName[playerid], playerid);
 		SendLMSMessage(COLOR_DARK, str);
 		LMS_LoseGame();
 	}
	SendDeathMessage(killerid, playerid, reason);
	return true;
}

public OnGameModeExit()
{
     Destroy_TextDraws(); // Destroy Textdraws
	foreach(Player, ii) // Save Player Stats
    {
    	if(pLogged[ii] == true) SavePlayerStats(ii);
   	}
  	foreach(new i : Business)
	{
	    if(BusinessData[i][Save]) Business_Save(i);
	}
	mysql_close(BusinessSQL);
    IRC_QuitBots(); // Disconnect IRC Bots
	mysql_close(g_SQL_handle); // Close mySQL
    UnloadHouses(); // Unload houses
	DestroyAllDynamic3DTextLabels();
    DestroyAllDynamicMapIcons();
/*    DestroyActor(UFFPGUARD1);
    DestroyActor(UFFPGUARD2);
    DestroyActor(UFFPGUARD3);
    DestroyActor(UFFPBEERBOY);
    DestroyActor(UFFHGUARD1);
    DestroyActor(UFFHGUARD2);
    DestroyActor(UFFGD1);
    DestroyActor(UFFGD2);
    DestroyActor(UFFGD3);
    DestroyActor(UFFGD4);*/
    DestroyAllDynamicCPs();
    //========Race
    foreach(new i : Player)
	{
		KillTimer(rpInfo[i][InfoTimer]);
		RaceParticipant[i] = false;
	}
	JoinCount = 0;
	FinishCount = 0;
	TimeProgress = 0;
	db_close(Database);
	KillTimer(AutoRaceTimer);
	//=====================
    DestroyAllDynamicPickups();

    // Exit the server
   	getdate(year, month, day); gettime(hour, minute, second);
 	printf("==================================================");
	printf("|        Unloaded on: %d/%d/%d at %d:%d:%d        |", year, month, day, hour, minute, second);
	printf("==================================================");
	printf("|                 UFF unloaded!					  |");
	printf("==================================================");

	return true;
}


public OnPlayerConnect(playerid)
{
	 // CBug record
	InBusiness[playerid] = INVALID_BUSINESS;
	ListPage[playerid] = 0;
   	//if(IsPlayerNPC(playerid)) return true;
    GetPlayerName(playerid, PlayerName, 24);
    // Add to SSCANF and foreach system
	SSCANF_Join(playerid, PlayerName, false);
    	// Check for map stealer
	gpci(playerid, str, sizeof(str));
	TextDrawHideForPlayer(playerid, GGBOX);
	PlayerTextDrawHide(playerid, GGTD[playerid]);
	TextDrawHideForPlayer(playerid, GGTD2);
	if(!strcmp(str, DISALLOWED_ADDRESS, true ))
	{
		BanEx(playerid, "Raksamp Client");
  	}
	// Check for a possible connection flood
	new cIP[16];
	GetPlayerIp(playerid, cIP, 16);
	if(fexist(DailyPath(playerid)))// reward
	{
  		INI_ParseFile(DailyPath(playerid), "LoadDaily_%s", .bExtra = true, .extra = playerid);
	}
	else
	{
 		new INI:File = INI_Open(DailyPath(playerid));
   		INI_SetTag(File,"data");
    	INI_WriteFloat(File,"Claimed",-1);
        INI_WriteFloat(File,"Again",-1);
        INI_Close(File);
	}
    if(strcmp(ipCheck, cIP, false) == 0 && ( GetTickCount() - IPtime ) < 4000)
  	{
   		IPfound++;
     	if(IPfound > 3)
      	{
      		/*format(str, 100, "banip %s", cIP);
       		SendRconCommand(str);
        	SendClientMessage(playerid, COLOR_PINK, "Connection rejected!");
			SendClientMessage(playerid, COLOR_RED, "A possible connection flood has been detected. You have been banned for connection flood!");
			format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has been auto banned for connection flood!", PlayerName, playerid);
			SendClientMessageToAll(COLOR_RED, str);
			format(tmp, sizeof(tmp), "4AUTO-BAN: 3%s(%i) has been banned for connection flood!", PlayerName, playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
  			BanEx(playerid, "Connection Flood");
    		IPfound = 0;*/
    		return 1;
    	}
   	}
	else IPfound = 0;

	format(ipCheck, 16, "%s", cIP);
	IPtime = GetTickCount();
	pJoinTick[playerid] = IPtime;

	ResetVariables(playerid);
	format(str, sizeof(str), "        ~w~Welcome ~b~%s", PlayerName);
	TextDrawSetString(wTD6, str);
	TextDrawShowForPlayer(playerid, ConnectTD[5]);
	TextDrawShowForPlayer(playerid, ConnectTD[6]);
	TextDrawShowForPlayer(playerid, ConnectTD[7]);

	pIP[playerid] = cIP;
	pName[playerid] = PlayerName;

	// Continue..
	for(new l; l < 10; l++) SendClientMessage(playerid, COLOR_GREY2, "\n");
	SendClientMessage(playerid, COLOR_GREY, "===================={F0F0F0}Release 7.5{F0F0F0}=======================");
	SendClientMessage(playerid, COLOR_SBLUE, "{FF0000} =========================================================");
	SendClientMessage(playerid, COLOR_SBLUE, "{FF0000}»» Welcome to "RED_E"(¯`·._.·"WHITE_E"Ultimate Funky Freeroam"RED_E"·._.·´¯)");
	SendClientMessage(playerid, COLOR_SBLUE, "{00FF00}»» Type /help for further information");
	SendClientMessage(playerid, COLOR_SBLUE, "{FF0000}»» You can show/hide the textdraws with /textdraws");
	SendClientMessage(playerid, COLOR_SBLUE, "{BABABA}»» Visit our forum at www.uffserver.com/forum");
	SendClientMessage(playerid, COLOR_SBLUE, ""GREY_E"»»  Don't forget to add our server to favorite: 34.228.165.73:7777");
	SendClientMessage(playerid, COLOR_GREY,  ""YELLOW_E"»» You can use /radio or /streams for music streams");
	SendClientMessage(playerid, COLOR_SBLUE, "{FF0000} =========================================================");
	SendClientMessage(playerid, COLOR_GREY, "===================={F0F0F0}Release 7.5{F0F0F0}=======================");
	PlayerPlaySound(playerid, 1132, 0, 0, 0);

	CreatePlayerTextDraws(playerid);
	InfoTD_MSG(playerid, 3500, "~w~Loading Server, please wait.");
	//// Beach
	RemoveBuildingForPlayer(playerid, 2631, 654.3516, -1869.5703, 4.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2629, 653.9297, -1864.0859, 4.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2630, 659.2734, -1864.2031, 4.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2632, 659.9922, -1869.6328, 4.5000, 0.25);
	// Custom house
	RemoveBuildingForPlayer(playerid, 1232, -2993.8125, 457.8672, 6.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -2938.4531, 457.5313, 6.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -2863.3438, 506.8203, 6.5000, 0.25);
	//////////////// Bordel
	RemoveBuildingForPlayer(playerid, 9583, -2475.1328, 1559.0703, 31.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 9584, -2485.0781, 1544.9453, 26.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 9585, -2409.8438, 1544.9453, 7.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 9586, -2412.1250, 1544.9453, 17.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 9587, -2401.1406, 1544.9375, 23.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 9588, -2404.2109, 1544.9375, 7.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 9589, -2389.3984, 1544.8828, 4.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 9590, -2403.5078, 1544.9453, 8.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 9604, -2392.5938, 1545.9063, 24.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 9619, -2409.8438, 1544.9453, 7.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 9620, -2485.0781, 1544.9453, 26.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 9621, -2401.1406, 1544.9375, 23.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 9761, -2411.3906, 1544.9453, 27.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 9820, -2474.6250, 1545.0859, 33.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 9698, -2473.5859, 1543.7734, 29.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 9821, -2474.3594, 1547.2422, 24.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 9822, -2470.9375, 1550.7500, 32.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 9818, -2470.2656, 1544.9609, 33.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 9819, -2470.4531, 1551.1172, 33.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2462.5078, 1547.1563, 20.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2455.9453, 1541.0391, 22.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2450.0781, 1547.1563, 22.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2439.9219, 1549.7969, 4.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2439.9219, 1552.9219, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2438.7969, 1540.4766, 7.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2438.7969, 1537.3672, 11.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2438.9141, 1549.7969, 4.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2438.9141, 1552.9219, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2437.7656, 1537.3672, 11.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2432.0078, 1540.4609, 1.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2429.5234, 1534.4297, 1.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2430.4766, 1534.4297, 1.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2428.4453, 1534.4297, 1.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2428.9766, 1534.4297, 2.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2427.6953, 1550.9219, 25.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2425.0078, 1549.1250, 22.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2423.2500, 1549.4375, 1.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2421.7344, 1550.7656, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2417.8203, 1546.8203, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2406.2109, 1545.5703, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2406.3125, 1538.8281, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2400.1484, 1535.9688, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2399.5625, 1544.2734, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2391.9766, 1549.3984, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2394.6172, 1551.1172, 1.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2395.4453, 1536.8281, 1.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2385.9766, 1545.6875, 25.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2386.0078, 1552.3125, 25.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2384.5313, 1540.7344, 25.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2384.5313, 1539.4688, 25.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2377.6875, 1539.8047, 19.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2377.6875, 1542.9063, 22.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2370.5156, 1539.2344, 16.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2356.1172, 1550.6641, 25.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2355.8828, 1535.7188, 25.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2352.3906, 1543.0859, 25.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1558, -2352.2422, 1548.2422, 22.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 4261, -2268.6719, 1881.7188, -83.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 4264, -2258.8281, 1533.0313, -57.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 4395, -2268.6719, 1881.7188, -83.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 4398, -2258.8281, 1533.0313, -57.3203, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 820.9297, -2066.1797, 12.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1223, -2480.5781, 2220.3359, 3.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1223, -2446.0313, 2220.1797, 3.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, -1244.9219, 5.1250, 25.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 973, -1177.1016, 8.9297, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 978, -1170.4609, 15.5625, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 973, -1163.8281, 22.2031, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 978, -1157.1875, 28.8359, 13.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 9874, -2755.5625, 1391.4453, -11.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4265, -2749.8672, 1530.1406, -47.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 4399, -2749.8672, 1530.1406, -47.9609, 0.25);
	// enterprice
	RemoveBuildingForPlayer(playerid, 1223, -2480.5781, 2220.3359, 3.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1223, -2446.0313, 2220.1797, 3.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1338.9844, 715.0938, 14.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1355.7500, 744.9063, 14.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1319, -2318.4375, -2724.9141, 43.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 766, -2249.1563, -2740.8047, 37.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 766, -2353.8672, -2693.8672, 45.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 766, -2317.1953, -2703.4531, 43.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 825, -631.1797, -2444.9531, 330.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 823, -622.3516, -2448.9141, 330.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 803, -600.3203, -2426.5859, 329.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 826, -609.7500, -2421.2188, 330.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4294, -1966.2969, -2928.6250, -33.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 4428, -1966.2969, -2928.6250, -33.5000, 0.25);
	// Eleuce monster2 remove!
	RemoveBuildingForPlayer(playerid, 762, 1290.9766, -2025.9375, 60.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 661, 1284.9844, -2020.2500, 57.1563, 0.25);
	 //mini impak
    RemoveBuildingForPlayer(playerid, 16774, 800.3281, 1672.1250, 5.8750, 0.25);
	 // impak custom house
    RemoveBuildingForPlayer(playerid, 3460, 911.7891, 1896.4844, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 792, -2012.8672, 398.5313, 34.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 792, -1995.2656, 358.7656, 34.2734, 0.25);
	 //AA
 	RemoveBuildingForPlayer(playerid, 3368, 323.0078, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 349.8750, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 296.1406, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16595, 419.3750, 2538.5000, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 16596, 412.8281, 2542.8672, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 16597, 437.3828, 2547.5156, 15.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 16600, 435.6250, 2532.0859, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 296.1406, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 323.0078, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16101, 321.6719, 2463.4922, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16368, 321.6719, 2463.4922, 25.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 349.8750, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 410.8281, 2528.5703, 16.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 409.8047, 2529.6328, 16.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 408.7188, 2530.7656, 16.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 407.1563, 2530.4688, 16.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 407.8828, 2532.0078, 16.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 16326, 419.3750, 2538.5000, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 16378, 414.4063, 2536.5469, 18.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 16327, 412.8281, 2542.8672, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 16374, 425.4688, 2531.0000, 22.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 16790, 425.4688, 2531.0000, 22.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 422.8281, 2535.7344, 15.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 16501, 429.9844, 2546.5156, 17.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 16409, 437.3828, 2547.5156, 15.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 16601, 435.6250, 2532.0859, 20.1797, 0.25);
	// ReV's House (Grove)
	RemoveBuildingForPlayer(playerid, 17518, 2361.9375, -1699.9375, 15.9219, 30.0);
	RemoveBuildingForPlayer(playerid, 620, 2367.6016, -1706.2891, 11.2891, 30.0);
	RemoveBuildingForPlayer(playerid, 620, 2375.0625, -1715.7969, 11.2891, 30.0);
	RemoveBuildingForPlayer(playerid, 17876, 2393.0625, -1677.5234, 20.8203, 30.0);

	// Sprunk Machines
	//Los Santos and Countryside
    RemoveBuildingForPlayer(playerid, 956, 1634.1487,-2238.2810,13.5077, 20.0); //Snack vender @ LS Airport
	RemoveBuildingForPlayer(playerid, 956, 2480.9885,-1958.5117,13.5831, 20.0); //Snack vender @ Sushi Shop in Willowfield
	RemoveBuildingForPlayer(playerid, 955, 1729.7935,-1944.0087,13.5682, 20.0); //Sprunk machine @ Unity Station
	RemoveBuildingForPlayer(playerid, 955, 2060.1099,-1898.4543,13.5538, 20.0); //Sprunk machine opposite Tony's Liqour in Willowfield
	RemoveBuildingForPlayer(playerid, 955, 2325.8708,-1645.9584,14.8270, 20.0); //Sprunk machine @ Ten Green Bottles
	RemoveBuildingForPlayer(playerid, 955, 1153.9130,-1460.8893,15.7969, 20.0); //Sprunk machine @ Market
	RemoveBuildingForPlayer(playerid, 955,1788.3965,-1369.2336,15.7578, 20.0); //Sprunk machine in Downtown Los Santos
	RemoveBuildingForPlayer(playerid, 955, 2352.9939,-1357.1105,24.3984, 20.0); //Sprunk machine @ Liquour shop in East Los Santos
	RemoveBuildingForPlayer(playerid, 1775, 2224.3235,-1153.0692,1025.7969, 20.0); //Sprunk machine @ Jefferson Motel
	RemoveBuildingForPlayer(playerid, 956, 2140.2566,-1161.7568,23.9922, 20.0); //Snack machine @ pick'n'go market in Jefferson
	RemoveBuildingForPlayer(playerid, 956, 2154.1199,-1015.7635,62.8840, 20.0); //Snach machine @ Carniceria El Pueblo in Las Colinas
	RemoveBuildingForPlayer(playerid, 956, 662.5665,-551.4142,16.3359, 20.0); //Snack vender at Dillimore Gas Station
	RemoveBuildingForPlayer(playerid, 955, 200.2010,-107.6401,1.5513, 20.0); //Sprunk machine @ Blueberry Safe House
	RemoveBuildingForPlayer(playerid, 956, 2271.4666,-77.2104,26.5824, 20.0); //Snack machine @ Palomino Creek Library
	RemoveBuildingForPlayer(playerid, 955, 1278.5421,372.1057,19.5547, 20.0); //Sprunk machine @ Papercuts in Montgomery
	RemoveBuildingForPlayer(playerid, 955, 1929.5527,-1772.3136,13.5469, 20.0); //Sprunk machine @ Idlewood Gas Station
    RemoveBuildingForPlayer(playerid, 1290, 1607.0156, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1649.0625, -2641.4063, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1664.4531, -2439.8047, 14.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1855.7969, -2641.4063, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2422.1719, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2350.7344, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2281.3984, 18.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2494.2656, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1525.0078, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1580.0938, -2433.8281, 14.5703, 0.25);

	//San Fierro
	RemoveBuildingForPlayer(playerid, 1302, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 1 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer(playerid, 1209, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 2 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer(playerid, 956, -2229.2075,287.2937,35.3203, 20.0); //Snack vender @ King's Car Park
	RemoveBuildingForPlayer(playerid, 955, -1349.3947,493.1277,11.1953, 20.0); //Sprunk machine @ SF Aircraft Carrier
	RemoveBuildingForPlayer(playerid, 956, -1349.3947,493.1277,11.1953, 20.0); //Snack vender @ SF Aircraft Carrier
	RemoveBuildingForPlayer(playerid, 955, -1981.6029,142.7232,27.6875, 20.0); //Sprunk machine @ Cranberry Station
	RemoveBuildingForPlayer(playerid, 955, -2119.6245,-422.9411,35.5313, 20.0); //Sprunk machine 1/2 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2097.3696,-397.5220,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2068.5593,-397.5223,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2039.8802,-397.5214,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2011.1403,-397.5225,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2005.7861,-490.8688,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2034.5267,-490.8681,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2063.1875,-490.8687,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2091.9780,-490.8684,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium


	//Las Venturas
	RemoveBuildingForPlayer(playerid, 956, -1455.1298,2592.4138,55.8359, 20.0); //Snack vender @ El Quebrados GONE
	RemoveBuildingForPlayer(playerid, 955, -252.9574,2598.9048,62.8582, 20.0); //Sprunk machine @ Las Payasadas GONE
	RemoveBuildingForPlayer(playerid, 956, -252.9574,2598.9048,62.8582, 20.0); //Snack vender @ Las Payasadas GONE
	RemoveBuildingForPlayer(playerid, 956, 1398.7617,2223.3606,11.0234, 20.0); //Snack vender @ Redsands West GONE
	RemoveBuildingForPlayer(playerid, 955, -862.9229,1537.4246,22.5870, 20.0); //Sprunk machine @ The Smokin' Beef Grill in Las Barrancas GONE
	RemoveBuildingForPlayer(playerid, 955, -14.6146,1176.1738,19.5634, 20.0); //Sprunk machine @ Fort Carson GONE
	RemoveBuildingForPlayer(playerid, 956, -75.2839,1227.5978,19.7360, 20.0); //Snack vender @ Fort Carson GONE
	RemoveBuildingForPlayer(playerid, 955, 1519.3328,1055.2075,10.8203, 20.0); //Sprunk machine @ LVA Freight Department GONE
	RemoveBuildingForPlayer(playerid, 956, 1659.5096,1722.1096,10.8281, 20.0); //Snack vender near Binco @ LV Airport GONE
	RemoveBuildingForPlayer(playerid, 955, 2086.5872,2071.4958,11.0579, 20.0); //Sprunk machine @ Sex Shop on The Strip
	RemoveBuildingForPlayer(playerid, 955, 2319.9001,2532.0376,10.8203, 20.0); //Sprunk machine @ Pizza co by Julius Thruway (North)
	RemoveBuildingForPlayer(playerid, 955, 2503.2061,1244.5095,10.8203, 20.0); //Sprunk machine @ Club in the Camels Toe
	RemoveBuildingForPlayer(playerid, 956, 2845.9919,1294.2975,11.3906, 20.0); //Snack vender @ Linden Station
	RemoveBuildingForPlayer(playerid, 628, 1308.0703, 1262.7578, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 640, 1302.2266, 1264.3047, 10.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 640, 1311.7891, 1250.7422, 10.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 640, 1326.3047, 1250.7422, 10.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 628, 1330.1094, 1262.7578, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 640, 1335.8281, 1264.3047, 10.7344, 0.25);



	// Load Animations
	PreloadAnimLib(playerid, "BOMBER");
	PreloadAnimLib(playerid, "RAPPING");
	PreloadAnimLib(playerid, "SHOP");
	PreloadAnimLib(playerid, "BEACH");
	PreloadAnimLib(playerid, "SMOKING");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "STRIP");
	PreloadAnimLib(playerid, "ON_LOOKERS");
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "CRACK");
	PreloadAnimLib(playerid, "CARRY");
	PreloadAnimLib(playerid, "COP_AMBIENT");
	PreloadAnimLib(playerid, "PARK");
	PreloadAnimLib(playerid, "INT_HOUSE");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "PED");
	ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.0, 1, 0, 0, 0, -1);

	// Set Player Color
	SetPlayerColor(playerid, PlayerColors[playerid]);
	pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
	PlayAudioStreamForPlayer(playerid, "http://www.uffserver.com/music/ufflogin.mp3");
	// Check most players online.
	if(Iter_Count(Player) > joinPlayerCount) joinPlayerCount = Iter_Count(Player);
	totalPlayersJoined++;

	// Load User Data
    new cVar[700];
    new cQuery[800];

	strcat(cVar, "reg_id,autoLogin,pass,IP,adminlevel,hours,minutes,seconds,kills,deaths,money,score,premium,saveskin,spawnplace,seepms,gbs,events_won,races_won,MB_found,keyflip,savedvehicle,speedboost,wheels,reg_time,last_time,color,goto,autofix,god,bmoney,rtests,arrests,plate,bounce,speedo,autotune,superman,");
	strcat(cVar, "killstreak,description,duels_won,hidden,weapon_set,fallouts,country,group_id,group_rank,derby_wins,time,weather,v_expired,chat_color,hideMSGs,duels_off,goldblocks,Muted,Jailed,report_points,id_color,house_id,maths,takedowns,robberies,probberies,times_arrested,cop_kills,mapper,specoff,hitsound,shooter_wins,seegc,songs,VIPLOGIN,ggwins,warns,bmxs");
	format(cQuery, sizeof(cQuery), "SELECT %s FROM players WHERE name='%s' LIMIT 1", cVar, PlayerName);
	MySQL_query(cQuery, true, "OnUserDataLoad", "i", playerid);
   //vpara
    GGLevel[playerid] = 0;
	InGGMap[playerid] = 0;
	return true;
}


forward OnUserDataLoad(playerid);
public OnUserDataLoad(playerid)
{
	new country[30];
 	GetPlayerCountry(playerid, country, sizeof(country));
 	GetPlayerIp(playerid, PlayerIP, 16);
 	if(!MySQL_rowCount())
 	{
	    GameTextForPlayer(playerid, " ", 1000, 3); // Hides Gametext
		HideConnectTD(playerid, false);
		SetPlayerInterior(playerid, 0);
		InterpolateCameraPos(playerid, 2356.6528, -1742.2469, 142.7728, 1174.76, -1377.98, 150.88, 50000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 1513.8353, -1655.7241, 58.0422, 1513.8353, -1655.7241, 58.0422, 50000, CAMERA_MOVE);
		/*SetPlayerCameraPos(playerid, -1484.6588,1640.4684,1060.6719);
		SetPlayerCameraLookAt(playerid, -1425.3961,1598.7845,1052.5313);*/
		SendClientMessage(playerid, COLOR_WHITEP, ""BLUE_E"UFF "WHITEP_E"This account is not registered. Register your account to gain access to bonus commands and features!");
		ShowRegisterDialog(playerid);
	}
	else
	{
		// User exists
		pRegID[playerid] = MySQL_getInt(0, 0);
		autoLogin[playerid] = MySQL_getInt(0, 1);

		new IP[16];
		MySQL_getString(0, 3, IP);
		if(IP[0] != 0 && !strcmp(IP, PlayerIP) && autoLogin[playerid] == 1)
		{
		    pLogged[playerid] = true;
			pAdmin[playerid] = MySQL_getInt(0, 4);
			pTotalHours[playerid] = MySQL_getInt(0, 5);
			pTotalMinutes[playerid] = MySQL_getInt(0, 6);
			pTotalSeconds[playerid] = MySQL_getInt(0, 7);
			pInfo[playerid][pKills] = MySQL_getInt(0, 8);
			pInfo[playerid][pDeaths] = MySQL_getInt(0, 9);
			pCash[playerid] = MySQL_getInt(0, 10);
			pScore[playerid] = MySQL_getInt(0, 11);
			pPremium[playerid] = MySQL_getInt(0, 12);
			pInfo[playerid][pSaveSkin] = MySQL_getInt(0, 13);
			pSpawnPlace[playerid] = MySQL_getInt(0, 14);
			pInfo[playerid][pSeePMs] = MySQL_getInt(0, 15);
			pGBs[playerid] = MySQL_getInt(0, 16);
			pInfo[playerid][pEventsWon] = MySQL_getInt(0, 17);
			pInfo[playerid][pRacesWon] = MySQL_getInt(0, 18);
			pInfo[playerid][pMBFound] = MySQL_getInt(0, 19);
			speedBreak[playerid] = MySQL_getInt(0, 20);
			SavedVehicle[playerid] = MySQL_getInt(0, 21);
			speedBoost[playerid] = MySQL_getFloat(0, 22);
			pWheels[playerid] = MySQL_getInt(0, 23);
		 	MySQL_getString(0, 24, pRegDate[playerid]);
		 	MySQL_getString(0, 25, pLastDate[playerid]);
			pColor[playerid] = MySQL_getInt(0, 26);
			pGoTo[playerid] = MySQL_getInt(0, 27);
			pAutoFix[playerid] = MySQL_getInt(0, 28);
			GOD[playerid] = MySQL_getInt(0, 29);
			BankMoney[playerid] = MySQL_getInt(0, 30);
			reactionsWon[playerid] = MySQL_getInt(0, 31);
			pArrests[playerid] = MySQL_getInt(0, 32);
			MySQL_getString(0, 33, pPlate[playerid]);
			pBounce[playerid] = MySQL_getInt(0, 34);
			Speedo[playerid] = MySQL_getInt(0, 35);
			pAutoTune[playerid] = MySQL_getInt(0, 36);
			pSuperJump[playerid] = MySQL_getInt(0, 37);
			TotalKillStreak[playerid] = MySQL_getInt(0, 38);
			MySQL_getString(0, 39, pDescription[playerid]);
			pDuelsWon[playerid] = MySQL_getInt(0, 40);
			pHidden[playerid] = MySQL_getInt(0, 41);
			pWeaponSet[playerid] = MySQL_getInt(0, 42);
			pFallouts[playerid] = MySQL_getInt(0, 43);
			MySQL_getString(0, 44, pCountry[playerid]);
			pGroupID[playerid] = MySQL_getInt(0, 45);
			pGroupRank[playerid] = MySQL_getInt(0, 46);
			pDerbys[playerid] = MySQL_getInt(0, 47);
			pTime[playerid] = MySQL_getInt(0, 48);
			pWeather[playerid] = MySQL_getInt(0, 49);
			premiumExpired[playerid] = MySQL_getInt(0, 50);
			pChatColor[playerid] = MySQL_getInt(0, 51);
			hideMSG[playerid] = MySQL_getInt(0, 52);
			duelsOFF[playerid] = MySQL_getInt(0, 53);
			pGoldBlocks[playerid] = MySQL_getInt(0, 54);
			pMute[playerid] = MySQL_getInt(0, 55);
			pJail[playerid] = MySQL_getInt(0, 56);
			pReportPoints[playerid] = MySQL_getInt(0, 57);
			pIDColor[playerid] = MySQL_getInt(0, 58);
			houseID[playerid] = MySQL_getInt(0, 59);
			mathsWon[playerid] = MySQL_getInt(0, 60);
			pTakedowns[playerid] = MySQL_getInt(0, 61);
			pRobberies[playerid] = MySQL_getInt(0, 62);
			pPlayerRobberies[playerid] = MySQL_getInt(0, 63);
			pTimesArrested[playerid] = MySQL_getInt(0, 64);
			pCopKills[playerid] = MySQL_getInt(0, 65);
			Mapper[playerid] = MySQL_getInt(0, 66);
			specOFF[playerid] = MySQL_getInt(0, 67);
			pInfo[playerid][phitsound] = MySQL_getInt(0, 68);
            pShooters[playerid] = MySQL_getInt(0, 69);
            pInfo[playerid][pSeeGC] = MySQL_getInt(0, 70);
            pInfo[playerid][pHearSong] = MySQL_getInt(0, 71);
            pInfo[playerid][pVipLogin] = MySQL_getInt(0, 72);
            pGGWins[playerid] = MySQL_getInt(0, 73);
            pWarns2[playerid] = MySQL_getInt(0, 74);
            pBMX[playerid] = MySQL_getInt(0, 75);
			if(pColor[playerid] != 0)
			{
	  			SetPlayerColor(playerid, pColor[playerid]);
	  			pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
			}
			else
			{
				SetPlayerColor(playerid, PlayerColors[playerid]);
				pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
			}
			if(pChatColor[playerid] != 0) pChatColor[playerid] = StripAlpha(pChatColor[playerid]);
			if(pIDColor[playerid] != 0) pIDColor[playerid] = StripAlpha(pIDColor[playerid]);
		}
    	else
		{
			GameTextForPlayer(playerid, " ", 1000, 3); // Hides Gametext
			if(autoLogin[playerid] == 0)
			{

				new tmpstr[100];
				format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
				format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
				ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
				InterpolateCameraPos(playerid, 2356.6528, -1742.2469, 142.7728, 1174.76, -1377.98, 150.88, 50000, CAMERA_MOVE);
		        InterpolateCameraLookAt(playerid, 1513.8353, -1655.7241, 58.0422, 1513.8353, -1655.7241, 58.0422, 50000, CAMERA_MOVE);
			}
  			else
  			{
				new tmpstr[100];
				format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
				format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
				ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
				InterpolateCameraPos(playerid, 2356.6528, -1742.2469, 142.7728, 1174.76, -1377.98, 150.88, 50000, CAMERA_MOVE);
		        InterpolateCameraLookAt(playerid, 1513.8353, -1655.7241, 58.0422, 1513.8353, -1655.7241, 58.0422, 50000, CAMERA_MOVE);

			}
			//format(tmp, sizeof(tmp), "02[Join] 03%s(%d) has connected from %s. 1[%d/420]", pName[playerid], playerid, country, Iter_Count(Player));
			//IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
			//format(tmp, sizeof(tmp), "02[Join] 03%s(%d) has connected from %s. 1(IP: %s)", pName[playerid], playerid, country, PlayerIP);
			//IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
			format(tmp, sizeof(tmp), "02[Join] 03%s(%d) has joined the server. 1[%d/100]", pName[playerid], playerid, Iter_Count(Player));
			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
			format(tmp, sizeof(tmp), "02[Join] 03%s(%d) has joined the server. 1(IP: %s)", pName[playerid], playerid, PlayerIP);
			IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
			// discord
		}
	}
//	if(Iter_Count(Player) > 50)
//	{
		SendDeathMessage(INVALID_PLAYER_ID, playerid, 200);
//	}
	
	// Check if user is banned
	format(query, sizeof(query), "SELECT user_banner,ban_reason,ban_time,ban_timestamp,bIP FROM bans WHERE bIP='%s'", PlayerIP);
	MySQL_query(query, true, "CheckBan", "i", playerid);
	return 1;
}

/*
public DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[])
{
	new channel_name[100 + 1];
	if(!DCC_GetChannelName(channel, channel_name))
		return 0; // invalid channel

	new user_name[32 + 1];
	if (!DCC_GetUserName(author, user_name))
		return 0; // invalid user

	format(str, sizeof(str), ""BLUE_E"[Discord] "WHITE_E"%s: %s", user_name, message);
	SendClientMessageToAll(COLOR_WHITE, str);
	return 1;
}
*/


stock OnUserLogin(playerid)
{
		if(pPremium[playerid] != 0)
		{
            if(pInfo[playerid][pVipLogin] == 1)
			{
				format(str, sizeof(str), ""WHITE_E"["VPINK_E"SERVER"WHITE_E"] "VGREEN_E"VIP %s(%i) logged in!", pName[playerid], playerid);
				SendClientMessageToAll(COLOR_YELLOW, str);
		    }
			if(premiumExpired[playerid] != 0)
			{
			    if(gettime() > premiumExpired[playerid])
	   			{
					format(query, sizeof(query), "UPDATE players SET premium=0,v_expired=0,chat_color=0,id_color=0,speedboost=1.3 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					pPremium[playerid] = 0;
					pChatColor[playerid] = 0;
					pIDColor[playerid] = 0;
					speedBoost[playerid] = 1.3;
					Info(playerid, "Your vip membership has been expired today! You can renew on our site at www.uffserver.com!");
				}
			}
		}
	/*	if(pAdmin[playerid] != 0)
		{
			 {
                new tmp3[25];
				switch(pAdmin[playerid])
			 	{
					case 1: tmp3 = "Junior Administrator";
			  		case 2: tmp3 = "General Administrator";
			    	case 3: tmp3 = "Lead Administrator";
			    	case 4: tmp3 = "Head Administrator";
			     	case 5: tmp3 = "Executive Administrator";
				}
				format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "RED_E"%s %s(%i) has logged in!", tmp3, pName[playerid], playerid);
		        SendAdminMessage(COLOR_YELLOW, str);
			 }
	 	}*/
	    if(Mapper[playerid] != 0)
		{
			{
				format(str, sizeof(str), ""BLUE_E".::UFF::. "LB2_E"Server Mapper %s(%i) has logged in!",pName[playerid], playerid);
		        SendClientMessageToAll(COLOR_YELLOW, str);
			 }
		}
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E"::  "GREY_E"Successfully logged in!");
		SendClientMessage(playerid, COLOR_LB, str);
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "GREY_E"You are registered in %s and you were last login in %s", pRegDate[playerid],pLastDate[playerid]);
		SendClientMessage(playerid, COLOR_LB,str);
	    format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "GREY_E"You have been online for %dh, %dm, %ds", pTotalHours[playerid], pTotalMinutes[playerid], pTotalSeconds[playerid]);
		SendClientMessage(playerid, COLOR_LB, str);
		if(pInfo[playerid][pSaveSkin] != 999)
	    {
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: {00FFB4}Your saved skin has been set.(/unsaveskin to remove)");
		SendClientMessage(playerid, COLOR_LB, str);
		}
		if(pColor[playerid] != 0)
	    {
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: {00FFB4}Your saved color has been set.(/deletecolor to remove)");
		SendClientMessage(playerid, COLOR_LB, str);
		}
		format(tmp, sizeof(tmp), "02[Join]03 %s(%d) has joined the server. 11(Logged in as a %s) 1[%d/100]", pName[playerid], playerid, GetPlayerAdminLevelName(playerid), Iter_Count(Player));
		IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
		format(tmp, sizeof(tmp), "02[Join]03 %s(%d) has joined the server. 11(Logged in as a %s) 1(IP: %s)", pName[playerid], playerid, GetPlayerAdminLevelName(playerid), PlayerIP);
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);

		format(query, sizeof(query), "UPDATE players SET active=1 WHERE reg_id=%d", pRegID[playerid]);
		MySQL_updateQuery(query);
		if(pGroupID[playerid] != -1)
		{
			format(str, sizeof(str), ""GANG""GREY_E" %s %s(%d) has logged in!", GangPositions[pGroupRank[playerid]][E_gang_pos_name], pName[playerid], playerid);
		    SendGroupMessage(playerid, COLOR_WHITE, str);
		}
		// Set player custom Time/Weather
		if(pTime[playerid] != -1) SetPlayerTime(playerid, pTime[playerid], 0);
		if(pWeather[playerid] != -1) SetPlayerWeather(playerid, pWeather[playerid]);

		// Give Score/Money
		SetPlayerScore(playerid, pScore[playerid]);
		GivePlayerMoney(playerid, pCash[playerid]);
		TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);
}

OnUserManualLogin(playerid)
{
	if (pPremium[playerid] != 0)
	{
		if(pInfo[playerid][pVipLogin] == 1)
		{
			format(str, sizeof(str), ""WHITE_E"["VPINK_E"SERVER"WHITE_E"] "VGREEN_E"VIP %s(%i) logged in!", pName[playerid], playerid);
			SendClientMessageToAll(COLOR_YELLOW, str);
		}
		if(premiumExpired[playerid] != 0)
		{
  			if(gettime() > premiumExpired[playerid])
   			{
				format(query, sizeof(query), "UPDATE players SET premium=0,v_expired=0,chat_color=0,id_color=0,speedboost=1.3 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
				pPremium[playerid] = 0;
				pChatColor[playerid] = 0;
				pIDColor[playerid] = 0;
				speedBoost[playerid] = 1.3;
				Info(playerid, "Your vip membership has been expired today! You can renew on our site at uffserver.com/!");
			}
		}
	}
/*	if(pAdmin[playerid] != 0)
				{
					{
						new tmp3[25];
						switch(pAdmin[playerid])
					 	{
							case 1: tmp3 = "Junior Administrator";
					  		case 2: tmp3 = "General Administrator";
					    	case 3: tmp3 = "Lead Administrator";
					    	case 4: tmp3 = "Head Administrator";
					     	case 5: tmp3 = "Executive Administrator";
						}
						format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E"::  "RED_E"%s  %s(%i) has logged in!", tmp3, pName[playerid], playerid);
				        SendAdminMessage(COLOR_YELLOW, str);
					 }
				}*/
	if(Mapper[playerid] != 0)
	{
		{
			format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E"::  "LB2_E"Server Mapper %s(%i) has logged in!",pName[playerid], playerid);
	        SendClientMessageToAll(COLOR_YELLOW, str);
		 }
	}
	format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "GREY_E"Successfully logged in!");
	SendClientMessage(playerid, COLOR_LB, str);
	format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "GREY_E"You are registered in %s and you were last login in %s", pRegDate[playerid],pLastDate[playerid]);
	SendClientMessage(playerid, COLOR_LB,str);
    format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "GREY_E"You have been online for %dh, %dm, %ds", pTotalHours[playerid], pTotalMinutes[playerid], pTotalSeconds[playerid]);
	SendClientMessage(playerid, COLOR_LB, str);
	if(pInfo[playerid][pSaveSkin] != 999)
	{
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: {00FFB4}Your saved skin has been set. (/unsaveskin to remove)");
		SendClientMessage(playerid, COLOR_LB, str);
	}
	if(pColor[playerid] != 0)
	{
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: {00FFB4}Your saved color has been set.(/deletecolor to remove)");
		SendClientMessage(playerid, COLOR_LB, str);
	}
	if(pGroupID[playerid] != -1)
	{
		format(str, sizeof(str), ""GANG""GREY_E" %s %s(%d) has logged in!", GangPositions[pGroupRank[playerid]][E_gang_pos_name], pName[playerid], playerid);
	    SendGroupMessage(playerid, COLOR_WHITE, str);
	}
	format(str, sizeof(str), "5,9>>3,0 %s(%i) has logged in as a %s.", pName[playerid], playerid, GetPlayerAdminLevelName(playerid));
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	// Set player custom Time/Weather
	if(pTime[playerid] != -1) SetPlayerTime(playerid, pTime[playerid], 0);
	if(pWeather[playerid] != -1) SetPlayerWeather(playerid, pWeather[playerid]);
	if(pInfo[playerid][pSaveSkin] != 999)
	{
		// Enable spectating so the default spawn selection shit does not show
		TogglePlayerSpectating(playerid, true);
		SetSpawnInfo(playerid, 0, pInfo[playerid][pSaveSkin], 324.2835,2549.4883,17.0000,181.596, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, false);
		HideConnectTD(playerid, false);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);
  	}
	TextDrawHideForPlayer(playerid, GGBOX);
	PlayerTextDrawHide(playerid, GGTD[playerid]);
	TextDrawHideForPlayer(playerid, GGTD2);
}

stock ShowRegisterDialog(playerid)
{
	format(line, sizeof(line), ""WHITEP_E"Welcome to  {646464}«(-|-|{F0F0F0}UFF{646464}|-|-)», "WHITE_E"\nHello %s , How are you?\n\n"WHITE_E"You are not registered yet on this server.\nEnter your password below to register.\nYou can also continue without reigstering however your stats won't be saved!\n\n"RED_E"Info:\n- "WHITE_E"Your password must contain at least 4 characters\n"RED_E"- "WHITE_E"Remember your password, you will need it for your next login", pName[playerid]);
	ShowPlayerDialog(playerid, 4, DIALOG_STYLE_PASSWORD, ""YELLOW_E"- Register", line, "Register", "Skip");
}

public OnPlayerDisconnect(playerid, reason)
{
    // Remove the player from the sscanf system
	SSCANF_Leave(playerid);
    SavePlayer(playerid); //reward
	 // Check if name needs to be changed.
    GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
  	if(isRelogging[playerid])
    {
        isRelogging[playerid] = false;
        format(str, sizeof(str), "unbanip %s", relogPlayerIP[playerid]);
        SendRconCommand(str);
    }
	if(GetPVarInt(playerid, "pBugged"))
    {
    	format(str, sizeof(str), "unbanip %s", pIP[playerid]);
        SendRconCommand(str);
        SendRconCommand("reloadbans");
    }
  	// Save the player stats.
	SavePlayerStats(playerid);
	// Update DM Textdraw
	if(InDM[playerid] != 0)
	{
		CheckDM(playerid);
		UpdateDMText();
	}
	// Remove the player's custom vehicle
	RemoveComponents(playerid, true);
	if((vID = pSpawnVehicle[playerid]) != -1)
	{
		foreach(Player, ii)
		{
			if(IsPlayerInVehicle(ii, vID))
			{
				RemovePlayerFromVehicle(ii);
    			//format(str, sizeof(str), "Server: "GREY_E"%s(%i) who spawned this %s has left.", PlayerName, playerid, vehName[GetVehicleModel(vID) - 400]);
				//SendClientMessage(ii, COLOR_RED, str);
			}
		}
		DestroyVehicle(vID);
		pSpawnVehicle[playerid] = -1;
	}
	// Destroy Private Vehicle
	if(PlayerVehicle[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(PV_3DLabel[playerid]);
		DestroyVehicle(PlayerVehicle[playerid]);
		PlayerVehicle[playerid] = -1;
	}
	if(GetPVarInt(playerid, "killCamSpectator"))
	{
	    new watcherid = GetPVarInt(playerid, "killCamSpectator");
	    KillTimer(killCamTimer[watcherid]);
		TogglePlayerSpectating(watcherid, 0);
		killCamON[watcherid] = false;
	    DeletePVar(playerid, "killCamSpectator");
	}
	// Perform some checks.
 	foreach(Player, ii)
	{
		if(GetPVarInt(ii, "lastPMer") == playerid)
		{
		    SetPVarInt(ii, "lastPMer", -1);
		}
		if(ignore[ii][playerid] == 1)
		{
			ignore[ii][playerid] = 0;
		}
		if(pSpectating[ii] == playerid)
		{
			format(str, sizeof(str), "** "RED_E"%s(%i) has disconnected, you will be respawned.", PlayerName, playerid);
			SendClientMessage(ii, COLOR_YELLOW, str);
			TogglePlayerSpectating(ii, 0);
			if(InDM[ii] != 13) Streamer_ToggleItemUpdate(ii, STREAMER_TYPE_OBJECT, 1);
		}
	}
    	// Kill some timers.
	if(pInfo[playerid][pRainbow] == 1) KillTimer(RainbowTimer[playerid]);
	if(RobberyCount[playerid] != 0)	KillTimer(RobberyTimer[playerid]);

	// Remove Attached Objects
 	RemoveItems(playerid);

	// Reset House Interior
 	if(GetPVarInt(playerid, "HousePreview") == 1)
	{
	    new h = GetPVarInt(playerid, "LastHouseCP");
		hInfo[h][HouseInterior] = GetPVarInt(playerid, "OldHouseInt");
		DestroyHouseEntrance(h, TYPE_INT);
		CreateCorrectHouseExitCP(h);
		IsInHouse{playerid} = 0;
		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "LastHouseCP") == h && IsInHouse{ii} == 1)
			{
				SetPlayerHouseInterior(ii, h);
			}
		}
	}

	// Desroy some 3D Text Labels.
	if(GOD[playerid] == 1 && god3D[playerid] != Text3D:-1)
	{
		DestroyDynamic3DTextLabel(god3D[playerid]);
 	}
 	if(GetPVarInt(playerid, "tagCreated"))
	{
		DestroyDynamic3DTextLabel(clan3D[playerid]);
 	}
 	//Delete3DTextLabel(AFK3D[playerid]);
	if(admin3D[playerid] != Text3D:-1) DestroyDynamic3DTextLabel(admin3D[playerid]);
    if(mapper3D[playerid] != Text3D:-1) DestroyDynamic3DTextLabel(mapper3D[playerid]);
    if(pGroupID[playerid] != -1)
    {
    	Delete3DTextLabel(GangLabel[playerid]);
	}
	// Delete Texrdraws
	HidePlayerTextDraws_OPDC(playerid);
	PlayerTextDrawDestroy(playerid, InfoTD[playerid]);
	PlayerTextDrawDestroy(playerid, vTD[playerid]);
	PlayerTextDrawDestroy(playerid, vSpeed[playerid]);
	PlayerTextDrawDestroy( playerid, vSpeedModel[playerid] );
	PlayerTextDrawDestroy(playerid, vSpeedBox[playerid]);
	PlayerTextDrawDestroy(playerid, KSTD[playerid]);
	

	// Disconnect Message
	Itter_Remove(Player, playerid);

	iTemp = ((GetTickCount() - pJoinTick[playerid]) / 1000);
	if(iTemp >= 3)
	{
		new ii = gettime();
		format(query, sizeof(query), "INSERT INTO activity (reg_id,name,IP,jointime,leavetime) VALUES (%d,'%s','%s',%d,%d)", pRegID[playerid], pName[playerid], pIP[playerid], (ii - iTemp), ii);
		MySQL_updateQuery(query);
	}

	switch(reason)
	{
	    case 0:
		{
			tmp = "timed out";
			format(str, sizeof(str), "02[Crash] 03%s(%d) has timed out. 1[%d/100]", pName[playerid], playerid, Iter_Count(Player));
		}
	    case 1:
		{
			tmp = "left the server";
			format(str, sizeof(str), "02[Quit] 03%s(%d) has left the server. 1[%d/100]", pName[playerid], playerid, Iter_Count(Player));
		}
	    case 2:
		{
	 		tmp = "been kicked/banned";
	 		format(str, sizeof(str), "02[Quit] 03%s(%d) has been kicked/banned. 1[%d/100]", pName[playerid], playerid, Iter_Count(Player));
		}
	}
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	//if(Iter_Count(Player) > 50)
	//{
	SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
	//}
    if(pGroupID[playerid] != -1)
	{
		format(str, sizeof(str), ""GANG""GREY_E" %s %s(%d) has logged out!", GangPositions[pGroupRank[playerid]][E_gang_pos_name], pName[playerid], playerid);
	    SendGroupMessage(playerid, COLOR_WHITE, str);
	}
	if(InDM[playerid] == 63)
	{
	    InDM[playerid] = 0;
	    GGLevel[playerid] = 0;
	    InGGMap[playerid] = 0;
	    SetPlayerVirtualWorld(playerid, 0);
		ResetPlayerWeapons(playerid);
	    TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);
	}
	// Remove player from race.
    if(RaceParticipant[playerid] == true)
    {
		if(RaceParticipant[playerid] == false) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] You are not in the race.");
		if(RaceStarted != 2) return SendClientMessage(playerid,0xFF0000AA, "[ERROR]The race not start yet, wait untill start.");
		JoinCount--;
		RaceParticipant[playerid] = false;
		SetVehicleHealth(GetPlayerVehicleID(playerid),1250.0);
		DisablePlayerRaceCheckpoint(playerid);
		HidePlayerRaceTextdraws(playerid);
		rpInfo[playerid][CPProgess] = 0;
		KillTimer(rpInfo[playerid][InfoTimer]);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		LoadPlayerPosition(playerid);
		if(JoinCount <= 0) StopRace();
        if(IsPlayerInAnyVehicle(playerid)){DestroyRaceVehicle(playerid,rpInfo[playerid][Vehicle]);}
		DisableRemoteVehicleCollisions(playerid, 0);
		format(str, sizeof(str), ""RACE" "RED_E"%s(%i) has left the race.", pName[playerid], playerid);
		SendClientMessageToAll(COLOR_RED, str);
        if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
		{
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
	    	GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
		    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
	  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
	  		GodModeLabel(playerid, true);
	  		TextDrawHideForPlayer(playerid, GGBOX);
		    PlayerTextDrawHide(playerid, GGTD[playerid]);
		    TextDrawHideForPlayer(playerid, GGTD2);
		}
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 100);
        TextDrawShowForPlayer(playerid, TeleTD);
		CarLocked[vID] = false;
		foreach(Player, ii)
	 	{
	  		SetVehicleParamsForPlayer(vID, ii, 0, 0);
	    }
	}
	if(BuildRace == playerid+1)
	{
	    BuildRace = 0;
		BuildCheckPointCount = 0;
		BuildVehPosCount = 0;
		BuildTakeCheckpoints = false;
		BuildTakeVehPos = false;
		DeleteRace(BuildName);
	}
	if(snowOn[playerid]) // xMAS
	{
	    DeleteSnow(playerid);
	}
	//if(GetPVarInt(playerid, "RedTeam") == 1) RedCount--;
	//else if(GetPVarInt(playerid, "BlueTeam") == 1) BlueCount--;
	if(InDuel[playerid] != 0)
	{
		format(str, sizeof(str), ""DUEL" "GREY_E"%s has left. Duel has been cancelled.", PlayerName);
		SendClientMessageToAll(COLOR_GREY, str);

		// Give Bets back
		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "betPlayer") != -1)
			{
				GivePlayerCash(ii, GetPVarInt(ii, "betAmount"));
				format(str,sizeof(str),""RED_E"[BET] "WHITEP_E"%s(%i) has left the duel, you have recived your money back.", pName[playerid], playerid);
 				SendClientMessage(ii, COLOR_WHITEP, str);
			}
			SetPVarInt(ii, "betPlayer", -1);
			DeletePVar(ii, "betAmount");
		}

		EndDuel();
	}
	if(InEvent[playerid] != 0)
	{
		if(InDerby[playerid] == 1)
		{
			DerbyPlayers--;
			SetTimer("EndDerbyCheck", 1000, 0);
	 		format(str,sizeof(str),""EVENT" "DARK_E"Player %s has been eliminated! (Left Server)", PlayerName);
	    	SendEventMessage(COLOR_DARK, str);
		}
		else
		{
	 		SetTimer("EndEventCheck", 1000, 0);
	 		NumEventPlayers--;
	   		format(str,sizeof(str),""EVENT" "DARK_E"Player %s has been eliminated! (Left Server)", PlayerName);
	    	SendEventMessage(COLOR_DARK, str);
   		}
   		InEvent[playerid] = 0;
	}
	if(doingStunt[playerid] == 18) // Fallout
	{
		RemoveFromFallout(playerid);
	}
	if(doingStunt[playerid] == 33) // LMS
	{
		RemoveFromLMS(playerid);
		LMS_LoseGame();
 	}
	cAFK[playerid] = 0;
	pRegID[playerid] = 0;
	if(doingStunt[playerid] == 19) // Derby
	{
		RemoveFromDerby(playerid);
	}
	if(doingStunt[playerid] == 97) // Shooter
	{
		RemoveFromShooter(playerid);
	}
	if(InDM[playerid] == 87) // TDm
	{
		RemoveFromTdm(playerid);
	}
	return true;
}

function HideConnectTD(playerid, bool:ShowTextD)
{
	TextDrawHideForPlayer(playerid, ConnectTD[0]);
	TextDrawHideForPlayer(playerid, ConnectTD[1]);
	TextDrawHideForPlayer(playerid, ConnectTD[2]);
	TextDrawHideForPlayer(playerid, ConnectTD[3]);
	TextDrawHideForPlayer(playerid, ConnectTD[4]);
	TextDrawHideForPlayer(playerid, ConnectTD[5]);
	TextDrawHideForPlayer(playerid, ConnectTD[6]);
	TextDrawHideForPlayer(playerid, ConnectTD[7]);
	TextDrawHideForPlayer(playerid, ConnectTD[9]);
	TextDrawHideForPlayer(playerid, ConnectTD[10]);
	TextDrawHideForPlayer(playerid, ConnectTD[11]);
	TextDrawHideForPlayer(playerid, xmasTD[0]);
	TextDrawHideForPlayer(playerid, xmasTD[1]);

	if(pSpawned[playerid] == 0 && ShowTextD == true)
	{
		TextDrawShowForPlayer(playerid, wTD);
		TextDrawShowForPlayer(playerid, wTD1);
		TextDrawShowForPlayer(playerid, wTD2);
		TextDrawShowForPlayer(playerid, wTD3);
		TextDrawShowForPlayer(playerid, wTD4);
		TextDrawShowForPlayer(playerid, wTD5);
		TextDrawShowForPlayer(playerid, wTD6);
		TextDrawShowForPlayer(playerid, wTD7);
		TextDrawShowForPlayer(playerid, wTD8);
		TextDrawShowForPlayer(playerid, wTD9);
	}
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	// Hide Connect Textdraws.
	TextDrawHideForPlayer(playerid, letterbox[0]);
	TextDrawHideForPlayer(playerid, letterbox[1]);
	TextDrawHideForPlayer(playerid, letterbox[2]);
	TextDrawHideForPlayer(playerid, letterbox[3]);
	SetTimerEx("HideConnectTD", 1000, false, "ib", playerid, true);

    TextDrawShowForPlayer(playerid, SEv2Box);
	TextDrawShowForPlayer(playerid, SEv2TD);
	TextDrawShowForPlayer(playerid, SEv2TD2);
	TextDrawShowForPlayer(playerid, SEv2TD3);
	TextDrawShowForPlayer(playerid, SEv2TD4);
	TextDrawShowForPlayer(playerid, DMTextdraw);
	TextDrawShowForPlayer(playerid, TeleTD);
	// KS
	PlayerTextDrawShow(playerid, KSTD[playerid]);
	//Skin saving enabled, skip class selection..
	if(pInfo[playerid][pSaveSkin] != 999)
	{
		// Enable spectating so the default spawn selection shit does not show
	//	SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"You have skin saving enabled, class selection being skipped..");
		TogglePlayerSpectating(playerid, true);
		SetSpawnInfo(playerid, 0, pInfo[playerid][pSaveSkin], 324.2835,2549.4883,17.0000,181.596, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, false);
		HideConnectTD(playerid, false);
	    return 1;
 	}

	// Load class selection..
	if(GetPVarInt(playerid, "CamMoved") == 0)
	{
	    Streamer_UpdateEx(playerid, -1431.4838, 1580.5219, 1055.7191);
		SetPVarInt(playerid, "CamMoved", 1);
		SetPlayerInterior(playerid, 14);
		SetPlayerWeather(playerid, 1);
    	SetPlayerTime(playerid, 7, 0);
		SetPlayerPos(playerid, -1431.4838, 1580.5219, 1055.7191);
		SetPlayerFacingAngle(playerid, 127.6492);
        SetPlayerCameraPos(playerid, -1437.9672,1575.3422,1057.6042);
	    SetPlayerCameraLookAt(playerid, -1431.4838, 1580.5219, 1055.7191);
		TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);

    	//InterpolateCameraPos(playerid, 248.324325, 2227.816162, 281.840454, -184.046279, 1881.296142, 117.095657, 3000);
        //InterpolateCameraLookAt(playerid, 244.450531, 2225.083251, 280.251312, -187.693817, 1878.072631, 115.953491, 2000);
	}

	//SetPlayerCameraPos(playerid, -1455.341064, 1571.968017, 1058.202148);
	//SetPlayerCameraLookAt(playerid, -1451.866943, 1575.556274, 1057.967651);
	switch (classid)
	{

		case 0:
		{
			GameTextForPlayer(playerid, "~b~~h~Somyst", 2500, 6);
			ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
 		case 1:
		{
			GameTextForPlayer(playerid, "~g~~h~Kent", 2500, 6);
			ApplyAnimation(playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1);
		}
		case 2:
		{
			GameTextForPlayer(playerid, "~r~~h~OG Loc", 2500, 6);
			ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 1, 1, 1, 1);
		}
		case 3:
		{
			GameTextForPlayer(playerid, "~w~CJ", 2500, 6);
		 	ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
		}
		case 4:
		{
			GameTextForPlayer(playerid, "~g~~h~Drifter", 2500, 6);
			ApplyAnimation(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 5:
		{
			GameTextForPlayer(playerid, "~b~~h~Cesar", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 6:
		{
			GameTextForPlayer(playerid, "~r~clown", 2500, 6);
			ApplyAnimation(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.1, 1, 1, 1, 1, 1);
		}
		case 7:
		{
			GameTextForPlayer(playerid, "~w~madd dog", 2500, 6);
			ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 1, 1, 1, 1, 1);
		}
		case 8:
		{
			GameTextForPlayer(playerid, "~w~Zero", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 9:
		{
			GameTextForPlayer(playerid, "~w~Ken", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 10:
		{
			GameTextForPlayer(playerid, "~w~Torino", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 11:
		{
			GameTextForPlayer(playerid, "~w~Catilina", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 12:
		{
		   	GameTextForPlayer(playerid, "~w~Johhny", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 13:
		{
			GameTextForPlayer(playerid, "~g~Sweet", 2500, 6);
			ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 1, 1, 1, 1, 1);
		}
		case 14:
		{
			GameTextForPlayer(playerid, "~g~Ryder", 2500, 6);
			ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 1, 1, 1, 1, 1);
		}
		case 15:
		{
		    GameTextForPlayer(playerid, "~g~Smoke", 2500, 6);
			ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 1, 1, 1, 1, 1);
		}
		case 16:
		{
			GameTextForPlayer(playerid, "~w~Truth", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 17:
		{
			GameTextForPlayer(playerid, "~w~Maccer", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 18:
		{
			GameTextForPlayer(playerid, "~w~Bear", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 19:
		{
			GameTextForPlayer(playerid, "~w~school girl", 2500, 6);
			ApplyAnimation(playerid, "ROB_BANK", "SHP_HandsUp_Scr", 4.1, 1, 1, 1, 1, 1);
		}
		case 20:
		{
			GameTextForPlayer(playerid, "~w~trixie", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 21:
		{
			GameTextForPlayer(playerid, "~w~spike jonez", 2500, 6);
			ApplyAnimation(playerid, "FIGHT_C", "FightC_M", 4.1, 1, 1, 1, 1, 1);
		}
		case 22:
		{

			GameTextForPlayer(playerid, "~w~SWAT", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 23:
		{

		    GameTextForPlayer(playerid, "~w~army", 2500, 6);
			ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.0, 1, 0, 0, 0, -1);
		}
		case 24:
		{

		    GameTextForPlayer(playerid, "~w~woozie", 2500, 6);
			ApplyAnimation(playerid,"FIGHT_C","FightC_M", 4.1, 1, 1, 1, 1, 1);
		}
		case 25:
		{

		    GameTextForPlayer(playerid, "~w~jizzy", 2500, 6);
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 1, 1, 1, 1, 1);
		}
		case 26:
		{

		    GameTextForPlayer(playerid, "~w~italian", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 27:
		{

		    GameTextForPlayer(playerid, "~w~elvis", 2500, 6);
			ApplyAnimation(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.1, 1, 1, 1, 1, 1);
		}
		case 28:
		{

		    GameTextForPlayer(playerid, "~w~elvis 2", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 29:
		{

		    GameTextForPlayer(playerid, "~w~mafia ", 2500, 6);
			ApplyAnimation(playerid,"FIGHT_C","FightC_M", 4.1, 1, 1, 1, 1, 1);
		}
		case 30:
		{

		    GameTextForPlayer(playerid, "~w~vallet", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 31:
		{

		    GameTextForPlayer(playerid, "~w~barber", 2500, 6);
			ApplyAnimation(playerid,"SMOKING","M_smk_in", 4.1, 1, 1, 1, 1, 1);
		}
		case 32:
		{

			GameTextForPlayer(playerid, "~w~Racer", 2500, 6);
	 		ApplyAnimation(playerid,"PED","WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
		}
		case 33:
		{

			GameTextForPlayer(playerid, "~w~biker", 2500, 6);
			ApplyAnimation(playerid,"DANCING","DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
		case 34:
		{

			GameTextForPlayer(playerid, "~w~skater", 2500, 6);
			ApplyAnimation(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		}
		case 35:
		{
			GameTextForPlayer(playerid, "~r~staff only", 2500, 6);
			ApplyAnimation(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );

   		}
		case 36:
		{
		    GameTextForPlayer(playerid, "~r~staff only", 2500, 6);
		    ApplyAnimation(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		}
		case 37:
		{
			GameTextForPlayer(playerid, "~b~tommy", 2500, 6);
			ApplyAnimation(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		}
		case 38:
		{
			GameTextForPlayer(playerid, "~y~chicken", 2500, 6);
	 		ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
		}
		case 39:
		{
			GameTextForPlayer(playerid, "~b~~h~Skater", 2500, 6);
			ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, 1, 1, 1, 1, 1);
		}
	}
	SetPVarInt(playerid, "GotObject", 1);
	SetPlayerAttachedObject(playerid, 7, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfie right
	SetPlayerAttachedObject(playerid, 8, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfire left
	return 1;
}


public OnPlayerRequestSpawn(playerid)
{
	// Do not let the player spawn when they have an account, but haven't logged in
	if(pRegID[playerid] != 0 && pLogged[playerid] == false)
	{
  		PlayerPlaySound(playerid, 1085, 0, 0, 0);
		new tmpstr[100];
		format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
		format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
		ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
		InterpolateCameraPos(playerid, 2356.6528, -1742.2469, 142.7728, 1174.76, -1377.98, 150.88, 50000, CAMERA_MOVE);
        InterpolateCameraLookAt(playerid, 1513.8353, -1655.7241, 58.0422, 1513.8353, -1655.7241, 58.0422, 50000, CAMERA_MOVE);
	    return false;
	}

	// Admin-Only Skin
	PlayerPlaySound(playerid, 1186, 0, 0, 0);
	TextDrawHideForPlayer(playerid, wTD);
	TextDrawHideForPlayer(playerid, wTD1);
	TextDrawHideForPlayer(playerid, wTD2);
	TextDrawHideForPlayer(playerid, wTD3);
	TextDrawHideForPlayer(playerid, wTD4);
	TextDrawHideForPlayer(playerid, wTD5);
	TextDrawHideForPlayer(playerid, wTD6);
	TextDrawHideForPlayer(playerid, wTD7);
	TextDrawHideForPlayer(playerid, wTD8);
	TextDrawHideForPlayer(playerid, wTD9);
	TextDrawHideForPlayer(playerid, GGBOX);
	PlayerTextDrawHide(playerid, GGTD[playerid]);
	TextDrawHideForPlayer(playerid, GGTD2);
	return true;
}

public OnPlayerSpawn(playerid)
{
	pSpawned[playerid] = 1;
	// If the player spawns more than once in .33 secs, kick them.
	iTemp = GetTickCount();
	if((iTemp - pLastSpawnTick[playerid]) < 333)
	{
	    SpawnHack[playerid]++;
	}
	else SpawnHack[playerid] = 0;
	pLastSpawnTick[playerid] = iTemp;
	TextDrawHideForPlayer(playerid, letterbox[0]);
	TextDrawHideForPlayer(playerid, letterbox[1]);
	TogglePlayerControllable(playerid, true);
	//----- Discord Server Connection message ------------------------
	InBusiness[playerid] = INVALID_BUSINESS;

	new query[128];
	mysql_format(BusinessSQL, query, sizeof(query), "SELECT * FROM business_transactions WHERE OldOwner='%e'", Player_GetName(playerid));
	mysql_tquery(BusinessSQL, query, "BusinessSaleMoney", "i", playerid);

	
	if(pPremium[playerid] >= 1 && pSpectating[playerid] == -1)
	{
		if(pPremium[playerid] == 1) SetPlayerArmour(playerid, 100.0);
	}
	if(!GetPVarInt(playerid, "toysDisabled")) AttachPlayerToys(playerid); // Attach player Toys.
	if(bounty[playerid] > 0) SetPlayerAttachedObject(playerid, 7, 1254,2,0.440999,0.000000,0.023000,-1.799999,84.099983,0.000000,1.000000,1.000000,1.000000);
	GameTextForPlayer(playerid, " ", 1000, 3); // Hides Gametext

	if(InDM[playerid] >= 1 && InDM[playerid] != 200 && InDM[playerid] != 33 && InDM[playerid] != 22)
	{
		SendToDM(playerid);
		return true;
	}
	if(doingStunt[playerid] == 19)
	{
		SetPlayerDerbyStaticMeshes(playerid); // Derby
		return true;
	}
	if(doingStunt[playerid] == 97)
	{
		SetPlayerShooterStaticMeshes(playerid); // Shooter
		return true;
	}
	if(GetPVarInt(playerid, "FirstSpawn") == 0)
	{
		SetPVarInt(playerid, "FirstSpawn", 1);
		StopAudioStreamForPlayer(playerid);
		TextDrawHideForPlayer(playerid, ConnectTD[8]);
		TextDrawHideForPlayer(playerid, wTD);
		TextDrawHideForPlayer(playerid, wTD1);
		TextDrawHideForPlayer(playerid, wTD2);
		TextDrawHideForPlayer(playerid, wTD3);
		TextDrawHideForPlayer(playerid, wTD4);
		TextDrawHideForPlayer(playerid, wTD5);
		TextDrawHideForPlayer(playerid, wTD6);
		TextDrawHideForPlayer(playerid, wTD7);
		TextDrawHideForPlayer(playerid, wTD8);
		TextDrawHideForPlayer(playerid, wTD9);
		TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);
		if(GetPVarInt(playerid, "GotObject"))
  		{
			RemovePlayerAttachedObject(playerid, 7);
			RemovePlayerAttachedObject(playerid, 8);
			DeletePVar(playerid, "GotObject");
		}
		if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
		{
			GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
		    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
	  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
	    	god3D[playerid] = CreateDynamic3DTextLabel("GODMODE ON", 0x3BBD44FF , 0, 0, 0.39, 20.0, playerid, INVALID_VEHICLE_ID, 1);
	    	GodModeLabel(playerid, true);
			TextDrawHideForPlayer(playerid, GGBOX);
		    PlayerTextDrawHide(playerid, GGTD[playerid]);
		    TextDrawHideForPlayer(playerid, GGTD2);
		}
		if(pGroupID[playerid] != -1)
		{
		    UpdateGangLabel(playerid);
		}
		if(Mapper[playerid] != 10)
		{
		    tmp = "MAPPER";
   			//mapper3D[playerid] = CreateDynamic3DTextLabel(tmp, 0x87CEFA88, 0, 0, -0.41, 50.0, playerid, _, 1);
		}

		if(pAdmin[playerid] != 0 && pHidden[playerid] == 0)
		{
			switch(pAdmin[playerid])
	  		{
		 		case 1: tmp = "MODERATOR";
	    		case 2: tmp = "ADMIN";
	    		case 3: tmp = "LEAD ADMIN";
	      		case 4: tmp = "HEAD ADMIN";
	        	case 5: tmp = "Executive Admin";
			}
			//admin3D[playerid] = CreateDynamic3DTextLabel(tmp, 0x87CEFA88, 0, 0, -0.41, 50.0, playerid, _, 1);

		}
		//AFK3D[playerid] = Create3DTextLabel("AFK", COLOR_WHITE, 0, 0, 0, 20.0, 0);
		ShowPlayerTextDraws_OPS(playerid);
		PlayerPlaySound(playerid, 1186, 0, 0, 0);
		// Show GangZones
		GangZoneShowForPlayer(playerid, Zone[0], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[1], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[2], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[3], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[4], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[5], 0x00C3FF55);
		GangZoneShowForPlayer(playerid, Zone[6], 0xFF000555);
		GangZoneShowForPlayer(playerid, Zone[7], 0xFF000555);
		GangZoneShowForPlayer(playerid, Zone[8], 0xFF000556);
		if(pMute[playerid] > 0)
		{
		    format(str, sizeof(str), ""UFF" "GREY_E"You still have %d seconds left of your mute time!", pMute[playerid]);
			SendClientMessage(playerid, COLOR_GREY, str);
		}
	}


	InDM[playerid] = 0;
	SetPlayerTeam(playerid, 255);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
   	if(pSpectating[playerid] != -1)
   	{
   		pSpectating[playerid] = -1;
   		LoadPlayerPositionEx(playerid);
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have been put back to your old position.");
	}
   	else SetPlayerPosOnSpawn(playerid);
	if(GOD[playerid] == 0)
 	{
 		// 5 second spawn protection
 		SetPlayerHealth(playerid, 99999);
 		SetTimerEx("ResetHealth", 5000, false, "i", playerid);

		// Give Weapons
		GiveSpawnWeapons(playerid);
	}
	else
	{
		GodModeLabel(playerid, true);
	}
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	}
	if(playerSpectated[playerid] != 0)
	{
		hour = GetPlayerVirtualWorld(playerid);
		minute = GetPlayerInterior(playerid);
		format(str, sizeof(str), ""UFF" %s(%i) has respawned.", pName[playerid], playerid);
	    foreach(Player, ii)
	    {
			if(pSpectating[ii] == playerid)
			{
				PlayerSpectatePlayer(ii, playerid);
				SetPlayerVirtualWorld(ii, hour);
				SetPlayerInterior(ii, minute);
				SendClientMessage(ii, COLOR_YELLOW, str);
			}
		}
	}
	if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
	doingStunt[playerid] = 0;
	canUseKey[playerid] = true;
	if(pJail[playerid] > 0)
	{
	    JailPlayer(playerid);
		format(str, sizeof(str), ""UFF" "GREY_E"You still have %d seconds left of your jail time!", pJail[playerid]);
		SendClientMessage(playerid, COLOR_GREY, str);
		SetPVarInt(playerid, "JailedByAdmin", 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		return true;
	}
	return true;
}




public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(CarLocked[vehicleid] == true)
	{
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 1);
	}
}

/*public OnVehicleMod(playerid, vehicleid, componentid)
{
	printf("[OnVehicleMod]: '%s(%d)' has attached %d on %d", pName[playerid], playerid, componentid, vehicleid);
	if(BoughtVehicle[playerid] == true)
	{
		if(vehicleid == PlayerVehicle[playerid])
		{
			SavePVComponents(playerid, componentid);
		}
		if(GetPlayerInterior(playerid) == 0)
	    {
	        format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"%s(%i) has attempted to install an invalid vehicle mod.", pName[playerid], playerid);
			SendAdminMessage(COLOR_RED, str);
	        return 0;
	    }
	}
	return 1;
}*/

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(BoughtVehicle[playerid] == true)
	{
	    if(vehicleid == PlayerVehicle[playerid])
	    {
			PlayerInfoVeh[playerid][PaintJob] = paintjobid;
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(BoughtVehicle[playerid] == true)
	{
	   	if(vehicleid == PlayerVehicle[playerid])
	    {
     		switch(pVehicle[playerid])
			{
	    		case 1:
				{
	        		PlayerInfoVeh[playerid][Color1] = color1;
	        		PlayerInfoVeh[playerid][Color2] = color2;
  				}
  				case 2:
				{
	        		PlayerInfoVeh[playerid][Color12] = color1;
	        		PlayerInfoVeh[playerid][Color22] = color2;
  				}
  				case 3:
				{
	        		PlayerInfoVeh[playerid][Color13] = color1;
	        		PlayerInfoVeh[playerid][Color23] = color2;
  				}
			}
		}
	}
	return 1;
}


public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		foreach(Player, ii)
		{
			if(vehicleid == PlayerVehicle[ii])
 			{
 				if(strcmp(PlayerInfoVeh[ii][Owner], pName[playerid], CASE_SENSETIVE))
     			{
        			if(PlayerInfoVeh[ii][Locked] == 1)
			        {
		        		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
						SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		  				format(str, sizeof(str), ""RED_E"* "GREY2_E"This vehicle belongs to %s and is locked by the owner.", PlayerInfoVeh[ii][Owner]);
		  				SendClientMessage(playerid, COLOR_GREY, str);
		  				return true;
					}
				}
	  			format(str, sizeof(str), "~y~~h~~h~Vehicle: ~w~%s   ~y~~h~~h~Owner: ~w~%s", vehName[GetVehicleModel(vehicleid) - 400], PlayerInfoVeh[ii][Owner]);
				InfoTD_MSG(playerid, 3500, str);
  			}
   		}
   		switch(GetVehicleModel(vehicleid))
		{
		    case 425, 520, 432:
			{
			    if(pPremium[playerid] != 1 && InDM[playerid] == 0)
			    {
			    	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
					Error(playerid, "This vehicle can only be operated by VIPs!");
			    }
   			}
		}
   		if(vehicleid == veh_admin)
		{
			if(pAdmin[playerid] != 5)
   			{
   				GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"* "GREY2_E"This vehicle can only be operated by Executive Admin only.");
			}
		}
	}
	else
	{
	    if(InDM[playerid] == 13)
		{
		    if(!hasDriver(vehicleid))
 			{
    			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"* "GREY_E"You can't enter as passenger in an unoccupied vehicle during CNR!");
			}
		}
		if(doingStunt[playerid] != 0)
		{
		    if(doingStunt[playerid] == 19 &&  pSpawnVehicle[playerid] != -1)
			{
				 RemoveFromDerby(playerid);
	             GameTextForPlayer(playerid, "~y~You are not allowed to exit your vehile in~w~~n~Derby/Shooter/Race", 3000, 3);
			}
		    else
	  		{
		    	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"* "GREY_E"You can't enter as passenger in a vehicle in this area!");
			}
		    if(doingStunt[playerid] == 97 &&  pSpawnVehicle[playerid] != -1)
			{
				RemoveFromShooter(playerid);
	            GameTextForPlayer(playerid, "~y~You are not allowed to exit your vehile in~w~~n~Derby/Shooter/Race", 3000, 3);
			}
		    else
	  		{
		    	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SetPlayerPos(playerid, POS[0], POS[1], POS[2]);
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"* "GREY_E"You can't enter as passenger in a vehicle in this area!");
			}
		 }
	}
	return 1;
}

stock hasDriver(vehicle)
{
	foreach(Player, ii)
 	{
  		if(IsPlayerInAnyVehicle(ii))
  		{
    		if(GetPlayerVehicleID(ii) == vehicle)
			{
   				if(GetPlayerState(ii) == PLAYER_STATE_DRIVER)
   				{
       				return 1;
       			}
          	}
       	}
   	}
   	return 0;
}



public OnPlayerExitVehicle(playerid, vehicleid)
{
    
	CarLocked[vehicleid] = false;
	foreach(Player, ii)
    {
       SetVehicleParamsForPlayer(vehicleid, ii, 0, 0);
 	}
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(playerSpectated[playerid] != 0)
 	{
		format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) is now in interior %d (before %d).", pName[playerid], playerid, newinteriorid, oldinteriorid);
		foreach(Player, ii)
		{
			if(pSpectating[ii] == playerid && GetPlayerState(ii) == PLAYER_STATE_SPECTATING)
		    {
		   		SetPlayerInterior(ii, newinteriorid);
     			SendClientMessage(ii, COLOR_WHITEP, str);
   			}
	    }
	}
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	switch(newstate)
	{
	    case PLAYER_STATE_DRIVER:
		{
			vID = GetPlayerVehicleID(playerid);
			vv = GetVehicleModel(vID);
			if(vID != pLastVehicle[playerid])
	        {
       			// Vehicle-warping Check
				if(vehxTime[playerid] > gettime())
	            {
					// Hacks Detected
					new hwarns = GetPVarInt(playerid, "VehHacks") + 1;
					SetPVarInt(playerid, "VehHacks", hwarns);
					if(GetPVarInt(playerid, "VehHacks") == 3)
					{
						GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
						GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
					//	format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has detected auto banned for remote vehicle spawning!", PlayerName, playerid);
                      //  SendAdminMessage(COLOR_RED, str);
						return true;
					}
					GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
				//	format(str, sizeof(str), ""RED_E"* ADMIN-MSG: "GREY_E"Possible vehicle warping hacks detected on %s(%i). Check on this player.", PlayerName, playerid);
				//	SendAdminMessage(COLOR_GREY, str);
				//	format(tmp, sizeof(tmp), "4Anti-Cheat 3Possible vehicle warping hacks detected on %s(%i).", PlayerName, playerid);
				//	IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	                return 1;
	            }
	            vehxTime[playerid] = gettime() + 1;
			}
			// CnR
			if(pJail[playerid] > 0 && InDM[playerid] == 13)
			{
			    // Arrested
			    otherid = GetPVarInt(playerid, "Arrester");
			    pJail[playerid] = 0;
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); // UnCuff
			    KillTimer(pJailTimer[playerid]);
			    GameTextForPlayer(playerid, "~g~~h~~h~Evaded Arrest!", 4000, 5);
			    format(str, sizeof(str), ""DARK_E"[CnR] "LRED_E"%s(%d) has evaded his arrest (Vehicle Evasion)", pName[playerid], playerid);
				SendCNRMessage(COLOR_RED, str);
				DeletePVar(playerid, "Arrester");

				format(str, sizeof(str), ""DARK_E"[CnR] "RED_E"%s(%d) has evaded your arrest, you haven't recieved your reward for this arrest!", pName[playerid], playerid);
				SendClientMessage(otherid, COLOR_RED, str);
				GivePlayerCash(otherid, -6500);
				GivePlayerScore(otherid, -2);
				GivePlayerGB(otherid, -1);
    			format(query, sizeof(query), "UPDATE players SET arrests=arrests-1 WHERE reg_id=%d", pRegID[otherid]);
				MySQL_updateQuery(query);
				pArrests[otherid]--;
				pTimesArrested[playerid]--;
				format(query, sizeof(query), "UPDATE players SET times_arrested=times_arrested-1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			LinkVehicleToInterior(vID, GetPlayerInterior(playerid));
			format(str, sizeof(str), "%s", vehName[vv - 400]);
			PlayerTextDrawSetString(playerid, vTD[playerid], str);
			PlayerTextDrawShow(playerid, vTD[playerid]);
			// Hide Box
			if(hideMSG[playerid] == 0) HidePlayerMSGBox(playerid);
			SetTimerEx("hidevTD", 3200, false, "i", playerid);
			if(Speedo[playerid] == 1)
			{
				PlayerTextDrawShow(playerid, vSpeed[playerid]);
				PlayerTextDrawShow(playerid, vSpeedBox[playerid]);
				PlayerTextDrawShow( playerid, vSpeedModel[playerid] );
				TextDrawHideForPlayer(playerid, GGBOX);
		        PlayerTextDrawHide(playerid, GGTD[playerid]);
			}

			// AutoTune
	 		switch(vv)
			{
 					case 558, 559, 560, 561, 562, 565:
				    {
				    	if(pAutoTune[playerid] == 1 && vID != PlayerVehicle[playerid])
				        {
					        switch(vv)
					        {
							    case 558: // Uranus
							    {
							    	AddVehicleComponent(vID, 1091); // x-flow roof
									AddVehicleComponent(vID, 1093); // left x-flow sideskirt
									AddVehicleComponent(vID, 1095); // right x-flow sideskirt
								    AddVehicleComponent(vID, 1163); // x-flow spoiler
								    AddVehicleComponent(vID, 1089); // x-flow exhaust
								    AddVehicleComponent(vID, 1167); // x-flow rear bumper
								    AddVehicleComponent(vID, 1165); // x-flow front bumpers
								}
								case 559: // Jester
							    {
							       	AddVehicleComponent(vID, 1158); // x-flow spoiler
						        	AddVehicleComponent(vID, 1161); // x-flow rear bumper
						            AddVehicleComponent(vID, 1173); // x-flow front bumper
						            AddVehicleComponent(vID, 1066); // x-flow exhaust
						            AddVehicleComponent(vID, 1070); // right x-flow sideskirt
						            AddVehicleComponent(vID, 1072); // left x-flow sideskirt
						            AddVehicleComponent(vID, 1068); // x-flow roof
								}
								case 560: // Sultan
								{
	                                AddVehicleComponent(vID, 1031); // right x-flow sideskirt
							        AddVehicleComponent(vID, 1030); // left x-flow sideskirt
									AddVehicleComponent(vID, 1029); // x-flow exhaust
									AddVehicleComponent(vID, 1033); // x-flow roof
									AddVehicleComponent(vID, 1139); // x-flow spoiler
									AddVehicleComponent(vID, 1140); // rear x-flow bumper
									AddVehicleComponent(vID, 1170); // front x-flow bumper
								}
								case 561: // Stratum
								{
									AddVehicleComponent(vID, 1061); // x-flow roof
									AddVehicleComponent(vID, 1057); // right x-flow sideskirt
									AddVehicleComponent(vID, 1063); // left x-flow sideskirt
									AddVehicleComponent(vID, 1060); // x-flow spoiler
									AddVehicleComponent(vID, 1059); // x-flow exhausts
									AddVehicleComponent(vID, 1156); // x-flow rear bumper
									AddVehicleComponent(vID, 1157); // x-flow front bumper
								}
								case 562: // Elegy
								{
									AddVehicleComponent(vID, 1037); // x-flow exhaust
									AddVehicleComponent(vID, 1035); // x-flow roof
									AddVehicleComponent(vID, 1039); // left x-flow sideskirt
									AddVehicleComponent(vID, 1041); // right x-flow sideskirt
									AddVehicleComponent(vID, 1146); // x-flow spoiler
									AddVehicleComponent(vID, 1148); // rear x-flow bumper
									AddVehicleComponent(vID, 1172); // front x-flow bumper
								}
								case 565: // Flash
								{
									AddVehicleComponent(vID, 1045); // x-flow exhaust
									AddVehicleComponent(vID, 1053); // x-flow roof
									AddVehicleComponent(vID, 1048); // right x-flow sideskirt
									AddVehicleComponent(vID, 1052); // left x-flow sideskirt
									AddVehicleComponent(vID, 1050); // x-flow spoiler
									AddVehicleComponent(vID, 1151); // x-flow rear bumper
									AddVehicleComponent(vID, 1152); // x-flow front bumper
								}
							}
							ChangeVehiclePaintjob(vID, random(3));
							PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
							format(str, sizeof(str), ""UFF" "YELLOW_E"Your vehicle has been automatically tuned ('/autotune' to disable)", vehName[vv - 400]);
							SendClientMessage(playerid, COLOR_YELLOW, str);
							format(tmp, sizeof(tmp), "~y~~h~Vehicle Tuned");
                            GameTextForPlayer(playerid, tmp, 3500, 4);
						}
					}
			}
			if(playerSpectated[playerid] != 0)
  			{
	    		format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) is now driving a %s(%d).", pName[playerid], playerid, vehName[vv - 400], vID);
				foreach(Player, ii)
				{
    				if(pSpectating[ii] == playerid)
			    	{
        				PlayerSpectateVehicle(ii, vID);
				        SendClientMessage(ii, COLOR_WHITEP, str);
				    }
				}
			}
			foreach(Player, ii)
	        {
			if(vID != 0 && Speedo[ii] != 0)
	     	{
              PlayerTextDrawSetPreviewModel(ii, vSpeedModel[ii], GetVehicleModel(GetPlayerVehicleID(ii)) );
			}
			}
			if(IsBikeModel(vv) && InDM[playerid] == 0)
			{
			//	if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) SetPVarInt(playerid, "HelmetDisabled", 1);
			//	GivePlayerHelmet(playerid);
				SetPVarInt(playerid, "OnBike", 1);
			    if(GetPVarInt(playerid, "antiFall") != 0)
			    {
					if(pLastVehicle[playerid] != vID)
     				{
						format(str, sizeof(str), ""UFF" "YELLOW_E"Antifall is enabled on your %s. Type /antifall to disable it.", vehName[vv - 400]);
						SendClientMessage(playerid, COLOR_GOLD, str);
					}
				}
			}
			else
			{
				SetPVarInt(playerid, "OnBike", 0);
    			if(GetPVarInt(playerid, "HelmetDisabled") == 0) RemovePlayerAttachedObject(playerid, 1);
	      	}
	      	pLastVehicle[playerid] = vID;
	      	LastSeat[playerid] = GetPlayerVehicleSeat(playerid);
		}
		case PLAYER_STATE_ONFOOT:
		{
		    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
			{
				if(Speedo[playerid] == 1)
				{
					PlayerTextDrawHide(playerid, vSpeed[playerid]);
					PlayerTextDrawHide(playerid, vSpeedBox[playerid]);
					PlayerTextDrawHide( playerid, vSpeedModel[playerid] );
					TextDrawHideForPlayer(playerid, GGBOX);
		            PlayerTextDrawHide(playerid, GGTD[playerid]);
				}
				if(InDerby[playerid] == 1)
				{
				    PutPlayerInVehicle(playerid, pLastVehicle[playerid], 0);
					Error(playerid, "You aren't allowed to exit your vehicle while in a derby!");
				}
				if(doingStunt[playerid] == 19 && pSpawnVehicle[playerid] != -1)
				{
					PutPlayerInVehicle(playerid, pLastVehicle[playerid], 0);
					//Error(playerid, "You aren't allowed to exit your vehicle while in a derby, Type /leave to exit!");
				}
				if(doingStunt[playerid] == 97 && pSpawnVehicle[playerid] != -1)
				{
				    PutPlayerInVehicle(playerid, pLastVehicle[playerid], 0);
                    //GameTextForPlayer(playerid, "~y~You are not allowed to exit your vehile in~w~~n~Derby/Shooter/Race", 3000, 3);
				}
				if(GetPVarInt(playerid, "OnBike") == 1 && doingStunt[playerid] == 9 || doingStunt[playerid] == 42) // enabled, on a bike
				{
					hour = (oldstate == PLAYER_STATE_DRIVER ? (0): (1));
					PutPlayerInVehicle(playerid, pLastVehicle[playerid], hour);
					return true;
				}
				if(GetPVarInt(playerid, "OnBike") == 1 && doingStunt[playerid] == 42) // enabled, on a bike
				{
					hour = (oldstate == PLAYER_STATE_DRIVER ? (0): (1));
					PutPlayerInVehicle(playerid, pLastVehicle[playerid], hour);
					return true;
				}
				if(GetPVarInt(playerid, "OnBike") == 1 && RaceParticipant[playerid] == true) // enabled, on a bike
				{
					hour = (oldstate == PLAYER_STATE_DRIVER ? (0): (1));
					PutPlayerInVehicle(playerid, rpInfo[playerid][Vehicle], hour);
					return true;
				}
			    if(playerSpectated[playerid] != 0)
	    		{
					format(str, sizeof(str), "** "YELLOW_E"%s(%i) is now on foot.", pName[playerid], playerid);
					foreach(Player, ii)
					{
	    				if(pSpectating[ii] == playerid)
		   				{
	        				PlayerSpectatePlayer(ii, playerid);
	        				SendClientMessage(ii, COLOR_RED, str);
					    }
    				}
				}
				if(pInfo[playerid][pRainbow] == 1)
			    {
			        pInfo[playerid][pRainbow] = 0;
			        KillTimer(RainbowTimer[playerid]);
		       		SendClientMessage(playerid, COLOR_YELLOW, ""UFF" The Rainbow Effect is no longer enabled (you left your vehicle).");
				}
			}
		}
 		case PLAYER_STATE_PASSENGER:
		{
		    new w = GetPlayerWeapon(playerid);
		    vID = GetPlayerVehicleID(playerid);
            vv = GetVehicleModel(vID);
			pLastVehicle[playerid] = vID;
			LastSeat[playerid] = GetPlayerVehicleSeat(playerid);
			// CnR
			if(pJail[playerid] > 0 && InDM[playerid] == 13)
			{
			    // Arrested
			    otherid = GetPVarInt(playerid, "Arrester");
			    pJail[playerid] = 0;
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); // UnCuff
			    KillTimer(pJailTimer[playerid]);
			    GameTextForPlayer(playerid, "~g~~h~~h~Evaded Arrest!", 4000, 5);
			    format(str, sizeof(str), ""DARK_E"[CnR] "LRED_E"%s(%d) has evaded his arrest (Vehicle Evasion)", pName[playerid], playerid);
				SendCNRMessage(COLOR_RED, str);
				DeletePVar(playerid, "Arrester");

				format(str, sizeof(str), ""DARK_E"[CnR] "RED_E"%s(%d) has evaded your arrest, you haven't recieved your reward for this arrest!", pName[playerid], playerid);
				SendClientMessage(otherid, COLOR_RED, str);
				GivePlayerCash(otherid, -6500);
				GivePlayerScore(otherid, -2);
				GivePlayerGB(otherid, -1);
    			format(query, sizeof(query), "UPDATE players SET arrests=arrests-1 WHERE reg_id=%d", pRegID[otherid]);
				MySQL_updateQuery(query);
				pArrests[otherid]--;
				pTimesArrested[playerid]--;
				format(query, sizeof(query), "UPDATE players SET times_arrested=times_arrested-1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
        	if(w==24)
			{
			    new gun, gun2;
            	GetPlayerWeaponData(playerid, 4, gun, gun2);
        		#pragma unused gun2
        		if(gun) SetPlayerArmedWeapon(playerid, gun);
        		else SetPlayerArmedWeapon(playerid, 0);
 			}
			if(playerSpectated[playerid] != 0)
 			{
   				format(str, sizeof(str), "** "YELLOW_E"%s(%i) is now a passenger in %s(%d) in seat %d.", pName[playerid], playerid, vehName[vv - 400], vID, GetPlayerVehicleSeat(playerid));
				foreach(Player, ii)
				{
    				if(pSpectating[ii] == playerid)
			    	{
        				PlayerSpectateVehicle(ii, vID);
				        SendClientMessage(ii, COLOR_RED, str);
				    }
				}
			}
		/*	if(IsBikeModel(vv))
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) SetPVarInt(playerid, "HelmetDisabled", 1);
				GivePlayerHelmet(playerid);
				SetPVarInt(playerid, "OnBike", 1);
			}
			else SetPVarInt(playerid, "OnBike", 0);*/
  		}
	}
	return true;
}
/*
//=== [ RB System ] ===
Float:GetRBDistance(playerid)
{
	new Float:dist;
	dist = floatpower(GetPlayerPing(playerid), 0.25);
	dist = dist*1.0;
	dist = dist+1.0;
	return dist;
}*/
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(InDM[playerid] == 94) //cbug
	{
		if(GetPlayerWeapon(playerid) == 24)
		{
		    if(GetPlayerAmmo(playerid) == 7 && PRESSED(KEY_FIRE))
			{
			    ccount[0][playerid] = GetTickCount();
                disparou[playerid] = true;
			}
			else if(RELEASED(KEY_FIRE))
			{
			    if(GetPlayerAmmo(playerid) == 0)
			    {
					ccount[1][playerid] = GetTickCount();
					ccount[2][playerid] = ccount[1][playerid] - ccount[0][playerid];
					ccount[3][playerid] = ccount[2][playerid] / 1000;
					disparou[playerid] = false;
					format(sstr, sizeof(sstr), "~r~C-Bug Time~w~:~n~%0.4f~y~s", ccount[3][playerid]);
					GameTextForPlayer(playerid, sstr, 2000, 4);
					format(str1, sizeof(str1), "{FF0000}C-Bug Time{FFFFFF}: %0.4f{FFFF00}s", ccount[3][playerid]);
					Msg(playerid, -1, str1);

					// Y_INI
                    INI_ParseFile(fileToWrite,"ini_%s_%s");
					if (ccount[3][playerid] < tops[4])
					{
					    new INI:iniFile = INI_Open(fileToWrite);
                        new nick[MAX_PLAYER_NAME+1];
                        format(nick, sizeof(nick), GetPlayerN(playerid));

                        if (ccount[3][playerid] < tops[0])
                        {
                            INI_SetTag(iniFile, "tempos");
							INI_WriteFloat(iniFile, "1", ccount[3][playerid], 4);
							INI_WriteFloat(iniFile, "2", tops[0], 4);
							INI_WriteFloat(iniFile, "3", tops[1], 4);
							INI_WriteFloat(iniFile, "4", tops[2], 4);
							INI_WriteFloat(iniFile, "5", tops[3], 4);
                            INI_SetTag(iniFile, "jogadores");
							INI_WriteString(iniFile, "j1", nick);
							INI_WriteString(iniFile, "j2", jogtops[0]);
							INI_WriteString(iniFile, "j3", jogtops[1]);
							INI_WriteString(iniFile, "j4", jogtops[2]);
							INI_WriteString(iniFile, "j5", jogtops[3]);

                            format(str1, sizeof(str1), "[CBug] {00FF00}%s{FFFFFF} is now in {00FF00}1st place{FFFFFF} with a time of {00FF00}%0.4f{FFFFFF} seconds!", nick, ccount[3][playerid]);
			    			MsgAll(0xFF0000FF, str1);
			    			INI_Close(iniFile);
						}
          				else if (ccount[3][playerid] < tops[1])
                        {
                            INI_SetTag(iniFile, "tempos");
							INI_WriteFloat(iniFile, "2", ccount[3][playerid], 4);
							INI_WriteFloat(iniFile, "3", tops[1], 4);
							INI_WriteFloat(iniFile, "4", tops[2], 4);
							INI_WriteFloat(iniFile, "5", tops[3], 4);
	                        INI_SetTag(iniFile, "jogadores");
							INI_WriteString(iniFile, "j2", nick);
							INI_WriteString(iniFile, "j3", jogtops[1]);
							INI_WriteString(iniFile, "j4", jogtops[2]);
							INI_WriteString(iniFile, "j5", jogtops[3]);

							format(str1, sizeof(str1), "[CBug] {00FF00}%s{FFFFFF} is now in {00FF00}2nd place{FFFFFF} with a time of {00FF00}%0.4f{FFFFFF} seconds!", nick, ccount[3][playerid]);
				    		MsgAll(0xFF0000FF, str1);
				    		INI_Close(iniFile);
						}
      					else if (ccount[3][playerid] < tops[2])
                        {
                        	INI_SetTag(iniFile, "tempos");
							INI_WriteFloat(iniFile, "3", ccount[3][playerid], 4);
							INI_WriteFloat(iniFile, "4", tops[2], 4);
							INI_WriteFloat(iniFile, "5", tops[3], 4);
                            INI_SetTag(iniFile, "jogadores");
							INI_WriteString(iniFile, "j3", nick);
							INI_WriteString(iniFile, "j4", jogtops[2]);
							INI_WriteString(iniFile, "j5", jogtops[3]);

							format(str1, sizeof(str1), "[CBug] {00FF00}%s{FFFFFF} is now in {00FF00}3rd place{FFFFFF} with a time of {00FF00}%0.4f{FFFFFF} seconds!", nick, ccount[3][playerid]);
					    	MsgAll(0xFF0000FF, str1);
					    	INI_Close(iniFile);
						}
						else if (ccount[3][playerid] < tops[3])
                        {
                            INI_SetTag(iniFile, "tempos");
							INI_WriteFloat(iniFile, "4", ccount[3][playerid], 4);
							INI_WriteFloat(iniFile, "5", tops[3], 4);
                            INI_SetTag(iniFile, "jogadores");
							INI_WriteString(iniFile, "j4", nick);
							INI_WriteString(iniFile, "j5", jogtops[3]);

							format(str1, sizeof(str1), "[CBug] {00FF00}%s{FFFFFF} is now in {00FF00}4th place{FFFFFF} with a time of {00FF00}%0.4f{FFFFFF} seconds!", nick, ccount[3][playerid]);
						    MsgAll(0xFF0000FF, str1);
						    INI_Close(iniFile);
						}
						else
						{
							INI_SetTag(iniFile, "tempos");
							INI_WriteFloat(iniFile, "5", ccount[3][playerid], 4);
	                        INI_SetTag(iniFile, "jogadores");
							INI_WriteString(iniFile, "j5", nick);

							format(str1, sizeof(str1), "[CBug] {00FF00}%s{FFFFFF} is now in {00FF00}5th place{FFFFFF} with a time of {00FF00}%0.4f{FFFFFF} seconds!", nick, ccount[3][playerid]);
							MsgAll(0xFF0000FF, str1);

							INI_Close(iniFile);
						}
					}

					// Y_INI
					ccount[0][playerid] = 0; ccount[1][playerid] = 0; ccount[2][playerid] = 0; ccount[3][playerid] = 0;
				    SetTimerEx("FuncPart2", 999, 0, "i", playerid);
				}
			}

		}
	}
	if(newkeys & KEY_FIRE)
	{
	    if(BuildRace == playerid+1)
	    {
	        new Float: vPos[4];
			if(BuildTakeVehPos == true)
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR]You need to be in a vehicle.");
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
				AddRacePos(BuildName, BuildVehPosCount, vPos[0], vPos[1], vPos[2], vPos[3]);
				SendClientMessageEx(playerid, 0xFFFF00AA, "[INFO] The vehicle pos #%d has been setted.", BuildVehPosCount+1);
		        BuildVehPosCount++;
			}
   			if(BuildVehPosCount >= 2)
		    {
		        BuildVehPosCount = 0;
		        BuildTakeVehPos = false;
		        MostrarDialogo(playerid, 605);
		    }
			if(BuildTakeCheckpoints == true)
			{
			    if(BuildCheckPointCount > MAX_RACE_CP) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR]You have reached the maximum number of checkpoints.");
			    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR]You need to be in a vehicle.");
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				AddRaceCP(BuildName, BuildCheckPointCount, vPos[0], vPos[1], vPos[2]);
				SendClientMessageEx(playerid, 0xFFFF00AA, "[INFO] The checkpoint #%d has been setted.", BuildCheckPointCount+1);
				BuildCheckPointCount++;
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
	    if(BuildRace == playerid+1)
	    {
		    if(BuildTakeCheckpoints == true)
		    {
				MostrarDialogo(playerid, 606);
				TotalRaces = CountSavedRaces();
				TotalRaces++;
		    }
	    }
	}
	if(newkeys & KEY_FIRE && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && doingStunt[playerid] == 97)
    {
	     if(doingStunt[playerid] == 97 && (IsShooterRunning))
         {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleModel(vehicleid) == 411 || GetVehicleModel(vehicleid) == 402 || GetVehicleModel(vehicleid) == 541 || GetVehicleModel(vehicleid) == 415)
            {
                if(IsValidObject(Shooter[playerid][S_ROCKET_OBJECT])) return GameTextForPlayer(playerid, "~y~Reloading Rockets...", 2000, 3);

                if(Shooter[playerid][S_ROCKET_TIMER] != -1) KillTimer(Shooter[playerid][S_ROCKET_TIMER]);
                Shooter[playerid][S_ROCKET_TIMER] = SetTimerEx("OnPlayerShootRocket", 250, true, "i", playerid);

                new Float:pos[4];
                GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
                GetVehicleZAngle(vehicleid, pos[3]);

                Shooter[playerid][S_ROCKET_OBJECT] = CreateObject(345, pos[0], pos[1], pos[2], 0.0, 0.0, pos[3]);

                new Float:distance = 50.0;
                MoveObject(Shooter[playerid][S_ROCKET_OBJECT], pos[0] + (distance * floatsin(-pos[3], degrees)), pos[1] + (distance * floatcos(-pos[3], degrees)), pos[2], 50.0);
                return 1;
            }
        }
    }
    if(newkeys & KEY_CROUCH && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Jump
	{
	    if(doingStunt[playerid] == 97)
	    {
            if(GetPVarInt(playerid, "UsedJump") ==1)
			{
				GameTextForPlayer(playerid, "~y~Bounce in Cooldown", 3000, 3);
				return true;
			}
			SetPVarInt(playerid, "UsedJump", 1);
			SetTimerEx("ResetJump", 8000, false, "i", playerid);
	    	vID = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(vID, POS[0], POS[1], POS[2]);
			SetVehicleVelocity(vID, POS[0], POS[1], POS[2] + 0.3);
	    }
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarType(playerid, "UsingAnim"))
		{
			cmd_stopanim(playerid);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleRcTram(GetPlayerVehicleID(playerid)))
  		{
			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerPos(playerid, POS[0]+2.0, POS[1], POS[2]+1.0);
			SetCameraBehindPlayer(playerid);
		}
	}
	if((newkeys & KEY_FIRE || newkeys & KEY_ACTION))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	 	{
			if(InDM[playerid] == 0 || doingStunt[playerid] == 0) // not in dm and Challenges
			{
				if(GetPVarInt(playerid, "txtSent") == 0 && pTotalHours[playerid] < 6)
				{
					SetPVarInt(playerid, "txtSent", 1);
					SendClientMessage(playerid, COLOR_GREY, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Type /settings to view your user control panel.");
				}
				vID = GetPlayerVehicleID(playerid);
				if(IsNosVehicleModel(GetVehicleModel(vID)))
		    	{
		    		AddVehicleComponent(vID, 1010);
				}
				if(canUseKey[playerid] == true && doingStunt[playerid] == 0)
				{
					if(speedBoost[playerid] != 0.0)
		   			{
						GetVehicleVelocity(vID, POS[0], POS[1], POS[2]);
						SetVehicleVelocity(vID, POS[0] * speedBoost[playerid], POS[1] * speedBoost[playerid], POS[2] * speedBoost[playerid]);
						if(playerSpectated[playerid] != 0)
						{
							foreach(Player, i)
							{
								if(pSpectating[i] == playerid)
									GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~~h~Speedboost!", 1100, 4);
							}
						}
					}
		 			if(GetPVarInt(playerid, "Ramped") == 1)
					{
					    GetVehiclePos(vID, POS[0], POS[1], POS[2]);
						GetVehicleZAngle(vID, A);
						new Float:tPOS[3];
						tPOS[0] = (floatpower(GetPlayerPing(playerid), 0.25) * 4.0 + 3.0);
						POS[0] += (tPOS[0] * floatsin(-A, degrees));
						POS[1] += (tPOS[0] * floatcos(-A, degrees));
						if(rampTimer[playerid] != -1)
						{
							DestroyPlayerObject(playerid, GetPVarInt(playerid, "rampObject"));
							KillTimer(rampTimer[playerid]);
							rampTimer[playerid] = -1;
						}

						new rampObject = CreatePlayerObject(playerid, 1632, POS[0], POS[1], POS[2], 0, 0, A);
						SetPVarInt(playerid, "rampObject", rampObject);

						rampTimer[playerid] = SetTimerEx("DestroyRamp", 3000, false, "i", playerid);
						if(playerSpectated[playerid] != 0)
						{
							foreach(Player, i)
							{
								if(pSpectating[i] == playerid)
									GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~~h~Ramped!", 1100, 4);
							}
						}
					}
				}
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
		 	if(killCamON[playerid] == true)
		    {
		        KillTimer(killCamTimer[playerid]);
		        TogglePlayerSpectating(playerid, 0);
		        killCamON[playerid] = false;
		        foreach(Player, ii) if(GetPVarInt(ii, "killCamSpectator") == playerid) DeletePVar(ii, "killCamSpectator");
		        return 1;
		    }
		}
  	}
	if(newkeys & KEY_CROUCH && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Jump
	{
	    if(pBounce[playerid] == 1 && canUseKey[playerid] == true && doingStunt[playerid] == 0)
	    {
	    	vID = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(vID, POS[0], POS[1], POS[2]);
			SetVehicleVelocity(vID, POS[0], POS[1], POS[2] + 0.3);
	    }
	}
	if(newkeys & KEY_JUMP && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) // Superman Jump (Space)
	{
		if(pSuperJump[playerid] == 1 && canUseKey[playerid] == true && doingStunt[playerid] == 0 && InDM[playerid] == 0 && GetPlayerWeapon(playerid) != 34)
 		{
			new Float:Jump[3];
	        GetPlayerVelocity(playerid, Jump[0], Jump[1], Jump[2]);
	        SetPlayerVelocity(playerid, Jump[0], Jump[1], Jump[2] + 8.5);
  		}
	}
	if(newkeys & KEY_LOOK_BEHIND && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Flip Key (NUM 2)
	{
		if(canUseKey[playerid] == true && doingStunt[playerid] == 0)
		{
			vID = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(vID, A);
			SetVehicleZAngle(vID, A);
		}
	}
	if(newkeys & KEY_LOOK_BEHIND && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Flip Key (NUM 2)
	{
		if(canUseKey[playerid] == true && doingStunt[playerid] == 9 || doingStunt[playerid] == 42)
		{
			vID = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(vID, A);
			SetVehicleZAngle(vID, A);

		}
	}
	if(newkeys & KEY_NO  && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Speedbreak (NUM 4)
	{
		if(canUseKey[playerid] == true && doingStunt[playerid] == 0)
		{
            TogglePlayerControllable(playerid, false);
         	SetTimerEx("ForceStop", 900, false, "i", playerid);

		}
	}
	return true;
}


forward OnPlayerShootRocket(playerid);
public OnPlayerShootRocket(playerid)
{
    new Float:pos[3];
    GetObjectPos(Shooter[playerid][S_ROCKET_OBJECT], pos[0], pos[1], pos[2]);
    foreach(new i : Player)
    {
        if(i != playerid)
        {
            if(IsPlayerInRangeOfPoint(i, 5.0, pos[0], pos[1], pos[2]))
            {
                CreateExplosion(pos[0], pos[1], pos[2], 11, 3.0);
                DestroyObject(Shooter[playerid][S_ROCKET_OBJECT]);

                KillTimer(Shooter[playerid][S_ROCKET_TIMER]);
                Shooter[playerid][S_ROCKET_TIMER] = -1;
                break;
            }
        }
    }
    return 1;
}
public OnObjectMoved(objectid)
{
    foreach(new i : Player)
    {
        if(objectid == Shooter[i][S_ROCKET_OBJECT])
        {
            new Float:pos[3];

            GetObjectPos(objectid, pos[0], pos[1], pos[2]);
            CreateExplosion(pos[0], pos[1], pos[2], 11, 3.0);
            DestroyObject(objectid);

            KillTimer(Shooter[i][S_ROCKET_TIMER]);
            Shooter[i][S_ROCKET_TIMER] = -1;
        }
    }
    return 1;
}


public OnRconLoginAttempt(ip[], password[], success)
{
	new loggerid;
    foreach(Player, ii)
	{
		GetPlayerIp(ii, PlayerIP, sizeof(PlayerIP));
		if(!strcmp(PlayerIP, ip, true))
		{
			loggerid = ii;
			break;
		}
	}
	if(success)
	{
		format(str, sizeof(str), ""RED_E"*** {%06x}%s(%i) "GREY2_E"has logged into RCON.", pColor[loggerid], pName[loggerid], loggerid);
		SendAdminMessage(COLOR_GREY2, str);
		printf("RCON: %s(%i) (IP: %s) has logged into RCON.", pName[loggerid], loggerid, ip);
	}
	else
	{
	 	format(str, sizeof(str), "* ADMIN-MSG: %s(%i) [%s] has failed logging into RCON.", pName[loggerid], loggerid, ip);
		SendAdminMessage(COLOR_RED, str);
		format(str, sizeof(str), "4Server:3 %s(%i) [%s] has failed logging into RCON.", pName[loggerid], loggerid, ip);
		IRC_GroupSay(ircGroup, "%"IRC_CHANNEL, str);
		printf("RCON attempt: %s(%i ~ %s) (unsuccessful)", pName[loggerid], loggerid, ip, success);
		new failz = GetPVarInt(loggerid, "rconFails") + 1;
		SetPVarInt(loggerid, "rconFails", failz);
		if(GetPVarInt(loggerid, "rconFails") == 3)
	    {
	        format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has been kicked for 3 unsuccessful RCON login attempts.", pName[loggerid], loggerid);
	        SendClientMessageToAll(COLOR_GREY, str);
	    	format(str, sizeof(str), "4Server:3 %s(%i) has been kicked for 3 unsuccessful RCON login attempts.", pName[loggerid], loggerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			Kick(loggerid);
		}
	}
	return true;
}

public OnVehicleSpawn(vehicleid)
{
	//LinkVehicleToInterior(vehicleid, 0);
	CarLocked[vehicleid] = false; // Unlock all vehicles
	foreach(Player, i)
	{
 		if(PlayerVehicle[i] == vehicleid)
		{
			ModVehicleColor(i);
			ModVehiclePaintJob(i);
			ModVehicleComponents(i);
			break;
   		}
	}
	return true;
}

public OnVehicleDeath(vehicleid)
{
	if(EventGoingOn == 2)
	{
  		foreach(Player, ii)
		{
			if(vehicleid == GetPlayerVehicleID(ii) && GetPVarType(ii, "DerbyVeh"))
			{
				DestroyVehicle(vehicleid);
				pSpawnVehicle[ii] = -1;
		  		SetPlayerHealth(ii, 0);
			}
		}
	}
	return true;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	 	if(issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
	    {	        
	        SetPlayerHealth(playerid, 2.15);
	        GameTextForPlayer(issuerid, "~r~~h~Headshot", 3500, 4);
	        GameTextForPlayer(playerid, "~r~~h~Headshot", 3500, 4);
	    }
        return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pSpawned[damagedid] == 1)
    {
        if(pInfo[playerid][phitsound] == 1)
		{
	 	    PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0); //ding sound!
	 	}
        if(GOD[damagedid] == 1 && canUseKey[damagedid] == true)
		{
			GameTextForPlayer(playerid, "~y~~h~Player has /GOD enabled", 2000, 3);
			GetPlayerArmour(damagedid, A);
			if(A > 0)
			{
				if(pPremium[damagedid] == 1) SetPlayerArmour(damagedid, 97);
				else SetPlayerArmour(damagedid, 50);
			}
		}
		if(!PlayerHit[damagedid] && InEvent[damagedid] == 0)
	    {
		    PlayerHit[damagedid] = true;
		    SetTimerEx("RemoveHealth", 800, false, "i", damagedid);
		}
	}
  	return true;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    switch(hittype)
	{
		case 0:
		{
			if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
        	{
            	return 0; // let's desynchronize that bullet, so players won't crash
        	}
		}
		case 2:
	    {
	        if(InDM[playerid] == 13)
	    	{
				if(hitid != INVALID_VEHICLE_ID)
				{
    				foreach(Player, i)
				    {
		      			if(GetPlayerVehicleID(i) == hitid && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerTeam(i) == GetPlayerTeam(playerid))
		         		{
                			GameTextForPlayer(playerid, "~r~Don't shoot teammates vehicle~w~!", 2500, 5);
         					return 0;
			 			}
		           	}
	    		}
			}
		}
	}
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    if(playerSpectated[playerid] != 0)
 	{
	 	if(pSpectating[forplayerid] == playerid && GetPlayerState(forplayerid) == PLAYER_STATE_SPECTATING)
   		{
   			PlayerSpectatePlayer(forplayerid, playerid);
		}

	}
    return 1;
}

public OnPlayerUpdate(playerid)
{
	if(InDM[playerid] == 63)
	{
		new gt_str[120],
		GunName[32];
		GetWeaponName(GetPlayerWeapon(playerid),GunName,sizeof(GunName));
	    format(gt_str, sizeof(gt_str), "~b~Weapon: ~w~%s~n~~b~Level: ~w~%d~n~~b~Rank: ~w~%s~n~~b~Map: ~w~%s", GunName, GGLevel[playerid], GGRank(GGLevel[playerid]), GGMap(InGGMap[playerid]));
		PlayerTextDrawSetString(playerid, GGTD[playerid], gt_str);

		if(GGLevel[playerid] == 14) //Ganador
	    {
		    new gw_str[246], gw_nick[24]; GetPlayerName(playerid, gw_nick, 24);
			format(gw_str, sizeof(gw_str), ""WHITE_E"["IVORY_E"GUNGAME"WHITE_E"] The player "IVORY_E"%s(%d) "WHITE_E"is the GunGame winner, "RED_E"(Rank: %s - Level: 14)", gw_nick, playerid, GGRank(14));
			SendGGMessage(0xA60BDDFF, gw_str);
			GivePlayerCash(playerid, 14000);
			GivePlayerScore(playerid, 50);
		    format(str, sizeof(str), "~g~~h~~h~+$14000~w~~n~~y~~h~+50 score");
            MSTD_MSG(playerid, 3500, str);
            pGGWins[playerid]++;
			format(query, sizeof(query), "UPDATE players SET ggwins=ggwins+1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
		 	if(pGGWins[playerid] >= 15)
			{
				if(pAch31[playerid] == 0)
				{
					pAch31[playerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a31=1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(playerid, "One Shot Two Kills", "Congrats you have won 15 gungames!~n~~y~+$100000 and 10 score!~n~~w~Type /ach to view your achievements.");
				}
			}
			for(new x = 0; x < MAX_PLAYERS; x++) if(GGLevel[x] < 15)
			{
				GGLevel[x] = 0;
				if(InGGMap[x] == 1)
				{
					InGGMap[x] = 2;
                	JoinToGG(x);
  					GameTextForPlayer(x, "~p~~h~A next round started,~n~~w~if you want left use /exit", 3500, 3);
				}
				else if(InGGMap[x] == 2)
				{
				    RemoveFromDeathmatch(x);
					GameTextForPlayer(x, "~p~The GunGame minigame end,~n~~w~thanks for play.", 3500, 3);
				}
			}
		}
	}
	if(cAFK[playerid] > 60)
	{

		if(GetPVarInt(playerid, "recivedPM"))
  		{
			DeletePVar(playerid, "recivedPM");
			InfoTD_MSG(playerid, 4000, "~w~You have received a PMs while you were AFK!~N~Type ~r~~h~/checkpms ~w~to view your private messages.");
		}
	}
	cAFK[playerid] = 0;
	return true;
}

stock SavePlayerStats(playerid)
{
	if(pLogged[playerid] == true)
	{
		format(query, sizeof(query), "UPDATE players SET hours=%d,minutes=%d,seconds=%d,kills=%d,killstreak=%d,money=%d,score=%d,deaths=%d,gbs=%d,active=0,god=%d,Muted=%d,Jailed=%d,last_time=CURRENT_TIMESTAMP() WHERE reg_id=%d",
		pTotalHours[playerid], pTotalMinutes[playerid], pTotalSeconds[playerid], pInfo[playerid][pKills], TotalKillStreak[playerid], pCash[playerid], pScore[playerid], pInfo[playerid][pDeaths], pGBs[playerid], GOD[playerid], pMute[playerid], pJail[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);

		MySQL_SavePlayerToys(playerid);
		MySQL_SavePlayerVeh(playerid);
	}
}

public OnPlayerCommandText(playerid, cmdtext[])
{

    if(!pSpawned[playerid])
	{
		Error(playerid, "You must be spawned to use commands!");
		return false;
	}
	new index, cmd[20];
	cmd = strtok(cmdtext, index);
	if (strcmp("/dailyreward", cmdtext, true, 10) == 0)
	{
        if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command! (/register)");
		new Hour, Minute, Second, Timestamp;
		Timestamp = gettime(Hour, Minute, Second);
		new hour2,minute2,second2,year,month,day;
		timeToDate(Timestamp, hour2, minute2, second2, year, month, day);
		new typeofreward = random(3);
		if(Timestamp < DailyInfo[playerid][dAgain])
		{
		format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "WHITE_E"You already claimed daily reward for today! You can claim it again on %d/%d/%d at %02d:%02d:%02d",day,month,year,hour2,minute2,second2);
		SendClientMessage(playerid, -1, str);
		return 1;
		}
		if(typeofreward == 0)
		{
		    format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "YELLOW_E"%s(%i) "WHITE_E"has claimed their daily reward of 20 score", pName[playerid], playerid);
		    SendClientMessageToAll(playerid,str);
		    GivePlayerScore(playerid, 20);
			DailyInfo[playerid][dAgain] = Timestamp + 86400;
		    format(str, sizeof(str), "~y~~h~+20 score");
            MSTD_MSG(playerid, 3500, str);
            SendClientMessage(playerid, COLOR_GREEN, ""IVORY_E"Congratulations, You have claimed your daily reward of 20 score successfully.");
  		    format(str, sizeof(str), ""RED_E"> "IVORY_E"You can claim your next daily reward again on %d/%d/%d at %02d:%02d:%02d." ,day,month,year,hour2,minute2,second2);
	 	    SendClientMessage(playerid, COLOR_WHITE, str);
		}
		if(typeofreward == 1)
		{
            format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "YELLOW_E"%s(%i) "WHITE_E"has claimed their daily reward of  50k$ cash", pName[playerid], playerid);
		    SendClientMessageToAll(playerid,str);
			GivePlayerCash(playerid, 50000);
			DailyInfo[playerid][dAgain] = Timestamp + 86400;
		    format(str, sizeof(str), "~g~~h~+$50,000");
            MSTD_MSG(playerid, 3500, str);
            SendClientMessage(playerid, COLOR_GREEN, ""IVORY_E"Congratulations, You have claimed your daily reward of 50k$ cash successfully.");
  		    format(str, sizeof(str), ""RED_E"> "IVORY_E"You can claim your next daily reward again on %d/%d/%d at %02d:%02d:%02d." ,day,month,year,hour2,minute2,second2);
	 	    SendClientMessage(playerid, COLOR_WHITE, str);
		}
		if(typeofreward == 2)
		{
		    format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "YELLOW_E"%s(%i) "WHITE_E"has claimed their daily reward of 10 gbs", pName[playerid], playerid);
		    SendClientMessageToAll(playerid,str);
		    GivePlayerGB(playerid, 10);
			DailyInfo[playerid][dAgain] = Timestamp + 86400;
			format(str, sizeof(str), "~y~~h~+10 gbs");
            MSTD_MSG(playerid, 3500, str);
            SendClientMessage(playerid, COLOR_WHITE, ""IVORY_E"Congratulations, You have claimed your daily reward of 10 gold blocks successfully.");
  		    format(str, sizeof(str), ""RED_E"> "IVORY_E"You can claim your next daily reward again on %d/%d/%d at %02d:%02d:%02d." ,day,month,year,hour2,minute2,second2);
	 	    SendClientMessage(playerid, COLOR_WHITE, str);
		}
		return true;
	}
	if (strcmp("/clearrewardtimer", cmdtext, true, 10) == 0)
	{
        if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
		tmp = strtok(cmdtext, index);
  		if(!strlen(tmp)) return SendClientMessage(playerid, -1, ""YELLOW_E"Usage: /cleartimer [ID]");
		if(!IsPlayerConnected(strval(tmp))) return SendClientMessage(playerid, -1, "That player isnt connected");
		DailyInfo[strval(tmp)][dAgain] = -1;
		SendClientMessage(strval(tmp), -1, ""GREEN_E"Admin cleared your timer on /dailyreward");
		SendClientMessage(playerid, -1, ""GREEN_E"Successfull! Timer cleared.");
		return true;
	}
	if(pJail[playerid] > 0)
	{
		if(strcmp(cmdtext, "/escape", true))
		{
		    if(strcmp(cmdtext, "/bc", true))
		    {
 				format(str, sizeof(str), ""RED_E"Server:"GREY2_E" You can't use commands in jail, you will be out in "GREY_E"%d seconds.", pJail[playerid]);
   				SendClientMessage(playerid, COLOR_GREY2, str);
	    		return true;
   			}
   		}
	}
	if(killCamON[playerid] == true)
 	{
 		Error(playerid, "You can not use commands while on the killCam, press the fire key to spawn.");
   		return 1;
   	}
   	if(Freezed[playerid] == true)
 	{
 		Error(playerid, "You can not use any commands while frozen!");
   		return 1;
   	}
	if(pBlocked[playerid] > 0)
	{
		format(str, sizeof(str), "* Your commands are blocked, block will be lifted in %d seconds.", pBlocked[playerid]);
		SendClientMessage(playerid, COLOR_ORANGE, str);
  		GameTextForPlayer(playerid, "~r~Your commands are blocked~y~!", 3000, 4);
    	return true;
	}

	// If the player sends more than one command in 0.333 seconds, block their commands for 30 seconds.
	iTemp = GetTickCount();
	if((iTemp - pLastCommandTick[playerid]) < 333)
	{
		pBlocked[playerid] = 30;
		SendClientMessage(playerid, COLOR_RED, ""GREY_E"Anti-Spam: "RED_E"Possible flood detected (commands blocked for 30 seconds)!");
		return true;
	}
	pLastCommandTick[playerid] = iTemp;

	// Close any open dialogs.
	ClosePlayerDialog(playerid);

	new pos;
	while(cmdtext[++pos] > ' ')
		str[pos-1] = tolower(cmdtext[pos]);
	str[pos-1] = '\0';
	format(str, 32, "cmd_%s", str);

    while(cmdtext[pos] == ' ')
		pos++;

	if(!cmdtext[pos])
		pos = CallLocalFunction(str, "is", playerid, "\1");
	else
		pos = CallLocalFunction(str, "is", playerid, cmdtext[pos]);

	if(!pos)
	{
		sscanf(cmdtext, "s[90] ", tmp);
        GameTextForPlayer(playerid, "~b~~h~unknown COMMAND~n~~w~TYPE ~b~~h~/C~W~ FOR ALL COMMANDS", 2700, 3);
        PlayerPlaySound(playerid, 1186, 1, 1, 1);
		SetTimerEx("hideError", 2700, false, "i", playerid);
		return true;
	}
	cmdsUsed++;
	return true;
}
forward SavePlayer(playerid);
public SavePlayer(playerid)
{
 	new INI:File = INI_Open(DailyPath(playerid));
   	INI_SetTag(File,"data");
    INI_WriteFloat(File,"Claimed",DailyInfo[playerid][dClaimed]);
    INI_WriteFloat(File,"Again",DailyInfo[playerid][dAgain]);
    INI_Close(File);
}
forward LoadDaily_data(playerid,name[],value[]);
public LoadDaily_data(playerid,name[],value[])
{
	INI_Int("Claimed",DailyInfo[playerid][dClaimed]);
	INI_Int("Again",DailyInfo[playerid][dAgain]);
 	return 1;
}

stock DailyPath(playerid)
{
	new string[128],playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid,playername,sizeof(playername));
	format(string,sizeof(string),DREWARDSPATH,playername);
	return string;
}

stock timeToDate(time, &hour, &minute, &second, &year, &month, &day) {

        new remain = time, leapYear = 1, sub, yearCounter;

        for(new i = 0; i < time - sub;) {
                sub = (leapYear > 0 && leapYear < 4) ? 31622400 : 31536000;
                if(i == 0) {
                        i += 31536000;
                        remain -= 31536000;
                } else {
                        if(leapYear > 0 && leapYear < 4) {
                                i += 31536000;
                                leapYear++;
                                remain -= 31536000;
                        } else {
                                i += 31622400;
                                leapYear = 1;
                                remain -= 31622400;
                        }
                }
                if(time > 31536000) yearCounter++;
        }
        year = 1970 + yearCounter;

        sub = (leapYear > 0 && leapYear < 4) ? 86400 : 0;
        if(remain <= 2678400) { month = 1; remain -= 0; }
        else if(remain <= 5097600 + sub) { month = 2; remain -= 2678400; }
        else if(remain <= 7776000 + sub) { month = 3; remain -= 5097600; }
        else if(remain <= 10368000 + sub) { month = 4; remain -= 7776000; }
        else if(remain <= 13046400 + sub) { month = 5; remain -= 10368000; }
        else if(remain <= 15638400 + sub) { month = 6; remain -= 13046400; }
        else if(remain <= 18316800 + sub) { month = 7; remain -= 15638400; }
        else if(remain <= 20995200 + sub) { month = 8; remain -= 18316800; }
        else if(remain <= 23587200 + sub) { month = 9; remain -= 20995200; }
        else if(remain <= 26265600 + sub) { month = 10; remain -= 23587200; }
        else if(remain <= 28857600 + sub) { month = 11; remain -= 26265600; }
        else if(remain <= 31536000 + sub) { month = 12; remain -= 28857600; }

        day = floatround( floatdiv(float(remain), float(86400)), floatround_floor );
        remain -= (day * 86400);

        hour = floatround( floatdiv(float(remain), float(3600)), floatround_floor );
        remain -= (hour * 3600);

        minute = floatround( floatdiv(float(remain), float(60)), floatround_floor );
        remain -= (minute * 60);

        second = remain;
        day++;
        return 1;
}

function DestroyRamp(playerid)
{
	new rampObject = GetPVarInt(playerid, "rampObject");
	if(rampObject) DestroyPlayerObject(playerid, rampObject);
	DeletePVar(playerid, "rampObject");
	rampTimer[playerid] = -1;
}

stock Float:GetDistanceBetweenPlayers(p1, p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if (!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

// Callbacks which are fired from inside ODR
forward PassChange_OnPassCheck(playerid);
public PassChange_OnPassCheck(playerid)
{
	if(!MySQL_rowCount())
	{
		ShowPlayerDialog(playerid, 198, DIALOG_STYLE_INPUT, "Change your password", "Insert your current password...", "Continue", "Exit");
		Error(playerid, "Invalid password specified.");
        InfoTD_MSG(playerid, 3000, "~r~~h~Error changing password!~n~~w~Wrong password.");
	}
	else
	{
		ShowPlayerDialog(playerid, 199, DIALOG_STYLE_INPUT, ""WHITE_E"Change your password", "Enter your new password!\n\nAll passwords are hashed on our database.\nAll passwords are case-sensitive.\nRemember your password, you will need it for your next login.\n", "Enter", "Exit");
		InfoTD_MSG(playerid, 3000, "~w~Insert your new password!");
	}
    return true;
}
forward OnPlayerLoginAuth(playerid, inserted_pass[]);
public OnPlayerLoginAuth(playerid, inserted_pass[])
{
	if(!MySQL_rowCount())
	{
		SendClientMessage(playerid, COLOR_ORANGE, ""BLUE_E"UFF "WHITEP_E"This account is not registered. Register your account to gain access to bonus commands and features!");
		ShowRegisterDialog(playerid);
	}
	else
	{
		new real_pass_hash[42];
		new inserted_pass_hash[42];
		MySQL_getString(0, 1, real_pass_hash);
		sha1(inserted_pass, inserted_pass_hash);
		printf("[mysql] %s -> %s", inserted_pass, inserted_pass_hash);
		if(strcmp(real_pass_hash, inserted_pass_hash, false) != 0)
		{
			// Wrong password
			datez = GetPVarInt(playerid, "FailedLogin") + 1;
			if(datez == 3)
			{
				DeletePVar(playerid, "FailedLogin");
			    SetPVarInt(playerid, "CantRegister", 1);
			    pRegID[playerid] = 0;

				new newname = random(9000);
			   	format(str, sizeof(str), ""RED_E"Server: "GREY2_E"%s's name has been changed to %s_%d.", pName[playerid], pName[playerid], newname);
				SendClientMessageToAllEx(playerid, COLOR_GREY2, str);
				format(tmp, sizeof(tmp), "2Server:3 %s(%i)'s4 name has been changed to %s_%d for too many failed logins.", pName[playerid], playerid, pName[playerid], newname);
				IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
				format(str, sizeof(str), ""RED_E"Server: "LB2_E"Your name has been changed to %s_%d for too many failed login attempts.", pName[playerid], newname);
				ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""YELLOW_E"UFF", str, "OK", "");
				GameTextForPlayer(playerid, "~r~~h~Name changed!", 3500, 3);

				format(tmp, sizeof(tmp), "%s_%d", pName[playerid], newname);
				SetPlayerName(playerid, tmp);
				GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
				pName[playerid] = PlayerName;
				return true;
			}
			SetPVarInt(playerid, "FailedLogin", datez);

   			format(str, sizeof(str), ""RED_E"ERROR: "DARK_E"Wrong Password! [%d/3]", GetPVarInt(playerid, "FailedLogin"));
			SendClientMessage(playerid, COLOR_DARK, str);
			SendClientMessage(playerid, COLOR_DARK, "If you forgot your password, recover it uffserver/!");
			InfoTD_MSG(playerid, 4000, "~r~~h~Error logging in!~n~~w~Wrong password. Go to uffserver.com/forum to recover your password!");

			new tmpstr[100];
			format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
			format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"RED_E"Wrong Password. %d attempts left!\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid], (3 - GetPVarInt(playerid, "FailedLogin")) );
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
		}
		else
		{
			// Right password, commence login
			DeletePVar(playerid, "FailedLogin");

			// Load data here
			pLogged[playerid] = true;
			pAdmin[playerid] = MySQL_getInt(0, 3);
			pTotalHours[playerid] = MySQL_getInt(0, 4);
			pTotalMinutes[playerid] = MySQL_getInt(0, 5);
			pTotalSeconds[playerid] = MySQL_getInt(0, 6);
			pInfo[playerid][pKills] = MySQL_getInt(0, 7);
			pInfo[playerid][pDeaths] = MySQL_getInt(0, 8);
			pCash[playerid] = MySQL_getInt(0, 9);
			pScore[playerid] = MySQL_getInt(0, 10);
			pPremium[playerid] = MySQL_getInt(0, 11);
			pInfo[playerid][pSaveSkin] = MySQL_getInt(0, 12);
			pSpawnPlace[playerid] = MySQL_getInt(0, 13);
			pInfo[playerid][pSeePMs] = MySQL_getInt(0, 14);
			pGBs[playerid] = MySQL_getInt(0, 15);
			pInfo[playerid][pEventsWon] = MySQL_getInt(0, 16);
			pInfo[playerid][pRacesWon] = MySQL_getInt(0, 17);
			pInfo[playerid][pMBFound] = MySQL_getInt(0, 18);
			speedBreak[playerid] = MySQL_getInt(0, 19);
			SavedVehicle[playerid] = MySQL_getInt(0, 20);
			speedBoost[playerid] = MySQL_getFloat(0, 21);
			pWheels[playerid] = MySQL_getInt(0, 22);
		 	MySQL_getString(0, 23, pRegDate[playerid]);
		 	MySQL_getString(0, 24, pLastDate[playerid]);
			pColor[playerid] = MySQL_getInt(0, 25);
			pGoTo[playerid] = MySQL_getInt(0, 26);
			pAutoFix[playerid] = MySQL_getInt(0, 27);
			GOD[playerid] = MySQL_getInt(0, 28);
			BankMoney[playerid] = MySQL_getInt(0, 29);
			reactionsWon[playerid] = MySQL_getInt(0, 30);
			pArrests[playerid] = MySQL_getInt(0, 31);
			MySQL_getString(0, 32, pPlate[playerid]);
   			pBounce[playerid] = MySQL_getInt(0, 33);
			Speedo[playerid] = MySQL_getInt(0, 34);
			pAutoTune[playerid] = MySQL_getInt(0, 35);
			pSuperJump[playerid] = MySQL_getInt(0, 36);
			TotalKillStreak[playerid] = MySQL_getInt(0, 37);
			MySQL_getString(0, 38, pDescription[playerid]);
			pDuelsWon[playerid] = MySQL_getInt(0, 39);
			pHidden[playerid] = MySQL_getInt(0, 40);
			pWeaponSet[playerid] = MySQL_getInt(0, 41);
			pFallouts[playerid] = MySQL_getInt(0, 42);
			MySQL_getString(0, 43, pCountry[playerid]);
			pGroupID[playerid] = MySQL_getInt(0, 44);
			pGroupRank[playerid] = MySQL_getInt(0, 45);
			pDerbys[playerid] = MySQL_getInt(0, 46);
			pTime[playerid] = MySQL_getInt(0, 47);
			pWeather[playerid] = MySQL_getInt(0, 48);
			premiumExpired[playerid] = MySQL_getInt(0, 49);
			pChatColor[playerid] = MySQL_getInt(0, 50);
			hideMSG[playerid] = MySQL_getInt(0, 51);
			autoLogin[playerid] = MySQL_getInt(0, 52);
			duelsOFF[playerid] = MySQL_getInt(0, 53);
			pGoldBlocks[playerid] = MySQL_getInt(0, 54);
			pMute[playerid] = MySQL_getInt(0, 55);
			pJail[playerid] = MySQL_getInt(0, 56);
			pReportPoints[playerid] = MySQL_getInt(0, 57);
			pIDColor[playerid] = MySQL_getInt(0, 58);
			houseID[playerid] = MySQL_getInt(0, 59);
			mathsWon[playerid] = MySQL_getInt(0, 60);
			pTakedowns[playerid] = MySQL_getInt(0, 61);
			pRobberies[playerid] = MySQL_getInt(0, 62);
			pPlayerRobberies[playerid] = MySQL_getInt(0, 63);
			pTimesArrested[playerid] = MySQL_getInt(0, 64);
			pCopKills[playerid] = MySQL_getInt(0, 65);
			Mapper[playerid] = MySQL_getInt(0, 66);
			specOFF[playerid] = MySQL_getInt(0, 67);
			pInfo[playerid][phitsound] = MySQL_getInt(0, 68);
            pShooters[playerid] = MySQL_getInt(0, 69);
            pInfo[playerid][pSeeGC] = MySQL_getInt(0, 70);
            pInfo[playerid][pHearSong] = MySQL_getInt(0, 71);
            pInfo[playerid][pVipLogin] = MySQL_getInt(0, 72);
            pGGWins[playerid] = MySQL_getInt(0, 73);
            pWarns2[playerid] = MySQL_getInt(0, 74);
            pBMX[playerid] = MySQL_getInt(0, 75);
            SetPlayerScore(playerid, pScore[playerid]);
			GivePlayerMoney(playerid, pCash[playerid]);


            MySQL_LoadPlayerToys(playerid);
			MySQL_LoadPlayerVehicle(playerid);
			MySQL_LoadPlayerGroup(playerid);
			MySQL_LoadPlayerAchivements(playerid);
			MySQL_LoadPlayerHouse(playerid);

			if(pColor[playerid] != 0)
			{
	  			SetPlayerColor(playerid, pColor[playerid]);
	  			pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
			}
			else
			{
				SetPlayerColor(playerid, PlayerColors[playerid]);
				pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
			}
			if(pChatColor[playerid] != 0) pChatColor[playerid] = StripAlpha(pChatColor[playerid]);
			if(pIDColor[playerid] != 0) pIDColor[playerid] = StripAlpha(pIDColor[playerid]);
			// Update IP
			GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
			format(query, sizeof(query), "UPDATE players SET IP='%s',active=1 WHERE reg_id=%d", PlayerIP, pRegID[playerid]);
			MySQL_updateQuery(query);

   			OnUserManualLogin(playerid);

			// Check if account name is banned.
			GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
			format(query, sizeof(query), "SELECT user_banner,ban_reason,ban_time,ban_timestamp FROM bans WHERE user_banned='%s' AND (ban_time>UNIX_TIMESTAMP() OR ban_time=0)", PlayerName);
			MySQL_query(query, true, "CheckManualBan", "i", playerid);
		}
	}
 	return true;
}

forward CheckUserRegistration(playerid, password[]);
public CheckUserRegistration(playerid, password[])
{
    new rows = MySQL_rowCount();
	if(rows > 5)
	{
	    datez = 0;
	 	line = "";
	 	for(new i = 0; i != rows; i++)
		{
			// Get the name  ache and append it to the dialog content
			MySQL_getString(i, 1, str);
			strcat(line, str);
			datez ++;

			if(datez == 5)
				strcat(line, "\n"), datez = 0;
			else
				strcat(line, ", ");
		}
		Error(playerid, "You have more then 5 accounts on the server! Please rejoin the server using your existing account!");
		format(str, sizeof(str), ""RED_E"You have more than 5 accounts on the server!\nPlease re-connect using your exisiting account!\n\nAccounts under your IP: %s", line);
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"Excessive Accounts", str, "Close", "");

		format(str, sizeof(str), "4Server:3 %s(%d) has been kicked for having more than 5 accounts on the server.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(str, sizeof(str), "4Server:3 Accounts under this IP: %s", line);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		KickEx(playerid);
		return 1;
	}

	GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
	GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));

	format(query, sizeof(query), "INSERT INTO players(name,pass,IP,reg_time,last_time) VALUES('%s',SHA1('%s'),'%s',CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP())", PlayerName, password, PlayerIP);
	MySQL_query(query, false, "OnPlayerRegister", "is", playerid, password);
	return 1;
}

forward OnPlayerRegister(playerid, passwd[]);
public OnPlayerRegister(playerid, passwd[])
{
	if(pLogged[playerid] == true)
		return Error(playerid, "You are already registered and logged in!");

	pRegID[playerid] = cache_insert_id();
	pLogged[playerid] = true;
	pRegs++;

	GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
	format(str, sizeof str, ""RED_E"UFF "YELLOW_E":: "WHITE_E" %s(%i) "GREEN_E"has registered, making the server have a total of "LB2_E"%s "GREEN_E"players registered.",PlayerName, playerid, ToCurrency(pRegID[playerid]));
	SendClientMessageToAll(COLOR_GREEN, str);
	format(str, sizeof(str), "5,9- RegServ -3,0 %s(%i) has registered making the server have a total of %s players registered.", PlayerName, playerid, ToCurrency(pRegID[playerid]));
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
    RegisteredPlayers = pRegID[playerid];
	SendClientMessage(playerid, COLOR_WHITEP, ""UFF" "WHITEP_E"You are now registered and have accces to all features!");

	new nStr[700];
	new rStr[800];
	format(nStr, sizeof(nStr), ""WHITE_E"Thank you %s for registering here at {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)» !\nYou can also register on our website at uffserver.com/forum.\n\n"DARK_E"Benefits of registering:\nAll of your stats are now saved (/stats)\nYou now have access to all commands (/cmds)", PlayerName);
	strcat(rStr, nStr);
	format(nStr, sizeof(nStr), "\nYou can now purchase houses and private vehicles.\nAll your attached objects are saved (/toys)\nYou can now access your user control panel (/settings)\nRemember your password ("LB_E"%s"WHITE_E") and set your /email to receive important news.\n\nYou are now logged in and received "GREEN_E"$"WHITE_E"50,000 as a bonus for registering.", passwd);
	strcat(rStr, nStr);

	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITE_E"UFF "RED_E":: "WHITE_E"Ultimate Funky Freeroam", rStr, "OK", "");

	format(str, sizeof(str), "~b~~h~~h~Welcome to UFF, ~w~%s~b~~h~!~n~~b~~h~~h~You have successfully registered and logged in!", pName[playerid]);
	GameTextForPlayer(playerid,str, 5500, 4);
	GivePlayerCash(playerid, 50000);
	GameTextForPlayer(playerid, "+$50,000~n~startcash", 3500, 1);
	MySQL_CreatePlayerAchivements(playerid);
	PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
	SetTimerEx("SendWelcomeMessage", 3000, false, "i", playerid);
	return true;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	printf("[OnDialogResponse]: %s(%d) has used dialog id: %d Listitem: %d", pName[playerid], playerid, dialogid, listitem);
	switch(dialogid)
	{
        case 994:
	 	{
			if(response)
			{
		    	otherid = GetPVarInt(playerid, "gcPlayer");
				new money = GetPVarInt(playerid, "gcAmount");

				if(otherid == INVALID_PLAYER_ID)
			        return Error(playerid, "Player not connected!");
			 	GivePlayerCash(otherid, money);
				GivePlayerCash(playerid, -money);
                format(str, sizeof(str), "~r~~h~~h~-$%d", money);
	            MSTD_MSG(playerid, 3500, str);
	            format(str, sizeof(str), "~g~~h~~h~+$%d", money);
	            MSTD_MSG(otherid, 3500, str);
	            
				format(str, sizeof(str), ""UFF" "YELLOW_E"You have sent %s(%i) "GREEN_E"$%s", pName[otherid], otherid, ToCurrency(money));
				SendClientMessage(playerid, COLOR_GREY, str);
				format(str, sizeof(str), ""UFF" "YELLOW_E"%s(%i) has sent you "GREEN_E"$%s", pName[playerid], playerid, ToCurrency(money));
				SendClientMessage(otherid, COLOR_GREY, str);
				format(str, sizeof(str), "4Server:3 %s(%i) has sent %s(%i) $%s", pName[playerid], playerid, pName[otherid], otherid, ToCurrency(money));
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
		}
		case DIALOG_SERVER_DATA:
		{
			if(response)
			{
			    switch(listitem)
				{
					case 0:
					{
					    if(AutomaticRace == true) return SendClientMessage(playerid, 0xFF0000FF, "Automatic races are enabled."),cmd_racepanel(playerid);
					    if(SRaces == false) {SRaces = true;} else{SRaces = false;}

						SendClientMessageEx(-1, SRaces == false ? (0xFFFF00AA) : (0x00FF00AA), "[INFO] The administrator %s(%d) has %s the races.", pName[playerid],playerid, SRaces == false ? ("disabled") : ("enabled"));
					    cmd_racepanel(playerid);
				    }
				    case 1: cmd_stoprace(playerid);
				    case 2: cmd_forcerace(playerid);
				    case 3: cmd_createrace(playerid);
                    case 4:
					{
					    if(AutomaticRace == false){ AutomaticRace = true, SRaces = false, KillTimer(AutoRaceTimer), SetTimer("AutoRace", 180000, true);} else{AutomaticRace = false, KillTimer(AutoRaceTimer);}

					    SendClientMessageEx(-1, AutomaticRace == false ? (0xFFFF00AA) : (0x00FF00AA), "[INFO] The administrator %s(%d) has %s the automatic races.", pName[playerid],playerid, AutomaticRace == false ? ("disabled") : ("enabled"));
					    cmd_racepanel(playerid);
				    }
				}
			}
		}
	    case DIALOG_MORE_RACES:
	    {
		    if(!response)
		    {
			    rpInfo[playerid][Player_Consult] = rpInfo[playerid][Player_Consult]+20;
			    cmd_forcerace(playerid);
		    }
		    if(response)
		    {
			    rpInfo[playerid][Player_Consult] = 0;
			    if(SRaces == false) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] The races has been disabled by an Admin!");
			    if(BuildRace != 0) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] Someone is building a race.");
			    if(RaceBusy == 0x01 || RaceStarted > 0) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] There's a race in progress, wait for it to end.");
			    if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid,0xFF0000AA,"[ERROR] You should in virtual world 0.");
			    LoadRace(playerid, listitem+1);
		    }
	    }
		case 599:
	    {
	        if(!response) return BuildRace = 0;
	        switch(listitem)
	        {
	        	case 0: BuildRaceType = 0;
	        	case 1: BuildRaceType = 3;
			}
			MostrarDialogo(playerid, 600);
	    }
	    case 600..601:
	    {
	        if(!response) return MostrarDialogo(playerid, 599);
	        if(!strlen(inputtext)) return MostrarDialogo(playerid, 601);
	        if(strlen(inputtext) < 5 || strlen(inputtext) > 19) return MostrarDialogo(playerid, 601);

			new string[138], DBResult:qresult;
			format(string, sizeof(string), "SELECT `RACE_NAME` FROM `RACES` WHERE `RACE_NAME` = '%s' COLLATE NOCASE",inputtext);
			qresult = db_query(Database, string);


			if(db_num_rows(qresult))
			{
			    db_free_result(qresult);
				SendClientMessage(playerid,0xFF0000AA,"[ERROR] This race already exists!");
                return MostrarDialogo(playerid, 600);
			}

	        strmid(BuildName, inputtext, 0, strlen(inputtext), sizeof(BuildName));
	        MostrarDialogo(playerid, 602);
	    }
	    case 602..603:
	    {
	        if(!response) return MostrarDialogo(playerid, 600);
	        if(!strlen(inputtext)) return MostrarDialogo(playerid, 603);
	        if(IsNumeric(inputtext))
	        {
	            if(strval(inputtext) < 400 || strval(inputtext) > 611) return MostrarDialogo(playerid, 603);
				new Float: pPos[4];
				GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				GetPlayerFacingAngle(playerid, pPos[3]);
				BuildModeVID = strval(inputtext);
				CreateRaceVehicle(playerid,strval(inputtext));
				MostrarDialogo(playerid, 604);
			}
	        else
	        {
	            if(ReturnVehicleID(inputtext) < 400 || ReturnVehicleID(inputtext) > 611) return MostrarDialogo(playerid, 603);
				new Float: pPos[4];
				GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				GetPlayerFacingAngle(playerid, pPos[3]);
				BuildModeVID = ReturnVehicleID(inputtext);
				CreateRaceVehicle(playerid,ReturnVehicleID(inputtext));
			    MostrarDialogo(playerid, 604);
			}
        }
	    case 604:
	    {
	        if(!response) return MostrarDialogo(playerid, 602);
	        AddRace(BuildName, BuildModeVID, BuildRaceType);
			SendClientMessage(playerid, 0xFFFF00AA, "« Info » Go to the start line and press ~k~~VEHICLE_FIREWEAPON~ to put the position #1, do the same with the position #2");
			SendClientMessage(playerid, 0xFFFF00AA, "« Info » After this you will see a dialogue to continue.");
			BuildVehPosCount = 0;
	        BuildTakeVehPos = true;
	    }
	    case 605:
	    {
	        if(!response) return MostrarDialogo(playerid, 604);
	        SendClientMessage(playerid, 0xFFFF00AA, "« Info » It's time to put the checkpoint's, press ~k~~VEHICLE_FIREWEAPON~ to do it.");
	        SendClientMessage(playerid, 0xFFFF00AA, "« Info » When you finish placing them press ~k~~VEHICLE_ENTER_EXIT~, if it does not react press it again.");
			BuildCheckPointCount = 0;
	        BuildTakeCheckpoints = true;
	    }
	    case 606:
	    {
	        if(!response) return MostrarDialogo(playerid, 606);
	        BuildRace = 0;
   	        BuildModeVID = -1;
	        BuildCheckPointCount = 0;
	        BuildVehPosCount = 0;
	        BuildTakeCheckpoints = false;
	        BuildTakeVehPos = false;
	    }
	    case EDITOBJ_DIALOG:
	 	{
			if(response)
			{
				if(!strlen(inputtext)) return Error(playerid, "You must enter the ID");
				myzobject = strval(inputtext);
				if(IsValidObject(myzobject)) return SendClientMessage(playerid, COLOR_RED, "ERROR: Invalid Object");
				ShowPlayerDialog(playerid, EDITOBJ_DIALOG+1, DIALOG_STYLE_INPUT, "Enter Text", "Enter Text\nFor Colour use:\n {FF0000}{ FF0000 } -  Red\n{00FF00}{ 00FF00 } -  Green\n{FF9933}{ FF9933 } - Orange\n{00FF33}{ 00FF33 } - Lime Green\n{33FFFF}{ 33FFFF } - Cyan\n{FF66CC}{ FF66CC }Pink\n", "Enter", "Cancel");

			}
		}
	    case EDITOBJ_DIALOG+1:
	 	{
			if(response)
			{
	 			new Float:X, Float:Y, Float:Z, Float:Ang;
	   			GetPlayerFacingAngle(playerid, Ang);
	    		GetPlayerPos(playerid, X, Y, Z);
				if(!strlen(inputtext)) return Error(playerid, "You must enter the some text");
	  			new myrobject = CreateDynamicObject(myzobject,  X+3, Y, Z+1, 0.0, 0.0, Ang); //create the object

				SetDynamicObjectMaterialText(myrobject, 0, inputtext, OBJECT_MATERIAL_SIZE_256x128, "Arial", 28, 1, COLOR_RED, 0xFF000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				format(str, sizeof(str), "The Object is been created with ID %d", myrobject);  //-> The number is 42.
				SendClientMessage(playerid, COLOR_RED, str);
			}
		}
		case DIALOG_BUY_BUSINESS:
	    {
	        if(!response) return 1;
			new id = GetPVarInt(playerid, "PickupBusinessID");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, BusinessData[id][BusinessX], BusinessData[id][BusinessY], BusinessData[id][BusinessZ])) return Error(playerid, "You're not near a business.");
			if(BusinessData[id][Price] > GetPlayerMoney(playerid)) return Error(playerid, "You can't afford this business.");
			#if LIMIT_PER_PLAYER > 0
			if(Player_BusinessCount(playerid) + 1 > LIMIT_PER_PLAYER) return  Error(playerid, "You can't buy any more businesses.");
			#endif
			if(strcmp(BusinessData[id][Owner], "-")) return Error(playerid, "Someone already owns this business.");
			GivePlayerCash(playerid, -BusinessData[id][Price]);
			GetPlayerName(playerid, BusinessData[id][Owner], MAX_PLAYER_NAME);
			BusinessData[id][LastVisited] = gettime();
			BusinessData[id][Save] = true;
			format(str, sizeof(str), ""LB_E"UFF "WHITEP_E"%s(%d) has purchased business id %d for "LG_E"$"WHITEP_E"%s!", pName[playerid], playerid, id, convertNumber(BusinessData[id][Price]));
			SendClientMessageToAll(COLOR_WHITEP, str);

			format(query, sizeof(query), "UPDATE business SET  Owner='%s' WHERE ID='%d'", pName[playerid], id);
			MySQL_updateQuery(query);
			if(pAch29[playerid] == 0)
			{
				pAch29[playerid] = 1;
				format(query, sizeof(query), "UPDATE achievements SET a29=1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
				GivePlayerAchievement(playerid, "Business Man", "Congrats you have purchased a businesss!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
			}
			Business_UpdateLabel(id);
			Business_RemoveSafeLogs(id);
			Business_RemovePerms(id);
			Player_GoToBusiness(playerid, id);
			return 1;
		}
		case DIALOG_BUY_BUSINESS_FROM_OWNER:
	    {
	        if(!response) return 1;
			new id = GetPVarInt(playerid, "PickupBusinessID");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, BusinessData[id][BusinessX], BusinessData[id][BusinessY], BusinessData[id][BusinessZ])) return Error(playerid, "You're not near a business.");
			if(BusinessData[id][SalePrice] > GetPlayerMoney(playerid)) return Error(playerid, "You can't afford this business.");
			#if LIMIT_PER_PLAYER > 0
			if(Player_BusinessCount(playerid) + 1 > LIMIT_PER_PLAYER) return Error(playerid, "You can't buy any more businesses.");
			#endif
            if(!strcmp(BusinessData[id][Owner], "-")) return Error(playerid, "This business doesn't have an owner.");
   			new ownerid = Business_GetOwnerID(id);

			if(IsPlayerConnected(ownerid)) {
   				GivePlayerCash(ownerid, BusinessData[id][SalePrice]);

				new string[128];
   				format(string, sizeof(string), ""UFF" %s(%d) has bought your business for $%s .", Player_GetName(playerid), playerid, convertNumber(BusinessData[id][SalePrice]));
				SendClientMessage(ownerid, -1, string);
			}else{
			    new query[128];
			    mysql_format(BusinessSQL, query, sizeof(query), "INSERT INTO business_transactions SET OldOwner='%e', NewOwner='%e', Amount=%d", BusinessData[id][Owner], Player_GetName(playerid), BusinessData[id][SalePrice]);
			    mysql_tquery(BusinessSQL, query, "", "");
			}
			GivePlayerCash(playerid, -BusinessData[id][SalePrice]);
            GetPlayerName(playerid, BusinessData[id][Owner], MAX_PLAYER_NAME);
			BusinessData[id][LastVisited] = gettime();
			BusinessData[id][SalePrice] = 0;
			BusinessData[id][Closed] = 0;
			BusinessData[id][Save] = true;

            Business_UpdateLabel(id);
			Business_RemoveSafeLogs(id);
            Business_RemovePerms(id);
			Player_GoToBusiness(playerid, id);
			return 1;
		}

		case DIALOG_MANAGE_BUSINESS:
		{
		    if(!response) return 1;
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    new string[128], id = InBusiness[playerid];
		    if(listitem == 0)
		    {
		        // Business Name
		        if(!Player_OwnsBusiness(playerid, id)) return Error(playerid, "You don't own this business.");
		        format(string, sizeof(string), "Current Business Name: %s\n\n{FFFFFF}Write your new business name:", BusinessData[ InBusiness[playerid] ][Name]);
		        ShowPlayerDialog(playerid, DIALOG_MANAGE_BUSINESS_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Name", string, "Change", "Cancel");
		    }

		    if(listitem == 1)
		    {
		        // Business Status
		        if(!Player_OwnsBusiness(playerid, id)) return Error(playerid, "You don't own this business.");
		        BusinessData[id][Closed] = !BusinessData[id][Closed];
				BusinessData[id][Save] = true;
		        Business_UpdateLabel(id);
		        Player_ShowBusinessMenu(playerid);
		    }

		    if(listitem == 2)
			{
                if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
				Player_ShowPermissionMenu(playerid);
			}

		    if(listitem == 3)
			{
			    if(BusinessData[id][SalePrice] > 0) return Error(playerid, "You can't use the safe while the business is on sale.");
			    if(!Player_CheckPermission(playerid, id, PERM_CAN_USE_SAFE)) return Error(playerid, ""UFF" You don't have enough permissions.");
				Player_ShowBusinessSafe(playerid);
			}

			if(listitem == 4)
			{
			    if(!Player_OwnsBusiness(playerid, id)) return Error(playerid, "You don't own this business.");
				Player_ShowBusinessSale(playerid);
			}

		    return 1;
		}

		case DIALOG_MANAGE_BUSINESS_NAME:
		{
		    if(!response) return Player_ShowBusinessMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    if(!(1 <= strlen(inputtext) <= MAX_BUSINESS_NAME)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_BUSINESS_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Name", "{E74C3C}[ERROR] {FFFFFF}The business name you entered is either too short or too long.", "Change", "Cancel");
			new id = InBusiness[playerid];
			format(BusinessData[id][Name], MAX_BUSINESS_NAME, "%s", inputtext);
        	BusinessData[id][Save] = true;

        	Business_UpdateLabel(id);
			Player_ShowBusinessMenu(playerid);
		    return 1;
		}

        case DIALOG_MANAGE_BUSINESS_SAFE:
		{
		    if(!response) return Player_ShowBusinessMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(BusinessData[ InBusiness[playerid] ][SalePrice] > 0) return Error(playerid, "You can't use the safe while the business is on sale.");
		    if(!Player_CheckPermission(playerid, InBusiness[playerid], PERM_CAN_USE_SAFE)) return Error(playerid, "You don't have enough permissions.");
		    new string[128], id = InBusiness[playerid];
			if(listitem == 0)
			{
			    if(!Player_CheckPermission(playerid, InBusiness[playerid], PERM_CAN_DEPOSIT)) return Error(playerid, "You can't deposit money to this business.");
				format(string, sizeof(string), "Your Money: {2ECC71}$%s\n\n{FFFFFF}Write the amount you want to deposit:", convertNumber(GetPlayerMoney(playerid)));
				ShowPlayerDialog(playerid, DIALOG_MANAGE_DEPOSIT_TO_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Deposit", string, "Deposit", "Cancel");
			}

			if(listitem == 1)
			{
			    if(!Player_CheckPermission(playerid, InBusiness[playerid], PERM_CAN_TAKE)) return Error(playerid, "You can't take money from this business.");
			    format(string, sizeof(string), "Business's Money: {2ECC71}$%s\n\n{FFFFFF}Write the amount you want to take:", convertNumber(BusinessData[id][Money]));
				ShowPlayerDialog(playerid, DIALOG_MANAGE_TAKE_FROM_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Take", string, "Take", "Cancel");
			}

			if(listitem == 2)
			{
			    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
			    ListPage[playerid] = 0;
				Player_ShowSafeLogs(playerid);
			}

			if(listitem == 3)
			{
			    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
				Business_RemoveSafeLogs(id);
				Player_ShowBusinessSafe(playerid);
			}

		    return 1;
		}

		case DIALOG_MANAGE_DEPOSIT_TO_SAFE:
		{
      		if(!response) return Player_ShowBusinessSafe(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(BusinessData[ InBusiness[playerid] ][SalePrice] > 0) return Error(playerid, "You can't use the safe while the business is on sale.");
		    if(!Player_CheckPermission(playerid, InBusiness[playerid], PERM_CAN_DEPOSIT)) return Error(playerid, "You can't deposit money to this business.");
      		if(!(1 <= strval(inputtext) <= 100000000)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_DEPOSIT_TO_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Deposit", "{E74C3C}[ERROR] {FFFFFF}You can't deposit less than $1 or more than $100.000.000 at once.", "Deposit", "Cancel");
			if(strval(inputtext) > GetPlayerMoney(playerid)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_DEPOSIT_TO_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Deposit", "{E74C3C}[ERROR] {FFFFFF}You don't have that much money on you.", "Deposit", "Cancel");
			new id = InBusiness[playerid], amount = strval(inputtext);
			GivePlayerCash(playerid, -amount);
			BusinessData[id][Money] += amount;
        	BusinessData[id][Save] = true;

            new query[144];
			mysql_format(BusinessSQL, query, sizeof(query), "INSERT INTO business_safelogs SET Name='%e', BusinessID=%d, Amount='%d', Date=UNIX_TIMESTAMP()", Player_GetName(playerid), id, amount);
			mysql_tquery(BusinessSQL, query, "", "");
			Player_ShowBusinessSafe(playerid);
		    return 1;
		}

		case DIALOG_MANAGE_TAKE_FROM_SAFE:
		{
      		if(!response) return Player_ShowBusinessSafe(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(BusinessData[ InBusiness[playerid] ][SalePrice] > 0) return Error(playerid, "You can't use the safe while the business is on sale.");
		    if(!Player_CheckPermission(playerid, InBusiness[playerid], PERM_CAN_TAKE)) return Error(playerid, "You can't take money from this business.");
      		if(!(1 <= strval(inputtext) <= 100000000)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_TAKE_FROM_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Take", "{E74C3C}[ERROR] {FFFFFF}You can't take less than $1 or more than $100.000.000 at once.", "Take", "Cancel");
			if(strval(inputtext) > BusinessData[ InBusiness[playerid] ][Money]) return ShowPlayerDialog(playerid, DIALOG_MANAGE_TAKE_FROM_SAFE, DIALOG_STYLE_INPUT, ""UFF" Business Safe: Take", "{E74C3C}[ERROR] {FFFFFF}This business don't have that much money.", "Take", "Cancel");
			new id = InBusiness[playerid], amount = strval(inputtext);
			GivePlayerCash(playerid, amount);
			BusinessData[id][Money] -= amount;
        	BusinessData[id][Save] = true;

			new query[144];
			mysql_format(BusinessSQL, query, sizeof(query), "INSERT INTO business_safelogs SET Name='%e', BusinessID=%d, Amount='%d', Date=UNIX_TIMESTAMP()", Player_GetName(playerid), id, -amount);
			mysql_tquery(BusinessSQL, query, "", "");
			Player_ShowBusinessSafe(playerid);
		    return 1;
		}

		case DIALOG_MANAGE_SELL:
		{
			if(!response) return Player_ShowBusinessMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    new id = InBusiness[playerid];
			if(listitem == 0)
			{
			    new price = floatround(BusinessData[id][Price] * 0.85), string[128];
			    format(string, sizeof(string), ""UFF" You sold your business for $%s. You also got the $%s in the safe.", convertNumber(price), convertNumber(BusinessData[id][Money]));
			    SendClientMessage(playerid, -1, string);

			    GivePlayerCash(playerid, price + BusinessData[id][Money]);
			    Business_Reset(id);
			}

			if(listitem == 1)
			{
				if(BusinessData[id][SalePrice] > 0) {
				    BusinessData[id][SalePrice] = 0;
				    BusinessData[id][Save] = true;

				    Business_UpdateLabel(id);
				    SendClientMessage(playerid, -1, ""UFF" Your business is no longer for sale.");
				}else{
					if(BusinessData[id][Money] > 0) return Error(playerid, "You can't put your business on sale if there's money in the business safe.");
					ShowPlayerDialog(playerid, DIALOG_MANAGE_SELL_TO_PLAYERS, DIALOG_STYLE_INPUT, ""UFF" Business Management: Sell", "How much do you want for your business?", "Put On Sale", "Cancel");
				}
			}

			return 1;
		}

		case DIALOG_MANAGE_SELL_TO_PLAYERS:
		{
      		if(!response) return Player_ShowBusinessSale(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    if(!(1 <= strval(inputtext) <= 100000000)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_SELL_TO_PLAYERS, DIALOG_STYLE_INPUT, ""UFF" Business Management: Sell", "{E74C3C}[ERROR] {FFFFFF}You can't put your business on sale for less than $1 or more than $100.000.000.", "Put On Sale", "Cancel");
			new id = InBusiness[playerid], string[128];
			BusinessData[id][SalePrice] = strval(inputtext);
        	BusinessData[id][Save] = true;

			Business_UpdateLabel(id);
			format(string, sizeof(string), ""UFF" You put your business on sale for $%s.", convertNumber(strval(inputtext)));
			SendClientMessage(playerid, -1, string);
		    return 1;
		}

		case DIALOG_MANAGE_PERMISSIONS:
		{
			if(!response) return Player_ShowBusinessMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
			new id = InBusiness[playerid];
			if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Give Permission", "Write the player's name:", "Continue", "Cancel");
			if(listitem == 1)
			{
			    new string[1256], query[128], name[MAX_PLAYER_NAME], Cache: find_perms;
			    format(string, sizeof(string), "ID\tName\tCan Deposit\tCan Take\n");
				mysql_format(BusinessSQL, query, sizeof(query), "SELECT * FROM business_perms WHERE BusinessID=%d ORDER BY Name ASC", id);
				find_perms = mysql_query(BusinessSQL, query);
				new rows = cache_num_rows();
				if(rows > 0) {
					for(new i; i < rows; i++)
					{
					    cache_get_field_content(i, "Name", name);
						format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n", string, cache_get_field_content_int(i, "ID"), name, PermissionStates[ cache_get_field_content_int(i, "Can_Deposit") ], PermissionStates[ cache_get_field_content_int(i, "Can_Take") ]);
					}

					ShowPlayerDialog(playerid, DIALOG_MANAGE_LIST_PERMS, DIALOG_STYLE_TABLIST_HEADERS, ""UFF" Business Management: Permissions", string, "Edit", "Cancel");
				}else{
				    SendClientMessage(playerid, -1, ""UFF" This business has no players with permissions.");
				}

				cache_delete(find_perms);
			}

			if(listitem == 2)
			{
			    Business_RemovePerms(id);
				SendClientMessage(playerid, -1, ""UFF" All permissions removed.");
			}

			return 1;
		}

		case DIALOG_MANAGE_GIVE_PERM_NAME:
		{
      		if(!response) return Player_ShowPermissionMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    if(!(1 <= strlen(inputtext) <= MAX_PLAYER_NAME)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Give Permission", "{E74C3C}[ERROR] {FFFFFF}The player name you entered is either too short or too long.", "Continue", "Cancel");
			new permid = Player_GetID(inputtext);
			if(!IsPlayerConnected(permid)) return ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Give Permission", "{E74C3C}[ERROR] {FFFFFF}You can't give permissions to offline players.", "Continue", "Cancel");
			if(playerid == permid) return ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Give Permission", "{E74C3C}[ERROR] {FFFFFF}You can't give permissions to yourself.", "Continue", "Cancel");
			if(Player_CheckAnyPermission(playerid, InBusiness[playerid])) return ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_NAME, DIALOG_STYLE_INPUT, ""UFF" Business Management: Give Permission", "{E74C3C}[ERROR] {FFFFFF}This player already has permissions, please use the \"Players With Permissions\" menu.", "Continue", "Cancel");
			SetPVarString(playerid, "Perm_GivingTo", inputtext);
			ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_DEPOSIT, DIALOG_STYLE_TABLIST_HEADERS, ""UFF" Business Management: Give Permission", "Can this player deposit money in the business safe?\nNo\nYes", "Continue", "Cancel");
		    return 1;
		}

		case DIALOG_MANAGE_GIVE_PERM_DEPOSIT:
		{
      		if(!response) return Player_ShowPermissionMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
			new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "Perm_GivingTo", name, MAX_PLAYER_NAME);
			new permid = Player_GetID(name);
			if(!IsPlayerConnected(permid)) return Player_ResetPermissionSettings(playerid, 1);
			SetPVarInt(playerid, "Perm_Deposit", listitem);
			ShowPlayerDialog(playerid, DIALOG_MANAGE_GIVE_PERM_TAKE, DIALOG_STYLE_TABLIST_HEADERS, ""UFF" Business Management: Give Permission", "Can this player take money from the business safe?\nNo\nYes", "Finish", "Cancel");
		    return 1;
		}

		case DIALOG_MANAGE_GIVE_PERM_TAKE:
		{
      		if(!response) return Player_ShowPermissionMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
			new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "Perm_GivingTo", name, MAX_PLAYER_NAME);
			new permid = Player_GetID(name);
			if(!IsPlayerConnected(permid)) return Player_ResetPermissionSettings(playerid, 1);
			new query[144];
			mysql_format(BusinessSQL, query, sizeof(query), "INSERT INTO business_perms SET Name='%e', BusinessID=%d, Can_Take=%d, Can_Deposit=%d", name, InBusiness[playerid], listitem, GetPVarInt(playerid, "Perm_Deposit"));
			mysql_tquery(BusinessSQL, query, "", "");

			format(query, sizeof(query), "Gave permissions to %s.", name);
			SendClientMessage(playerid, -1, query);
			format(query, sizeof(query), "%s can deposit money: %s.", name, PermissionStates[ GetPVarInt(playerid, "Perm_Deposit") ]);
			SendClientMessage(playerid, -1, query);
			format(query, sizeof(query), "%s can take money: %s.", name, PermissionStates[listitem]);
			SendClientMessage(playerid, -1, query);
			Player_ResetPermissionSettings(playerid);
			return 1;
		}

		case DIALOG_MANAGE_LIST_PERMS:
		{
		    if(!response) return Player_ShowPermissionMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    new permid = strval(inputtext);
		    SetPVarInt(playerid, "EditingPerm", permid);
			Player_ShowPermissionEditing(playerid);
		    return 1;
		}

		case DIALOG_MANAGE_EDIT_PERMS:
		{
		    if(!response) return Player_ShowPermissionMenu(playerid);
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    if(listitem == 0) Player_ShowPermissionEditing(playerid);
		    if(listitem == 1)
		    {
		        new query[128];
				mysql_format(BusinessSQL, query, sizeof(query), "UPDATE business_perms SET Can_Deposit = NOT Can_Deposit WHERE ID=%d", GetPVarInt(playerid, "EditingPerm"));
				mysql_tquery(BusinessSQL, query, "OnPermChange", "i", playerid);
		    }

		    if(listitem == 2)
		    {
		        new query[128];
				mysql_format(BusinessSQL, query, sizeof(query), "UPDATE business_perms SET Can_Take = NOT Can_Take WHERE ID=%d", GetPVarInt(playerid, "EditingPerm"));
				mysql_tquery(BusinessSQL, query, "OnPermChange", "i", playerid);
		    }

		    if(listitem == 3)
		    {
		        new query[64];
		        mysql_format(BusinessSQL, query, sizeof(query), "DELETE FROM business_perms WHERE ID=%d", GetPVarInt(playerid, "EditingPerm"));
				mysql_tquery(BusinessSQL, query, "OnPermRemoved", "i", playerid);
		    }

		    return 1;
		}

		case DIALOG_MANAGE_SAFE_LOGS:
		{
		    if(InBusiness[playerid] == INVALID_BUSINESS) return Error(playerid, "You're not in a business.");
		    if(!Player_OwnsBusiness(playerid, InBusiness[playerid])) return Error(playerid, "You don't own this business.");
		    if(!response) {
		        ListPage[playerid]--;
		        if(ListPage[playerid] < 0)
		        {
		            ListPage[playerid] = 0;
					Player_ShowBusinessSafe(playerid);
					return 1;
		        }
			}else{
			    ListPage[playerid]++;
			}

		    Player_ShowSafeLogs(playerid);
		    return 1;
		}

		case DIALOG_ADMIN_BUSINESS_TYPE:
		{
		    if(!response) return 1;
		    if(!IsPlayerAdmin(playerid)) return 1;
		    new id = GetPVarInt(playerid, "EditingBusinessType");
            BusinessData[id][Type] = listitem;
		    Business_UpdateLabel(id);
		    Business_Save(id);

		    new string[128];
		    format(string, sizeof(string), ""UFF" Business's type set to %s.", BusinessInteriors[listitem][InteriorName]);
		    SendClientMessage(playerid, -1, string);
		    return 1;
		}
		case 9999:
		{
		    if(response)
		    {
		        new price = GetPVarInt(playerid, "vipPrice");
		        otherid = GetPVarInt(playerid, "vipseller");

		        if(pCash[playerid] < price)
		            return Error(playerid, "You don't have enough money to complete this transaction.");


		        format(str, sizeof(str), ""UFF" "WHITE_E"You have successfully purchased your "LG_E"VIP Status "WHITE_E"for "LG_E"$%s!", ToCurrency(price));
		        SendClientMessage(playerid, COLOR_WHITE, str);

		        format(str, sizeof(str), ""UFF" "WHITE_E"You have successfully sold your "LG_E"VIP Status "WHITE_E" to %s(%d) for "LG_E"$%s!", pName[playerid], playerid, ToCurrency(price));
		        SendClientMessage(otherid, COLOR_WHITE, str);

		        GivePlayerCash(playerid, -price);
		        GivePlayerCash(otherid, price);
		        pPremium[playerid] = 1;
		        pPremium[otherid] = 0;

		        format(query, sizeof(query), "UPDATE players SET premium=1,v_expired=0 WHERE reg_id=%d", pRegID[playerid]);
		        MySQL_updateQuery(query);
		        
		        format(query, sizeof(query), "UPDATE players SET premium=0,v_expired=0,chat_color=0,id_color=0,speedboost=1.3 WHERE reg_id=%d", pRegID[otherid]);
		        MySQL_updateQuery(query);
		        
		        format(str, sizeof(str), ""UFF" "IVORY_E"%s(%i) has sold thier VIP Status to %s(%i) for $%s", pName[otherid], otherid, pName[playerid], playerid, ToCurrency(price));
		        SendClientMessageToAll(COLOR_WHITE, str);

		        DeletePVar(otherid, "sellingvip");
		        SetPVarInt(playerid, "vipseller", -1);
		        DeletePVar(playerid, "vipPrice");
		    }
		    else
		    {
		        new price = GetPVarInt(playerid, "vipPrice");
		        otherid = GetPVarInt(playerid, "vipseller");
		        
		        format(str, 128, ""UFF" "RED_E"%s(%d) has denied your offer.", pName[playerid], playerid);
		        SendClientMessage(otherid, COLOR_WHITE, str);

		        format(str, 128, ""UFF" "WHITE_E"You have denied %s's offer.", pName[otherid]);
		        SendClientMessage(playerid, COLOR_WHITE, str);

		        DeletePVar(otherid, "sellingvip");
		        SetPVarInt(playerid, "vipseller", -1);
		        DeletePVar(playerid, "vipPrice");
		    }
		    return true;
		}
 		case GC_DIALOG:
  		{
  			if(!response) return true;
  			switch(listitem)
  			{
				case 0: // Heal
				{
					if(10 > pGBs[playerid]) return Error(playerid, "You don't have enough gbs to make this transaction.");
					if(InDM[playerid] == 16 || InDM[playerid] == 18) return Error(playerid, "You can't purchase health in OneShot DM!");

					pGBs[playerid] -= 10;
					SetPlayerHealth(playerid, 100);
					SendClientMessage(playerid, COLOR_GREEN,""UFF" "GREEN_E"You have healed yourself!");
					format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d) has purchased health for 10 gbs!", pName[playerid], playerid);
					SendClientMessageToAll(COLOR_WHITEP, str);
				}
				case 1: // Armour
				{
					if(20 > pGBs[playerid]) return Error(playerid, "You don't have enough gbs to make this transaction.");
					if(InDM[playerid] == 16 || InDM[playerid] == 18) return Error(playerid, "You can't armour health in OneShot DM!");
					pGBs[playerid] -= 200;
					SetPlayerArmour(playerid, 97.0);
					SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "LG_E"Armour Purchased!");
					format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d) has purchased Armour for 20 gbs!", pName[playerid], playerid);
					SendClientMessageToAll(COLOR_WHITEP, str);
				}
				case 2: // Jetpack
				{
					if(30 > pGBs[playerid]) return Error(playerid, "You don't have enough gbs to make this transaction.");
					if(pAdmin[playerid] != 5)
					{
						if(InDM[playerid] != 0 && InDM[playerid]!=909)
						{
						    Error(playerid, "You can't spawn a jetpack in a deathmatch!");
						    return true;
						}
						if(doingStunt[playerid] != 0)
						{
						    Error(playerid, "You can't spawn a jetpack in this area!");
						    return true;
						}
					}
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
					SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "LG_E"Jetpack Purchased!");
					pGBs[playerid] -= 500;
				}
				case 3: // Name Change
				{
					if(100 > pGBs[playerid]) return Error(playerid, "You don't have enough gbs to make this transaction.");
					ShowPlayerDialog(playerid, GC_DIALOG+4, DIALOG_STYLE_INPUT, ""WHITE_E"Change Name", "Enter your new name:", "Enter", "Exit");
				}
				case 4: // Reset KDR
				{
					if(200 > pGBs[playerid]) return Error(playerid, "You don't have enough gbs to make this transaction.");
					ShowPlayerDialog(playerid, GC_DIALOG+5, DIALOG_STYLE_INPUT, ""WHITE_E"Reset KDR", ""WHITE_E"Are you sure you want to reset your kills and deaths?\n\n"RED_E"Warning: "WHITE_E"This action is irreversible!", "Continue", "Exit");
				}
				case 5: //Get 5m
				{
					ShowPlayerDialog(playerid, DIALOG_CNVRT_GBTOCASH, DIALOG_STYLE_INPUT, ""WHITE_E"Gold Block Into Money", ""WHITE_E"You can convert your gold blocks into money here.\n\n"RED_E"Info: "WHITE_E"You can only convert mininum of 100 gbs and maximum of 500 gbs", "Covert", "Exit");
				}
				
			}
			return true;
		}
		case DIALOG_CNVRT_GBTOCASH:
  		{
  			if(!response) return true;

			new cgb = -1;
			if(sscanf(inputtext, "d", cgb)) return Error(playerid,  "You should put how much gbs youu want to convert(min 100, max 500)");
			if(cgb < 100 || cgb > 500) return Error(playerid,  "Minimum is 100gbs and maximum is 500 gbs");
			if(pGBs[playerid] < cgb) return Error(playerid,  "You don't have that much gold blocks to convert it into cash.");
			GivePlayerCash(playerid, cgb*1000+10000);
			format(str, sizeof(str), ""WHITE_E"["YELLOW_E"UFF"WHITE_E"] You have converted %d gold blocks and received $%d money.", cgb, cgb*1000+10000);
			SendClientMessage(playerid, COLOR_WHITE, str);
			pGBs[playerid] -= cgb;
			return true;
		}
		case GC_DIALOG+2:
  		{
  			if(!response) return true;

			if(!(2 < strlen(inputtext) < 30))
			{
				Error(playerid, "Please insert a valid country! Must be between 3-30 characters.");
				ShowPlayerDialog(playerid, GC_DIALOG+2, DIALOG_STYLE_INPUT, ""WHITE_E"Change country", "Enter your new country name(can be viewed in /stats):", "Enter", "Exit");
				return true;
			}
			if(strfind(inputtext, "%", true) != -1)
			{
				Error(playerid, "Invalid characters in country!");
				ShowPlayerDialog(playerid, GC_DIALOG+2, DIALOG_STYLE_INPUT, ""WHITE_E"Change country", "Enter your new country name(can be viewed in /stats):", "Enter", "Exit");
  				return true;
	  		}
			new escaped_count[30];
			mysql_real_escape_string(inputtext, escaped_count);
			format(query, sizeof(query), "UPDATE players SET country='%s' WHERE reg_id=%d", escaped_count, pRegID[playerid]);
			MySQL_updateQuery(query);
			pCountry[playerid] = escaped_count;
			format(str, sizeof(str), ""UFF" "YELLOW_E"Your country has been set to '"LB2_E"%s"YELLOW_E"'!", escaped_count);
			SendClientMessage(playerid, COLOR_YELLOW, str);
			format(str, sizeof(str), "~w~Country changed to ~b~~h~%s", escaped_count);
			InfoTD_MSG(playerid, 4000, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has changed his country to %s.", pName[playerid], playerid, escaped_count);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d) has bought a country name change for 20 gbs!", pName[playerid], playerid);
			SendClientMessageToAll(COLOR_WHITEP, str);
			pGBs[playerid] -= 200;
			return true;
		}
		case GC_DIALOG+3:
  		{
  			if(response)
		  	{
				new gbs = GetPVarInt(playerid, "gcAmount");
				new price = GetPVarInt(playerid, "gcPrice");
				otherid = GetPVarInt(playerid, "gbseller");

				if(pCash[playerid] < price)
					return Error(playerid, "You don't have enough money to complete this transaction.");

				if(pGBs[otherid] < gbs)
					return Error(playerid, "The seller doesnt have enough gbs to complete this transaction");

				format(str, sizeof(str), ""UFF" "WHITE_E"You have successfully purchased "LG_E"%d "WHITE_E"gbs for "LG_E"$%s!", gbs, ToCurrency(price));
				SendClientMessage(playerid, COLOR_WHITE, str);

				format(str, sizeof(str), ""UFF" "WHITE_E"You have successfully sold "LG_E"%d "WHITE_E"gbs to %s(%d) for "LG_E"$%s!", gbs, pName[playerid], playerid, ToCurrency(price));
				SendClientMessage(otherid, COLOR_WHITE, str);

				pGBs[playerid] += gbs;
			 	pGBs[otherid] -= gbs;
			 	GivePlayerCash(playerid, -price);
			 	GivePlayerCash(otherid, price);
			 	
                format(str, sizeof(str), "~g~~h~~h~-$%d~n~~w~+%d gbs", price, gbs);
	            MSTD_MSG(playerid, 3500, str);
	            
	            format(str, sizeof(str), "~g~~h~~h~+$%d~n~~r~-%d gbs", price, gbs);
	            MSTD_MSG(otherid, 3500, str);
	            
				DeletePVar(otherid, "sellinggbs");
				SetPVarInt(playerid, "gbseller", -1);
				DeletePVar(playerid, "gcAmount");
				DeletePVar(playerid, "gcPrice");
			}
			else
			{
			    cmd_deny(playerid);
			}
			return true;
		}
		case GC_DIALOG+4: // Name Change
  		{
  			if(response)
			{
			    if(strlen(inputtext) < 4) return Error(playerid, "New name can't be shorter than 4 characters!"),  ShowPlayerDialog(playerid, GC_DIALOG+4, DIALOG_STYLE_INPUT, ""WHITE_E"Change Name", "Enter your new name:", "Enter", "Exit");
				if(strlen(inputtext) > 20) return Error(playerid, "New name can't be longer than 20 characters!"),  ShowPlayerDialog(playerid, GC_DIALOG+4, DIALOG_STYLE_INPUT, ""WHITE_E"Change Name", "Enter your new name:", "Enter", "Exit");
				if(!IsValidName(inputtext))
				{
					Error(playerid, "Name contains invalid characters, please doublecheck!");
					ShowPlayerDialog(playerid, GC_DIALOG+4, DIALOG_STYLE_INPUT, ""WHITE_E"Change Name", "Enter your new name:", "Enter", "Exit");
					return 1;
 				}
                pGBs[playerid] -= 100;
				format(query, sizeof(query), "SELECT name FROM players WHERE name='%s'", inputtext);
			 	MySQL_query(query, true, "ChangePlayerName_cShop", "is", playerid, inputtext);
			}
		}
		case GC_DIALOG+5: // KDR Reset
  		{
  			if(!response) return true;
  			format(query, sizeof(query), "UPDATE players SET kills=0,deaths=0 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			pInfo[playerid][pKills] = 0;
			pInfo[playerid][pDeaths] = 0;

			format(str, sizeof(str), "4Server:3 %s(%i) has reset his kills and deaths for 1500 gbs", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d) has bought a KDR Reset for 1500 gbs!", pName[playerid], playerid);
			SendClientMessageToAll(COLOR_WHITEP, str);
			pGBs[playerid] -= 200;

			InfoTD_MSG(playerid, 4000, "~g~~h~KDR Reset!");
			SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"Your have successfully reset your kills and deaths!");
   		}
   		case D_MFORP2:
		{
			if(response)
			{
				new igr = strval(inputtext);
				if(igr != INVALID_PLAYER_ID)
				{
				StopAudioStreamForPlayer(igr);
				}
			}
		}
		case D_MFORALL1:
		{
			foreach(Player, i)
		 	{
				StopAudioStreamForPlayer(i);
		 	}
		}
		case D_MFORP1:
		{
			if(response)
			{
				new igr = strval(inputtext);
				if(igr != INVALID_PLAYER_ID)
				{
				 if(pInfo[igr][pHearSong] == 1)
				 {
				   format(str, sizeof(str), "%s", link1);
				   PlayAudioStreamForPlayer(igr, str);
				 }
				}
			}
		}

		case D_MFORP:
		{
			if(response)
			{
			ShowPlayerDialog(playerid, D_MFORP1, DIALOG_STYLE_INPUT, "For player", "Type the ID of the player.", "Select", "Cancel");
			strmid(link1,inputtext, 0, strlen(inputtext), 255);
			}
		}

		case D_MPOS1:
		{
			new radius = strlen(inputtext);
		 	new Float:X, Float:Y, Float:Z;
		  	GetPlayerPos(playerid, X, Y, Z);
			format(str, sizeof(str), "%s", link);
			PlayAudioStreamForPlayer(playerid, str, X, Y, Z, radius, 1);
		}

		case D_MPOS:
		{
			strmid(link,inputtext, 0, strlen(inputtext), 255);
			ShowPlayerDialog(playerid, D_MPOS1, DIALOG_STYLE_INPUT, "Position", "Enter the radius in the blank.", "Select", "Cancel");
		}

		case D_MFORSELF:
		{
			format(str, sizeof(str), "%s", inputtext);
			PlayAudioStreamForPlayer(playerid, str);
		}

		case D_MFORALL:
		{
			foreach(Player, i)
			{
			   if(pInfo[i][pHearSong] == 1)
			   {
				format(str, sizeof(str), "%s", inputtext);
				PlayAudioStreamForPlayer(i, str);
			   }
			}
		}

		case D_MUSIC:
		{
			if(response)
			{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, D_MFORALL, DIALOG_STYLE_INPUT, "For all players", "Paste the link of the song, it must be .mp3 !", "Select", "Cancel");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, D_MFORSELF, DIALOG_STYLE_INPUT, "For yourself", "Paste the link of the song, it must be .mp3 !", "Select", "Cancel");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, D_MPOS, DIALOG_STYLE_INPUT, "Position (radius)", "Paste the link of the song, it must be .mp3 !", "Select", "Cancel");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, D_MFORP, DIALOG_STYLE_INPUT, "For player", "Paste the link of the song, it must be .mp3 !", "Select", "Cancel");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, D_MFORALL1, DIALOG_STYLE_MSGBOX, "For everyone", "Choose 'Yes' if you want to stop, or choose 'No' co cancel.", "Yes", "No");
			}
			if(listitem == 5)
			{
				ShowPlayerDialog(playerid, D_MFORP2, DIALOG_STYLE_INPUT, "For player", "Type the ID of player you want to stop audio stream.", "Yes", "No");
			}
			}
		}
   		case MUSIC:
  		{
  			if(!response) return true;
  			format(tmp, sizeof(tmp), "%s", inputtext);
	        foreach(Player, ii)
	        {
	           if(pInfo[ii][pHearSong] == 1)
	           {
			        if(GetPVarType(ii, "MusicDisabled") == 0)
			        {
				      PlayAudioStreamForPlayer(ii, tmp);
				      SendClientMessage(ii, COLOR_BLUE, "An Administrator has started an audio stream!");
			        }
			    }
			}
		}
		case HOUSE_ENTER_PASSWORD:
  		{
  			if(!response) return true;
  				new houseid;
			foreach(Houses, h)
			{
		 		if(IsPlayerInRangeOfPoint(playerid, 3.5, hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ]))
		   		{
		     		houseid = h;
					break;
				}
			}
			if(!houseid)
			{
			    Error(playerid, "You must be near the house you wish to enter!!");
				return true;
			}
			if(strfind(inputtext, "%", CASE_SENSETIVE) != -1 || strfind(inputtext, "~", CASE_SENSETIVE) != -1) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HPASS_CHARS2);
		 	if(strlen(inputtext) < MIN_HOUSE_PASSWORD || strlen(inputtext) > MAX_HOUSE_PASSWORD) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HPASS_LENGTH);

			if(strcmp(hInfo[houseid][HousePassword], inputtext, false) != 0)
			{
				ShowInfoBox(playerid, I_WRONG_HPASS1, hInfo[houseid][HouseOwner], inputtext);
			}
			else
			{
				ShowInfoBox(playerid, I_CORRECT_HPASS1, hInfo[houseid][HouseOwner], inputtext);
				SetPlayerHouseInterior(playerid, houseid);
			}
		}
		case 333:
  		{
        	if(response)
		  	{
		  	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
				    SetPlayerVehiclePosition(playerid, sPOS2_X[playerid], sPOS2_Y[playerid], sPOS2_Z[playerid], 0);
				}
				else SetPlayerPosFindZ(playerid, sPOS2_X[playerid], sPOS2_Y[playerid], sPOS2_Z[playerid]);
		    	format(str, sizeof(str), ""UFF" "LB_E"You have teleported to your selection position! X: %d, Y:%d, Z:%d.", sPOS2_X[playerid], sPOS2_Y[playerid], sPOS2_Z[playerid]);
		    	SendClientMessage(playerid, COLOR_LB, str);
		  	}
  		}
        case SHOOTER_VOTING_DIALOG:
  		{
  			if(!response)
		  	{
		  		ShowShooterVotingDialog(playerid);
		  		Error(playerid, "You must vote in order to participate in the shooter! Type /leave to exit the shooter");
	  			return true;
		  	}
			if(!IsShooterRunning)
			{
   				if(Iter_Contains(ShooterVoters, playerid)) return Error(playerid, "You already voted this round!");
				Iter_Add(ShooterVoters, playerid);

				switch(listitem)
    			{
    				case 1:
					{
	    				format(str, sizeof(str), ""SHOOTER" %s(%d) has voted for Bright Ground.", pName[playerid], playerid);
				    	SendShooterMessage(COLOR_WHITEP, str);
						ShooterMapVotes[0]++;
					}
					case 2:
					{
	    				format(str, sizeof(str), ""SHOOTER" %s(%d) has voted for Light Sky.", pName[playerid], playerid);
					    SendShooterMessage(COLOR_WHITEP, str);
						ShooterMapVotes[1]++;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, ""SHOOTER" Shooter is currently in progress, you will be able to vote when it's over.");
			return true;
		}
		case TDM_VOTING_DIALOG:
  		{
  			if(!response)
		  	{
		  		ShowTdmVotingDialog(playerid);
		  		Error(playerid, "You must vote in order to participate in the tdn! Type /leave to exit the tdm");
	  			return true;
		  	}
			if(!IsTdmRunning)
			{
   				if(Iter_Contains(TdmVoters, playerid)) return Error(playerid, "You already voted this round!");
				Iter_Add(TdmVoters, playerid);

				switch(listitem)
    			{
    				case 1:
					{
	    				format(str, sizeof(str), ""TDM2" %s(%d) has voted for Train.", pName[playerid], playerid);
				    	SendTdmMessage(COLOR_WHITEP, str);
						TdmMapVotes[0]++;
					}
					case 2:
					{
	    				format(str, sizeof(str), ""TDM2" %s(%d) has voted for Duel.", pName[playerid], playerid);
					    SendTdmMessage(COLOR_WHITEP, str);
						TdmMapVotes[1]++;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, ""TDM2" TDM is currently in progress, you will be able to vote when it's over.");
			return true;
		}
		case DERBY_VOTING_DIALOG:
  		{
  			if(!response)
		  	{
		  		ShowDerbyVotingDialog(playerid);
		  		Error(playerid, "You must vote in order to participate in the derby! Type /leave to exit the derby");
	  			return true;
		  	}

			if(!IsDerbyRunning)
			{
   				if(Iter_Contains(DerbyVoters, playerid)) return Error(playerid, "You already voted this round!");
				Iter_Add(DerbyVoters, playerid);

				switch(listitem)
    			{
    				case 1:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Car Madness.", pName[playerid], playerid);
				    	SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[0]++;
					}
					case 2:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Road to Sky.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[1]++;
					}
					case 3:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Road Rush.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[2]++;
					}
					case 4:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Golden Ground.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[3]++;
					}
					case 5:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Rockford.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[4]++;
					}
					case 6:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Desert.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[5]++;
					}
					case 7:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Hangout.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[6]++;
					}
					case 8:
					{
	    				format(str, sizeof(str), ""DERBY" %s(%d) has voted for Paradise.", pName[playerid], playerid);
					    SendDerbyMessage(COLOR_WHITEP, str);
						DerbyMapVotes[7]++;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, ""DERBY" Derby is currently in progress, you will be able to vote when it's over.");
			return true;
		}
		case TOPLIST_DIALOG:
		{
			if(response)
		    {
		    	switch(listitem)
		    	{
		    		case 0: cmd_topscore(playerid);
		    		case 1: cmd_topcash(playerid);
		    		case 2: cmd_topkills(playerid);
					case 3: cmd_topdeaths(playerid);
		    		case 4: cmd_toptime(playerid);
		    		case 5: cmd_topevent(playerid);
		    		case 6: cmd_topracers(playerid);
		    		case 7: cmd_topduels(playerid);
		    		case 8: cmd_topgbs(playerid);
		    		case 9: cmd_topgangs(playerid);
		    		case 10: cmd_topks(playerid);
		    		case 11: cmd_toprecs(playerid);
		    		case 12: cmd_topar(playerid);
		    		case 13: cmd_topmaths(playerid);
		    		case 14: cmd_topderby(playerid);
		    		case 15: cmd_topfallout(playerid);
		    		case 16: cmd_topshooter(playerid);
		    		case 17: cmd_topwanteds(playerid);
                }
	    	}
		}
		case DUEL_MAP_DIALOG:
        {
            new otherplayer = GetPVarInt(playerid, "duelPlayer");
            if(InDuel[otherplayer] != 0) return Error(playerid, "That player is already in a duel");

            if(otherplayer == INVALID_PLAYER_ID) return Error(playerid, "Player not connected!");
            if(cAFK[otherplayer] >= 10)
            {
                format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in AFK and can't be requested to duel!", pName[otherplayer], otherplayer);
                SendClientMessage(playerid, COLOR_GREY, str);
                return true;
            }
            if(pSpectating[otherplayer] != -1) return Error(playerid, "Player is currently spectating.");
            if(InDM[otherplayer] != 0) return Error(playerid, "Player just joined a DM, you can't duel him now!");

            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        duelLocation[playerid] = "UFF Duel Location";
                        duelLoc[playerid] = 1;
                        duelLoc[otherplayer] = 1;
                    }
                    case 1:
                    {
                        duelLocation[playerid] = "Chinatown";
                        duelLoc[playerid] = 2;
                        duelLoc[otherplayer] = 2;
                    }
                    case 2:
                    {
                        duelLocation[playerid] = "Stadium Top";
                        duelLoc[playerid] = 3;
                        duelLoc[otherplayer] = 3;
                    }
                    case 3:
                    {
                        duelLocation[playerid] = "Warehouse";
                        duelLoc[playerid] = 4;
                        duelLoc[otherplayer] = 4;
                    }
                    case 4:
                    {
                        duelLocation[playerid] = "Campsite";
                        duelLoc[playerid] = 5;
                        duelLoc[otherplayer] = 5;
                    }
                }
                SetPVarInt(playerid, "DuelPlace", listitem);
                format(tmp, sizeof(tmp), ""WHITEP_E"Duel %s(%d) -> Select Weapon (2/2):", pName[otherid], otherid);
				ShowPlayerDialog(playerid, DUEL_DIALOG, DIALOG_STYLE_LIST, tmp,
				""LB2_E"Knife\n"LB2_E"Chainsaw\n"LB2_E"Grenades\n"LB2_E"Pistol\n"LB2_E"Desert Eagle\n"LB2_E"Pumpgun\n"LB2_E"Sawn-off Shotgun\n\n"LB2_E"Combat Shotgun\n"LB2_E"UZI\n"LB2_E"MP5\n"LB2_E"AK47\n"LB2_E"TEC-9\n"LB2_E"Sniper Rifle\n"LB2_E"RPG", "Duel", "Cancel");
            }
        }
        case DUEL_DIALOG:
        {
            new otherplayer = GetPVarInt(playerid, "duelPlayer");
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        duelWeapon[playerid] = "Knife";
                        duelWeap[playerid] = 1;
                        duelWeap[otherplayer] = 1;
                    }
                    case 1:
                    {
                        duelWeapon[playerid] = "Chainsaw";
                        duelWeap[playerid] = 2;
                        duelWeap[otherplayer] = 2;
                    }
                    case 2:
                    {
                        duelWeapon[playerid] = "Grenades";
                        duelWeap[playerid] = 3;
                        duelWeap[otherplayer] = 3;
                    }
                    case 3:
                    {
                        duelWeapon[playerid] = "Pistol";
                        duelWeap[playerid] = 4;
                        duelWeap[otherplayer] = 4;
                    }
                    case 4:
                    {
                        duelWeapon[playerid] = "Desert Eagle";
                        duelWeap[playerid] = 5;
                        duelWeap[otherplayer] = 5;
                    }
                    case 5:
                    {
                        duelWeapon[playerid] = "Pumpgun";
                        duelWeap[playerid] = 6;
                        duelWeap[otherplayer] = 6;
                    }
                    case 6:
                    {
                        duelWeapon[playerid] = "Sawn-off Shotgun";
                        duelWeap[playerid] = 7;
                        duelWeap[otherplayer] = 7;
                    }
                    case 7:
                    {
                        duelWeapon[playerid] = "Combat Shotgun";
                        duelWeap[playerid] = 8;
                        duelWeap[otherplayer] = 8;
                    }
                    case 8:
                    {
                        duelWeapon[playerid] = "UZI";
                        duelWeap[playerid] = 9;
                        duelWeap[otherplayer] = 9;
                    }
                    case 9:
                    {
                        duelWeapon[playerid] = "MP5";
                        duelWeap[playerid] = 10;
                        duelWeap[otherplayer] = 10;
                    }
                    case 10:
                    {
                        duelWeapon[playerid] = "AK47";
                        duelWeap[playerid] = 11;
                        duelWeap[otherplayer] = 11;
                    }
                    case 11:
                    {
                        duelWeapon[playerid] = "TEC-9";
                        duelWeap[playerid] = 12;
                        duelWeap[otherplayer] = 12;
                    }
                    case 12:
                    {
                        duelWeapon[playerid] = "Sniper Rifle";
                        duelWeap[playerid] = 13;
                        duelWeap[otherplayer] = 13;
                    }
                    case 13:
                    {
                        duelWeapon[playerid] = "RPG";
                        duelWeap[playerid] = 14;
                        duelWeap[otherplayer] = 14;
                    }
                }

                format(line, sizeof(line), ""RED_E"%s(%d) "WHITE_E"has challenged you to a duel!\n\n"WHITE_E"Weapon: "LB2_E"%s\n"WHITE_E"Area: "LB2_E"%s\n\n"RED_E"• "WHITE_E"Click on accept to confirm to duel, or cancel to deny it.", pName[playerid], playerid, duelWeapon[playerid], duelLocation[playerid]);
                ShowPlayerDialog(otherplayer, DUEL_DIALOG+2, DIALOG_STYLE_MSGBOX, ""RED_E"DUEL", line, "Duel", "Cancel");
                format(str, sizeof(str), "~y~~h~DUEl REQUESTED~n~~w~WAIT FOR ACCEPT");
                GameTextForPlayer(playerid, str, 3500, 4);
                format(str, sizeof(str), ""DUEL""WHITE_E"%s(%d) has challenged you to a duel! "RED_E"(Weapon: %s)", pName[playerid], playerid, duelWeapon[playerid]);
                SendClientMessage(otherplayer, COLOR_YELLOW, str);
                SendClientMessage(otherplayer, COLOR_YELLOW, ""DUEL" Click on 'duel' to accept the challenge.");
                SetPVarInt(otherplayer, "duelPlayer", playerid);
                if(GetPVarInt(otherplayer, "FirstDuel") == 0)
                {
                    SendClientMessage(otherplayer, COLOR_LB, ""ORANGE_E"* "LB2_E"Use "ORANGE_E"/togduel "LB2_E"to turn off duel requests.");
                    SetPVarInt(otherplayer, "FirstDuel", 1);
                }
            }
            else
            {
                DeletePVar(playerid, "duelPlayer");
                DeletePVar(otherplayer, "duelPlayer");
                DeletePVar(playerid, "duelInvited");
            }
            return 1;
        }
        case DUEL_DIALOG+2:
		{
			new otherplayer = GetPVarInt(playerid, "duelPlayer");
			if(response)
		    {
		    	if(otherplayer == INVALID_PLAYER_ID)
        			return Error(playerid, "Player not connected!");
				if(g_DuelInProgress == 1)
					return Error(playerid, "Another duel is in progress at the moment, wait till that duel is finished!");
				if(GetPVarInt(playerid, "duelPlayer") != otherplayer)
					return Error(playerid, "Player has already cancelled the duel invite.");

				InitializeDuel(playerid, otherplayer);
		    }
		    else
		    {
		    	format(str, sizeof(str), ""UFF" "GREY_E"%s(%d) has denied your request for a duel.", pName[playerid], playerid);
		 		SendClientMessage(otherplayer, COLOR_GREY, str);
		    }
		    DeletePVar(playerid, "duelPlayer");
		    DeletePVar(otherplayer, "duelPlayer");
		   	DeletePVar(otherplayer, "duelInvited");
		   	foreach(Player, i) DeletePVar(i, "duelInvited");
   		}
   		case DUEL_DIALOG+3:
		{
			if(response)
		    {
	    		switch(listitem)
		    	{
		    	    case 0: SetPlayerPosition(playerid,2349.2058,1743.3615,20.6920,270.4367);
					case 1: SetPlayerPosition(playerid,2405.5029,1743.9111,20.6920,89.9784);
				}
     			ResetPlayerWeapons(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("unfreezePlayer", 2200, false, "i", playerid);
     			doingStunt[playerid] = 72;
     			SetPlayerVirtualWorld(playerid, 9);
   			}
		}
		case DUEL_DIALOG+4:
		{
			new player1 = GetPVarInt(playerid, "duelPlayer");
	    	new player2 = GetPVarInt(playerid, "duelPlayer2");
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        duelWeapon[player1] = "Knife";
                        duelWeap[player1] = 1;
                        duelWeap[player2] = 1;
                    }
                    case 1:
                    {
                        duelWeapon[player1] = "Chainsaw";
                        duelWeap[player1] = 2;
                        duelWeap[player2] = 2;
                    }
                    case 2:
                    {
                        duelWeapon[player1] = "Grenades";
                        duelWeap[player1] = 3;
                        duelWeap[player2] = 3;
                    }
                    case 3:
                    {
                        duelWeapon[player1] = "Pistol";
                        duelWeap[player1] = 4;
                        duelWeap[player2] = 4;
                    }
                    case 4:
                    {
                        duelWeapon[player1] = "Desert Eagle";
                        duelWeap[player1] = 5;
                        duelWeap[player2] = 5;
                    }
                    case 5:
                    {
                        duelWeapon[player1] = "Pumpgun";
                        duelWeap[player2] = 6;
                        duelWeap[player2] = 6;
                    }
                    case 6:
                    {
                        duelWeapon[player1] = "Sawn-off Shotgun";
                        duelWeap[player1] = 7;
                        duelWeap[player2] = 7;
                    }
                    case 7:
                    {
                        duelWeapon[player1] = "Combat Shotgun";
                        duelWeap[player1] = 8;
                        duelWeap[player2] = 8;
                    }
                    case 8:
                    {
                        duelWeapon[player1] = "UZI";
                        duelWeap[player1] = 9;
                        duelWeap[player2] = 9;
                    }
                    case 9:
                    {
                        duelWeapon[player1] = "MP5";
                        duelWeap[player1] = 10;
                        duelWeap[player2] = 10;
                    }
                    case 10:
                    {
                        duelWeapon[player1] = "AK47";
                        duelWeap[player1] = 11;
                        duelWeap[player2] = 11;
                    }
                    case 11:
                    {
                        duelWeapon[player1] = "TEC-9";
                        duelWeap[player1] = 12;
                        duelWeap[player2] = 12;
                    }
                    case 12:
                    {
                        duelWeapon[player1] = "Sniper Rifle";
                        duelWeap[player1] = 13;
                        duelWeap[player2] = 13;
                    }
                    case 13:
                    {
                        duelWeapon[player1] = "RPG";
                        duelWeap[player1] = 14;
                        duelWeap[player2] = 14;
                    }
                }
				if(pHidden[playerid] == 0)
					format(str, sizeof(str), ""RED_E"** "YELLOW_E"%s(%d) has forced a duel between %s(%d) and %s(%d)", pName[playerid], playerid, pName[player1], player1, pName[player2], player2);
				else
					format(str, sizeof(str), ""RED_E"** "YELLOW_E"%s(%d) and %s(%d) has been forced to duel by an Administrator.", pName[player1], player1, pName[player2], player2);
				SendClientMessageToAll(COLOR_RED, str);

		    	InitializeDuel(player1, player2);
		    }
		    DeletePVar(playerid, "duelPlayer");
		    DeletePVar(playerid, "duelPlayer2");
   		}
   		case DUEL_DIALOG+6:
        {
            if(response)
		    {
		    	new player1 = GetPVarInt(playerid, "duelPlayer");
		    	new player2 = GetPVarInt(playerid, "duelPlayer2");
                switch(listitem)
                {
                    case 0:
                    {
                        duelLocation[playerid] = "UFF Duel Location";
                        duelLoc[player1] = 1;
                        duelLoc[player2] = 1;
                    }
                    case 1:
                    {
                        duelLocation[playerid] = "Chinatown";
                        duelLoc[player1] = 2;
                        duelLoc[player2] = 2;
                    }
                }
                format(tmp, sizeof(tmp), ""WHITEP_E"Select Weapon (2/2):", pName[otherid], otherid);
                ShowPlayerDialog(playerid, DUEL_DIALOG+4, DIALOG_STYLE_LIST, tmp,
				""LB2_E"Knife\n"LB2_E"Chainsaw\n"LB2_E"Grenades\n"LB2_E"Pistol\n"LB2_E"Desert Eagle\n"LB2_E"Pumpgun\n"LB2_E"Sawn-off Shotgun\n\n"LB2_E"Combat Shotgun\n"LB2_E"UZI\n"LB2_E"MP5\n"LB2_E"AK47\n"LB2_E"TEC-9\n"LB2_E"Sniper Rifle\n"LB2_E"RPG", "Duel", "Cancel");
          }
        }
		case CARBUY_DIALOG:
		{
			if(response)
		    {
			    new lstring[2048];
   				switch(listitem)
		    	{
		        	case 0:
		        	{
						strcat(lstring, "Alpha\t\t"GREEN_E"$305000\nBanshee\t"GREEN_E"$600000\nBuffalo\t\t"GREEN_E"$450000\nBullet\t\t"GREEN_E"$960000\nCheetah\t"GREEN_E"$498000\nClub\t\t"GREEN_E"$300000\nEuros\t\t"GREEN_E"$310000\nInfernus\t"GREEN_E"$1350000\n");
						strcat(lstring, "Jester\t\t"GREEN_E"$1400000\nPhoenix\t"GREEN_E"$1000000\nSabre\t\t"GREEN_E"$500000\nSuper GT\t"GREEN_E"$600000\nTurismo\t"GREEN_E"$999000\nUranus\t\t"GREEN_E"$450000\nZR-350\t\t"GREEN_E"$450000\nElegy\t\t"GREEN_E"$800000\n\
						Flash\t\t"GREEN_E"$700000\nHotring\t\t"GREEN_E"$800000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+2, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Sport Vehicles", lstring, "Select", "Back");
					}
		        	case 1:
					{
						strcat(lstring, "BF-400\t\t"GREEN_E"$500000\nWayfarer\t"GREEN_E"$250000\nPCJ-600\t"GREEN_E"$340000\nFaggio\t\t"GREEN_E"$100000\nFreeway\t"GREEN_E"$500000\nSanchez\t"GREEN_E"$400000\nFCR-900\t"GREEN_E"$300000\nNRG-500\t"GREEN_E"$780000\nQuad\t"GREEN_E"$500000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+4, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Bikes", lstring, "Select", "Back");
		    		}
					case 2:
					{
						strcat(lstring, "Stallion\t\t"GREEN_E"$200000\nComet\t\t"GREEN_E"$400000\nFeltzer\t\t"GREEN_E"$700000\nWindsor\t"GREEN_E"$500000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+5, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Convertibles", lstring, "Select", "Back");
					}
					case 3:
					{
					    strcat(lstring, "Blade\t\t"GREEN_E"$595000\nBroadway\t"GREEN_E"$390000\nRemington\t"GREEN_E"$500000\nSavanna\t"GREEN_E"$530000\nSlamvan\t"GREEN_E"$390000\nTahoma\t\t"GREEN_E"$300000\nTornado\t"GREEN_E"$399000\nVoodoo\t\t"GREEN_E"$500000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+1, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Lowriders", lstring, "Select", "Back");
					}
					case 4:
					{
					    strcat(lstring, "Bravura\t"GREEN_E"$200000\nSentinel\t"GREEN_E"$350000\nManana\t\t"GREEN_E"$200000\nEsperanto\t"GREEN_E"$200000\nWashington\t"GREEN_E"$350000\nPremier\t"GREEN_E"$400000\nAdmiral\t\t"GREEN_E"$300000\nGlendale\t"GREEN_E"$300000\nOceanic\t"GREEN_E"$300000");
					    strcat(lstring, "\nHermes\t\t"GREEN_E"$300000\nGreenwood\t"GREEN_E"$350000\nElegant\t\t"GREEN_E"$400000\nFortune\t"GREEN_E"$500000\nClover\t\t"GREEN_E"$400000\nTampa\t\t"GREEN_E"$250000\nSunrise\t\t"GREEN_E"$450000\nSultan\t\t"GREEN_E"$550000\nMerit\t\t"GREEN_E"$400000\n\
						Blista Compact\t"GREEN_E"$400000\nStratum\t\t"GREEN_E"$350000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+3, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Casual Vehicles", lstring, "Select", "Back");
					}
					case 5:
					{
					    strcat(lstring, "Huntley\t"GREEN_E"$4000000\nLandstalker\t"GREEN_E"$300000\nBF Injection\t"GREEN_E"$650000\nMonster\t"GREEN_E"$700000\nPatriot\t\t"GREEN_E"$455000\nRancher\t"GREEN_E"$300000\nSandking\t"GREEN_E"$500000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+6, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Off Road", lstring, "Select", "Back");
					}
					case 6: // Unique Vehicles
					{
					    strcat(lstring, "Stretch\t\t"GREEN_E"$800000\nMr Whoopee\t"GREEN_E"$500000\nHotknife\t"GREEN_E"$3000000\nCaddy\t\t"GREEN_E"$100000\nCamper\t\t"GREEN_E"$400000\nVortex\t\t"GREEN_E"$700000\nHustler\t\t"GREEN_E"$500000\nKart\t\t"GREEN_E"$500000\nBloodring Banger\t"GREEN_E"$500000\nBus\t"GREEN_E"$5000000");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+10, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Unique Vehicles", lstring, "Select", "Back");
					}
					case 7: // VIP Vehicles
					{
					    strcat(lstring, "Rustler\t\t"GREEN_E"$6000000\nPolice Car\t"GREEN_E"$500000\nFBI Rancher\t"GREEN_E"$800000\nSwat Truck\t"GREEN_E"$9000000\nFireTruck\t"GREEN_E"$2000000\nMaverick\t"GREEN_E"$3000000\nPacker\t\t"GREEN_E"$800000\nHydra\t\t");
						ShowPlayerDialog(playerid, CARBUY_DIALOG+11, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "GREEN_E"VIP Vehicles", lstring, "Select", "Back");
					}
				}
			}
   			return true;
		}
		case CARBUY_DIALOG+1:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem)
  			{
				case 0: PlayerBuyVehicle(playerid, 595000, 536);
    			case 1: PlayerBuyVehicle(playerid, 390000, 575);
    			case 2: PlayerBuyVehicle(playerid, 500000, 534);
       			case 3: PlayerBuyVehicle(playerid, 350000, 567);
       			case 4: PlayerBuyVehicle(playerid, 390000, 535);
		       	case 5: PlayerBuyVehicle(playerid, 300000, 566);
		       	case 6: PlayerBuyVehicle(playerid, 399000, 576);
		       	case 7: PlayerBuyVehicle(playerid, 500000, 412);
		       	default: ShowCarBuyMenu(playerid);
     		}
			return true;
		}
		case CARBUY_DIALOG+2:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem)
  			{
     			case 0: PlayerBuyVehicle(playerid, 305000, 602);
		        case 1: PlayerBuyVehicle(playerid, 600000, 429);
		        case 2: PlayerBuyVehicle(playerid, 450000, 402);
		        case 3: PlayerBuyVehicle(playerid, 960000, 541);
		        case 4: PlayerBuyVehicle(playerid, 498000, 415);
		        case 5: PlayerBuyVehicle(playerid, 300000, 589);
		        case 6: PlayerBuyVehicle(playerid, 310000, 587);
		        case 7: PlayerBuyVehicle(playerid, 1350000, 411);
				case 8: PlayerBuyVehicle(playerid, 1400000, 559);
			   	case 9: PlayerBuyVehicle(playerid, 1000000, 603);
			   	case 10: PlayerBuyVehicle(playerid, 500000, 475);
			   	case 11: PlayerBuyVehicle(playerid, 600000, 506);
			   	case 12: PlayerBuyVehicle(playerid, 999000, 451);
			   	case 13: PlayerBuyVehicle(playerid, 450000, 558);
			   	case 14: PlayerBuyVehicle(playerid, 450000, 477);
			   	case 15: PlayerBuyVehicle(playerid, 800000, 562);
			   	case 16: PlayerBuyVehicle(playerid, 700000, 565);
			   	case 17: PlayerBuyVehicle(playerid, 800000, 502);
		   		default: ShowCarBuyMenu(playerid);
			}
			return true;
		}//401, 405, 410, 419, 421, 426, 445, 466, 467, 474, 492, 507, 526, 542, 549, 550, 560, 551
		case CARBUY_DIALOG+3:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem)
  			{
     			case 0: PlayerBuyVehicle(playerid, 200000, 401);
		        case 1: PlayerBuyVehicle(playerid, 350000, 405);
		        case 2: PlayerBuyVehicle(playerid, 200000, 410);
		        case 3: PlayerBuyVehicle(playerid, 200000, 419);
		        case 4: PlayerBuyVehicle(playerid, 350000, 421);
		        case 5: PlayerBuyVehicle(playerid, 400000, 426);
		        case 6: PlayerBuyVehicle(playerid, 300000, 445);
		        case 7: PlayerBuyVehicle(playerid, 300000, 466);
				case 8: PlayerBuyVehicle(playerid, 300000, 467);
   				case 9: PlayerBuyVehicle(playerid, 300000, 474);
   				case 10: PlayerBuyVehicle(playerid, 350000, 492);
   				case 11: PlayerBuyVehicle(playerid, 400000, 507);
		       	case 12: PlayerBuyVehicle(playerid, 500000, 526);
		       	case 13: PlayerBuyVehicle(playerid, 400000, 542);
		       	case 14: PlayerBuyVehicle(playerid, 250000, 549);
		       	case 15: PlayerBuyVehicle(playerid, 450000, 550);
		       	case 16: PlayerBuyVehicle(playerid, 550000, 560);
		       	case 17: PlayerBuyVehicle(playerid, 400000, 551);
		       	case 18: PlayerBuyVehicle(playerid, 400000, 496);
		       	case 19: PlayerBuyVehicle(playerid, 350000, 561);
    			default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+4:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem) // 581, 586, 461, 462, 463, 468, 521, 522
  			{
     			case 0: PlayerBuyVehicle(playerid, 500000, 581);
        		case 1: PlayerBuyVehicle(playerid, 250000, 586);
	        	case 2: PlayerBuyVehicle(playerid, 340000, 461);
		        case 3: PlayerBuyVehicle(playerid, 100000, 462);
		        case 4: PlayerBuyVehicle(playerid, 500000, 463);
		        case 5: PlayerBuyVehicle(playerid, 400000, 468);
		        case 6: PlayerBuyVehicle(playerid, 300000, 521);
		        case 7: PlayerBuyVehicle(playerid, 780000, 522);
		        case 8: PlayerBuyVehicle(playerid, 500000, 471);
		        default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+5:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem) // 439, 480, 533, 555
  			{
     			case 0: PlayerBuyVehicle(playerid, 200000, 439);
        		case 1: PlayerBuyVehicle(playerid, 400000, 480);
	        	case 2: PlayerBuyVehicle(playerid, 700000, 533);
		        case 3: PlayerBuyVehicle(playerid, 500000, 555);
		        default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+6:
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem)
  			{
  				case 0: PlayerBuyVehicle(playerid, 5000000, 579);
				case 1: PlayerBuyVehicle(playerid, 300000, 400);
    			case 2: PlayerBuyVehicle(playerid, 650000, 424);
       			case 3: PlayerBuyVehicle(playerid, 700000, 444);
	        	case 4: PlayerBuyVehicle(playerid, 455000, 470);
	        	case 5: PlayerBuyVehicle(playerid, 300000, 489);
		        case 6: PlayerBuyVehicle(playerid, 500000, 495);
		        default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+10: // Unique  Vehicles
		{
			if(!response) return ShowCarBuyMenu(playerid);
			switch(listitem) // 409, 423, 434, 457, 483, 539, 545, 571
			{
				case 0: PlayerBuyVehicle(playerid, 800000, 409);
    			case 1: PlayerBuyVehicle(playerid, 500000, 423);
       			case 2: PlayerBuyVehicle(playerid, 3000000, 434);
	        	case 3: PlayerBuyVehicle(playerid, 100000, 457);
		        case 4: PlayerBuyVehicle(playerid, 400000, 483);
		        case 5: PlayerBuyVehicle(playerid, 700000, 539);
		        case 6: PlayerBuyVehicle(playerid, 500000, 545);
		        case 7: PlayerBuyVehicle(playerid, 500000, 571);
		        case 8: PlayerBuyVehicle(playerid, 500000, 504);
		        case 9: PlayerBuyVehicle(playerid, 5000000, 437);
		        default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+11: // VIP  Vehicles
		{
			if(!response) return ShowCarBuyMenu(playerid);
			if(pPremium[playerid] != 1)
			{
				Error(playerid, "You must be a VIP member to purchase vehicles in this section (/vip)");
				ShowCarBuyMenu(playerid);
				return 1;
			}
			if(GetPVarInt(playerid, "tempPremium") == 1 || premiumExpired[playerid] != 0)
			{
   				Error(playerid, "You can't purchase VIP vehicles with temporary vip status!");
				return 1;
			}
			switch(listitem)
			{
				case 0: PlayerBuyVehicle(playerid, 6000000, 476);
    			case 1: PlayerBuyVehicle(playerid, 500000, 597);
       			case 2: PlayerBuyVehicle(playerid, 800000, 490);
	        	case 3: PlayerBuyVehicle(playerid, 9000000, 601);
		        case 4: PlayerBuyVehicle(playerid, 2000000, 544);
		        case 5: PlayerBuyVehicle(playerid, 3000000, 487);
		        case 6: PlayerBuyVehicle(playerid, 800000, 443);
		        case 7: PlayerBuyVehicle(playerid, 25000000, 520);
		        case 8: PlayerBuyVehicle(playerid, 25000000, 432);
		        default: ShowCarBuyMenu(playerid);
			}
			return true;
		}
		case CARBUY_DIALOG+7:
  		{
  			if(response)
		    {
				switch(listitem)
				{
	                case 0:
					{
						ChangeVehicleColor(GetPlayerVehicleID(playerid),0,0);
						PlayerInfoVeh[playerid][Color1] = 0;
        				PlayerInfoVeh[playerid][Color2] = 0;
					}
   					case 1:
		   			{
					   	ChangeVehicleColor(GetPlayerVehicleID(playerid),1,1);
					   	PlayerInfoVeh[playerid][Color1] = 1;
    					PlayerInfoVeh[playerid][Color2] = 1;
		   			}
			    	case 2:
					{
						ChangeVehicleColor(GetPlayerVehicleID(playerid),3,3);
						PlayerInfoVeh[playerid][Color1] = 3;
        				PlayerInfoVeh[playerid][Color2] = 3;
					}
			     	case 3:
				 	{
				 		ChangeVehicleColor(GetPlayerVehicleID(playerid),79,79);
				 		PlayerInfoVeh[playerid][Color1] = 79;
        				PlayerInfoVeh[playerid][Color2] = 79;
			 		}
			     	case 4:
				 	{
					 	ChangeVehicleColor(GetPlayerVehicleID(playerid),86,86);
					 	PlayerInfoVeh[playerid][Color1] = 86;
        				PlayerInfoVeh[playerid][Color2] = 86;
				 	}
			     	case 5:
				 	{
				 		ChangeVehicleColor(GetPlayerVehicleID(playerid),6,6);
				 		PlayerInfoVeh[playerid][Color1] = 6;
        				PlayerInfoVeh[playerid][Color2] = 6;
			 		}
		      		case 6:
				  	{
				  		ChangeVehicleColor(GetPlayerVehicleID(playerid),126,126);
				  		PlayerInfoVeh[playerid][Color1] = 126;
        				PlayerInfoVeh[playerid][Color2] = 126;
			  		}
					case 7:
					{
				 		ChangeVehicleColor(GetPlayerVehicleID(playerid),66,66);
				 		PlayerInfoVeh[playerid][Color1] = 66;
        				PlayerInfoVeh[playerid][Color2] = 66;
	   				}
   					case 8:
   					{
				   		ChangeVehicleColor(GetPlayerVehicleID(playerid),24,24);
				   		PlayerInfoVeh[playerid][Color1] = 24;
        				PlayerInfoVeh[playerid][Color2] = 24;
					}
        			case 9:
					{
						ChangeVehicleColor(GetPlayerVehicleID(playerid),123,123);
						PlayerInfoVeh[playerid][Color1] = 123;
        				PlayerInfoVeh[playerid][Color2] = 123;
	  				}
     			}
        		// Display Plate Dialog
        		ShowPlayerDialog(playerid, CARBUY_DIALOG+8, DIALOG_STYLE_INPUT, ""WHITE_E"UFF :: "YELLOW_E"Custom Car Plate", ""WHITE_E"Enter the number plate for your private vehicle:\nLength: 3 - 12 characters", "Finish", "");
			}
   			else ShowPlayerDialog(playerid, CARBUY_DIALOG+7, DIALOG_STYLE_LIST, ""WHITE_E"UFF :: "YELLOW_E"Custom Car Color", "Black\nWhite\nRed\nBlue\nGreen\nYellow\nPink\nBrown\nGrey\nGold", "Next", "");
		}
		case CARBUY_DIALOG+8:
  		{
  			if(response)
		    {
		    	if(!IsValidPassword(inputtext))
				{
					Error(playerid, "Plates can contain only A-Z, a-z, 0-9, _, [ ], ( )");
					ShowPlayerDialog(playerid, CARBUY_DIALOG+8, DIALOG_STYLE_INPUT, ""WHITE_E"UFF :: "YELLOW_E"Custom Car Plate", ""WHITE_E"Enter the number plate for your private vehicle:\nLength: 3 - 12 characters", "Finish", "");
					return true;
				}
				if(strlen(inputtext) > 12)
				{
					Error(playerid, "Plate has to be shorter than 12 characters!");
					ShowPlayerDialog(playerid, CARBUY_DIALOG+8, DIALOG_STYLE_INPUT, ""WHITE_E"UFF :: "YELLOW_E"Custom Car Plate", ""WHITE_E"Enter the number plate for your private vehicle:\nLength: 3 - 12 characters", "Finish", "");
					return true;
				}
				mysql_real_escape_string(inputtext, PlayerInfoVeh[playerid][Plate]);
		        CreateFinalCar(playerid);
   			}
   			else
   			{
   				Error(playerid, "You must choose a plate for your vehicle!");
   				ShowPlayerDialog(playerid, CARBUY_DIALOG+8, DIALOG_STYLE_INPUT, ""WHITE_E"UFF :: "YELLOW_E"Custom Car Plate", ""WHITE_E"Enter the number plate for your private vehicle:\nLength: 3 - 12 characters", "Finish", "");
   			}
	    }
	    case 8989:
	    {
	        if(response)
		    {
			    if(PlayerInfoVeh[playerid][Locked] == 1)
			 	{
					tmp = GREEN_E"[ON]";
				}
				else tmp = RED_E"[OFF]";

				format(line, sizeof(line), ""dot"Spawn Vehicle\n"dot"Attach Neon\n"dot"Vehicle Locked: %s\n"dot"Change Number Plate\n"dot"Change Vehicle Color\n"dot""GREY_E"Sell vehicle", tmp);
				ShowPlayerDialog(playerid, CARBUY_DIALOG+9, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Private Vehicle Menu", line, "Select", "Cancel");
		    }
		    return true;
        }
	    case CARBUY_DIALOG+9:
		{
			if(response)
		    {
   				switch(listitem)
			    {
			        case 0:
			        {
			            cmd_mypv(playerid);
           			}
					case 1:
					{
                        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						{
						   Error(playerid, "You must be the driver in a vehicle to use neon!");
						   return true;
						}
						ShowPlayerDialog(playerid, 2679, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Neon Colors","Red\nBlue\nGreen\nYellow\nWhite\nPink\nRemove Neon", "Add", "Exit");
				    }
					case 2:
					{
						cmd_lock(playerid);
						cmd_pv(playerid);
					}
					case 3:
					{
                        cmd_plate(playerid, "");
				    }
					case 4:
					{
					    cmd_cc(playerid, "");
					}
					case 5:
					{
						format(tmp, sizeof(tmp), ""WHITEP_E"Are you sure you want to sell your private vehicle for "LG_E"$%d?\n", floatround(PlayerInfoVeh[playerid][Price] / 2));
						ShowPlayerDialog(playerid, CARBUY_DIALOG+12, DIALOG_STYLE_MSGBOX, ""ORANGE_E"Sell your Vehicle", tmp, "Sell", "Cancel");
					}
				}
			}
			return true;
        }
        case CARBUY_DIALOG+12:
		{
			if(response)
			{
				MySQL_DeletePlayerVehicle(playerid);
				return true;
			}
		}
		case TOY_DIALOG:
		{
			if(response)
			{
	  			switch(listitem)
		    	{
	      			case 0: //slot 1
		        	{
						toySelected[playerid] = 0;
						if(pToys[playerid][0][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
					}
	    			case 1: //slot 2
	       			{
		        		toySelected[playerid] = 1;
						if(pToys[playerid][1][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
	      			}
		        	case 2: //slot 3
			        {
	          			toySelected[playerid] = 2;
						if(pToys[playerid][2][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
					}
	    			case 3: //slot 4
	       			{
	          			toySelected[playerid] = 3;
						if(pToys[playerid][3][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
					}
	    			case 4: //slot 5
	       			{
                        if(pPremium[playerid] == 0) return Error(playerid, "You must be a VIP to access this toy slot");
	          			toySelected[playerid] = 4;
						if(pToys[playerid][4][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
					}
					case 5: //slot 6
	       			{
                        if(pPremium[playerid] == 0) return Error(playerid, "You must be a VIP to access this toy slot");
	          			toySelected[playerid] = 5;
						if(pToys[playerid][5][toy_model] == 0)
						{
		    				ShowModelSelectionMenu(playerid, toyslist, "Select Toy", 0x00000099, 0x000000EE, 0xACCBF1FF);
						}
						else
						{
	    					ShowPlayerDialog(playerid, TOY_DIALOG + 1, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", "Edit Toy Position\nChange Bone\n"GREY_E"Remove Toy", "Select", "Cancel");
						}
					}
				}
			}
			return true;
		}
		case TOY_DIALOG + 1:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // edit
			    	{
	       				EditAttachedObject(playerid, toySelected[playerid]);
				        InfoTD_MSG(playerid, 4000, "~b~~h~You are now editing your toy.");
				    }
			    	case 1: // change bone
					{
	    				new finstring[750];

						strcat(finstring, "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight tigh\nLeft foot\nRight foot");
		    			strcat(finstring, "\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw");

						ShowPlayerDialog(playerid, TOY_DIALOG + 2, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", finstring, "Select", "Cancel");
					}
					case 2: // remove toy
					{
	    				if(IsPlayerAttachedObjectSlotUsed(playerid, toySelected[playerid]))
						{
							RemovePlayerAttachedObject(playerid, toySelected[playerid]);
						}
						pToys[playerid][toySelected[playerid]][toy_model] = 0;
						GameTextForPlayer(playerid, "~r~~h~Toy Removed~y~!", 3000, 4);
						SetPVarInt(playerid, "UpdatedToy", 1);
						TogglePlayerControllable(playerid, true);
					}
				}
			}
   			return true;
		}
		case TOY_DIALOG + 2: //change bone
		{
			if(response)
			{
	  			listitem++;
		    	pToys[playerid][toySelected[playerid]][toy_bone] = listitem;
				if(IsPlayerAttachedObjectSlotUsed(playerid, toySelected[playerid]))
				{
					RemovePlayerAttachedObject(playerid, toySelected[playerid]);
				}
				listitem = toySelected[playerid];
				SetPlayerAttachedObject(playerid,
		                listitem,
		                pToys[playerid][listitem][toy_model],
		                pToys[playerid][listitem][toy_bone],
		                pToys[playerid][listitem][toy_x],
		                pToys[playerid][listitem][toy_y],
		                pToys[playerid][listitem][toy_z],
		                pToys[playerid][listitem][toy_rx],
		                pToys[playerid][listitem][toy_ry],
		                pToys[playerid][listitem][toy_rz],
		                pToys[playerid][listitem][toy_sx],
		                pToys[playerid][listitem][toy_sy],
		                pToys[playerid][listitem][toy_sz]);
				GameTextForPlayer(playerid, "~g~~h~Bone Changed~y~!", 3000, 4);
				SetPVarInt(playerid, "UpdatedToy", 1);
			}
   			return true;
		}
		case TOY_DIALOG + 3: // Change Bone
		{
			if(response)
			{
				listitem++;
				pToys[playerid][toySelected[playerid]][toy_bone] = listitem;
				SetPlayerAttachedObject(playerid, toySelected[playerid], pToys[playerid][toySelected[playerid]][toy_model], listitem);
				EditAttachedObject(playerid, toySelected[playerid]);
				InfoTD_MSG(playerid, 5000, "~g~~h~Object Attached!~n~~w~Adjust the position than click on the save icon!");
			}
		}
		case 221:
		{
			if(response) // Main Dialog
			{
			    otherid = GetPVarInt(playerid, "achPlayer");
				DisplayAch2(playerid, otherid);
   			}
		}
		case 2980:
		{
			   cmd_news2(playerid);
		}
		case VEHICLE_CONTROL_DIALOG:
		{
			if(response) // Main Dialog
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+1, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle engine", "Do you want to start or stop your engine?", "Start", "Stop");
					case 1: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+2, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle lighs", "Do you want to enable or disable your lights?\n\nNOTE: Lights are only visible at night.", "Enable", "Disable");
					case 2: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+3, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle alarm", "Do you want to enable or disable your alarm?\n\nNOTE: The alarm will not reset itself when it's over,\nyou'll need to reset it by yourself.", "Enable", "Disable");
					case 3: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+4, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle doors", "Do you want to lock or unlock your doors?\n\nNOTE: Only you can enter the vehicle when it's locked and\nit doesn't appear to be locked for you\nhowever, it will be locked for everyone else.", "Unlock", "Lock");
					case 4: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+5, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle bonnet", "Do you want to open or close your bonnet?", "Open", "Close");
					case 5: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+6, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle boot", "Do you want to open or close your boot?", "Open", "Close");
					case 6: ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+7, DIALOG_STYLE_INPUT, ""LB_E"Set Custom Licence Plate", "Type the text you want to be shown on your licence plate below:\n\n(Minimun: 1 Char | Maximum: 12 Chars)", "Change", "Cancel");
				}
			}
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+1:
		{
			if(response)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You have started your engine.");
	           	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	            SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, doors, bonnet, boot, objective);
			}
			if(!response)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have stopped your engine.");
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	  			SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+2:
		{
	  		if(response)
			{
			    format(tmp, sizeof(tmp), "~y~~h~Vehicle: ~n~~g~lights on");
	            GameTextForPlayer(playerid, tmp, 3500, 4);
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
			}
			if(!response)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have disabled your lights.");
				format(tmp, sizeof(tmp), "~y~~h~Vehicle: ~n~~r~lights off");
	            GameTextForPlayer(playerid, tmp, 3500, 4);
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+3:
		{
	  		if(response)
			{
			    format(tmp, sizeof(tmp), "~y~~h~Vehicle: ~n~~g~alarm on");
	            GameTextForPlayer(playerid, tmp, 3500, 4);
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, 1, doors, bonnet, boot, objective);
			}
			if(!response)
			{
				format(tmp, sizeof(tmp), "~y~~h~Vehicle: ~n~~r~alarm off");
	            GameTextForPlayer(playerid, tmp, 3500, 4);
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, 0, doors, bonnet, boot, objective);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+4:
		{
	  		if(response)
			{
			    cmd_unlock(playerid);
			}
			if(!response)
			{
				cmd_lock(playerid);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+5:
		{
	  		if(response)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You have opened your bonnet.");
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 1, boot, objective);
			}
			if(!response)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have closed your bonnet.");
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 0, boot, objective);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+6:
		{
	  		if(response)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You have opened your boot.");
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 1, objective);
			}
			if(!response)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have closed your boot.");
			    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 0, objective);
			}
			cmd_vctrl(playerid);
			return 1;
		}
		case VEHICLE_CONTROL_DIALOG+7:
		{
			cmd_plate(playerid, inputtext);
	  	}
		case 4: // Register.
		{
			if(!response)
			{
				SendClientMessage(playerid, COLOR_RED, ""UFF" {DB881A}You have chosen to not register. Note that your statistics won't be saved.");
				ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITE_E"UFF", ""WHITE_E"You have chosen not to register.\n\n"RED_E"Please note:\nYour statistics won't be saved.\nYou will be limited to some features.\nYou can register at anytime using /register.\n\nEnjoy playing here at UFF!", "OK", "");
				new newname = random(500);
				format(tmp, sizeof(tmp), "%s_%d", pName[playerid], newname);
				SetPlayerName(playerid, tmp);
				GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
				pName[playerid] = PlayerName;
				GameTextForPlayer(playerid, "~r~~h~Name changed!", 3500, 4);
                InfoTD_MSG(playerid, 3000, "~r~~h~Your name has been changed for a temporary name.");
				return true;
			}
			if(!(3 < strlen(inputtext) < 18))
			{
				Error(playerid, "Please insert a valid password! Must be between 4-18 characters.");
				InfoTD_MSG(playerid, 3000, "~r~~h~Error registering!~n~~w~Invalid password length.");
				ShowRegisterDialog(playerid);
				return true;
			}
			if(!IsValidPassword(inputtext))
			{
				Error(playerid, "Password can contain only A-Z, a-z, 0-9, _, [ ], ( )");
				InfoTD_MSG(playerid, 3000, "~r~~h~Error registering!~n~~w~Invalid character(s) in password.");
				ShowRegisterDialog(playerid);
				return true;
			}
			new escaped_pw[32];
			mysql_real_escape_string(inputtext, escaped_pw);
			GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));

			format(query, sizeof(query), "SELECT reg_id,name FROM players WHERE IP='%s'", PlayerIP);
			MySQL_query(query, true, "CheckUserRegistration", "is", playerid, escaped_pw);
		}
	 	case 5: // Login.
		{
			if(!response)
			{
				Error(playerid, "This account is registered, you must login or connect with a new name!");
				new tmpstr[100];
				format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
				format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
				ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
				return true;
			}
			if(!(3 < strlen(inputtext) < 18))
			{
				Error(playerid, "Please insert a valid password! Must be between 4-18 characters.");
				new tmpstr[100];
				format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
				format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
				ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
				return true;
			}
			if(!IsValidPassword(inputtext))
			{
				Error(playerid, "Password can contain only A-Z, a-z, 0-9, _, [ ], ( )");
				InfoTD_MSG(playerid, 3000, "~r~~h~Error logging in!~n~~w~Invalid character(s) in password.");
				new tmpstr[100];
				format(tmpstr, sizeof(tmpstr), ""UFF" "WHITE_E":: Login - %s", pName[playerid]);
				format(line, sizeof(line), ""WHITE_E"Welcome to  {646464}«(-|-|{F0F0F0}Ultimate Funky Freeroam{646464}|-|-)», "YELLOW_E"%s\n\n"WHITE_E"Account: %s\n\n"WHITE_E"Enter your password below to login", pName[playerid],pName[playerid]);
				ShowPlayerDialog(playerid, 5, DIALOG_STYLE_PASSWORD, tmpstr, line , "Login", "");
				return true;
			}
			// Load User Data
			new cVar[700];
			strcat(cVar, "reg_id,pass,IP,adminlevel,hours,minutes,seconds,kills,deaths,money,score,premium,saveskin,spawnplace,seepms,gbs,events_won,races_won,MB_found,keyflip,savedvehicle,speedboost,wheels,reg_time,last_time,color,goto,autofix,god,bmoney,rtests,arrests,plate,bounce,speedo,autotune,superman,");
			strcat(cVar, "killstreak,description,duels_won,hidden,weapon_set,fallouts,country,group_id,group_rank,derby_wins,time,weather,v_expired,chat_color,hideMSGs,autoLogin,duels_off,goldblocks,Muted,Jailed,report_points,id_color,house_id,maths,takedowns,robberies,probberies,times_arrested,cop_kills,mapper,specoff,hitsound,shooter_wins,seegc,songs,VIPLOGIN,ggwins,warns,bmxs");

			// Load User Data
			new cQuery[800];
			format(cQuery, sizeof(cQuery), "SELECT %s FROM players WHERE reg_id=%d", cVar, pRegID[playerid]);
			MySQL_query(cQuery, true, "OnPlayerLoginAuth", "is", playerid, inputtext);
		}
	    case SETTINGS_DIALOG: //Settings Dialog
		{
			if(!response)
				return true;

			switch(listitem)
			{
				case 0: // SpeedBoost
  				{
  					if(speedBoost[playerid] != 0.0)
					{
						SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY_E"You have "RED_E"disabled "GREY_E"speedboosting.");
						speedBoost[playerid] = 0.0;
		    		}
					else
				 	{
				 		SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY_E"You have "GREEN_E"enabled "GREY_E"speedboosting.");
				 		Info(playerid, "Press the FIRE KEY while in a vehicle to activate it");
					    speedBoost[playerid] = 1.3;
		    		}
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					format(query, sizeof(query), "UPDATE players SET speedboost=%f WHERE reg_id=%d", speedBoost[playerid], pRegID[playerid]);
					MySQL_updateQuery(query);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 1: // Bounce
  				{
  					cmd_bounce(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 2: // Superman
  				{
  					cmd_superman(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 3: // Toggle Goto
  				{
  					cmd_toggoto(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 4: // Speedometer
  				{
  					if(!IsPlayerInAnyVehicle(playerid))
					{
						Error(playerid, "You must be in a vehicle to enable the speedometer!");
						cmd_settings(playerid); //Show Player Updated Dialog.
					  	return 1;
					}

  					cmd_speedo(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 5: // Color
  				{
  					SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "YELLOW_E"You can also set your own color using RGB values. /color <0-255> <0-255> <0-255>");
					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Colors", ""RED_E"Red\n"BLUE_E"Blue\n"WHITE_E"White\n{FFFF82}Ivory\n"PINK_E"Pink\n"YELLOW_E"Yellow\n"GREEN_E"Green\n"LB_E"Lightblue\n"GREY_E"Grey\n"ORANGE_E"Orange\n{800080}Purple\n"LG_E"Light Green\n{B0C4DE}Steelblue", "Select", "Exit");
  				}
  				case 6: // Wheels
  				{
  					ShowPlayerDialog(playerid, 504, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Wheels", ""RED_E"Random\nOffroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n"RED_E"Remove Wheels", "Apply", "Back");
  				}
  				case 7: // Weather
  				{
  					ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Change your Weather", "Insert Weather ID:", "Enter", "Default");
  				}
  				case 8: // Time
  				{
  					ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Change your Time", "Insert Time (1-24):", "Enter", "Default");
  				}
  				case 9: // SavedSkin
  				{
  					ShowPlayerDialog(playerid, 158, DIALOG_STYLE_INPUT, "Change your Skin", "Insert new Skin ID (0-299):", "Enter", "Exit");
  				}
  				case 10: // Textdraws
  				{
  					cmd_textdraws(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 11: // GODMODE
  				{
  					cmd_god(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 12: // Toggle PMS
  				{
  					cmd_togpms(playerid);
  					cmd_settings(playerid); //Show Player Updated Dialog.
  				}
  				case 13: // Weaponset
	  			{
	  			    cmd_weaponset(playerid);
		    	}
	  			case 14: // autologin
	  			{
	  			    cmd_autologin(playerid);
					cmd_settings(playerid);
				}
				case 15: //  hitsound
	  			{
	  			    cmd_hitsound(playerid);
  				}
  				case 16: // hear song
	  			{
	  			    cmd_hearsong(playerid);
					cmd_settings(playerid);
				}
				case 17: // hear song
	  			{
	  			    cmd_viploginmsg(playerid);
					cmd_settings(playerid);
				}
  				case 18: // STATS
  				{
		   			DisplayStats(playerid, playerid);
  				}
  				case 19: // CHANGE EMAIL
  				{
  					cmd_email(playerid);
  				}
  				case 20: // CHANGE PASSWORD
  				{
  					cmd_changepassword(playerid);
  				}
  				case 21: // CHANGE EMAIL
  				{
  					cmd_email(playerid);
  				}
  				case 22: // CHANGE PASSWORD
  				{
  					cmd_changepassword(playerid);
  				}
			}
		}
		case 8: //Weather
		{
			if(!response)
			{
			    SetPlayerWeather(playerid, 24);
				pWeather[playerid] = -1;
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" Your weather has been set back to the server default (24)");
				format(str, sizeof(str), "2%s(%i)1 has changed their weather to the server default weather (24)", pName[playerid], playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
				if(pLogged[playerid] == true)
				{
					format(query, sizeof(query), "UPDATE players SET weather=-1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
				}
				cmd_settings(playerid);
				return 1;
			}
		    new weatherz;
		    sscanf(inputtext, "d", weatherz);
			if(weatherz < 0 || weatherz > 50)
			{
				format(str, sizeof(str), "ERROR: "GREY2_E"%d is invalid weather ID! Please keep it within the range of 0 - 50!", weatherz);
				SendClientMessage(playerid, COLOR_RED, str);
				return true;
			}
			SetPlayerWeather(playerid, weatherz);
			pWeather[playerid] = weatherz;
			format(str, sizeof(str), ""UFF" Your weather has been set to %d", weatherz);
			SendClientMessage(playerid, COLOR_YELLOW, str);
			format(str, sizeof(str), "2%s(%i)1 has changed their weather to %d", pName[playerid], playerid, weatherz);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			if(pLogged[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE players SET weather=%d WHERE reg_id=%d", weatherz, pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			cmd_settings(playerid); //Show Player Updated Dialog.
		}
		case 9: //Time
		{
			if(!response)
			{
	 			SetPlayerTime(playerid, 10, 0);
				pTime[playerid] = -1;
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" Your time has been set back to the server default (10)");
				format(str, sizeof(str), "2%s(%i)1 has changed their time to the server default time (10)", pName[playerid], playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
				if(pLogged[playerid] == true)
				{
					format(query, sizeof(query), "UPDATE players SET time=-1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
				}
				cmd_settings(playerid);
				return 1;
			}
			new timez;
		    sscanf(inputtext, "d", timez);
			if(timez > 24 || timez < 0)
			{
				format(str, sizeof(str), "ERROR: "GREY2_E"%d is invalid hour! Please keep it within range of 0 - 24!", timez);
				SendClientMessage(playerid, COLOR_RED, str);
				return true;
			}
			SetPlayerTime(playerid, timez, 0);
			pTime[playerid] = timez;
			format(str, sizeof(str), ""UFF" Your time has been set to %d:00", timez);
			SendClientMessage(playerid, COLOR_YELLOW, str);
			format(str, sizeof(str), "2%s(%i)1 has changed their time to %d:00", pName[playerid], playerid, timez);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			if(pLogged[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE players SET time=%d WHERE reg_id=%d", timez, pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			cmd_settings(playerid); //Show Player Updated Dialog.
		}
		case 954: // /Bring Dialog
		{
			if(!response) return true;
			new teleportID = GetPVarInt(playerid, "requestedPlayer");
            if(InDM[teleportID] != 0) return Error(playerid, "You can no longer teleport to this player (Joined Deathmatch)");
		    if(doingStunt[teleportID] != 0) return Error(playerid, "You can no longer teleport to this player (Joined Minigame or Challenge)");
		    if(RaceParticipant[teleportID] == true) return Error(playerid, "You can no longer teleport to this player (Joined Race)");
			format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has teleported you to himself.", pName[teleportID], teleportID);
			SendClientMessage(playerid, COLOR_GREY, str);
			format(str, sizeof(str), ""UFF" "GREY_E"You have teleported %s(%i) to yourself.", pName[playerid], playerid);
			SendClientMessage(teleportID, COLOR_GREY, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has teleported %s(%i) to themselves", pName[teleportID], teleportID, pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			new IntID = GetPlayerInterior(teleportID);
			GetPlayerPos(teleportID, POS[0], POS[1] , POS[2]);
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(teleportID));
			if(IsPlayerInAnyVehicle(playerid))
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), POS[0], POS[1] +2, POS[2] +1);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), IntID);
			}
			else
			{
				SetPlayerPos(playerid, POS[0], POS[1] +2, POS[2] +1);
				SetPlayerInterior(playerid, IntID);
			}
			DeletePVar(playerid, "requestedPlayer");
			return true;
		}
		case 158: //Skin
		{
			if(!response)
				return cmd_settings(playerid);
			/*if(pTotalHours[playerid] < 5)
			{
				Error(playerid, "You must have at least 5 hours ingame to enable skin saving!");
				cmd_settings(playerid);
				return 1;
			}*/
			if(IsPlayerInAnyVehicle(playerid))
			{
		 		Error(playerid, "You must be on foot to change your skin!");
		 		cmd_settings(playerid);
		   		return true;
			}
		    new skinz;
		    sscanf(inputtext, "d", skinz);
			if(skinz == -1)
			{
			    skinz = GetPlayerSkin(playerid);
			}
			else
			{
			    if(!IsValidSkin(skinz))
			    {
		   	 		format(str, sizeof(str), "ERROR: "GREY2_E"%d is an invalid skin!", skinz);
			    	SendClientMessage(playerid, COLOR_RED, str);
			    	ShowPlayerDialog(playerid, 158, DIALOG_STYLE_INPUT, "Change your Skin", "Insert new Skin ID(0-311):", "Enter", "Exit");
			    	return true;
				}
			}
			if(skinz > 311)
			{
				Error(playerid, "Your skin ID cannot be beyond 311!");
				ShowPlayerDialog(playerid, 158, DIALOG_STYLE_INPUT, "Change your Skin", "Insert new Skin ID(0-311):", "Enter", "Exit");
				return 1;
			}
			if(pInfo[playerid][pSaveSkin] == skinz)
			{
			    format(str, sizeof(str), ""UFF" Your saved skin already is %d!", skinz);
				SendClientMessage(playerid, COLOR_RED, str);
				ShowPlayerDialog(playerid, 158, DIALOG_STYLE_INPUT, "Change your Skin", "Insert new Skin ID(0-311):", "Enter", "Exit");
				return true;
			}
			if(pInfo[playerid][pSaveSkin] != 999)
			{
				format(str, sizeof(str), ""UFF" Your saved skin has been changed from %d to %d.", pInfo[playerid][pSaveSkin], skinz);
		       	format(tmp, sizeof(tmp), "4Server:3 %s(%i)2 has changed their saved skin from %d to %d.", pName[playerid], playerid, pInfo[playerid][pSaveSkin], skinz);
			}
			else
			{
			    format(str, sizeof(str), ""UFF" Your saved skin has been set to %d.", skinz);
			   	format(tmp, sizeof(tmp), "4Server:3 %s(%i)2 has set their saved skin to %d.", pName[playerid], playerid, skinz);
		 	}
			SendClientMessage(playerid, COLOR_YELLOW, str);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
			SetPlayerSkin(playerid, skinz);
			pInfo[playerid][pSaveSkin] = skinz;
			format(query, sizeof(query), "UPDATE players SET saveskin=%d WHERE reg_id=%d", skinz, pRegID[playerid]);
			MySQL_updateQuery(query);
			cmd_settings(playerid); //Show Player Updated Dialog.
		}
/*		case 162: // Gcar Vehicle
		{
			if(!response)
				return cmd_gcar(playerid);
		    new gcar;
			if(!IsNumeric(inputtext))
			{
	 			gcar = GetVehicleModelIDFromName(inputtext);
			}
			else gcar = strval(inputtext);
			if(gcar < 400 || gcar > 611 )
			{
				SendClientMessage(playerid, COLOR_GREY, "You entered an invalid vehiclename!");
				ShowPlayerDialog(playerid, 162, DIALOG_STYLE_INPUT, "Insert Gang Vehicle Name/ID", "Enter the Name/ID of your prefered vehicle. This vehicle will be your gang vehcile and you will be able to spawn it using /gcar.", "Enter", "Exit");
				return 1;
			}
			switch(gcar)
			{
				case 425, 432, 447, 430, 435, 449, 450, 453, 464, 476, 520, 569, 570, 584, 590, 591, 594, 606, 607, 608, 610, 611: //
				{
		 			return Error(playerid, "You are not able to spawn this vehicle, choose another.");
		 		}
	 		}
		    mysql_real_escape_string(gcar, pGroupCar[playerid]);
			format(query, sizeof(query), "SELECT gID FROM groups WHERE gCar = '%d'", pGroupCar[playerid]);
			MySQL_query(query, true, "UpdateGCar", "ii", playerid, pGroupCar[playerid]);
		}*/
		case 37: //Tune Menu
		{
			if(!response || (vID = GetPlayerVehicleID(playerid)) == 0)
				return true;

			// Parse the ID from the inputtext
			new componentid;
			sscanf(inputtext, "p<:>d{s[36]}", componentid);

			// Since players _CAN_ send invalid data to the server here, check validity
			vv = GetVehicleModel(vID);
			AddVehicleComponent(vID, componentid);
			format(str, sizeof(str), ""UFF" "YELLOW_E"Component %d (%s) added to your %s!", componentid, componentName[componentid-1000], vehName[vv-400]);
			SendClientMessage(playerid, COLOR_GREY, str);
			if(BoughtVehicle[playerid] == true)
			{
				if(vID == PlayerVehicle[playerid])
				{
					SavePVComponents(playerid, componentid);
				}
			}
			// Now re-display this list!
			cmd_vtune(playerid);
			// Not the perfect way to do this I'm afraid!
			return true;
		}
		case 66: //Bar Menu
		{
			if(response)
			{
				switch(listitem)
    			{
					case 0: // Beer
		    		{
		    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
						SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"You have purchased Beer. Click on the fire key to take a sip!");
		    		}
		    		case 1: // Wine
		    		{
		    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
						SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"You have purchased Wine. Click on the fire key to take a sip!");
		    		}
		    		case 2: // Soda
		    		{
		    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
						SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"You have purchased Soda. Click on the fire key to take a sip!");
		    		}
		    		case 3: // Cigar
		    		{
		    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
						SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"You have purchased a Cigar. Click on the fire key to take a pull!");
		    		}

   				}
		   }
	   	}
		case 222: //Command Menu
		{
			if(response)
			{
				switch(listitem)
    			{
					case 0: // Player Commands
		    		{
			    		return cmd_pcmds(playerid);
		    		}
		    		case 1: // Vehicle Commands
		    		{
						return cmd_vcmds(playerid);
		    		}
		    		case 2: // Group Commands
		    		{
						return cmd_gangcmds(playerid);
		    		}
		    		case 3: // Premium Commands
		    		{
						return cmd_premium(playerid);
		    		}
		    		case 4: // Teleport Commands
		    		{
		    			return cmd_teles(playerid);
		    		}
    			}
			}
		}
		case 1003:
        {
		    if(response)
			{
				switch(listitem)
    			{
					case 0:
		    		{
			    		return cmd_rpg(playerid);
		    		}
		    		case 1:
		    		{
						return cmd_aminigun(playerid);
		    		}
    			}
			}
		}
		case 1002: //Gang menu
		{
			if(response)
			{
				switch(listitem)
    			{
					case 0:
		    		{
			    		return cmd_ginfo(playerid);
		    		}
		    		case 1:
		    		{
						return cmd_gmembers(playerid, "");
		    		}
		    		case 2:
		    		{
						return cmd_gcmds(playerid);
		    		}
		    		case 3:
		    		{
		    			return cmd_gangset(playerid, "");
		    		}
		    		case 4:
		    		{
		    			return cmd_gangkick(playerid, "");
		    		}
    			}
			}
		}
		case 223: //Command Menu
		{
			if(response)
			{
				new line3[2600];
				strcat(line3, ""YELLOW_E"Other Commands:\n"BLUE_E"/changename\t"RED_E"- "WHITE_E"Change your ingame nickname.\n"BLUE_E"/spawnplace\t"RED_E"- "WHITE_E"Choose your own spawn area.\n"BLUE_E"/textdraw\t"RED_E"- "WHITE_E"Enable/disable server textdraws.\n"BLUE_E"/tour\t\t"RED_E"- "WHITE_E"Get a basic tour of the server.\n"BLUE_E"/checkpms\t"RED_E"- "WHITE_E"Check your latest private messages.");
				strcat(line3, "\n"BLUE_E"/myhouse\t"RED_E"- "WHITE_E"Displays a list of your houses\n"BLUE_E"/helmet\t"RED_E"- "WHITE_E"Enable/disable bike helmet\n"BLUE_E"/admins\t"RED_E"- "WHITE_E"Displays a list of admins.\n"BLUE_E"/radio\t\t"RED_E"- "WHITE_E"Play the server's custom radio.\n"BLUE_E"/drift\t\t"RED_E"- "WHITE_E"List of drift teleports.");
				strcat(line3, "\n"BLUE_E"/dive\t\t"RED_E"- "WHITE_E"Throw yourself 500 feet.\n"BLUE_E"/irc\t\t"RED_E"- "WHITE_E"Send a message to the IRC channel.\n"BLUE_E"/ircpm\t\t"RED_E"- "WHITE_E"Send a PM to a player on the IRC channel.\n"BLUE_E"/answer\t"RED_E"- "WHITE_E"Answer a math question.\n"BLUE_E"/bug\t\t"RED_E"- "WHITE_E"Report a bug.\n"BLUE_E"/gbhelp\t"RED_E"- "WHITE_E"Information on the gbs(karma) system.");
				strcat(line3, "\n"BLUE_E"/drunklevel\t"RED_E"- "WHITE_E"Set your drunk level.\n"BLUE_E"/reclass\t"RED_E"- "WHITE_E"Force yourself back to the class selection.\n"BLUE_E"/myworld\t"RED_E"- "WHITE_E"Change your virtual world.\n"BLUE_E"/richlist\t\t"RED_E"- "WHITE_E"View the richest people currently ingame.\n"BLUE_E"/hit\t\t"RED_E"- "WHITE_E"Place a bounty on a player.");
				strcat(line3, "\n"BLUE_E"/bounties\t"RED_E"- "WHITE_E"View the players that have a hit on them.\n"BLUE_E"/ignore\t\t"RED_E"- "WHITE_E"Block a player from PMing you.\n"BLUE_E"/vpara\t\t"RED_E"- "WHITE_E"Open Vehicle parachute\n"BLUE_E"/tag\t\t"RED_E"- "WHITE_E"Set a 3D Text label above your name.");
				ShowPlayerDialog(playerid, 224, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Commands (2/2)", line3, "Back", "Exit");
			}
	 	}
	 	case 224: //Command Menu
		{
			if(response)
			{
				cmd_cmds(playerid);
			}
	 	}
		case 198: //Change password
		{
			if(response)
			{
			    if(!(3 < strlen(inputtext) < 20))
				{
					Error(playerid, "Please insert a valid password! Must be between 4-20 characters.");
					cmd_changepass(playerid);
					return true;
				}
				if(!IsValidPassword(inputtext))
				{
					Error(playerid, "Password can contain only A-Z, a-z, 0-9, _, [ ], ( )");
					cmd_changepass(playerid);
					InfoTD_MSG(playerid, 3000, "~r~~h~Error changing password!~n~~w~Invalid character(s) in password.");
					return true;
				}

    			// Escaping the string should not be necessary as we have IsValidPassword!
				format(query, sizeof(query), "SELECT reg_id FROM players WHERE reg_id=%d AND pass=SHA1('%s')", pRegID[playerid], inputtext);
				MySQL_query(query, true, "PassChange_OnPassCheck", "i", playerid);
			}
		}
		case 199: // Change password
		{
			if(response)
			{
				if(!IsValidPassword(inputtext))
				{
					Error(playerid, "Password can contain only A-Z, a-z, 0-9, _, [ ], ( )");
					ShowPlayerDialog(playerid, 199, DIALOG_STYLE_INPUT, ""WHITE_E"Change your password", "Enter your new password!\n\nAll passwords are hashed on our database.\nAll passwords are case-sensitive.\nRemember your password, you will need it for your next login.\n", "Enter", "Exit");
					InfoTD_MSG(playerid, 3000, "~r~~h~Error changing password!~n~~w~Invalid character(s) in password.");
					return true;
				}
				if(!(3 < strlen(inputtext) < 18))
				{
					Error(playerid, "Please insert a valid password! Must be between 4-18 characters.");
					ShowPlayerDialog(playerid, 199, DIALOG_STYLE_INPUT, ""WHITE_E"Change your password", "Enter your new password!\n\nAll passwords are hashed on our database.\nAll passwords are case-sensitive.\nRemember your password, you will need it for your next login.\n", "Enter", "Exit");
					return true;
				}
				new escaped_pass[42];
				mysql_real_escape_string(inputtext, escaped_pass);
				format(query, sizeof(query), "UPDATE players SET pass=SHA1('%s') WHERE reg_id=%d", escaped_pass, pRegID[playerid]);
			 	MySQL_updateQuery(query);
				format(str, sizeof(str), ""UFF" "YELLOW_E"Your password has been changed to '"LB2_E"%s'!", inputtext);
				SendClientMessage(playerid, COLOR_YELLOW, str);
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"Please note your password and remember it for your next login.");
				format(str, sizeof(str), "~w~Password changed to ~r~%s", inputtext);
				InfoTD_MSG(playerid, 3000, str);
			}
		}
		case EMAIL_DIALOG: // Change Email
		{
			if(response)
			{
				if(isnull(inputtext))
			    {
				    Error(playerid, "This field cannot be left empty, use 'exit' to close the dialog.");
					cmd_email(playerid);
				    return true;
				}
				if(!(2 < strlen(inputtext) < 40))
				{
					Error(playerid, "Please insert a valid email! Must be between 3-40 characters.");
					cmd_email(playerid);
					return true;
				}
				if(!IsValidPassword(inputtext))
				{
					Error(playerid, "Email can contain only A-Z, a-z, 0-9, _, [ ], ( )  and @");
					cmd_email(playerid);
					return true;
				}
				new escaped_email[40];
				mysql_real_escape_string(inputtext, escaped_email);
				format(query, sizeof(query), "UPDATE players SET email='%s' WHERE reg_id=%d", escaped_email, pRegID[playerid]);
			 	MySQL_updateQuery(query);
				format(str, sizeof(str), ""UFF" "YELLOW_E"Your e-mail has been set to '"LB2_E"%s"YELLOW_E"'!", escaped_email);
				SendClientMessage(playerid, COLOR_YELLOW, str);
				format(str, sizeof(str), "~w~Email changed to ~b~~h~%s", escaped_email);
				InfoTD_MSG(playerid, 4000, str);
			}
		}
		case DESCRIPTION_DIALOG: // Change Description
		{
			if(response)
			{
				cmd_status(playerid);
			}
			return 1;
		}
		case DESCRIPTION_DIALOG+1: // Change Description
		{
			if(response)
			{
				if(isnull(inputtext))
			    {
				    Error(playerid, "This field cannot be left empty, use 'exit' to close the dialog.");
					cmd_status(playerid);
				    return true;
				}
				if(strlen(inputtext) > 40)
				{
					Error(playerid, "Please insert a valid status! Must be between below 40 characters.");
					cmd_status(playerid);
					return true;
				}
				if(strfind(inputtext, "%", true) != -1)
				{
					Error(playerid, "Invalid characters in status!");
					cmd_status(playerid);
			  		return true;
			  	}
				new escaped_des[40];
				mysql_real_escape_string(inputtext, escaped_des);
				format(query, sizeof(query), "UPDATE players SET description='%s' WHERE reg_id=%d", escaped_des, pRegID[playerid]);
			 	MySQL_updateQuery(query);
			 	format(pDescription[playerid], 40, "%s", inputtext);
				format(str, sizeof(str), ""UFF" "YELLOW_E"Your status has been set to '"LB2_E"%s"YELLOW_E"'", escaped_des);
				SendClientMessage(playerid, COLOR_YELLOW, str);
			}
			return 1;

		}
		case 133: //TDM Dialog
		{
			if(doingStunt[playerid] != 0) return Error(playerid, "Teleport out of this stunt area before joining TDM!");
			if(response)
			{
				CheckDM(playerid);
				if(InDM[playerid] == 0) SavePlayerPosition(playerid);
				if(InDM[playerid] != 10)
				{
					SetPVarInt(playerid, "oldColor", GetPlayerColor(playerid));
					SetPVarInt(playerid, "dSkin", GetPlayerSkin(playerid));
				}
				if(listitem == 0) //Red Team
			    {

			    	SetPVarInt(playerid, "RedTeam", 1);
			    	//if(GetPVarInt(playerid, "RedTeam") == 1) RedCount++;
			    	SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"You have joined the Red Team!");
			    	GameTextForPlayer(playerid, "~w~You have joined the ~r~Red Team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_RED);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 8, 500); //Knife
					GivePlayerWeapon(playerid, 29, 500); //MP5
					GivePlayerWeapon(playerid, 30, 1000);
					GivePlayerWeapon(playerid, 33, 1000);
					GivePlayerWeapon(playerid, 24, 1000);
					GivePlayerWeapon(playerid, 25, 1000);
					GivePlayerWeapon(playerid, 16, 6);
					SetPlayerTeam(playerid, 1);
					switch(random(3))
					{
					case 0: SetPlayerPosition(playerid,-4447.6196,-6768.3623,16.1091,271.9799);
					case 1: SetPlayerPosition(playerid,-4448.2549,-6777.8931,17.5719,270.4132);
					case 3: SetPlayerPosition(playerid,-4449.2021,-6758.0952,17.5700,270.7266);
					}
					TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
					SetPlayerSkin(playerid, 254);
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 10;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 1);
				}
			    else if(listitem == 1) //Blue team
				{

					SetPVarInt(playerid, "BlueTeam", 1);
			    	//if(GetPVarInt(playerid, "BlueTeam") == 1) BlueCount++;
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"You have joined the Blue Team!");
					GameTextForPlayer(playerid, "~w~You have joined the ~b~Blue Team~w~!", 4000, 4);
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 8, 500); //Knife
					GivePlayerWeapon(playerid, 29, 500); //MP5
					GivePlayerWeapon(playerid, 30, 1000);
					GivePlayerWeapon(playerid, 31, 1000);
					GivePlayerWeapon(playerid, 33, 1000);
					GivePlayerWeapon(playerid, 24, 1000);
					GivePlayerWeapon(playerid, 25, 1000);
					GivePlayerWeapon(playerid, 16, 6);
					SetPlayerTeam(playerid, 2);
                	switch(random(3))
					{
					case 0: SetPlayerPosition(playerid,-4181.5200,-6772.8530,11.9720,176.0758);
					case 1: SetPlayerPosition(playerid,-4190.9971,-6783.6855,11.9720,283.2134);
					case 3: SetPlayerPosition(playerid,-4168.7339,-6752.3457,16.0720,89.8849);
					}
 					TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
					SetPlayerSkin(playerid, 285);
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 10;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 2);
				}
				if(GetPVarInt(playerid, "HideObjects"))
			 	{
			 		DeletePVar(playerid, "HideObjects");
			 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
			 	}
			 	canUseKey[playerid] = false;
				GodModeLabel(playerid, false);
				HidePlayerMSGBox(playerid);
				UpdateMinigameBox(playerid, 1, "Team deathhmatch [/TDM]");
				TDM++;
				UpdateDMText();
			}
		}
		case 135: //ccdm Dialog
		{
			if(doingStunt[playerid] != 0) return Error(playerid, "Teleport out of this stunt area before joining TDM!");
			if(response)
			{
				if(InDM[playerid] == 0) SavePlayerPosition(playerid);
				if(InDM[playerid] != 19)
				{
					SetPVarInt(playerid, "oldColor", GetPlayerColor(playerid));
					SetPVarInt(playerid, "dSkin", GetPlayerSkin(playerid));
				}
				if(listitem == 0) //Red Team
			    {

			    	SetPVarInt(playerid, "RedTeam2", 1);
			    	//if(GetPVarInt(playerid, "RedTeam") == 1) RedCount++;
			    	SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"You have joined as Terriorst!");
			    	GameTextForPlayer(playerid, "~w~You have joined the ~r~Terrorits~w~!", 4000, 4);
			    	SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E" Your duty is to plant [/plant] bomb in site B");
					SetPlayerColor(playerid, COLOR_RED);
					ResetPlayerWeapons(playerid);
                    SetPlayerTeam(playerid, terror);
					GivePlayerWeapon(playerid, 34, 99999); //
					GivePlayerWeapon(playerid, 30, 99999); //
					GivePlayerWeapon(playerid, 25, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 17, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
	  				SetPlayerPositionEx(playerid,-982.3886,2600.1868,141.2628,178.0494);
	        		TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
                    switch(random(4))
  					{
  						case 0: SetPlayerSkin(playerid, 293);
  						case 1: SetPlayerSkin(playerid, 254);
  						case 2: SetPlayerSkin(playerid, 217);
  						case 3: SetPlayerSkin(playerid, 247);
  					}
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 19;
					SetPlayerVirtualWorld(playerid, 6);
                    UpdateMinigameBox(playerid, 1, "Counter Strike DM [/csdm]");
					SetPVarInt(playerid, "inTDM", 1);
				}
			    else if(listitem == 1) //Blue team
				{

					SetPVarInt(playerid, "BlueTeam2", 1);
			    	//if(GetPVarInt(playerid, "BlueTeam") == 1) BlueCount++;
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"You have joined as Counter terrorist!");
					GameTextForPlayer(playerid, "~w~You have joined as ~b~Counter terrorist~w~!", 4000, 4);
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"Your duty is to Defuse [/defuse] the bomb in Site B");
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
                    GivePlayerWeapon(playerid, 34, 99999); //Knife
					GivePlayerWeapon(playerid, 30, 99999); //MP5
					GivePlayerWeapon(playerid, 25, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 17, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 24, 99999);
					SetPlayerTeam(playerid, CounterTerrorist);
	                SetPlayerPositionEx(playerid,-1115.6700,2544.6497,136.2628,1.3278);
					TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
                    switch(random(4))
  					{
  						case 0: SetPlayerSkin(playerid, 284);
  						case 1: SetPlayerSkin(playerid, 285);
  						case 2: SetPlayerSkin(playerid, 287);
  						case 3: SetPlayerSkin(playerid, 280);
  					}
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 19;
					SetPlayerVirtualWorld(playerid, 6);
					UpdateMinigameBox(playerid, 1, "Counter Strike DM [/csdm]");
					SetPVarInt(playerid, "inTDM", 2);
				}
				if(GetPVarInt(playerid, "HideObjects"))
			 	{
			 		DeletePVar(playerid, "HideObjects");
			 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
			 	}
			 	canUseKey[playerid] = false;
				GodModeLabel(playerid, false);
				HidePlayerMSGBox(playerid);
			}
		}
		case 134: //Siren Dialog
		{
			vID = GetPlayerVehicleID(playerid);
			vv = GetVehicleModel(vID);
			switch(listitem)
			{
				case 0:
				{
					if(Siren[playerid] == 1)
					{
						if(IsValidObject(SirenObject[playerid])) DestroyObject(SirenObject[playerid]);
					}
				 	SirenObject[playerid] = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					switch(vv)
					{
						case 411: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.765, 0.0, 0.0, 0.0); // Infernus
	 					case 451: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.65, 0.0, 0.0, 0.0); // Turismo
						case 562: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.83, 0.0, 0.0, 0.0); // Elegy
						case 558: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.92, 0.0, 0.0, 0.0); // Uranus
						case 522: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.55, 0.0, 0.0, 0.0); // NRG-500
						case 520: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.9, 0.0, 0.0, 0.0); // Hydra
						case 495: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 1.07, 0.0, 0.0, 0.0); // Sandking
						case 541: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.7, 0.0, 0.0, 0.0); // Bullet
						case 452: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 1.0, 0.0, 0.0, 0.0); // Speeder
						case 490: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 1.0, 0.0, 0.0, 0.0); // FBI Rancher
						case 489: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.55, 0.0, 0.0, 0.0); // Rancher
						case 533: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.37, 0.0, 0.0, 0.0); // Feltzer
						case 602: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.73, 0.0, 0.0, 0.0); // Alpha
						case 429: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.34, 0.0, 0.0, 0.0); // Banshee
						case 496: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.89, 0.0, 0.0, 0.0); // Blista Compact
						case 402: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.8, 0.0, 0.0, 0.0); // Buffalo
						case 415: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.62, 0.0, 0.0, 0.0); // Cheetah
						case 589: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 1.09, 0.0, 0.0, 0.0); // Club
						case 587: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.8, 0.0, 0.0, 0.0); // Euros
						case 565: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.73, 0.0, 0.0, 0.0); // Flash
						case 559: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.77, 0.0, 0.0, 0.0); // Jester
						case 603: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.7, 0.0, 0.0, 0.0); // Phoenix
						case 475: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.75, 0.0, 0.0, 0.0); // Sabre
						case 506: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.62, 0.0, 0.0, 0.0); // Super GT
						case 477: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.77, 0.0, 0.0, 0.0); // ZR-350
						case 561: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.85, -3, 0.0, 0.0); // Stratum
						case 479: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 1.0, 0.0, 0.0, 0.0); // FBI Rancher
						default: AttachObjectToVehicle(SirenObject[playerid], vID, 0.009999, -0.019999, 0.6500, 0.000000, 0.000000, 0.000000); // All Other Vehicles
					}
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "YELLOW_E"You've added police sirens to your vehicle!");
	    			Siren[playerid] = 1;
					return 1;
				}
				case 1:
				{
					if(Siren[playerid] == 1)
					{
						if(IsValidObject(SirenObject[playerid])) DestroyObject(SirenObject[playerid]);
					}
	    			Siren[playerid] = 1;
	       			SirenObject[playerid] = CreateObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
	       			switch(vv)
					{
						case 411: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, 0.0, 0.765, 0.0, -2.0, 0.0); // Infernus
						case 451: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, -0.3, 0.65, 0.0, -2.0, 0.0); // Turismo
						case 562: AttachObjectToVehicle(SirenObject[playerid], vID, -0.35, -0.25, 0.83, 0.0, -2.0, 0.0); // Elegy
						case 558: AttachObjectToVehicle(SirenObject[playerid], vID, -0.35, -0.25, 0.92, 0.0, -2.0, 0.0); // Uranus
						case 522: AttachObjectToVehicle(SirenObject[playerid], vID, 0.0, 0.65, 0.55, 0.0, 0.0, 0.0); // NRG-500
						case 520: AttachObjectToVehicle(SirenObject[playerid], vID, 0.0, 0.65, 0.9, 0.0, 0.0, 0.0); // Hydra
						case 495: AttachObjectToVehicle(SirenObject[playerid], vID, 0.0, 0.40, 1.07, 0.0, 0.0, 0.0); // Sandking
						case 541: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, 0.0, 0.7, 0.0, -2.0, 0.0); // Bullet
						case 452: AttachObjectToVehicle(SirenObject[playerid], vID, 0.0, 5.0, 1.0, 0.0, 0.0, 0.0); // Speeder
						case 490: AttachObjectToVehicle(SirenObject[playerid], vID, -0.6, 1.8, 0.6, 0.0, 0.0, 0.0); // FBI Rancher
						case 489: AttachObjectToVehicle(SirenObject[playerid], vID, -0.5, 1.2, 0.55, 0.0, 0.0, 0.0); // Rancher
						case 533: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, 1.2, 0.37, 0.0, 0.0, 0.0); // Feltzer
						case 602: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.2, 0.73, 0.0, 0.0, 0.0); // Alpha
						case 429: AttachObjectToVehicle(SirenObject[playerid], vID, -0.35, 0.7, 0.34, 0.0, 0.0, 0.0); // Banshee
						case 496: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.2, 0.89, 0.0, 0.0, 0.0); // Blista Compact
						case 402: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.4, 0.8, 0.0, 0.0, 0.0); // Buffalo
						case 415: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, -0.15, 0.64, 0.0, 0.0, 0.0); // Cheetah
						case 589: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.1, 1.09, 0.0, 0.0, 0.0); // Club
						case 587: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.35, 0.8, 0.0, 0.0, 0.0); // Euros
						case 565: AttachObjectToVehicle(SirenObject[playerid], vID, 0, 0, 0.73, 0.0, 0.0, 0.0); // Flash
						case 559: AttachObjectToVehicle(SirenObject[playerid], vID, 0, -0.1, 0.77, 0.0, 0.0, 0.0); // Jester
						case 603: AttachObjectToVehicle(SirenObject[playerid], vID, -0.35, -0.15, 0.7, 0.0, 0.0, 0.0); // Phoenix
						case 475: AttachObjectToVehicle(SirenObject[playerid], vID, -0.4, -0.15, 0.75, 0.0, 0.0, 0.0); // Sabre
						case 506: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, -0.3, 0.62, 0.0, 0.0, 0.0); // Super GT
						case 477: AttachObjectToVehicle(SirenObject[playerid], vID, -0.3, -0.3, 0.77, 0.0, 0.0, 0.0); // ZR-350
						case 561: AttachObjectToVehicle(SirenObject[playerid], vID, -0.35, 0.1, 0.85, -3, 0.0, 0.0); // Stratum
						default: AttachObjectToVehicle(SirenObject[playerid], vID, -0.43, 0.0, 0.730, 0.0, 0.1, 0.0);
					}
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "YELLOW_E"You've added undercover sirens to your vehicle!");
	          		return 1;
				}
				case 2:
				{
					if(Siren[playerid] == 0)
					{
						SendClientMessage(playerid, COLOR_RED, "This vehicle doesn't have a siren on it!");
						return 1;
					}
					Siren[playerid] = 0;
	           		if(IsValidObject(SirenObject[playerid])) DestroyObject(SirenObject[playerid]);
	               	SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"You have removed your siren.");
					return 1;
				}
			}
		}
  		case 164:
  		{
	  		if(response)
			{
				switch(listitem)
				{
					case 0: //Normal
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
						format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~Normal");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 1: //Boxing
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
						format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~boxing");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 2: //KungFu
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
						format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~Kung-Fu");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 3: //KneeHead
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
                        format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~Knee-Head");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 4: //Grabkick
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
						format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~Grab-Kick");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 5: //Elbow
					{
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
						format(tmp, sizeof(tmp), "~y~~h~Fighting Style: ~n~~w~Elbow");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
				}
			}
		}
		case 2679:
	    {
			if(response)
			{
				vID = GetPlayerVehicleID(playerid);
				vv = GetVehicleModel(vID);

				if(GetPVarType(playerid, "Neon")) // Neon
				{
					DestroyObject(NeonObject[0][playerid]);
					DestroyObject(NeonObject[1][playerid]);
				}
				switch(listitem)
				{
					case 0:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18647,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18647,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18647,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 1:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18648,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18648,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18648,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);

					}
					case 2:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18649,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18649,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18649,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 3:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18650,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18650,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18650,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 4:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18652,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18652,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18652,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 5:
					{
						SetPVarInt(playerid, "Neon", 1);
						if(IsBikeModel(vv))
						{
							NeonObject[0][playerid] = CreateObject(18651,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
						}
						else
						{
							NeonObject[0][playerid] = CreateObject(18651,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[0][playerid], vID, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
							NeonObject[1][playerid] = CreateObject(18651,0,0,0,0,0,0);
							AttachObjectToVehicle(NeonObject[1][playerid], vID, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						}
						format(tmp, sizeof(tmp), "~y~~h~Neon Attached");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
					case 6:
					{
						DeletePVar(playerid, "Neon");
					    format(tmp, sizeof(tmp), "~y~~h~Neon Removed");
                        GameTextForPlayer(playerid, tmp, 3500, 4);
					}
				}
			}
		}
		case 993:
		{
			if(response)
			{
				switch(listitem)
	    		{
					case 0:
					{
						if(GetOwnedHouses(playerid) == 0) return Error(playerid, "You do not own a house!");

						pSpawnPlace[playerid] = 1;
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "YELLOW_E"You have set your spawnpoint to your house.");
  					}
					case 1:
					{
						pSpawnPlace[playerid] = -1;
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "YELLOW_E"You have set your spawnpoint to the default random spawnpoint.");
					}
				}
				Info(playerid, "This will be your permanent spawnpoint, type /spawnplace to change it at anytime.");
				format(query, sizeof(query), "UPDATE players SET spawnplace=%d WHERE reg_id=%d", pSpawnPlace[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			return 1;
		}
		case EVENTDERBY:
	    {
	    	if(response)
            {
	   			if(DerbyEvent == 1)
				{
					if(PlayersJoined >= 30)
					{
						SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the derby, it has reached its max players!");
						return 1;
					}
					if(EventGoingOn == 0) return Error(playerid, "There is no event active!");
					if(EventStarted == 1) return Error(playerid, "The event has already started, wait for the next one!");
					DerbyPlayers ++;
					PlayersJoined ++;
					SavePlayerPosition(playerid);
					InDM[playerid] = 0;
		        	InEvent[playerid] = 1;
		        	InDerby[playerid] = 1;
		        	doingStunt[playerid] = 10;
		        	canUseKey[playerid] = false;
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 0);
					if(pPremium[playerid] == 1)
					{
						SetPlayerArmour(playerid, 50.0);
					}
					ResetPlayerWeapons(playerid); //Reset player weps for preset weps
					SetPlayerVirtualWorld(playerid, 11);
		      		SetPlayerInterior(playerid, 15);
		      		SpawnPlayerVehicle(playerid, 504, false);
					switch(PlayersJoined)
					{
		  				case 1: SetPlayerVehiclePosition(playerid, -3320.7000000,-3527.3000000,17.1000000,183.5000000);
						case 2: SetPlayerVehiclePosition(playerid, -3299.1001000,-3502.7000000,17.1000000,273.4990000);
						case 3: SetPlayerVehiclePosition(playerid, -3359.2000000,-3538.8000000,17.1000000,188.2490000);
						case 4: SetPlayerVehiclePosition(playerid, -3300.7000000,-3571.1001000,17.1000000,230.2450000);
						case 5: SetPlayerVehiclePosition(playerid, -3271.5000000,-3544.1001000,17.1000000,47.4900000);
						case 6: SetPlayerVehiclePosition(playerid, -3239.8000000,-3541.3999000,7.5000000,2.4880000);
						case 7: SetPlayerVehiclePosition(playerid, -3268.8999000,-3623.7000000,7.5000000,93.4830000);
						case 8: SetPlayerVehiclePosition(playerid, -3381.3000000,-3629.5000000,7.5000000,93.4830000);
						case 9: SetPlayerVehiclePosition(playerid, -3400.6001000,-3560.3000000,7.5000000,3.483000);
						case 10: SetPlayerVehiclePosition(playerid, -3404.8000000,-3477.1001000,7.5000000,3.4830000);
						case 11: SetPlayerVehiclePosition(playerid, -3351.3000000,-3466.3999000,7.5000000,273.4830000);
						case 12: SetPlayerVehiclePosition(playerid, -3258.7000000,-3461.5000000,7.5000000,273.4830000);
						case 13: SetPlayerVehiclePosition(playerid, -3338.3999000,-3504.5000000,7.5000000,217.4830000);
						case 14: SetPlayerVehiclePosition(playerid, -3363.1001000,-3530.5000000,7.5000000,249.4800000);
						case 15: SetPlayerVehiclePosition(playerid, -3346.5000000,-3592.0000000,7.5000000,322.9800000);
						case 16: SetPlayerVehiclePosition(playerid, -3293.5000000,-3600.3999000,7.5000000,254.9760000);
						case 17: SetPlayerVehiclePosition(playerid, -3256.0000000,-3575.0000000,7.5000000,218.9710000);
						case 18: SetPlayerVehiclePosition(playerid, -3310.3000000,-3486.6001000,7.5000000,140.9680000);
						case 19: SetPlayerVehiclePosition(playerid, -3282.6001000,-3566.5000000,7.5000000,53.7280000);
						case 20: SetPlayerVehiclePosition(playerid, -3371.2000000,-3584.3000000,7.5000000,27.7230000);

					}
					vID = GetPlayerVehicleID(playerid);
					SetVehicleVirtualWorld(vID, 11);
					SetPVarInt(playerid, "DerbyVeh", 1);
					GivePlayerWeapon(playerid, 29, 6000); //MP5
					SendClientMessage(playerid, COLOR_RED, "{F42626}[DERBY]"GREY_E" You have joined the Derby event, you must eliminate all players till your in the last vehicle standing.");
					SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"You will be frozen until the event starts.");
					format(tmp, sizeof(tmp), "2,9DERBY3 %s(%i) has entered the derby, type /je ingame to join.", pName[playerid], playerid);
		 			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
		  			if(pPremium[playerid] != 1) TogglePlayerControllable(playerid, false);
		  			GodModeLabel(playerid, false);
		  			if(GetPVarInt(playerid, "HideObjects"))
					{
						DeletePVar(playerid, "HideObjects");
						Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
				 	}
					return 1;
				}
			}
	    }
	    case EINVITEMENU:
	    {
	        if(!response) return true;
	        switch(listitem) // Event Menu
	    	{
			    case 0: // Cage Fight
				{
					foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] == 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
						    format(str,sizeof(str),""WHITEP_E"Administrator {%06x}%s(%i) "WHITE_E"invited you to attend an event, Click 'Join' to join the even!", pColor[playerid], pName[playerid], playerid);
				    		SendClientMessageToAll(COLOR_WHITE, str);
				    	}
		            }
		    		if(pHidden[playerid] == 0)
						format(line, sizeof(line), ""WHITEP_E"%s(%i) has invited you to join "GREY_E"Cage Fight!\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Cage Fight has been started by an Administrator!\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?");
			 		foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] == 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
							ShowPlayerDialog(i, EVENTCAGE2, DIALOG_STYLE_MSGBOX, ""GREEN_E"EVENT INVITATION - "WHITE_E"Cage Fight", line, "Join", "Cancel");
						}
					}
				}
				case 1: // Field Fight
				{
					foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] == 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
						    format(str,sizeof(str),""WHITEP_E"Administrator {%06x}%s(%i) "WHITE_E"invited you to attend an event, Click 'Join' to join the even!", pColor[playerid], pName[playerid], playerid);
				    		SendClientMessageToAll(COLOR_WHITE, str);
				    	}
		            }
					if(pHidden[playerid] == 0)
						format(line, sizeof(line), ""WHITEP_E"%s(%i) has invited you to join "LG_E"Field Fight!\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Field Fight has been started by an Administrator.\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?");

					foreach(Player, ii)
					{
						if(canUseKey[ii] == true &&   pSpawned[ii] == 1 && InEvent[playerid] == 0 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							ShowPlayerDialog(ii, EVENTCAGE3+1, DIALOG_STYLE_MSGBOX, ""LB2_E"EVENT INVITATION - "WHITE_E"Field Fight", line, "Join", "Cancel");
						}
					}
				}
				case 2: // Derby
				{
					foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] == 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
						    format(str,sizeof(str),""WHITEP_E"Administrator {%06x}%s(%i) "WHITE_E"invited you to attend an event, Click 'Join' to join the even!", pColor[playerid], pName[playerid], playerid);
				    		SendClientMessageToAll(COLOR_WHITE, str);
				    	}
		            }
					if(pHidden[playerid] == 0)
						format(line, sizeof(line), ""WHITEP_E"%s(%i) has invited you to join "PINK_E"DERBY!\n\n"LB2_E"Derby starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n\n"WHITE_E"Would you like to join the derby?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Derby event has been started by an Administrator!\n\n"LB2_E"Derby starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n\n"WHITE_E"Would you like to join the derby?");

					foreach(Player, ii)
					{
						DeletePVar(ii, "DerbyVeh");
						if(canUseKey[ii] == true &&  pSpawned[ii] == 1 && InEvent[playerid] == 0 &&  doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							ShowPlayerDialog(ii, EVENTDERBY, DIALOG_STYLE_MSGBOX, ""WHITE_E"EVENT INVITATION - "PINK_E"DERBY", line, "Join", "Cancel");
						}
					}
   				}
                case 3: // shamal
				{
					foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] == 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
						    format(str,sizeof(str),""WHITEP_E"Administrator {%06x}%s(%i) "WHITE_E"invited you to attend an event, Click 'Join' to join the even!", pColor[playerid], pName[playerid], playerid);
				    		SendClientMessageToAll(COLOR_WHITE, str);
				    	}
		            }
					if(pHidden[playerid] == 0)
					format(line, sizeof(line), ""WHITEP_E"%s(%i) has invited you to  "GREY_E"Dodge the Shamal Event! "LB_E"\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Dodge the Shamal Event has been started by an Administrator! "LB_E"\n\n"LB2_E"Event starting , click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?");
			 		foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && InEvent[playerid] != 0 &&  doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
							ShowPlayerDialog(i, EVENTSHAMAL, DIALOG_STYLE_MSGBOX, ""GREEN_E"EVENT INVITATION - "WHITE_E"Shamal Event", line, "Join", "Cancel");
						}
					}
				}
			}
			return 1;
	    }
 	    case EVENTMENU:
	    {
	        if(!response) return true;
	        switch(listitem) // Event Menu
	    	{
			    case 0: // Cage Fight
				{
				    if(GetPVarInt(playerid, "startedEvent") == 1) return Error(playerid, "You have recently started a cage fight, you must wait before starting another.");
   					ShowPlayerDialog(playerid, EVENTCAGE, DIALOG_STYLE_LIST, ""WHITEP_E"Cage Fight -> Weapons", ""LIME_E"M4, Deagle, MP5, Combat\n"LIME_E"AK, Deagle, TEC-9, Sawn-Off\n"LIME_E"Deagle\n"LIME_E"M4\n"LIME_E"AK-47\n"LIME_E"Sawn Off Shotgun\n"LIME_E"Combat Shotgun\n"LIME_E"MP5\n"LIME_E"TEC-9\n"LIME_E"Sniper Rifle\n"LIME_E"Chainsaw\n"LIME_E"Bats\n"LIME_E"Grenades", "Start", "Cancel");
				}
				case 1: // Field Fight
				{
				    if(GetPVarInt(playerid, "startedEvent") == 2) return Error(playerid, "You have recently started a field fight, you must wait before starting another.");
					ShowPlayerDialog(playerid, EVENTCAGE3, DIALOG_STYLE_LIST, ""WHITEP_E"Field Fight -> Weapons", ""LIME_E"M4, Deagle, MP5, Combat\n"LIME_E"AK, Deagle, TEC-9, Sawn-Off\n"LIME_E"Deagle\n"LIME_E"M4\n"LIME_E"AK-47\n"LIME_E"Sawn Off Shotgun\n"LIME_E"Combat Shotgun\n"LIME_E"MP5\n"LIME_E"TEC-9\n"LIME_E"Sniper Rifle\n"LIME_E"Chainsaw\n"LIME_E"Bats\n"LIME_E"Grenades", "Start", "Cancel");
				}
				case 2: // Derby
				{
				    if(GetPVarInt(playerid, "startedEvent") == 3) return Error(playerid, "You have recently started a derby, you must wait before starting another.");
					// Start the Derby
					PlayersJoined = 0;
					DerbyPlayers = 0;
			        EventGoingOn = 2;
			        DerbyEvent = 1;
					format(str,sizeof(str),""PINK_E"[DERBY]"LB_E" Derby is starting in 20 seconds! Use "YELLOW_E"/je"LB_E" to join the derby!");
					SendClientMessageToAll(COLOR_LB,str);

					if(pHidden[playerid] == 0)
						format(line, sizeof(line), ""WHITEP_E"%s(%i) has started a "PINK_E"DERBY!\n\n"LB2_E"Derby starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n\n"WHITE_E"Would you like to join the derby?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Derby event has been started by an Administrator!\n\n"LB2_E"Derby starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n\n"WHITE_E"Would you like to join the derby?");

					foreach(Player, ii)
					{
						DeletePVar(ii, "DerbyVeh");
						if(canUseKey[ii] == true &&  pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							ShowPlayerDialog(ii, EVENTDERBY, DIALOG_STYLE_MSGBOX, ""WHITE_E"EVENT - "PINK_E"DERBY", line, "Join", "Cancel");
						}
					}
					dcd = 20;
					DerbyStartTimer = SetTimer("PrepareDerby", 1000, 1);
					foreach(Player, ii)
					{
						if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]), PlayerTextDrawHide(ii, vSpeedBox[ii]);
					}
					TextDrawShowForAll(InfoTD2);
					SetTimer("HideInfoTD", 4000, false);
		    		IRC_GroupSay(ircGroup, IRC_CHANNEL, "2,9DERBY3,0 Derby is starting in 20 seconds, /je ingame to join.");
		    		SetPVarInt(playerid, "startedEvent", 3);
    				SetTimerEx("resetEvent", 300000, false, "i", playerid);
   				}
                case 3: // shamal
				{
				    if(GetPVarInt(playerid, "startedEvent") == 4) return Error(playerid, "You have recently started a Dodge the Shamal , you must wait before starting another.");
                    format(str,sizeof(str),""EVENT" "WHITEP_E"Dodge the Shamal Event is starting! Use /je to join the event!");
					SendClientMessageToAll(COLOR_WHITE, str);
					if(pHidden[playerid] == 0)
					format(line, sizeof(line), ""WHITEP_E"%s(%i) has started a "GREY_E"Dodge the Shamal Event! "LB_E"\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid);
					else
						format(line, sizeof(line), ""WHITEP_E"Dodge the Shamal Event has been started by an Administrator! "LB_E"\n\n"LB2_E"Event starting , click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?");
			 		foreach(Player, i)
					{
						if(canUseKey[i] == true &&  pSpawned[i] == 1 && doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
						{
							ShowPlayerDialog(i, EVENTSHAMAL, DIALOG_STYLE_MSGBOX, ""GREEN_E"EVENT - "WHITE_E"Shamal Event", line, "Join", "Cancel");
						}
					}
					EventGoingOn = 1;
					PlayersJoined = 0;
					Shamal = 3;
					foreach(Player, ii)
					{
						if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]), PlayerTextDrawHide(ii, vSpeedBox[ii]);
					}
					TextDrawShowForAll(InfoTD2);
					SetTimer("HideInfoTD", 4000, false);
					IRC_GroupSay(ircGroup, IRC_CHANNEL, "2,9EVENT3,0 Dodge the Shamal Event is starting , /je ingame to join.");
					SetPVarInt(playerid, "startedEvent", 4);
					SetTimerEx("resetEvent", 300000, false, "i", playerid);
				}
			}
			return 1;
	    }
	    case EVENTCAGE: // Cage Fight Weps
 		{
 		    if(!response) return true;
   			new eWeapon[28];
 			switch(listitem)
   			{
		    	    case 0:
		        	{
		        		eWeapon = "M4/Deagle/MP5/Combat";
		        		EventWeap = 1;
		        	}
		        	case 1:
		        	{
		        		eWeapon = "AK/Deagle/Tec-9/Sawn-Off";
		        		EventWeap = 2;
		        	}
		        	case 2:
		        	{
		        		eWeapon = "Deagle";
		        		EventWeap = 3;
		        	}
		        	case 3:
		        	{
		        		eWeapon = "M4";
		        		EventWeap = 4;
		        	}
		        	case 4:
		        	{
		        		eWeapon = "AK-47";
		        		EventWeap = 5;
		        	}
		        	case 5:
		        	{
		        		eWeapon = "Sawn-Off";
		        		EventWeap = 6;
		        	}
		        	case 6:
		        	{
		        		eWeapon = "Combat";
		        		EventWeap = 7;
		        	}
		        	case 7:
		        	{
		        		eWeapon = "MP5";
		        		EventWeap = 8;
		        	}
		        	case 8:
		        	{
		        		eWeapon = "TEC-9";
		        		EventWeap = 9;
		        	}
		        	case 9:
		        	{
		        		eWeapon = "Sniper Rifle";
		        		EventWeap = 10;
		        	}
		        	case 10:
		        	{
						eWeapon = "Chainsaw";
		        		EventWeap = 11;
		        	}
		        	case 11:
		        	{
		        		eWeapon = "Bats";
		        		EventWeap = 12;
		        	}
		        	case 12:
		        	{
		        		eWeapon = "Grenades";
		        		EventWeap = 13;
		        	}
			}
    		format(str,sizeof(str),""EVENT" "WHITEP_E"Cage Fight (Weapon: %s) is starting in 20 seconds! Use /je to join the event!", eWeapon);
    		SendClientMessageToAll(COLOR_WHITE, str);
    		if(pHidden[playerid] == 0)
				format(line, sizeof(line), ""WHITEP_E"%s(%i) has started a "GREY_E"Cage Fight! "LB_E"(Weapon: %s)\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid, eWeapon);
			else
				format(line, sizeof(line), ""WHITEP_E"Cage Fight has been started by an Administrator! "LB_E"(Weapon: %s)\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", eWeapon);
	 		foreach(Player, i)
			{
				if(canUseKey[i] == true &&  pSpawned[i] == 1 && doingStunt[i] == 0 && pSpectating[i] == -1 && cAFK[i] < 10)
				{
					ShowPlayerDialog(i, EVENTCAGE2, DIALOG_STYLE_MSGBOX, ""GREEN_E"EVENT - "WHITE_E"Cage Fight", line, "Join", "Cancel");
				}
			}
    		EventGoingOn = 1;
			CageFight = 1;
			CageFightOn = 1;
			PlayersJoined = 0;
			ecd = 20;
			EStartTimer = SetTimer("PrepareEvent", 1000, 1);
			foreach(Player, ii)
			{
				if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]) , PlayerTextDrawHide(ii, vSpeedBox[ii]);
			}
			TextDrawShowForAll(InfoTD2);
			SetTimer("HideInfoTD", 4000, false);
    		IRC_GroupSay(ircGroup, IRC_CHANNEL, "2,9EVENT3,0 An event is starting in 20 seconds, /je ingame to join.");
    		SetPVarInt(playerid, "startedEvent", 1);
    		SetTimerEx("resetEvent", 300000, false, "i", playerid);
 			return 1;
	    }
		case EVENTCAGE2: // Cage2
	    {
	    	if(response)
            {
            	if(NumEventPlayers >= 20)
				{
					SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the event, it has reached its max players! Watch the event using /watchevent.");
					return 1;
				}
				if(EventGoingOn == 0) return Error(playerid, "There is no event active!");
				if(EventStarted == 1) return Error(playerid, "The event has already started, wait for the next one!");
				if(InEvent[playerid] == 1) return Error(playerid, "You are already in the event!");
				{
					if(CageFight == 1)
					{
						NumEventPlayers++;
						SavePlayerPosition(playerid);
						switch(random(4))
						{
							case 0: SetPlayerPosition(playerid, 2747.1348 + (random(3) - random(3)), -1767.6613 + (random(3) - random(3)), 79.1520, 90.0783);
							case 1: SetPlayerPosition(playerid, 2734.7717 + (random(3) - random(3)), -1780.1125 + (random(3) - random(3)), 79.1520, 0.4746);
							case 2: SetPlayerPosition(playerid, 2723.0344 + (random(3) - random(3)), -1764.4871 + (random(3) - random(3)), 79.1520, 268.8864);
							case 3: SetPlayerPosition(playerid, 2735.1377 + (random(3) - random(3)), -1754.1909 + (random(3) - random(3)), 79.1520, 177.7672);
						}

						InDM[playerid] = 22;
     					SetPlayerVirtualWorld(playerid, 13);
						SetPlayerInterior(playerid, 0);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 0);
						if(pPremium[playerid] == 1)
						{
							SetPlayerArmour(playerid, 50.0);
						}
			 			ResetPlayerWeapons(playerid); //Reset player weps for preset weps
			      		GiveEventWeapons(playerid);
						SetPlayerCameraPos(playerid, 2736.199707, -1779.478759, 113.090225);
						SetPlayerCameraLookAt(playerid, 2736.198486, -1777.761962, 108.394226);
						InEvent[playerid] = 1;
						canUseKey[playerid] = false;
						SendClientMessage(playerid, COLOR_GREY, ""EVENT""GREY_E" You have joined the cage fight event, you must eliminate all players till your the last man standing.");
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
						format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the event, type /je ingame to join.", pName[playerid], playerid);
			 			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
						SetPlayerWorldBounds(playerid, 2828.125,2632.8125,-1664.0625,-1855.46875);
						if(pPremium[playerid] != 1) TogglePlayerControllable(playerid, false);
						GodModeLabel(playerid, false);
					}
				}
			}
	 	}
		case EVENTCAGE3: // Field Fight
	    {
			if(!response) return true;
   			new eWeapon[28];
 			switch(listitem)
   			{
		    	    case 0:
		        	{
		        		eWeapon = "M4/Deagle/MP5/Combat";
		        		EventWeap = 1;
		        	}
		        	case 1:
		        	{
		        		eWeapon = "AK/Deagle/Tec-9/Sawn-Off";
		        		EventWeap = 2;
		        	}
		        	case 2:
		        	{
		        		eWeapon = "Deagle";
		        		EventWeap = 3;
		        	}
		        	case 3:
		        	{
		        		eWeapon = "M4";
		        		EventWeap = 4;
		        	}
		        	case 4:
		        	{
		        		eWeapon = "AK-47";
		        		EventWeap = 5;
		        	}
		        	case 5:
		        	{
		        		eWeapon = "Sawn-Off";
		        		EventWeap = 6;
		        	}
		        	case 6:
		        	{
		        		eWeapon = "Combat";
		        		EventWeap = 7;
		        	}
		        	case 7:
		        	{
		        		eWeapon = "MP5";
		        		EventWeap = 8;
		        	}
		        	case 8:
		        	{
		        		eWeapon = "TEC-9";
		        		EventWeap = 9;
		        	}
		        	case 9:
		        	{
		        		eWeapon = "Sniper Rifle";
		        		EventWeap = 10;
		        	}
		        	case 10:
		        	{

		        		eWeapon = "Chainsaw";
		        		EventWeap = 11;
		        	}
		        	case 11:
		        	{
		        		eWeapon = "Bats";
		        		EventWeap = 12;
		        	}
		        	case 12:
		        	{
		        		eWeapon = "Grenades";
		        		EventWeap = 13;
		        	}
			}


			format(str,sizeof(str),""EVENT" "WHITEP_E"Field Fight (Weapon: %s) is starting in 20 seconds! Use /je to join the event!", eWeapon);
    		SendClientMessageToAll(COLOR_WHITE, str);

			if(pHidden[playerid] == 0)
				format(line, sizeof(line), ""WHITEP_E"%s(%i) has started a "LG_E"Field Fight! "LB_E"(Weapon: %s)\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", pName[playerid], playerid, eWeapon);
			else
				format(line, sizeof(line), ""WHITEP_E"Field Fight has been started by an Administrator! "LB_E"(Weapon: %s)\n\n"LB2_E"Event starts in 20 seconds, click on 'join' to join the event.\nOtherwise click 'Cancel' to ignore this dialog.\n\n"WHITE_E"Would you like to join the event?", eWeapon);

			foreach(Player, ii)
			{
				if(canUseKey[ii] == true &&   pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
				{
					ShowPlayerDialog(ii, EVENTCAGE3+1, DIALOG_STYLE_MSGBOX, ""LB2_E"EVENT - "WHITE_E"Field Fight", line, "Join", "Cancel");
				}
			}

			EventGoingOn = 1;
			CageFight = 2;
			CageFightOn = 1;
			PlayersJoined = 0;
			ecd = 20;
			EStartTimer = SetTimer("PrepareEvent", 1000, 1);
			foreach(Player, ii)
			{
				if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(playerid,vSpeedModel[ii]) ,PlayerTextDrawHide(ii, vSpeedBox[ii]);
			}
			TextDrawShowForAll(InfoTD2);
			SetTimer("HideInfoTD", 4000, false);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, "2,9EVENT3,0 Field fight is starting in 20 seconds, /je ingame to join.");
			SetPVarInt(playerid, "startedEvent", 2);
    		SetTimerEx("resetEvent", 300000, false, "i", playerid);
		}
   		case EVENTCAGE3+1:
   		{
   			if(response)
            {
   				if(NumEventPlayers >= 30)
				{
					Error(playerid, "Sorry you can no longer join the event, it has reached its max players! Watch the event using /watchevent.");
					return 1;
				}
				if(EventGoingOn == 0) return Error(playerid, "There is no event active!");
				if(EventStarted == 1) return Error(playerid, "The event has already started, wait for the next one!");
				if(InEvent[playerid] == 2) return Error(playerid, "You are already in the event!");
				{
					if(CageFight == 2)
					{
						NumEventPlayers++;
						SavePlayerPosition(playerid);
						switch(random(4))
						{
							case 0: SetPlayerPosition(playerid, 1306.2388 + (random(3) - random(3)), 2192.3354 + (random(3) - random(3)), 11.0234, 224.4649);
							case 1: SetPlayerPosition(playerid, 1307.7892 + (random(3) - random(3)), 2111.2991 + (random(3) - random(3)), 11.0156, 317.0949);
							case 2: SetPlayerPosition(playerid, 1387.0259 + (random(3) - random(3)), 2109.4526 + (random(3) - random(3)), 11.0156, 49.8795);
							case 3: SetPlayerPosition(playerid, 1383.7898 + (random(3) - random(3)), 2185.4229 + (random(3) - random(3)), 11.0234, 139.9720);
						}

						InDM[playerid] = 22;
			        	SetPlayerVirtualWorld(playerid, 13);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 0);
						if(pPremium[playerid] == 1)
						{
							SetPlayerArmour(playerid, 100);
						}
						SetPlayerWorldBounds(playerid, 1427.634, 1244.106, 2227.527, 2065.068);
       					ResetPlayerWeapons(playerid);
			      		GiveEventWeapons(playerid);
						SetPlayerCameraPos(playerid, 1396.226684, 2097.452636, 24.608520);
						SetPlayerCameraLookAt(playerid, 1393.114746, 2100.938476, 22.829599);
						InEvent[playerid] = 2;
						canUseKey[playerid] = false;
						SendClientMessage(playerid, COLOR_GREY, ""EVENT""GREY_E" You have joined the field fight event, you must eliminate all players till your the last man standing.");
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
						format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the field fight, type /je ingame to join.", pName[playerid], playerid);
			 			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
						if(pPremium[playerid] != 1) TogglePlayerControllable(playerid, false);
						GodModeLabel(playerid, false);
						if(GetPVarInt(playerid, "HideObjects"))
						{
							DeletePVar(playerid, "HideObjects");
							Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
					 	}
					}
				}
			}
   		}
        case EVENTSHAMAL:
	    {
   			if(response)
            {
   				if(NumEventPlayers >= 30)
				{
					Error(playerid, "Sorry you can no longer join the event, it has reached its max players! Watch the event using /watchevent.");
					return 1;
				}
				if(EventGoingOn == 0) return Error(playerid, "There is no event active!");
				if(EventStarted == 1) return Error(playerid, "The event has already started, wait for the next one!");
				if(InEvent[playerid] == 4) return Error(playerid, "You are already in the event!");
				{
					NumEventPlayers++;
					SavePlayerPosition(playerid);
					switch(random(2))
					{
						case 0: SetPlayerPositionEx(playerid, 6246.7095,-318.1765,34.1277,268.53336);
						case 1: SetPlayerPositionEx(playerid, 6260.7432,-312.3053,34.1277,93.0650);
					}
                    InDM[playerid] = 22;
                    InEvent[playerid] = 1;
		        	SetPlayerVirtualWorld(playerid, 13);
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 0);
					if(pPremium[playerid] == 1)
					{
						SetPlayerArmour(playerid, 100);
					}
   					ResetPlayerWeapons(playerid);
		      		GiveEventWeapons(playerid);
					InEvent[playerid] = 4;
					canUseKey[playerid] = false;
					SendClientMessage(playerid, COLOR_GREY, ""EVENT""GREY_E" You have joined the Dodge the Shamal event, you must be the last man stading in the shamal.");
					SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
					format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the Dodge the Shamal, type /je ingame to join.", pName[playerid], playerid);
		 			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
					if(pPremium[playerid] != 1) TogglePlayerControllable(playerid, false);
					GodModeLabel(playerid, false);
					if(GetPVarInt(playerid, "HideObjects"))
					{
						DeletePVar(playerid, "HideObjects");
						Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
				 	}
				 }
			  }
	     }
	  	case WEAPON_DIALOG:
		{
			if(response)
            {
	  			switch(listitem)
		    	{
					case 0:{ShowPlayerDialog(playerid, WEAPON_DIALOG+1, DIALOG_STYLE_LIST, ""ORANGE_E"Rifles "LG_E"", "AK-47\nM4\nCountry Rifle\nSniper Rifle", "Select", "Back");}
					case 1:{ShowPlayerDialog(playerid, WEAPON_DIALOG+2, DIALOG_STYLE_LIST, ""ORANGE_E"Submachine Guns "LG_E"", "MP-5\nUZI\nTEC-9", "Select", "Back");}
					case 2:{ShowPlayerDialog(playerid, WEAPON_DIALOG+3, DIALOG_STYLE_LIST, ""ORANGE_E"Shot Guns "LG_E"", "Regular Shotgun\nSawnoff Shotgun\nCombat Shotgun", "Select", "Back");}
					case 3:{ShowPlayerDialog(playerid, WEAPON_DIALOG+4, DIALOG_STYLE_LIST, ""ORANGE_E"Hand Guns "LG_E"", "9mm Pistol\nSilenced 9mm\nDesert Eagle", "Select", "Back");}
	   				case 4:{ShowPlayerDialog(playerid, WEAPON_DIALOG+5, DIALOG_STYLE_LIST, ""ORANGE_E"Melee Weapons "LG_E"", "Golf Club\nNightstick\nKnife\nShovel\nKatana\nChainsaw\nDouble-ended Dildo\nSilver Vibrator\nFlowers", "Select", "Back");}
	   				case 5:{ShowPlayerDialog(playerid, WEAPON_DIALOG+6, DIALOG_STYLE_LIST, ""ORANGE_E"Special Weapons "LG_E"", "Tear Gas\nGrenade\nMolotov Cocktail\nSpraycan\nFire Extinguisher", "Select", "Back");}
	   				case 6: cmd_weaponset(playerid);
				}
				return true;
			}
			else TogglePlayerControllable(playerid, true);
		}
		case WEAPON_DIALOG+7:
		{
		    TogglePlayerControllable(playerid, true);
			if(response)
            {
                new lstring[800];
            	switch(listitem)
		    	{
					case 0: // Weapon Set 1
					{
				 		if(pWeaponSet[playerid] == 1) return Error(playerid, "You already have purchased this weapon set!");
                        if(pPremium[playerid] != 1)
						{
					 		if(pCash[playerid] < 550000) return Error(playerid, "You don't have enough money to buy this weapon set! Price: "LG_E"$"WHITE_E"550000.");
							GivePlayerCash(playerid, -550000);
							format(str, sizeof(str), "~r~~h~~h~-$550,000");
	                        MSTD_MSG(playerid, 3500, str);
						}
					    pWeaponSet[playerid] = 1;
                        format(tmp, sizeof(tmp), "~y~~h~Purchased ~n~~w~Weapon Set 1");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
                    	format(str, sizeof(str), "~w~~h~~h~Free for VIPs");
                        MSTD_MSG(playerid, 3500, str);
					}
					case 1: // Weapon Set 2
					{
						if(pWeaponSet[playerid] == 2) return Error(playerid, "You already have purchased this weapon set!");
						if(pPremium[playerid] != 1)
						{
							if(pCash[playerid] < 500000) return Error(playerid, "You don't have enough money to buy this weapon set! Price: "LG_E"$"WHITE_E"500000.");
							GivePlayerCash(playerid, -500000);
							format(str, sizeof(str), "~r~~h~~h~-$500,000");
	                        MSTD_MSG(playerid, 3500, str);
						}
						pWeaponSet[playerid] = 2;
                        format(tmp, sizeof(tmp), "~y~~h~Purchased ~n~~w~Weapon Set 2");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
                    	format(str, sizeof(str), "~w~~h~~h~Free for VIPs");
                        MSTD_MSG(playerid, 3500, str);
					}
					case 2: // Weapon Set 3
					{
						if(pWeaponSet[playerid] == 3) return Error(playerid, "You already have purchased this weapon set!");
						if(pPremium[playerid] != 1)
						{
							if(pCash[playerid] < 600000) return Error(playerid, "You don't have enough money to buy this weapon set! Price: "LG_E"$"WHITE_E"600000.");
							GivePlayerCash(playerid, -600000);
							format(str, sizeof(str), "~r~~h~~h~-$600,000");
	                        MSTD_MSG(playerid, 3500, str);
						}
						pWeaponSet[playerid] = 3;
                        format(tmp, sizeof(tmp), "~y~~h~Purchased ~n~~w~Weapon Set 3");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
                    	format(str, sizeof(str), "~w~~h~~h~Free for VIPs");
                        MSTD_MSG(playerid, 3500, str);
					}
					case 3: // Weapon Set 4
					{
						if(pWeaponSet[playerid] == 4) return Error(playerid, "You already have purchased this weapon set!");
						if(pPremium[playerid] != 1)
						{
							if(pCash[playerid] < 700000) return Error(playerid, "You don't have enough money to buy this weapon set! Price: "LG_E"$"WHITE_E"700000.");
							GivePlayerCash(playerid, -700000);
							format(str, sizeof(str), "~r~~h~~h~-$700,000");
	                        MSTD_MSG(playerid, 3500, str);
						}
						pWeaponSet[playerid] = 4;
                        format(tmp, sizeof(tmp), "~y~~h~Purchased ~n~~w~Weapon Set 4");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
                    	format(str, sizeof(str), "~w~~h~~h~Free for VIPs");
                        MSTD_MSG(playerid, 3500, str);
					}
					case 4: // Default
					{
						if(pWeaponSet[playerid] == 0) return Error(playerid, "You already have the default weapon set!");
						pWeaponSet[playerid] = 0;
						format(tmp, sizeof(tmp), "~y~~h~Weapon set: ~n~~w~Default");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
					}
				}
				GiveSpawnWeapons(playerid);
				format(query, sizeof(query), "UPDATE players SET weapon_set=%d WHERE reg_id=%d", pWeaponSet[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
            }
            return true;
   		}
     	case WEAPON_DIALOG+1:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,30,1000);}
			 		case 1:{GivePlayerWeapon(playerid,31,1000);}
					case 2:{GivePlayerWeapon(playerid,33,200);}
					case 3:{GivePlayerWeapon(playerid,34,200);}
				}
				
			}
			else ShowWeaponMenu(playerid);
			return true;
		}
		case WEAPON_DIALOG+2:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
        		switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,29,1200);}
					case 1:{GivePlayerWeapon(playerid,28,1200);}
					case 2:{GivePlayerWeapon(playerid,32,1200);}
				}
				
   			}
   			else ShowWeaponMenu(playerid);
			return true;
		}
		case WEAPON_DIALOG+3:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
        		switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,25,300);}
            		case 1:{GivePlayerWeapon(playerid,26,300);}
					case 2:{GivePlayerWeapon(playerid,27,300);}
				}
				
			}
			else ShowWeaponMenu(playerid);
   			return true;
		}
		case WEAPON_DIALOG+4:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,22,300);}
					case 1:{GivePlayerWeapon(playerid,23,300);}
			    	case 2:{GivePlayerWeapon(playerid,24,300);}
				}
				
			}
			else ShowWeaponMenu(playerid);
   			return true;
		}
		case WEAPON_DIALOG+5:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
	  			switch(listitem)
				{
					case 0:{GivePlayerWeapon(playerid,2,1);}
            		case 1:{GivePlayerWeapon(playerid,3,1);}
					case 2:{GivePlayerWeapon(playerid,4,1);}
					case 3:{GivePlayerWeapon(playerid,6,1);}
					case 4:{GivePlayerWeapon(playerid,8,1);}
					case 5:{GivePlayerWeapon(playerid,9,1);}
					case 6:{GivePlayerWeapon(playerid,10,1);}
					case 7:{GivePlayerWeapon(playerid,13,1);}
					case 8:{GivePlayerWeapon(playerid,14,1);}
				}
				
			}
			else ShowWeaponMenu(playerid);
   			return true;
		}
		case WEAPON_DIALOG+6:
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "PurchasedWeapons", 1);
			if(response)
            {
				switch(listitem)
				{
			    	case 0:{GivePlayerWeapon(playerid,17,11);}
			    	case 1:{GivePlayerWeapon(playerid,16,6);}
					case 2:{GivePlayerWeapon(playerid,18,6);}
					case 3:{GivePlayerWeapon(playerid,41,1000);}
			    	case 4:{GivePlayerWeapon(playerid,42,1000);}
				}

			}
			else ShowWeaponMenu(playerid);
			return true;
		}
		case 6: //Color Dialog
		{
			if(response)
		    {
		    	switch(listitem)
	    		{
	    			case 0:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_RED);
    	    		 	SetPVarString(playerid, "Color", "Red");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~RED" , 3500, 3);
	    	    	}
    	    		case 1:
	    	    	{
						SetPlayerColor(playerid, COLOR_BLUE);
						SetPVarString(playerid, "Color", "Blue");
						GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~BLUE" , 3500, 3);
	    	    	}
    	    		case 2:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_WHITE);
	    	    		SetPVarString(playerid, "Color", "White");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~WHITE" , 3500, 3);
					}
					case 3:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_IVORY);
	    	    		SetPVarString(playerid, "Color", "Ivory");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~IVORY" , 3500, 3);
					}
					case 4:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PINK);
	    	    		SetPVarString(playerid, "Color", "Pink");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~PINK" , 3500, 3);
					}
					case 5:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_YELLOW);
	    	    		SetPVarString(playerid, "Color", "Yellow");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~YELLLOW" , 3500, 3);
					}
					case 6:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREEN);
	    	    		SetPVarString(playerid, "Color", "Green");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~GREEN" , 3500, 3);
					}
					case 7:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_LB);
	    	    		SetPVarString(playerid, "Color", "Lightblue");
	    	    		GameTextForPlayer(playerid, "~y~~h~color changed ~n~~w~Lightblue" , 3500, 3);
					}
					case 8:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREY);
	    	    		SetPVarString(playerid, "Color", "Grey");
	    	    		SendClientMessage(playerid, COLOR_GREY, "* Your nick color has been changed to GREY.");
					}
					case 9:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_ORANGE);
	    	    		SetPVarString(playerid, "Color", "Orange");
	    	    		SendClientMessage(playerid, COLOR_ORANGE, "* Your nick color has been changed to ORANGE.");
					}
					case 10:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_PURPLE);
	    	    		SetPVarString(playerid, "Color", "Purple");
	    	    		SendClientMessage(playerid, COLOR_PURPLE, "* Your nick color has been changed to PURPLE.");
					}
					case 11:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_LIGHTGREEN);
	    	    		SetPVarString(playerid, "Color", "Lightgreen");
	    	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Your nick color has been changed to LIGHTGREEN.");
					}
					case 12:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GREY);
	    	    		SetPVarString(playerid, "Color", "Steelblue");
	    	    		SendClientMessage(playerid, COLOR_GREY, "* Your nick color has been changed to STEELBLUE.");
					}
					case 13:
	    	    	{
	    	    		SetPlayerColor(playerid, COLOR_GOLD);
	    	    		SetPVarString(playerid, "Color", "Gold");
	    	    		SendClientMessage(playerid, COLOR_GOLD, "* Your nick color has been changed to GOLD");
					}
				}

				format(query, sizeof(query), "UPDATE players SET color=%d WHERE reg_id=%d", GetPlayerColor(playerid), pRegID[playerid]);
				MySQL_updateQuery(query);
				pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
				SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"Your nick color has been saved, you will spawn with this color on every connect.");
		    }
		}
		case 10:
		{
			if(!response)
			    return true;

            if(pAdmin[playerid] < 1)
			    return Error(playerid, "Insufficient permissions!");

			if(!IsPlayerConnected(controlPlayer[playerid]))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}

			switch(listitem)
			{
			    // kick
			    case 0:
			    {
			        GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
					format(tmp, sizeof(tmp), "Kick %s(%i)", giveplayer, controlPlayer[playerid]);
					ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, tmp, "Insert a reason...", "Kick", "Cancel");
				}
				// ban
				case 1:
				{
				    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
					format(tmp, sizeof(tmp), "Ban %s(%i)", giveplayer, controlPlayer[playerid]);
					ShowPlayerDialog(playerid, 12, DIALOG_STYLE_INPUT, tmp, "Insert a reason...", "Ban", "Cancel");
				}
				// spec
				case 2:
				{
					format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
					cmd_spec(playerid, tmp);
				}
				// (un)mute
				case 3:
				{
				    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				    if(pMute[controlPlayer[playerid]] >= 1)
				    {
				        format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
						cmd_unmute(playerid, tmp);
					}
					else
					{
                       	format(tmp, sizeof(tmp), "Mute %s(%i): time", giveplayer, controlPlayer[playerid]);
						ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, tmp, "Insert mute-time in seconds (10 - 600)...", "Continue", "Cancel");
					}
				}
				// freeze
				case 4:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
					cmd_freeze(playerid, tmp);
				}
				// unfreeze
				case 5:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_unfreeze(playerid, tmp);
				}
				// slap
				case 6:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_slap(playerid, tmp);
				}
				// explode
				case 7:
				{
				    if(pAdmin[playerid] < 2)
			    		return Error(playerid, "You are not authorized to use this function!");

				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_explode(playerid, tmp);
				}
				// warp to
				case 8:
				{
                	format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_goto(playerid, tmp);
				}
				// get here
				case 9:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_gethere(playerid, tmp);
				}
				// disarm
				case 10:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_disarm(playerid, tmp);
				}
				// eject
				case 11:
				{
				    format(tmp, sizeof(tmp), "%i", controlPlayer[playerid]);
				    cmd_peject(playerid, tmp);
				}
				// set name
				case 12:
				{
				    if(pAdmin[playerid] < 2)
			    		return Error(playerid, "You are not authorized to use this function!");

					GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
					format(tmp, sizeof(tmp), "Rename %s(%i)", giveplayer, controlPlayer[playerid]);
					ShowPlayerDialog(playerid, 13, DIALOG_STYLE_INPUT, tmp, "Insert a new temp name...", "Rename", "Cancel");
				}
			}
		}
		case 11:
		{
		    if(!response)
			{
   				format(tmp, sizeof(tmp), "%s(%i)", pName[controlPlayer[playerid]], controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, tmp, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet Temporary name", "Select", "Cancel");
				return true;
			}

			if(pAdmin[playerid] < 1)
			    return Error(playerid, "Insufficient permissions!");

			if(!IsPlayerConnected(controlPlayer[playerid]))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}
			if(strfind(inputtext, "%", true) != -1)
			{
				Error(playerid, "Invalid characters in reason!");
				GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				format(tmp, sizeof(tmp), "Kick %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, tmp, "Insert a reason...", "Kick", "Cancel");
			    return true;
			}
			if(strlen(inputtext) < 3 || strlen(inputtext) > 32)
			{
			    Error(playerid, "Invalid kick reason!");

			    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				format(tmp, sizeof(tmp), "Kick %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, tmp, "Insert a reason...", "Kick", "Cancel");
			    return true;
			}


			GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));

			format(str, sizeof(str), "%s(%i) has kicked %s(%i) [Reason: %s]", pName[playerid], playerid, giveplayer, controlPlayer[playerid], inputtext);
			SendClientMessageToAll(COLOR_RED, str);
			format(str, sizeof(str), "4Server: 2%s(%i) has kicked %s(%i) for: %s", pName[playerid], playerid, giveplayer, controlPlayer[playerid], inputtext);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

			KickEx(controlPlayer[playerid]);
		}
		case 12:
		{
			if(!response)
			{
				format(tmp, sizeof(tmp), "%s(%i)", pName[controlPlayer[playerid]], controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, tmp, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet Temporary name", "Select", "Cancel");
				return true;
			}

			if(pAdmin[playerid] < 2)
			    return Error(playerid, "Insufficient permissions!");

			if(!IsPlayerConnected(controlPlayer[playerid]))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}

			if(strlen(inputtext) < 3 || strlen(inputtext) > 32)
			{
			    Error(playerid, "Invalid ban reason length!");

			    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				format(tmp, sizeof(tmp), "Ban %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, tmp, "Insert a reason...", "Ban", "Cancel");
			    return true;
			}

			if(controlPlayer[playerid] == playerid)
	    		return Error(playerid, "You are not able to ban yourself!");

			if(pAdmin[controlPlayer[playerid]] > pAdmin[playerid])
			    return Error(playerid, "You are not able to ban a admin with a higher level than you!");

			GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
			GetPlayerIp(controlPlayer[playerid], PlayerIP, sizeof(PlayerIP));
			format(str, sizeof(str), "%s(%i) has banned %s(%i) for: "GREY_E"%s", pName[playerid], playerid, giveplayer, controlPlayer[playerid], inputtext);
			SendClientMessageToAll(COLOR_RED, str);
			format(str, sizeof(str), "4Server: 2%s(%i) has banned %s(%i) for: %s ", pName[playerid], playerid, giveplayer, controlPlayer[playerid], inputtext);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

			BanPlayerMSG(controlPlayer[playerid], playerid, inputtext);


			format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], inputtext);
			MySQL_updateQuery(query);
			KickEx(controlPlayer[playerid]);
		}
		case 13:
		{
		    if(!response)
			{
			    format(tmp, sizeof(tmp), "%s(%i)", pName[controlPlayer[playerid]], controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, line, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet Temp Name", "Select", "Cancel");
				return true;
			}

			if(!IsPlayerConnected(controlPlayer[playerid]))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}

		   	if(strlen(inputtext) > 20)
			{
			    SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY_E"New name can't be longer than 20 characters!");

			    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				format(tmp, sizeof(tmp), "Rename %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 13, DIALOG_STYLE_INPUT, tmp, "Insert a new name...", "Rename", "Cancel");
				return true;
			}
			if(strlen(inputtext) < 4)
			{
			    SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY_E"New name can't be shorter than 4 characters!");

			    GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
				format(tmp, sizeof(tmp), "Rename %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 13, DIALOG_STYLE_INPUT, tmp, "Insert a new name...", "Rename", "Cancel");
				return true;
			}
			SavePlayerStats(controlPlayer[playerid]);
			GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
			if(SetPlayerName(controlPlayer[playerid], inputtext) != 1)
			{
			    format(str, sizeof(str), ""UFF" "GREY_E"%s(%i)'s name has not been changed to \"%s\". Please doublecheck the name!", giveplayer, controlPlayer[playerid], inputtext);
			    SendClientMessage(playerid, COLOR_GREY, str);

				format(tmp, sizeof(tmp), "Rename %s(%i)", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 13, DIALOG_STYLE_INPUT, tmp, "Insert a new name...", "Rename", "Cancel");
			    return true;
			}

			format(str, sizeof(str), ""LB_E"INFO: "WHITEP_E"%s(%i) has changed your name to \"%s\".", pName[playerid], playerid, inputtext);
			SendClientMessage(controlPlayer[playerid], COLOR_WHITE, str);
			format(str, sizeof(str), ""UFF" You have changed %s(%i)'s name to \"%s\".", giveplayer, controlPlayer[playerid], inputtext);
			SendClientMessage(playerid, COLOR_GREY, str);

            format(str, sizeof(str), "4>>3 %s(%i) has changed %s(%i)'s name to '%s'", pName[playerid], playerid, giveplayer, controlPlayer[playerid], inputtext);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			new newname[24];
			GetPlayerName(otherid, newname, sizeof(newname));
			pName[otherid] = newname;
		}
		case 14:
		{
  			if(!response)
			{
			    format(tmp, sizeof(tmp), "%s(%i)", pName[controlPlayer[playerid]], controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, line, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet name", "Select", "Cancel");
				return true;
			}

			if(!IsPlayerConnected(controlPlayer[playerid]))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}

			new timeSec = strval(inputtext);
			if(timeSec < 10)
			{
			    Error(playerid, "The mute-time is too small (must be atleast 10 seconds).");

				GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
            	format(tmp, sizeof(tmp), "Mute %s(%i): time", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, tmp, "Insert mute-time in seconds (10 - 600)...", "Continue", "Cancel");
				return true;
			}
			if(timeSec > 600)
			{
			    Error(playerid, "The mute-time is too big (maximum: 600 seconds).");

		     	GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));
			    format(tmp, sizeof(tmp), "Mute %s(%i): time", giveplayer, controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, tmp, "Insert mute-time in seconds (10 - 600)...", "Continue", "Cancel");
			    return true;
			}

			GetPlayerName(controlPlayer[playerid], giveplayer, sizeof(giveplayer));

			muteSec[controlPlayer[playerid]] = timeSec;
	        format(tmp, sizeof(tmp), "Mute %s(%i): reason", giveplayer, controlPlayer[playerid]);
			ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, tmp, "Insert a reason", "Mute", "Cancel");
		}
		case 15:
		{
		    if(!response)
			{
			    format(tmp, sizeof(tmp), "%s(%i)", pName[controlPlayer[playerid]], controlPlayer[playerid]);
				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, tmp, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet name", "Select", "Cancel");
				return true;
			}

			otherid = controlPlayer[playerid];
			if(!IsPlayerConnected(otherid))
			{
				Error(playerid, "The player has disconnected.");
				controlPlayer[playerid] = -1;
				return true;
			}
			GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

			if(strlen(inputtext) > 32)
			{
			    Error(playerid, "Reason too long! Must be smaller than 32 characters!");

			    format(tmp, sizeof(tmp), "Mute %s(%i): reason", giveplayer, otherid);
				ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, tmp, "Insert a reason", "Mute", "Cancel");
			    return true;
			}

		    pMute[otherid] = muteSec[otherid];
			format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) muted %s(%i) for \"%s\" (%d seconds)", pName[playerid], playerid, giveplayer, otherid, inputtext, muteSec[otherid]);
			SendClientMessageToAll(COLOR_GREY, str);

			if(strfind(tmp, "spam", true) != -1 || strfind(tmp, "flame", true) != -1 || strfind(tmp, "insult", true) != -1)
			{
				format(str, sizeof(str), ""UFF" "GREY_E"You were muted for '%s'. Please read the server rules (/rules).", tmp);
				SendClientMessage(otherid, COLOR_GREY, str);
			}
			format(str, sizeof(str), "4Server:3 %s(%i) muted %s(%i) for \"%s\" (%d seconds)", pName[playerid], playerid, giveplayer, otherid, inputtext, muteSec[otherid]);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		}
		case 501:
	    {
	        if(response)
			{
				switch(listitem)
				{
				    case 0: str = "http://78.129.175.157/stream.mp3?ipport=78.129.175.157_31472";
					case 1: str = "http://uffserver.com/radio/beatfm.pls";
					case 2: str = "http://listen.radionomy.com/americantop40";
					case 3: str = "http://sc-01.deep.fm/";
					case 4: str = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318";
					case 5: str = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=914897";
					case 6: str = "http://sc.digitaleagles.com:8158";
					case 7: str = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=39428";
					case 8: str = "http://anonplusradio.com:192/listen.pls";
					case 9: return ShowPlayerDialog(playerid, 502, DIALOG_STYLE_INPUT, ""YELLOW_E"Your own stream", ""WHITE_E"Enter the audio stream you want to listen to:", "Play", "Back");
					case 10:
					{
						StopAudioStreamForPlayer(playerid);
						return true;
					}
				}
				PlayAudioStreamForPlayer(playerid, str);
			}
			return true;
		}
		case 502:
		{
			if(response)
			{
				PlayAudioStreamForPlayer(playerid, inputtext);
			}
		}
		case 504: //Wheels Dialog
		{
			if(response)
		    {
				vID = GetPlayerVehicleID(playerid);
				if(!IsNosVehicleModel(GetVehicleModel(vID)))
				{
				    Error(playerid, "This vehicle isn't compatiable for wheels!");
					return true;
				}
		    	switch(listitem)
	    		{
	    			case 0:
	    	    	{
	    	    		pWheels[playerid] = 0;
	    	    	}
    	    		case 1:
	    	    	{
						AddVehicleComponent(vID, 1025);
						pWheels[playerid] = 1025;
	    	    	}
    	    		case 2:
	    	    	{
	    	    		AddVehicleComponent(vID, 1074);
	    	    		pWheels[playerid] = 1074;
					}
					case 3:
	    	    	{
	    	    		AddVehicleComponent(vID, 1076);
	    	    		pWheels[playerid] = 1076;
					}
					case 4:
	    	    	{
	    	    		AddVehicleComponent(vID, 1078);
	    	    		pWheels[playerid] = 1078;
					}
					case 5:
	    	    	{
	    	    		AddVehicleComponent(vID, 1081);
	    	    		pWheels[playerid] = 1081;
					}
					case 6:
	    	    	{
	    	    		AddVehicleComponent(vID, 1082);
	    	    		pWheels[playerid] = 1082;
					}
					case 7:
	    	    	{
	    	    		AddVehicleComponent(vID, 1085);
	    	    		pWheels[playerid] = 1085;
					}
					case 8:
	    	    	{
	    	    		AddVehicleComponent(vID, 1133);
	    	    		pWheels[playerid] = 1133;
					}
					case 9:
	    	    	{
	    	    		AddVehicleComponent(vID, 1097);
	    	    		pWheels[playerid] = 1097;
					}
					case 10:
	    	    	{
	    	    		AddVehicleComponent(vID, 1098);
	    	    		pWheels[playerid] = 1098;
					}
					case 11:
	    	    	{
	    	    		AddVehicleComponent(vID, 1084);
	    	    		pWheels[playerid] = 1084;
					}
					case 12:
	    	    	{
	    	    		AddVehicleComponent(vID, 1073);
	    	    		pWheels[playerid] = 1073;
					}
					case 13:
	    	    	{
	    	    		AddVehicleComponent(vID, 1133);
	    	    		pWheels[playerid] = 1133;
					}
					case 14:
	    	    	{
	    	    		AddVehicleComponent(vID, 1077);
	    	    		pWheels[playerid] = 1077;
					}
					case 15:
	    	    	{
	    	    		AddVehicleComponent(vID, 1079);
    	    		 	pWheels[playerid] = 1079;
					}
					case 16:
	    	    	{
	    	    		AddVehicleComponent(vID, 1080);
    	    		 	pWheels[playerid] = 1080;
					}
					case 17:
	    	    	{
	    	    		AddVehicleComponent(vID, 1083);
    	    		 	pWheels[playerid] = 1083;
					}
					case 18:
	    	    	{
	    	    		cmd_removewheels(playerid);
 		 				pWheels[playerid] = 999;
	    	    	}
				}
				switch(pWheels[playerid])
				{
					case 0:
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have changed your wheels to random");
					case 999:
						SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"Custom wheels disabled");
					default:
					{
      					format(str, sizeof(str), ""UFF" "GREEN_E"You have changed your wheels to %d", pWheels[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, str);
						SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"Your wheels has been saved, you will enter every vehicle with these wheels.");
					}
				}
				if(pLogged[playerid] == true)
				{
					format(query, sizeof(query), "UPDATE players SET wheels=%d WHERE reg_id=%d", pWheels[playerid], pRegID[playerid]);
					MySQL_updateQuery(query);
					if(BoughtVehicle[playerid] == true)
					{
						if(vID == PlayerVehicle[playerid])
						{
							if(pWheels[playerid] != 999) PlayerInfoVeh[playerid][Mod16] = pWheels[playerid];
						}
					}
	 			}
		    }
		    else cmd_settings(playerid);
		}
		case 505:
		{
			if(response)
			{
	   			cmd_plate(playerid, inputtext);
				cmd_settings(playerid);
			}
   		}
   		case 506: //Help Dialog
		{
			if(response)
			{
				switch(listitem)
	    		{
	    		    case 0:
	    	    	{
						cmd_ghelp(playerid);
	    	    	}
	    			case 1:
	    	    	{
						cmd_cmds(playerid);
	    	    	}
	    	    	case 2:
	    	    	{
						cmd_teles(playerid);
	    	    	}
	    	    	case 3:
	    	    	{
	  					if(InDM[playerid] != 0)
						{
						    Error(playerid, "You can't spawn a vehicle while in a DM!");
						    cmd_help(playerid);
						    return true;
						}
						if(doingStunt[playerid] != 0)
						{
							Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
							cmd_help(playerid);
						    return true;
						}
						if(RaceParticipant[playerid] == true)
						{
							Error(playerid,	"Use "GREY_E"/v "GREY2_E"to spawn a vehicle during a race.");
		    				return true;
						}
						ShowVehicleMenu(playerid);
					}
	    	    	case 4:
	    	    	{
						cmd_premium(playerid);
	    	    	}
	    	    	case 5:
	    	    	{
						cmd_credits(playerid);
	    	    	}
	    	    	case 6:
	    	    	{
						cmd_settings(playerid);
	    	    	}
	    	    	case 7:
	    	    	{
						DisplayStats(playerid, playerid);
	    	    	}
	    	    	case 8:
	    	    	{
						new line3[2000];
						strcat(line3, ""LB_E"Welcome to UFF : Ultimate Funky Freeroam!\n\n"PINK_E"How to earn money?\n"WHITE_E"There are many different ways you can earn cash on this server!\n- Complete stunt/challenges listed in /teles (/challenges)\n- Win reaction tests/answer math questions\n- You can earn cash just by spending your time on the server.");
						strcat(line3, "\n- Win deathmatch and derby events for massive amount of cash\n- Eliminating players in /dm zones\n"PINK_E"What can I do with my money?\n"WHITE_E"You can purchase your own house/house interiors around the server.\nPurchase /toys for your chararacter and private vehicles (/vshop)\nPurchase /weapons in DM zones.\nThere will be more things you can use your money for coming soon, stay tuned and stack that mula!");
						strcat(line3, "\n\n"PINK_E"How to earn score?\n"WHITE_E"There are many ways to earn score on this server!\n- Complete reaction tests and math questions\n- Complete challenges and stunts listed in /teles.\n- Participate in events and try to win!\n- Kill as much people as you can in /DMs!\n!");
						strcat(line3, "\n- You can earn score and money every 10 minutes you play!\n"PINK_E"What can I do with my score?\n"WHITE_E"There's nothing much you can do with score now besides show it off\nHowever score does determine how active a player is on the server/how long they've been playing.\nThere will be uses for score in the near future, so stack up your score!");
                        strcat(line3, "\n\n"PINK_E"How to earn gbs?\n"WHITE_E"There are quite a few ways to earn gbs!\n- You earn one gc every time you win a minigame (ie: fallout, derby, LMS)\n- You earn one gc per arrest in CnR.\n- You can find gc jars which contain up to 100 gbs at once!\n- End a players killstreak to earn a gc.");
						strcat(line3, "\n"PINK_E"What can I do with my gbs?\n"WHITE_E"You can purchase cool things in /gbshop.\nYou can also use your gbs as currency (ie: trade it for money)");
						ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""PINK_E"How to earn score, money and gbs", line3, "OK", "");
	    	    	}
	    	    	case 9:
	    	    	{
	    	    		new line3[1350];
						strcat(line3, ""LB_E"Welcome to UFF : Ultimate Funky Freeroam!\n\n"PINK_E"What can you do on this server?\n"WHITE_E"There are many things you can do in this server. ranging from stunts to DMs!\n"LB2_E"Stunting "WHITE_E"- We have many stunting locations and challenges, check out /teles -> StuntZones and Challenges.");
						strcat(line3, "\n"LB2_E"Racing "WHITE_E"- Compete in races with players! Races usually start every 5-10 minutes, you can also request a race to one of our admins.\n"LB2_E"Events/Minigames "WHITE_E"- Our admins host events/derbys multiple times a day, be sure to join in for special prizes!");
						strcat(line3, "\n"LB2_E"Duels "WHITE_E"- Challenge other players using /duel for score and money!\n"LB2_E"DeathMatch "WHITE_E"- We have many interesting deathmatch locations! Compete with your fellow players for score/money.. check out /dm!\nYou can also freeroam and do whatever you like as long as you dont break any rules :D!");
						ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""PINK_E"What can you do on this server?", line3, "OK", "");
	    	    	}
	    	    	case 10:
	    	    	{
	    	    	    cmd_help(playerid);
	  				}
	    		}
			}
		}
		case 507: //CnR Dialog
		{
			if(response)
			{
				if(doingStunt[playerid] != 0) return Error(playerid, "Teleport out of this stunt area before joining CnR!");
				if(InDM[playerid] == 0) SavePlayerPosition(playerid);
				if(InDM[playerid] != 13)
				{
					SetPVarInt(playerid, "oldColor", GetPlayerColor(playerid));
					SetPVarInt(playerid, "dSkin", GetPlayerSkin(playerid));
				}
				// Close any open dialogs.
				ClosePlayerDialog(playerid);
				switch(listitem)
  				{
  					case 0: // Cops
  	    			{
  	    				if(GetPVarInt(playerid, "Cop") == 1)
						{
						    Error(playerid, "You are already a cop! Choose a different class..");
						    return true;
						}
  	    				UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Cops in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 1);

			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"You have joined the LVPD!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"Your mission is to arrests any robbers and keep the streets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
						SetPlayerColor(playerid, 0x1F75FEFF);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 700); // MP5
						GivePlayerWeapon(playerid, 31, 1000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 1);
						switch(random(3))
	  					{
	  						case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
							case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
							case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
						}
						switch(random(4))
	  					{
	  						case 0: SetPlayerSkin(playerid, 282);
	  						case 1: SetPlayerSkin(playerid, 283);
	  						case 2: SetPlayerSkin(playerid, 286);
	  						case 3: SetPlayerSkin(playerid, 280);
	  					}
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 0);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "LB_E"(Cops)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
					}
    				case 1: //ROBBERS
  	    			{
  	    				if(GetPVarInt(playerid, "Robber") != 0)
						{
						    Error(playerid, "You are already a robber! Choose a different class..");
						    return true;
						}
  	    				UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Robbers in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);

						PreloadAnimLib(playerid, "SHOP");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "ORANGE_E"You have joined the Robbers!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "ORANGE_E"Your mission is create mayhem in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_ORANGE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // MP5
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 2);
                        SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
						switch(random(5))
						{
							case 0: SetPlayerSkin(playerid, 125);
							case 1: SetPlayerSkin(playerid, 126);
							case 2: SetPlayerSkin(playerid, 111);
							case 3: SetPlayerSkin(playerid, 112);
							case 4: SetPlayerSkin(playerid, 108);
						}
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 0);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "ORANGE_E"(Robbers)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
					}
					case 2: // Professional Robbers
  	    			{
  	    				if(pRobberies[playerid] < 100 || pCopKills[playerid] < 100)
						{
							SendClientMessage(playerid, COLOR_GREY, "Server: "RED_E"You need at least 100 store robberies and 100 cop kills to choose this class!");
							cmd_cnr(playerid);
							return true;
						}
						if(GetPVarInt(playerid, "Robber") != 0)
						{
						    Error(playerid, "You are already a robber! Choose a different class..");
						    return true;
						}
           				UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Pro Robbers in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
						SetPVarInt(playerid, "Robber", 2);
						SetPVarInt(playerid, "Cop", 0);

						PreloadAnimLib(playerid, "SHOP");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"You have joined the MOB!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"This is the pro version of the robbers, Your mission is create mayhem in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~pro Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_ORANGE2);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 4, 500); // Knife
						GivePlayerWeapon(playerid, 29, 1200); // MP5
						GivePlayerWeapon(playerid, 31, 2000); //AK
						GivePlayerWeapon(playerid, 24, 600); // Deagle
						GivePlayerWeapon(playerid, 27, 500); //Combat
						GivePlayerWeapon(playerid, 16, 3); // 3 Nade
						GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 4);
						switch(random(2))
	  					{
							case 0: SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
							case 1: SetPlayerPosition(playerid, 2771.9722,1256.8436,10.7500,326.0133);
						}
	  					SetPlayerSkin(playerid, 113);
	  					RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 0);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "LRED_E"(Pro Robbers)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
					}
 					case 3: // Army
  	    			{
  	    				if(pArrests[playerid] < 200 || pTakedowns[playerid] < 200)
						{
							SendClientMessage(playerid, COLOR_GREY, "Server: "PURPLE_E"You need at least 200 arrests and 200 takedowns to choose this class!");
							cmd_cnr(playerid);
							return true;
						}
						if(GetPVarInt(playerid, "Cop") == 3)
						{
						    Error(playerid, "You are already an army personal! Choose a different class..");
						    return true;
						}
						UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Army in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 3);

			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "PURPLE_E"You have joined the Army Task Force!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "PURPLE_E"Your mission is to arrests any robbers and keep the streets of LV clean!");
						GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_PURPLE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1000); // MP5
						GivePlayerWeapon(playerid, 31, 5000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 34, 300); // Sniper
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 16, 5); // 2 Nade
						GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 287);
	  					SetPlayerHealth(playerid, 100);
	  					SetPlayerArmour(playerid, 0);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "PURPLE_E"(Army)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
					}
					case 4: // Swat
  	    			{
  	    				if(pPremium[playerid] < 1)
						{
							Error(playerid, "You must be premium  to use the swat feature! Check /premium for more info.");
							cmd_cnr(playerid);
							return true;
						}
						if(GetPVarInt(playerid, "Cop") == 2)
						{
						    Error(playerid, "You are already in the swat team! Choose a different class..");
						    return true;
						}
						UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Swat in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
  	    				SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 2);


			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"You have joined the SWAT TEAM!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "BLUE_E"This is an elite team higher ranked than cops, do your job well!");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_BLUE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1200); // MP5
						GivePlayerWeapon(playerid, 24, 1000); // Deagle
						GivePlayerWeapon(playerid, 31, 2000); //M4
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 35, 3); //RPG
						GivePlayerWeapon(playerid, 16, 5); // 5 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 285);
						RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						SetPlayerAttachedObject(playerid, 4, 18872, 17, -0.000999, 0.047999, 0.158999, -81.299995, 30.699989, 87.399986, 1.000000, 1.000000, 1.000000);
						SetPlayerAttachedObject(playerid, 5, 19347, 17, 0.020000, 0.092000, -0.095999, -100.499938, 34.699993, 58.300003, 1.467000, 1.556999, 2.68999);
						SetPlayerAttachedObject(playerid, 1, 19418, 7, -0.050999, 0.025999, 0.251000, 61.900035, -7.999997, 9.499998, 1.000000, 0.987998, 1.000000);
						SetPlayerArmour(playerid, 100);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "BLUE_E"(Swat)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
	 				}
	 				case 5: // Elite Robbers
  	    			{
  	    				if(pPremium[playerid] != 1)
						{
							Error(playerid, "You must be VIP to play as elite robbers! Check /VIP for more info.");
							cmd_cnr(playerid);
							return true;
						}
						if(GetPVarInt(playerid, "Robber") == 3)
						{
						    Error(playerid, "You are already an elite robber! Choose a different class..");
						    return true;
						}
           				UpdateMinigameBox(playerid, 1, "CNR [/CnR]");
  						format(str, sizeof(str), "4CnR:3 %s(%i) has joined the Elite Robbers in the cops and robbers minigame.", pName[playerid], playerid);
						IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
						SetPVarInt(playerid, "Robber", 3);
						SetPVarInt(playerid, "Cop", 0);

						PreloadAnimLib(playerid, "SHOP");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"You have joined the Elite Robbers!");
			    		SendClientMessage(playerid, COLOR_GREY, ""UFF" "RED_E"This is the elite version of the robbers, Your mission is create mayhem in LV and evade cops!");
						GameTextForPlayer(playerid, "~w~You have joined the ~r~elite Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_RED);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 4, 500); // Knife
						GivePlayerWeapon(playerid, 29, 1200); // MP5
						GivePlayerWeapon(playerid, 31, 2000); //AK
						GivePlayerWeapon(playerid, 24, 600); // Deagle
						GivePlayerWeapon(playerid, 27, 500); //Combat
						GivePlayerWeapon(playerid, 16, 3); // 3 Nade
						GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						GivePlayerWeapon(playerid, 35, 3); // RPG
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 4);
						switch(random(2))
	  					{
							case 0: SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
							case 1: SetPlayerPosition(playerid, 2771.9722,1256.8436,10.7500,326.0133);
						}
	  					SetPlayerSkin(playerid, 164);
	  					RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 97);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
						format(str, sizeof(str), ""RED_E"[CnR] "WHITEP_E"%s(%d) has joined Cops and Robbers "RED_E"(Elite Robbers)", pName[playerid], playerid);
						foreach(Player, ii) if(InDM[ii] == 13) SendClientMessage(ii, COLOR_WHITEP, str);
					}
    			}
    			CheckDM(playerid);
    			SetPlayerWorldBounds(playerid, 2896.113, -467.115, 2884.435, 595.5717); // LV
  				Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
				Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
				SetPlayerHealth(playerid, 99999);
				SetTimerEx("ResetHealth", 3000, false, "i", playerid);
       			GodModeLabel(playerid, false);
				InDM[playerid] = 13;
				canUseKey[playerid] = false;
				DeletePVar(playerid, "InStore");
				pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
				TextDrawHideForPlayer(playerid, SEv2Box);
    			//TextDrawHideForPlayer(playerid, helpTD);
				TextDrawShowForPlayer(playerid, SEv2TD);
				TextDrawHideForPlayer(playerid, SEv2TD2);
				TextDrawHideForPlayer(playerid, cnrTDd);
				TextDrawShowForPlayer(playerid, SEv2TD3);
				TextDrawHideForPlayer(playerid, SEv2TD4);
				TextDrawHideForPlayer(playerid, TeleTD);
				TextDrawShowForPlayer(playerid, cnrTD);
				TextDrawShowForPlayer(playerid, SEv2Box);
				HidePlayerMSGBox(playerid);
				CnR++;
				UpdateDMText();
  			}
		}
		case 508: //Refill
		{
			if(response)
			{
				vID = GetPlayerVehicleID(playerid);
				switch(listitem)
  				{
   					case 0: //Repair Car
  	    			{
  	    			    if(pCash[playerid] < 2000)
							return Error(playerid, "You don't have enough money to purchase this item.");

						GivePlayerCash(playerid, -2000);
						PlayerPlaySound(playerid, 1057, 0, 0, 0);
						RepairVehicle(vID);
						SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "WHITE_E"You have repaired your vehicle!");

  	    			}
  	    			case 1: //Add Nos
  	    			{
  	    				if(pCash[playerid] < 5000)
							return Error(playerid, "You don't have enough money to purchase this item.");
						if(!IsNosVehicleModel(GetVehicleModel(vID))) return Error(playerid, "This vehicle is not compatible with nitro!");

						SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "WHITE_E"You have added nitro to your vehicle!");
						AddVehicleComponent(vID, 1010);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						GivePlayerCash(playerid, -5000);
  	    			}
  	    			case 2: //Repair and Add nos
  	    			{
  	    				if(pCash[playerid] < 6500)
							return Error(playerid, "You don't have enough money to purchase this item.");
						GivePlayerCash(playerid, -6500);
						if(IsNosVehicleModel(GetVehicleModel(vID)))
						{
							AddVehicleComponent(vID, 1010);
							SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "WHITE_E"You have repaired and added nitro to your vehicle!");
						}
						else SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "WHITE_E"You have repaired your vehicle! (Nitro not compatible)");
						RepairVehicle(vID);

						PlayerPlaySound(playerid, 1057, 0, 0, 0);
  	    			}
   				}
			}
		}
		case 509: //PD Refill
		{
			if(response)
			{
				switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    			    SetPlayerHealth(playerid, 100);
  	    				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill Armor
  	    			{
  	    				if(pPremium[playerid] == 0)
				  		{
				  			ShowPlayerDialog(playerid, 509, 2, ""BLUE_E"LVPD Refill", "Refill Health\nRefill Health & Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
				  			Error(playerid, "You must be a VIP to refill your armour!");
				  			return 1;
						}
						if(pPremium[playerid] == 1)
						{
  	    			    	SetPlayerArmour(playerid, 100);
  	    			    	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"As a VIP member your armour has been refilled to 100.");
	    				}
	    				else
	    				{
	    					SetPlayerArmour(playerid, 50);
  	    			    	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"As a premium member your armour has been set to 50. (VIPs can get 100)");
	    				}
                        SetPlayerHealth(playerid, 100);
  	    			}
  	    			case 2: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);

  	    				switch(GetPVarInt(playerid, "Cop"))
  	    				{
  	    					case 1: // Cop
  	    					{
								GivePlayerWeapon(playerid, 3, 500); // Baton
								GivePlayerWeapon(playerid, 29, 700); // MP5
								GivePlayerWeapon(playerid, 31, 1000); //M4
								GivePlayerWeapon(playerid, 24, 300); // Deagle
								GivePlayerWeapon(playerid, 16, 1); // 1 Nade
							}
							case 2: // Swat
  	    					{
								GivePlayerWeapon(playerid, 3, 500); // Baton
								GivePlayerWeapon(playerid, 29, 1200); // MP5
								GivePlayerWeapon(playerid, 24, 1000); // Deagle
								GivePlayerWeapon(playerid, 31, 2000); //M4
								GivePlayerWeapon(playerid, 27, 1000); //Combat
								GivePlayerWeapon(playerid, 35, 2); //RPG
								GivePlayerWeapon(playerid, 16, 5); // 5 Nade
							}
							case 3: // Army
  	    					{
								GivePlayerWeapon(playerid, 3, 500); // Baton
								GivePlayerWeapon(playerid, 29, 1000); // MP5
								GivePlayerWeapon(playerid, 31, 5000); //M4
								GivePlayerWeapon(playerid, 24, 300); // Deagle
								GivePlayerWeapon(playerid, 34, 300); // Sniper
								GivePlayerWeapon(playerid, 27, 1000); //Combat
								GivePlayerWeapon(playerid, 16, 2); // 2 Nade
							}
						}
						SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have refilled your weapons!");
  	    			}
   				}
	   		}
	   	}
	   	case 510: //Robber Refill
		{
			if(response)
			{
				switch(listitem)
  				{
   					case 0: //Refill Health
  	    			{
  	    				SetPlayerHealth(playerid, 100);
  	    				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "ORANGE_E"You have refilled your health!");
  	    			}
  	    			case 1: //Refill Armor
  	    			{
  	    				if(pPremium[playerid] == 0)
				  		{
				  			ShowPlayerDialog(playerid, 510, 2, ""ORANGE_E"Robbery Refill", "Refill Health\nRefill Health & Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
				  			Error(playerid, "You must be a VIP to refill your armour!");
				  			return 1;
						}
						if(pPremium[playerid] == 1)
						{
  	    			    	SetPlayerArmour(playerid, 100);
  	    			    	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"As a VIP member your armour has been refilled.");
	    				}
	    				else
	    				{
	    					SetPlayerArmour(playerid, 50);
  	    			    	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"As a premium member your armour has been set to 50. (VIPs can get 100)");
	    				}
	    				SetPlayerHealth(playerid, 100);
  					}
  	    			case 2: //Refill weapons
  	    			{
  	    				ResetPlayerWeapons(playerid);
  	    				if(GetPVarInt(playerid, "Robber") == 1)
  	    				{
	  	    				GivePlayerWeapon(playerid, 5, 500); // Bat
							GivePlayerWeapon(playerid, 29, 800); // MP5
							GivePlayerWeapon(playerid, 30, 1000); //AK
							GivePlayerWeapon(playerid, 24, 300); // Deagle
							GivePlayerWeapon(playerid, 27, 200); //Combat
							GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						}
						else if(GetPVarInt(playerid, "Robber") == 2)
						{
							GivePlayerWeapon(playerid, 4, 500); // Knife
							GivePlayerWeapon(playerid, 29, 1200); // MP5
							GivePlayerWeapon(playerid, 31, 2000); //AK
							GivePlayerWeapon(playerid, 24, 600); // Deagle
							GivePlayerWeapon(playerid, 27, 500); //Combat
							GivePlayerWeapon(playerid, 16, 3); // 3 Nade
							GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						}
						else
						{
							GivePlayerWeapon(playerid, 4, 500); // Knife
							GivePlayerWeapon(playerid, 29, 1200); // MP5
							GivePlayerWeapon(playerid, 31, 2000); //AK
							GivePlayerWeapon(playerid, 24, 600); // Deagle
							GivePlayerWeapon(playerid, 27, 500); //Combat
							GivePlayerWeapon(playerid, 16, 3); // 3 Nade
							GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
							GivePlayerWeapon(playerid, 35, 3); // RPG
						}
  	    				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "ORANGE_E"You have refilled your weapons!");
  	    			}
   				}
	   		}
	   	}
	   	case 511: // Global Invite
		{
	   		if(!response) return true;

			switch(listitem)
			{
				case 0: // CnR
 				{
					foreach(Player, ii)
					{
						if(canUseKey[ii] == true &&  pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							format(str, sizeof(str), ""LB2_E"Hey {%06x}%s!\n"LB2_E"Would you like to participant in the "LB_E"Cops and Robbers minigame?", pColor[ii], pName[ii], ii);
							ShowPlayerDialog(ii, 512, DIALOG_STYLE_MSGBOX, ""RED_E"Cops and Robbers Minigame", str, "Yes", "No");

							if(pHidden[playerid] == 0)
								format(str, sizeof(str), "Server: "YELLOW_E"%s(%d) has invited you to join the Cops and Robbers minigame!", pName[playerid], playerid);
							else
								format(str, sizeof(str), "Server: "YELLOW_E"You have been invited to the Cops and Robbers minigame by an Administrator!", pName[playerid], playerid);
							SendClientMessage(ii, COLOR_RED, str);
						}
					}
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have sent all players a global message to join the CnR minigame!");
				}
				case 1: // Derby
 				{
					foreach(Player, ii)
					{
						if(canUseKey[ii] == true &&  pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							format(str, sizeof(str), ""LB2_E"Hey {%06x}%s!\n"LB2_E"Would you like to participant in the "LB_E"Derby minigame?", pColor[ii], pName[ii], ii);
							ShowPlayerDialog(ii, 513, DIALOG_STYLE_MSGBOX, ""LB_E"Derby Minigame", str, "Yes", "No");
							if(pHidden[playerid] == 0)
								format(str, sizeof(str), "Server: "YELLOW_E"%s(%d) has invited you to join the Derby minigame!", pName[playerid], playerid);
							else
								format(str, sizeof(str), "Server: "YELLOW_E"You have been invited to the Derby minigame by an Administrator!", pName[playerid], playerid);
							SendClientMessage(ii, COLOR_RED, str);
						}
					}
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have sent all players a global message to join the Derby minigame!");
				}
				case 2: // Fallout
 				{
					foreach(Player, ii)
					{
						if(canUseKey[ii] == true && pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							format(str, sizeof(str), ""LB2_E"Hey {%06x}%s!\n"LB2_E"Would you like to participant in the "LB_E"Fallout minigame?", pColor[ii], pName[ii], ii);
							ShowPlayerDialog(ii, 514, DIALOG_STYLE_MSGBOX, ""WHITE_E"Fallout Minigame", str, "Yes", "No");
							if(pHidden[playerid] == 0)
								format(str, sizeof(str), "Server: "YELLOW_E"%s(%d) has invited you to join the Fallout minigame!", pName[playerid], playerid);
							else
								format(str, sizeof(str), "Server: "YELLOW_E"You have been invited to the Fallout minigame by an Administrator!", pName[playerid], playerid);
							SendClientMessage(ii, COLOR_RED, str);
						}
					}
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have sent all players a global message to join the Fallout minigame!");
				}
				case 3: // LMS
 				{
					foreach(Player, ii)
					{
						if(canUseKey[ii] == true  && pSpawned[ii] == 1 && doingStunt[ii] == 0 && pSpectating[ii] == -1 && cAFK[ii] < 10 && pJail[ii] == 0)
						{
							format(str, sizeof(str), ""LB2_E"Hey {%06x}%s!\n"LB2_E"Would you like to participant in the "LB_E"Last Man Standing minigame?", pColor[ii], pName[ii], ii);
							ShowPlayerDialog(ii, 515, DIALOG_STYLE_MSGBOX, ""GREEN_E"LMS Minigame", str, "Yes", "No");
							if(pHidden[playerid] == 0)
								format(str, sizeof(str), "Server: "YELLOW_E"%s(%d) has invited you to join the LMS minigame!", pName[playerid], playerid);
							else
								format(str, sizeof(str), "Server: "YELLOW_E"You have been invited to the LMS minigame by an Administrator!", pName[playerid], playerid);
							SendClientMessage(ii, COLOR_RED, str);
						}
					}
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "LB2_E"You have sent all players a global message to join the LMS minigame!");
				}
			}
		}
	   	case 512: // CNR
		{
			if(response)
			{
				// Agreed
				cmd_cnr(playerid);
			}
		}
		case 513: // Derby
		{
			if(response)
			{
				// Agreed
				cmd_derby(playerid);
			}
		}
		case 514: // Fallout
		{
			if(response)
			{
				// Agreed
				cmd_fallout(playerid);
			}
		}
		case 515: // LMS
		{
			if(response)
			{
				// Agreed
				cmd_lms(playerid);
			}
		}
		case 555: // Tutorial
		{
   			SetPlayerInterior(playerid, 0);
   			SetPlayerPos(playerid, -2665.5579, 1340.2844, 17.0);
			Streamer_UpdateEx(playerid, -2665.5579, 1340.2844, 17.0);
			SetPlayerCameraPos(playerid, -2591.6941, 1353.3341, 23.0);
			SetPlayerCameraLookAt(playerid, -2665.5579, 1340.2844, 17.0);
			new line3[500];
			strcat(line3, "Here on UFF we have strict rules against cheating.\nCheats give an unfair advantage to the user, thus making the game less fun for others.\nHacking is also not allowed and any hacker (DoS'ers in particular) will be severely punished.");
    		strcat(line3, "\nAnyone that is caught cheating and/or hacking will be permanently banned from the server.\nPlease abide by the /rules and dont give admins a hard time, otherwise there will be consequences.");
			ShowPlayerDialog(playerid, 556, DIALOG_STYLE_MSGBOX, "Part 2: "LB2_E"Cheating and Hacking", line3, "Next", "");
		}
		case 556: // Tutorial
		{
			SetPlayerPos(playerid, -1255.1005,-18.7135,14.1484);
   			Streamer_UpdateEx(playerid, -1255.1005,-18.7135,14.1484);
   			SetPlayerCameraPos(playerid, -1125.1600, 4.1103, 45.0);
			SetPlayerCameraLookAt(playerid, -1262.5243, 15.5981, 35.0);
			new line4[500];
			strcat(line4, "There are many things to do on this server, it's mainly built for stunting and our new cops and robbers TDM.\nBe sure to check out the teleports (/teles) and commands (/cmds)! Also visit /CnR.\nWant more features and commands? Type /premium for more info!");
    		strcat(line4, "\nWe have the best mapped stunt zones, which can be found at /teles and DM's (/dm)!\nWant to report a bug or have a great suggestion? Post it on the forums or use one of the following commands, /bugs /suggest!");
			ShowPlayerDialog(playerid, 557, DIALOG_STYLE_MSGBOX, "Part 3: "LB2_E"About the server", line4, "Next", "");
		}
		case 557: // Tutorial
		{
			Streamer_UpdateEx(playerid, 403.3845,2475.3228,38.6900);
		    SetPlayerPos(playerid, 403.3845,2475.3228,38.6900);
		    SetPlayerFacingAngle(playerid, 225.3292);
			SetPlayerCameraPos(playerid, 408.1093, 2471.5383, 40.2315);
			SetPlayerCameraLookAt(playerid, 403.3845, 2475.3228, 38.6900);

			new line5[500];
			strcat(line5, "Well, that's all for now!\nHopefully you will have a good time and follow the /rules.\nIf you need any further assistance feel free to ask one of our admins!");
    		strcat(line5, "\nIf you still need help (type /help) or wish to help others there are many great guides on the forums.");
			ShowPlayerDialog(playerid, 558, DIALOG_STYLE_MSGBOX, "Part 4: "LB2_E"The End", line5, "Exit", "");
		}
		case 558: // Tutorial
		{
			SetPlayerInterior(playerid, 0);
		    TogglePlayerControllable(playerid, 1);
		    SetCameraBehindPlayer(playerid);
		    LoadPlayerPosition(playerid);
		    TextDrawHideForPlayer(playerid, letterbox[0]);
			TextDrawHideForPlayer(playerid, letterbox[1]);
		}
		case TELE_DIALOG: //Teleport Dialog
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: cmd_stunt(playerid);
					case 1: cmd_cities(playerid);
					case 2: cmd_jumps(playerid);
					case 3: cmd_funmaps(playerid);
					case 4: cmd_challenge(playerid);
					case 5: cmd_tunes(playerid);
					case 6: cmd_drift(playerid);
					case 7: cmd_misc(playerid);
					case 8: cmd_races(playerid);
					case 9: cmd_dm(playerid);
					case 10: cmd_newmaps(playerid);
					case 11: cmd_minigames(playerid);
					}
			}
		}
		case 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34:
		{
			if(!response) return ShowTeleportMenu(playerid);

			switch(dialogid)
			{
   				case 23:
			    {
			    	switch(listitem)
 					{
   						case 0: return cmd_sf(playerid);
						case 1: return cmd_aa(playerid);
						case 2: return cmd_lv(playerid);
						case 3: return cmd_ls(playerid);
 				    	case 4: return cmd_chilliad(playerid);
 				    	case 5: return cmd_sfair(playerid);
					 	case 6: return cmd_lsair(playerid);
 				    	case 7: return cmd_lvair(playerid);
 				    	case 8: return cmd_dam(playerid);
 				    	case 9: return cmd_beach(playerid);
						case 10: return cmd_bowl(playerid);
						case 11: return cmd_wallride(playerid);
						case 12: return cmd_skc(playerid);
						case 13: return cmd_bordel(playerid);
						case 14: return cmd_docks(playerid);
						case 15: return cmd_maze(playerid);
						case 16: return cmd_maze2(playerid);
						case 17: return cmd_maze3(playerid);
						case 18: ShowTeleportMenu(playerid);
					}
				}
				case 24:
			    {
			    	switch(listitem)
 					{
						case 0: return cmd_sfpd(playerid);
						case 1: return cmd_lvpd(playerid);
						case 2: return cmd_lspd(playerid);
						case 3: return cmd_sfs(playerid);
						case 4: return cmd_lvs(playerid);
						case 5: return cmd_lss(playerid);
						case 6: return cmd_bs(playerid);
						case 7: return cmd_bs2(playerid);
						case 8: return cmd_quarry(playerid);
						case 9: return cmd_ms(playerid);
						case 10: return cmd_film(playerid);
						case 11: return cmd_nhouse(playerid);
 						case 12: return cmd_rhouse(playerid);
 						case 13: return cmd_ohouse(playerid);
 						case 14: return cmd_adminhq(playerid);
 						case 15: return cmd_ap(playerid);
 						case 16: return cmd_ee(playerid);
 						case 17: return cmd_eej(playerid);
 						case 18: return cmd_ghosttown(playerid);
 						case 19: return cmd_lsh(playerid);
 						case 20: return cmd_lvh(playerid);
 						case 21: return cmd_sfh(playerid);
 						case 22: return cmd_jump(playerid);
 						case 23: return cmd_sftj(playerid);
 						case 24: return cmd_golfpark(playerid);
 						case 25: return cmd_motel(playerid);
 						case 26: return cmd_farm(playerid);
 						case 27: return cmd_fb(playerid);
 						case 28: return cmd_forest(playerid);
 						case 29: return cmd_a51(playerid);
 						case 30: return cmd_villa(playerid);
 						case 31: return cmd_motel2(playerid);
 						case 32: return cmd_junkyard(playerid);
 						case 33: return cmd_trans3(playerid);
 						case 34: return cmd_palominocreek(playerid);
 						case 35: return cmd_sky(playerid);
 						case 36: return cmd_lvs2(playerid);
 						case 37: ShowTeleportMenu(playerid);
   					}
				}
				case 25:
			    {
			    	switch(listitem)
 					{
						case 0: return cmd_skr(playerid);
						case 1: return cmd_hugejump(playerid);
						case 2: return cmd_glassjump(playerid);
						case 3: return cmd_bikejump(playerid);
   						case 4: return cmd_waterjump(playerid);
   						case 5: return cmd_tunneljump(playerid);
   						case 6: return cmd_qjump(playerid);
   						case 7: return cmd_bigjump(playerid);
						case 8: return cmd_loopjump(playerid);
   						case 9: return cmd_dj(playerid);
						case 10: return cmd_cityjump(playerid);
						case 11: ShowTeleportMenu(playerid);
   					}
				}
				case 26:
			    {
			    	switch(listitem)
 					{
						case 0: return cmd_loop(playerid);
   						case 1: return cmd_drop(playerid);
   						case 2: return cmd_gd(playerid);
   						case 3: return cmd_lf(playerid);
   						case 4: return cmd_tugfun(playerid);
   						case 5: return cmd_skc(playerid);
   						case 6: return cmd_tr(playerid);
   						case 7: return cmd_carsumo(playerid);
						case 8: return cmd_halfpipe(playerid);
						case 9: return cmd_slide(playerid);
						case 10: return cmd_funroad(playerid);
						case 11: ShowTeleportMenu(playerid);
					}
				}
				case 27:
			    {
			    	switch(listitem)
 					{
						case 0: return cmd_loco(playerid);
   						case 1: return cmd_arch(playerid);
   						case 2: return cmd_trans(playerid);
   						case 3: return cmd_ps(playerid);
   						case 4: ShowTeleportMenu(playerid);
					}
				}
				case 28:
			    {
			    	switch(listitem)
 					{
 						case 0: return cmd_lvdrift(playerid);
   						case 1: return cmd_sfdrift(playerid);
   						case 2: return cmd_driftisland(playerid);
   						case 3: return cmd_driftcity(playerid);
   						case 4: ShowTeleportMenu(playerid);
					}
		   		}
		   		case 29:
			    {
			    	switch(listitem)
 					{
 					    case 0: return cmd_interiors(playerid);
 						case 1: return cmd_club(playerid);
 						case 2: return cmd_club2(playerid);
 						case 3: return cmd_wang(playerid);
						case 4: return cmd_otto(playerid);
   						case 5: return cmd_hippy(playerid);
   						case 6: return cmd_truckstop(playerid);
   						case 7: return cmd_lsdive(playerid);
						case 8: return cmd_andro(playerid);
						case 9: return cmd_stadium(playerid);
						case 10: return cmd_under(playerid);
   						case 11: return cmd_nisland(playerid);
		 				case 12: return cmd_treehouse(playerid);
		 				case 13: return cmd_uclub(playerid);
		 				case 14: return cmd_bank(playerid);
		 				case 15: return cmd_hover(playerid);
		 				case 16: return cmd_party(playerid);
		 				case 17: return cmd_restaurant(playerid);
		 				case 18: ShowTeleportMenu(playerid);
 					}
				}
				case 30:
			    {
			    	switch(listitem)
 					{
 						case 0: return cmd_racemap(playerid);
 						case 1: return cmd_racemap2(playerid);
 						case 2: return cmd_racemap3(playerid);
						case 3: return cmd_quadrace(playerid);
						case 4: return cmd_rctrack(playerid);
						case 5: return cmd_rctrack2(playerid);
						case 6: ShowTeleportMenu(playerid);
				   	}
	   			}
			   	case 31:
			    {
			    	switch(listitem)
 					{
   						case 0: return cmd_rocket(playerid);
   						case 1: return cmd_war(playerid);
   						case 2: return cmd_minigun(playerid);
						case 3: return cmd_tdm(playerid);
						case 4: return cmd_csdm(playerid);
						case 5: return cmd_odm(playerid);
						case 6: return cmd_sniperdm(playerid);
						case 7: return cmd_cnr(playerid);
						case 8: return cmd_dm(playerid);
						case 9: return cmd_dm2(playerid);
						case 10: return cmd_dm3(playerid);
						case 11: return cmd_dm4(playerid);
						case 12: ShowTeleportMenu(playerid);
					}
				}
		   		case 32:
			    {
					switch(listitem)
 					{
						case 0: return cmd_disney(playerid);
         				case 1: return cmd_racemap2(playerid);
   						case 2: return cmd_tube(playerid);
   						case 3: return cmd_skyroad(playerid);
						case 4: return cmd_dam(playerid);
						case 5: return cmd_concert(playerid);
						case 6: return cmd_egypt(playerid);
						case 7: return cmd_prison(playerid);
						case 8: return cmd_maze4(playerid);
						case 9: ShowTeleportMenu(playerid);
					}
		 		}
		 		case 33:
			    {
			    	switch(listitem)
 					{
 						case 0: return cmd_hayclimb(playerid);
 						case 1: return cmd_bikec(playerid);
 						case 2: return cmd_parkour(playerid);
 						case 3: return cmd_parkour2(playerid);
 						case 4: return cmd_parkour3(playerid);
 						case 5: return cmd_bmx(playerid);
 						case 6: return cmd_quadparkour(playerid);
						case 7: return cmd_skydive(playerid);
                        case 8: return cmd_skydive2(playerid);
                        case 9: return cmd_skydive3(playerid);
 		    			case 10: return cmd_hayclimb2(playerid);
 		    			case 11: return cmd_bikec3(playerid);
						case 12: return cmd_parkour4(playerid);
						case 13: return cmd_parkour5(playerid);
                        case 14: return cmd_bikec2(playerid);
                        case 15: return cmd_bikec3(playerid);
                        case 16: return cmd_offroad(playerid);
                        case 17: return cmd_chal1(playerid);
						case 18: return cmd_chal2(playerid);
						case 19: return cmd_chal3(playerid);
						case 20: return cmd_chal4(playerid);
						case 21: return cmd_chal5(playerid);
						case 22: return cmd_chal6(playerid);
						case 23: return cmd_chal7(playerid);
						case 24: return cmd_chal8(playerid);
						case 25: return cmd_skydive4(playerid);
                        case 26: return cmd_skydive5(playerid);
                        case 27: return cmd_bikec4(playerid);
                        case 28: return cmd_chal9(playerid);
                        case 29: return cmd_chal10(playerid);
						case 30: ShowTeleportMenu(playerid);
 					}
				}
				case 34:
			    {
			    	switch(listitem)
 					{
 						case 0: return cmd_derby(playerid);
 						case 1: return cmd_fallout(playerid);
 						case 2: return cmd_cnr(playerid);
 						case 3: return cmd_tdm(playerid);
 						case 4: return cmd_csdm(playerid);
 						case 5: return cmd_lms(playerid);
 						case 6: return cmd_shooter(playerid);
 						case 7: ShowTeleportMenu(playerid);
					}
				}
       		}
   		}
  		case 3131: // Race Vehicle Menu 2
		{
			if(response)
			{
		    	switch(listitem)
				{
					case 0:
                    {
                        if(pPremium[playerid] == 0)
	                            return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
					  ShowPlayerDialog(playerid, 3449, DIALOG_STYLE_LIST,""YELLOW_E"Special Vehicles", ""RED_E"Custom Cheetah\n"DARK_E"Custom Infernus\n"LB_E"Police Infernus\n"YELLOW_E"Custom NRG\n"GREEN_E"Custom Bullet\n"WHITE_E"Custom Huntley", "Select", "Back");
					}
					case 1: ShowPlayerDialog(playerid, 3437, DIALOG_STYLE_LIST,
						""LB_E"Bikes", "BF-400\nBike\nBMX\nFaggio\nFCR-900\nFreeway\nMountain Bike\nNRG-500\nPCJ-600\nPizzaboy\nQuad\nSanchez\nWayfarer", "Select", "Back");
					case 2: ShowPlayerDialog(playerid, 3438, DIALOG_STYLE_LIST,
						"Convertibles", "Comet\nFeltzer\nStallion\nWindsor", "Select", "Back");
					case 3: ShowPlayerDialog(playerid, 3439, DIALOG_STYLE_LIST,
						"Industrial", "Benson\nBobcat\nBurrito\nBoxville\nBoxburg\nCement Truck\nDFT-30\nFlatbed\nLinerunner\nMule\nNewsvan\nPacker\nPetrol Tanker\nPony\nRoadtrain\nRumpo\nSadler\nSadler Shit\nTopfun\nTractor\nTrashmaster\nUtility Van\nWalton\nYankee\nYosemite", "Select", "Back");
					case 4: ShowPlayerDialog(playerid, 3440, DIALOG_STYLE_LIST,
						"Lowriders", "Blade\nBroadway\nRemington\nSavanna\nSlamvan\nTahoma\nTornado\nVoodoo", "Select", "Back");
					case 5: ShowPlayerDialog(playerid, 3441, DIALOG_STYLE_LIST,
						"Off Road", "Bandito\nBF Injection\nDune\nHuntley\nLandstalker\nMesa\nMonster\nMonster A\nMonster B\nPatriot\nRancher A\nRancher B\nSandking", "Select", "Back");
					case 6: ShowPlayerDialog(playerid, 3442, DIALOG_STYLE_LIST,
						"Public Service Vehicles", "Ambulance\nBarracks\nBus\nCabbie\nCoach\nCop Bike (HPV-1000)\nFBI Rancher\nFBI Truck\nFiretruck\nFiretruck LA\nPolice Car (LSPD)\nPolice Car (LVPD)\nPolice Car (SFPD)\nRanger\nS.W.A.T\nTaxi", "Select", "Back");
					case 7: ShowPlayerDialog(playerid, 3443, DIALOG_STYLE_LIST,
						"Saloons", "Admiral\nBloodring Banger\nBravura\nBuccaneer\nCadrona\nClover\nElegant\nElegy\nEmperor\nEsperanto\nFortune\nGlendale Shit\nGlendale\nGreenwood\nHermes\nIntruder\nMajestic\nManana\nMerit\nNebula\nOceanic\nPicador\nPremier\nPrevion\nPrimo\nSentinel\nStafford\nSultan\nSunrise\nTampa\nVincent\nVirgo\nWillard\nWashington", "Select", "Back");
					case 8: ShowPlayerDialog(playerid, 3444, DIALOG_STYLE_LIST,
						""LG_E"Sport Vehicles", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350", "Select", "Back");
					case 9: ShowPlayerDialog(playerid, 3445, DIALOG_STYLE_LIST,
						"Station Wagons", "Moonbeam\nPerenniel\nRegina\nSolair\nStratum", "Select", "Back");
					case 10: ShowPlayerDialog(playerid, 3448, DIALOG_STYLE_LIST,
						"Unique Vehicles", "Baggage\nCaddy\nCamper\nCamper A\nCombine Harvester\nDozer\nDumper\nForklift\nHotknife\nHustler\nHotdog\nKart\nMower\nMr Whoopee\nRomero\nSecuricar\nStretch\nSweeper\nTowtruck\nTug\nVortex", "Select", "Back");
				}
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid) && RaceParticipant[playerid] == true)
				{
			    	SendClientMessage(playerid, COLOR_RED, ""UFF" "YELLOW_E"You must have a vehicle in order to participate in the race!");
			    	ShowPlayerDialog(playerid, 3131, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Vehicle List", ""WHITE_E"Special Vehicles\n"LG_E"Bikes\n"WHITE_E"Convertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles\nSaloons\n"LG_E"Sport Vehicles\n"WHITE_E"Station Wagons\nUnique Vehicles", "Next", "Exit");
					InfoTD_MSG(playerid, 2500, "~r~~h~You need a vehicle to participate!");
				}
			}
  		}
		case 3434:
		{
			if(response)
			{
   				switch(listitem)
				{
				   case 0:
                   {
					    if(pPremium[playerid] == 0)
				              return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
					ShowPlayerDialog(playerid, 3449, DIALOG_STYLE_LIST, ""RED_E"Special Vehicles", ""RED_E"Custom Cheetah\n"DARK_E"Custom Infernus\n"LB_E"Police Infernus\n"YELLOW_E"Custom NRG\n"GREEN_E"Custom Bullet\n"WHITE_E"Custom Huntley", "Select", "Back");
                    }
					case 1: ShowAirplanes(playerid);
					case 2: ShowHelicopters(playerid);
					case 3: ShowBikes(playerid);
					case 4: ShowConvert(playerid);
					case 5: ShowIndustrial(playerid);
					case 6: ShowLowriders(playerid);
					case 7: ShowOffRoad(playerid);
					case 8: ShowPublicVehicles(playerid);
					case 9: ShowSaloons(playerid);
					case 10: ShowSportVehicles(playerid);
					case 11: ShowStationWagons(playerid);
					case 12: ShowBoats(playerid);
					case 13: ShowRCVehicles(playerid);
					case 14: ShowUniqueVehicles(playerid);

				}
			}
			else TogglePlayerControllable(playerid, true);
		}
		case 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450:
		{
			if(response)
			{
			    new spawnModel;
				switch(dialogid)
				{
				    case 3435:
				    {

					    if(IsPlayerInArea(playerid, 370.922729, 2528.936523, 391.916717, 2550.296142)
						|| IsPlayerInArea(playerid, 410.901855, -1865.048950, 441.800323, -1833.564453)
						|| IsPlayerInArea(playerid, -189.839828, 1872.175292, -173.387283, 1903.181030)
						|| IsPlayerInArea(playerid, -1366.380981, -270.557952, -1364.495483, -229.168777)) // AA, BEACH,Party,sfaair
						{
							format(str, sizeof(str), "~y~You can't spawn vehicle here!");
						    GameTextForPlayer(playerid, str, 3000, 3);
						    ShowVehicleMenu(playerid);
							return true;
						}
	   					switch(listitem)
	       				{
       						case 0: spawnModel = 592; //Andromeda
							case 1: spawnModel = 577; //AT-400
							case 2: spawnModel = 511; //Beagle
							case 3: spawnModel = 512; //Cropduster
	       				    case 4: spawnModel = 593; //Dodo
	       				    case 5: spawnModel = 553; //Nevada
				   			case 6: spawnModel = 476; //Rustler
							case 7: spawnModel = 519; //Shamel
							case 8: spawnModel = 460; //Skimmer
	       				    case 9: spawnModel = 513; //Stuntplane
						}
					}
					case 3436:
					{
						if(IsPlayerInRangeOfPoint(playerid, 70.0, 376.6497, 2506.7773, 16.6647)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, -2629.5991, 1357.5739, 7.1000)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, -1208.9193, 26.1246, 13.9543)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, 2155.2126, 1677.7125, 10.2580)) // AA, SF, SFAIR, LV
						{
							SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You can't spawn any helicopters near the spawn area!");
							ShowVehicleMenu(playerid);
							return true;
						}
						switch(listitem)
						{
						    case 0: spawnModel = 548;
						    case 1: spawnModel = 417;
						    case 2: spawnModel = 487;
						    case 3: spawnModel = 488;
						    case 4: spawnModel = 497;
						    case 5: spawnModel = 563;
						    case 6: spawnModel = 469;
						}
					}
					case 3437:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 581;
						    case 1: spawnModel = 509;
						    case 2: spawnModel = 481;
						    case 3: spawnModel = 462;
						    case 4: spawnModel = 521;
						    case 5: spawnModel = 463;
						    case 6: spawnModel = 510;
						    case 7: spawnModel = 522;
						    case 8: spawnModel = 461;
						    case 9: spawnModel = 448;
						    case 10: spawnModel = 471;
						    case 11: spawnModel = 468;
						    case 12: spawnModel = 586;
						}
					}
					case 3438:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 480;
						    case 1: spawnModel = 533;
						    case 2: spawnModel = 439;
						    case 3: spawnModel = 555;
						}
					}
					case 3439:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 499;
						    case 1: spawnModel = 422;
						    case 2: spawnModel = 482;
						    case 3: spawnModel = 498;
						    case 4: spawnModel = 609;
						    case 5: spawnModel = 524;
						    case 6: spawnModel = 578;
						    case 7: spawnModel = 455;
						    case 8: spawnModel = 403;
						    case 9: spawnModel = 414;
						    case 10: spawnModel = 582;
						    case 11: spawnModel = 443;
						    case 12: spawnModel = 514;
						    case 13: spawnModel = 515;
						    case 14: spawnModel = 440;
						    case 15: spawnModel = 543;
						    case 16: spawnModel = 605;
						    case 17: spawnModel = 459;
						    case 18: spawnModel = 531;
						    case 19: spawnModel = 408;
						    case 20: spawnModel = 552;
						    case 21: spawnModel = 478;
						    case 22: spawnModel = 456;
						    case 23: spawnModel = 554;
						}
					}
					case 3440:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 536;
						    case 1: spawnModel = 575;
						    case 2: spawnModel = 534;
						    case 3: spawnModel = 567;
						    case 4: spawnModel = 535;
						    case 5: spawnModel = 566;
						    case 6: spawnModel = 576;
						    case 7: spawnModel = 412;
						}
					}
					case 3441:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 568;
						    case 1: spawnModel = 424;
						    case 2: spawnModel = 573;
						    case 3: spawnModel = 579;
						    case 4: spawnModel = 400;
						    case 5: spawnModel = 500;
						    case 6: spawnModel = 444;
						    case 7: spawnModel = 556;
						    case 8: spawnModel = 557;
						    case 9: spawnModel = 470;
						    case 10: spawnModel = 489;
						    case 11: spawnModel = 505;
						    case 12: spawnModel = 495;
						}
					}
					case 3442:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 416;
						    case 1: spawnModel = 433;
						    case 2: spawnModel = 431;
						    case 3: spawnModel = 438;
						    case 4: spawnModel = 437;
						    case 5: spawnModel = 523;
						    case 6: spawnModel = 490;
						    case 7: spawnModel = 528;
						    case 8: spawnModel = 407;
						    case 9: spawnModel = 544;
						    case 10: spawnModel = 596;
						    case 11: spawnModel = 598;
						    case 12: spawnModel = 597;
						    case 13: spawnModel = 599;
						    case 14: spawnModel = 601;
						    case 15: spawnModel = 420;
						}
					}
					case 3443:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 445;
						    case 1: spawnModel = 504;
						    case 2: spawnModel = 401;
						    case 3: spawnModel = 518;
						    case 4: spawnModel = 527;
						    case 5: spawnModel = 542;
						    case 6: spawnModel = 507;
						    case 7: spawnModel = 562;
						    case 8: spawnModel = 585;
						    case 9: spawnModel = 419;
						    case 10: spawnModel = 526;
						    case 11: spawnModel = 604;
						    case 12: spawnModel = 466;
						    case 13: spawnModel = 492;
						    case 14: spawnModel = 474;
						    case 15: spawnModel = 546;
						    case 16: spawnModel = 517;
						    case 17: spawnModel = 410;
						    case 18: spawnModel = 551;
						    case 19: spawnModel = 516;
						    case 20: spawnModel = 467;
						    case 21: spawnModel = 600;
						    case 22: spawnModel = 426;
						    case 23: spawnModel = 436;
						    case 24: spawnModel = 547;
						    case 25: spawnModel = 405;
						    case 26: spawnModel = 580;
						    case 27: spawnModel = 560;
						    case 28: spawnModel = 550;
						    case 29: spawnModel = 549;
						    case 30: spawnModel = 540;
						    case 31: spawnModel = 491;
						    case 32: spawnModel = 529;
						    case 33: spawnModel = 421;
						}
					}
					case 3444:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 602;
						    case 1: spawnModel = 429;
						    case 2: spawnModel = 496;
						    case 3: spawnModel = 402;
						    case 4: spawnModel = 541;
						    case 5: spawnModel = 415;
						    case 6: spawnModel = 589;
						    case 7: spawnModel = 587;
						    case 8: spawnModel = 565;
						    case 9: spawnModel = 494;
						    case 10: spawnModel = 502;
						    case 11: spawnModel = 503;
						    case 12: spawnModel = 411;
						    case 13: spawnModel = 559;
						    case 14: spawnModel = 603;
						    case 15: spawnModel = 475;
						    case 16: spawnModel = 506;
						    case 17: spawnModel = 451;
						    case 18: spawnModel = 558;
						    case 19: spawnModel = 477;
						}
					}
					case 3445:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 418;
						    case 1: spawnModel = 404;
						    case 2: spawnModel = 479;
						    case 3: spawnModel = 458;
						    case 4: spawnModel = 561;
						}
					}
					case 3446:
					{
						if(IsPlayerInRangeOfPoint(playerid, 70.0, 376.6497, 2506.7773, 16.6647)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, -2629.5991, 1357.5739, 7.1000)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, -1208.9193, 26.1246, 13.9543)
						|| IsPlayerInRangeOfPoint(playerid, 70.0, 2155.2126, 1677.7125, 10.2580)) // AA, SF, SFAIR, LV
						{
							SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You can't spawn any boats near the spawn area!");
							ShowVehicleMenu(playerid);
							return true;
						}
						switch(listitem)
						{
						    case 0: spawnModel = 472;
						    case 1: spawnModel = 473;
						    case 2: spawnModel = 493;
						    case 3: spawnModel = 595;
						    case 4: spawnModel = 484;
						    case 5: spawnModel = 430;
						    case 6: spawnModel = 453;
						    case 7: spawnModel = 452;
						    case 8: spawnModel = 446;
						    case 9: spawnModel = 454;
						}
					}
					case 3447:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 441;
						    case 1: spawnModel = 464;
						    case 2: spawnModel = 465;
						    case 3: spawnModel = 501;
						    case 4: spawnModel = 564;
						    case 5: spawnModel = 594;
		    			}
					}
					case 3448:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 485;
						    case 1: spawnModel = 457;
						    case 2: spawnModel = 483;
						    case 3: spawnModel = 508;
						    case 4: spawnModel = 532;
						    case 5: spawnModel = 486;
						    case 6: spawnModel = 406;
						    case 7: spawnModel = 530;
						    case 8: spawnModel = 434;
						    case 9: spawnModel = 545;
						    case 10: spawnModel = 588;
						    case 11: spawnModel = 571;
						    case 12: spawnModel = 572;
						    case 13: spawnModel = 423;
						    case 14: spawnModel = 442;
						    case 15: spawnModel = 428;
						    case 16: spawnModel = 409;
						    case 17: spawnModel = 574;
						    case 18: spawnModel = 525;
						    case 19: spawnModel = 583;
					     	case 20: spawnModel = 539;
						}
					}
					case 3449:
					{
						switch(listitem)
						{
							case 0: return cmd_v70(playerid);
							case 1: return cmd_v75(playerid);
							case 2: return cmd_v71(playerid);
							case 3: return cmd_v74(playerid);
							case 4: return cmd_v73(playerid);
							case 5: return cmd_v72(playerid);
						}
					}
					case 3450:
					{
						switch(listitem)
						{
						    case 0: spawnModel = 435;
						    case 1: spawnModel = 450;
						    case 2: spawnModel = 591;
						    case 3: spawnModel = 606;
						    case 4: spawnModel = 607;
						    case 5: spawnModel = 610;
						    case 6: spawnModel = 569;
						    case 7: spawnModel = 590;
						    case 8: spawnModel = 584;
						    case 9: spawnModel = 570;
						    case 10: spawnModel = 608;
						    case 11: spawnModel = 611;
						}
					}
				}
				if(IsPlayerInArea(playerid, 370.922729, 2528.936523, 391.916717, 2550.296142)
				|| IsPlayerInArea(playerid, 410.901855, -1865.048950, 441.800323, -1833.564453)
				|| IsPlayerInArea(playerid, -189.839828, 1872.175292, -173.387283, 1903.181030)
				|| IsPlayerInArea(playerid, -1366.380981, -270.557952, -1364.495483, -229.168777)) // AA, BEACH,Party,sfaair
				{
					format(str, sizeof(str), "~y~You can't spawn vehicle here!");
				    GameTextForPlayer(playerid, str, 3000, 3);
					return true;
				}
				SpawnPlayerVehicle(playerid, spawnModel);
			}
			else
			{
			    ShowPlayerDialog(playerid, 3131, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Vehicle List", ""PINK_E"Special Vehicles\n"LG_E"Bikes\n"WHITE_E"Convertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles\nSaloons\n"LG_E"Sport Vehicles\n"WHITE_E"Station Wagons\nUnique Vehicles", "Next", "Exit");
			}
		}
		case TUNE_DIALOG:
		{
			if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:// Paintjobs
	        	    {
	        	    	ShowPlayerDialog(playerid, DIALOG_TYPE_COLORS, DIALOG_STYLE_LIST, "Car Colors", "Black\nWhite\nRed\nBlue\nGreen\nYellow\nPink\nBrown\nGrey\nGold\nDark Blue\nLight Blue\nCold Green\nLight Grey\nDark Red\nDark Brown\n \nBack", "Apply", "Close");
	                }
	        	    case 1: // colors
	        	    {
	                	ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
	        	    }
	        	    case 2: // Wheels
	        	    {
	     				ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
	        	    }
					case 3: // Hydraulics
	        	    {
	 					AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have added hydraulics to your vehicle.");
			            ShowTuneMenu(playerid);
      				}
					case 4: // Nitrous Oxide
	        	    {
						ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitro\n5x Nitro\n10x Nitro\n"RED_E"Back", "Apply", "Close");
	        	    }
					case 5: // Repair Car
	        	    {
	        	        SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully repaired your vehicle.");
					 	ShowTuneMenu(playerid);
	    			}
	        	    case 6: // Extra Mods
	        	    {
						vID = GetPlayerVehicleID(playerid);
						vv = GetVehicleModel(vID);
						iTemp = 0;
						new line3[700];
						foreach(new xx : ValidComponents(vv))
						{
							if(GetVehicleComponentInSlot(vID, GetVehicleComponentType(xx)) != xx)
							{
								format(str, sizeof(str), ""RED_E"%d: %s\n", xx, componentName[xx - 1000]);
							}
							else
							{
								format(str, sizeof(str), ""GREEN_E"%d: %s\n", xx, componentName[xx - 1000]);
							}

							// TO-DO: optimize concatenation?
							strcat(line3, str);
							iTemp ++;
						}

						if(iTemp == 0)
						{
							SendClientMessage(playerid, COLOR_GREY, "No components suit this vehicle!");
							return true;
						}

						ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Available components", line3, "Apply", "Close"); // TO-DO: memory optimization
	        	    }
				}
			}
			return 1;
   		}
		case DIALOG_TYPE_PAINTJOBS:
		{
	       	if(response)
		    {
				vID = GetPlayerVehicleID(playerid);
				vv = GetVehicleModel(vID);
				switch(listitem)// Checking which list item was selected
				{
	                case 0:// Paintjobs
	        	    {
	        	        if(vv == 562 ||
						vv == 565 ||
						vv == 559 ||
						vv == 561 ||
						vv == 560 ||
						vv == 575 ||
						vv == 534 || // Broadway
						vv == 567 ||
						vv == 536 ||
						vv == 535 ||
						vv == 576 ||
						vv == 558)
				        {
							ChangeVehiclePaintjob(vID, 0);
							SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added paintjob your vehicle.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
							PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
						}
						else
						{
						   SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Paintjob is only for Wheel Arch Angrls and Loco Low Co types of cars");
					       ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
						}
	        	    }
	        	    case 1: // Colors
	        	    {
	        	        if(vv == 562 ||
						vv == 565 ||
						vv == 559 ||
						vv == 561 ||
						vv == 560 ||
						vv == 575 ||
						vv == 534 || // Broadway
						vv == 567 ||
						vv == 536 ||
						vv == 535 ||
						vv == 576 ||
						vv == 558)
					    {

							ChangeVehiclePaintjob(vID,1);
							SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added paintjob to vID");
							ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
							PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
						}
						else
						{
					    	SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Paintjob is only for Wheel Arch Angrls and Loco Low Co types of cars");
					    	ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
						}
	        	    }
	        	    case 2: // Exhausts
	        	    {
	        	        if(vv == 562 ||
						vv == 565 ||
						vv == 559 ||
						vv == 561 ||
						vv == 560 ||
						vv == 575 ||
						vv == 534 || // Broadway
						vv == 567 ||
						vv == 536 ||
						vv == 535 ||
						vv == 576 ||
						vv == 558)
					    {

							ChangeVehiclePaintjob(vID,2);
							SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added paintjob to vID");
							ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
							PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
						}
						else
						{
						    SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Paintjob is only for Wheel Arch Angrls and Loco Low Co types of cars");
						    ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
						}
	        	    }
					case 3: // Front Bumpers
	        	    {
	        	        if(vv == 562 ||
						vv == 565 ||
						vv == 559 ||
						vv == 561 ||
						vv == 560 ||
						vv == 575 ||
						vv == 534 || // Broadway
						vv == 567 ||
						vv == 536 ||
						vv == 535 ||
						vv == 576 ||
						vv == 558)
					    {

							ChangeVehiclePaintjob(vID,3);
							SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added paintjob to vID");
							ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
							PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
						}
						else
						{
			       			SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Paintjob is only for Wheel Arch Angrls and Loco Low Co types of cars");
						    ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
						}
	        	    }
					case 4: // Rear Bumpers
	        	    {
	        	        if(vv == 562 ||
						vv == 565 ||
						vv == 559 ||
						vv == 561 ||
						vv == 560 ||
						vv == 575 ||
						vv == 534 || // Broadway
						vv == 567 ||
						vv == 536 ||
						vv == 535 ||
						vv == 576 ||
						vv == 558)
					    {

							ChangeVehiclePaintjob(vID,4);
							SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added paintjob to vID");
							ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
							PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
						}
						else
						{
			            	SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Paintjob is only for Wheel Arch Angrls and Loco Low Co types of cars");
						    ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
						}
	        	    }
					case 5:
	        	    {
	        	        ShowPlayerDialog(playerid, DIALOG_TYPE_PAINTJOBS, DIALOG_STYLE_LIST, "Paintjobs", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nBack", "Apply", "Close");
	        	    }
					case 6:
	        	    {
	             		ShowTuneMenu(playerid);
	        	    }
				}
			}
		}
		case DIALOG_TYPE_COLORS:
		{
	        if(!response) SetCameraBehindPlayer(playerid);

		    if(response)
		    {
				switch(listitem)// Checking which list item was selected
				{
	                case 0:
	        	    {
	    	       		ChangeVehicleColor(GetPlayerVehicleID(playerid),0,0);
			           	format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
			            if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 0;
        					PlayerInfoVeh[playerid][Color2] = 0;
						}
					}
	       	    	case 1:
	        	    {
        	    		ChangeVehicleColor(GetPlayerVehicleID(playerid),1,1);
				    	format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 1;
        					PlayerInfoVeh[playerid][Color2] = 1;
						}
					}
	        	    case 2:
	        	    {
	        	  		ChangeVehicleColor(GetPlayerVehicleID(playerid),3,3);
	        	  		format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 3;
        					PlayerInfoVeh[playerid][Color2] = 3;
						}
					}
					case 3:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),79,79);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 79;
        					PlayerInfoVeh[playerid][Color2] = 79;
						}
					}
					case 4:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),86,86);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 86;
        					PlayerInfoVeh[playerid][Color2] = 86;
						}
	        	    }
					case 5:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),6,6);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 6;
        					PlayerInfoVeh[playerid][Color2] = 6;
						}
					}
					case 6:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),126,126);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				       	if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 126;
        					PlayerInfoVeh[playerid][Color2] = 126;
						}
					}
					case 7:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),66,66);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
		          		if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 66;
        					PlayerInfoVeh[playerid][Color2] = 66;
						}
					}
					case 8:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),24,24);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
			            if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 24;
        					PlayerInfoVeh[playerid][Color2] = 24;
						}
					}
	        	    case 9:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),123,123);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
		          		if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 123;
        					PlayerInfoVeh[playerid][Color2] = 123;
						}
					}
	        	    case 10:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),53,53);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 53;
        					PlayerInfoVeh[playerid][Color2] = 53;
						}
					}
	        	    case 11:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),93,93);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 93;
        					PlayerInfoVeh[playerid][Color2] = 93;
						}
	  				}
					case 12:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),83,83);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 83;
        					PlayerInfoVeh[playerid][Color2] = 83;
						}
					}
					case 13:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),60,60);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 60;
        					PlayerInfoVeh[playerid][Color2] = 60;
						}

	        	    }
					case 14:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),161,161);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 161;
        					PlayerInfoVeh[playerid][Color2] = 161;
						}
					}
					case 15:
	        	    {
						ChangeVehicleColor(GetPlayerVehicleID(playerid),153,153);
						format(tmp, sizeof(tmp), "~y~~h~vehicle repainted");
	                    GameTextForPlayer(playerid, tmp, 3500, 4);
				        if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid])
						{
        					PlayerInfoVeh[playerid][Color1] = 244;
        					PlayerInfoVeh[playerid][Color2] = 244;
						}
					}
	        	    case 16:
	        	    {
	        	        ShowPlayerDialog(playerid, DIALOG_TYPE_COLORS, DIALOG_STYLE_LIST, "Car Colors", "Black\nWhite\nRed\nBlue\nGreen\nYellow\nPink\nBrown\nGrey\nGold\nDark Blue\nLight Blue\nCold Green\nLight Grey\nDark Red\nDark Brown\n \nBack", "Apply", "Close");
	        	    }
	        	    case 17:
	        	    {
	                 	ShowTuneMenu(playerid);
	        	    }
				}
			}
		}
	 	case DIALOG_TYPE_WHEELS:
	    {
   	 		if(response)
	        {
			  	if(!IsNosVehicleModel(GetVehicleModel(GetPlayerVehicleID(playerid))))
				{
				    Error(playerid, "This vehicle isn't compatiable for wheels!");
					return true;
				}
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1025);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Offroad Wheels ");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
	        	    case 1:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1074);
	           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Mega Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
	        	    case 2:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Wires Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 3:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Twist Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 4:
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Grove Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 5:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Import Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

					}
					case 6:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Atomic Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 7:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1096);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		          		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Ahab Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 8:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1097);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		          		SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"You have successfully added Virtual Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 9:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1098);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		          		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Access Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 10:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Trance Wheels ");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 11:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Shadow Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 12:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Rimshine Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 13:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Classic Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 14:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Cutter Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 15:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Switch Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 16:
	        	    {
						AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREEN_E"You have successfully added Dollar Wheels");
				        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");

	        	    }
					case 17:
	        	    {
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
	        	    }
					case 18:
	        	    {
	     				ShowTuneMenu(playerid);
	        	    }
	 			}
			}
		}

		case DIALOG_TYPE_NITRO:
	    {
	        if(response)
	        {
	            vID = GetPlayerVehicleID(playerid);
	            if(!IsNosVehicleModel(GetVehicleModel(vID))) return Error(playerid, "This vehicle is not compatible with nitro!");

	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
						AddVehicleComponent(vID, 1008);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Component successfully added.");
	           			ShowTuneMenu(playerid);
			   		}
	        	    case 1:
	        	    {
						AddVehicleComponent(vID, 1009);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Component successfully added.");
	           			ShowTuneMenu(playerid);
			   		}
	        	    case 2:
	        	    {
						AddVehicleComponent(vID, 1010);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendClientMessage(playerid,COLOR_WHITE,""UFF" "GREEN_E"Component successfully added.");
				        ShowTuneMenu(playerid);
					}
	        	    case 3:
	        	    {
	                	ShowTuneMenu(playerid);
	        	    }
	 			}
			}
		}
		// ==  Bank System ===
		case 126:
		{
	  		if(!response) return true;
	  		switch(listitem)
	 		{
		  		case 0: // Deposit
			   	{
		     		format(line, sizeof(line), "{F6F6F6}You have "LB_E"$%s {F6F6F6}in bank account.\n\nType in the amount you want to deposit below:", ToCurrency(BankMoney[playerid]));
		  			ShowPlayerDialog(playerid, 127, DIALOG_STYLE_INPUT, ""BLUE_E"UFF: "WHITE_E"Bank", line, "Deposit", "Cancel");
			    }
			    case 1: // Withdraw
			    {
		     		format(line, sizeof(line), "{F6F6F6}You have "LB_E"$%s {F6F6F6}in your bank account.\n\nType in the amount you want to withdraw below:", ToCurrency(BankMoney[playerid]));
		       		ShowPlayerDialog(playerid, 128, DIALOG_STYLE_INPUT, ""BLUE_E"UFF: "WHITE_E"Bank", line, "Withdraw", "Cancel");
		    	}
			    case 2: // Check Balance
			    {
		     		format(str, sizeof(str), "{F6F6F6}You have "LB_E"$%s {F6F6F6}in your bank account.", ToCurrency(BankMoney[playerid]));
		     		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Bank", str, "Close", "");
				}
			}
			return 1;
		}

		case 127: // Deposit
	 	{
	 		if(!response) return true;
	 		new amount = floatround(strval(inputtext));
			if(amount > pCash[playerid]) return Error(playerid, "You do not have the sufficient funds to make this transaction.");
			if(amount < 1) return Error(playerid, "You have entered an invalid amount!");

			else
			{
			    BankMoney[playerid] = (BankMoney[playerid] + amount);
    			GivePlayerCash(playerid, -amount);
    			format(query, sizeof(query), "UPDATE players SET bmoney=%d,money=%d WHERE reg_id=%d", BankMoney[playerid], pCash[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
				format(line, sizeof(line), "{F6F6F6}You have successfully deposited "LB_E"$%s {F6F6F6}into your bank account.\n"LB_E"Current Balance: {F6F6F6}$%s", ToCurrency(amount), ToCurrency(BankMoney[playerid]));
  				ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Bank", line, "Close", "");
			}
			return 1;
		}
		case 128: // WithDraw
	 	{
	 		if(!response) return true;
	 		new amount = floatround(strval(inputtext));
			if(amount > BankMoney[playerid]) return Error(playerid, "You do not have the sufficient funds to make this transaction.");
			if(amount < 1) return Error(playerid, "You have entered an invalid amount!");
			else
			{
			    BankMoney[playerid] = (BankMoney[playerid] - amount);
       			GivePlayerCash(playerid, amount);
       			format(query, sizeof(query), "UPDATE players SET bmoney=%d,money=%d WHERE reg_id=%d", BankMoney[playerid], pCash[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
				format(line, sizeof(line), "{F6F6F6}You have successfully withdrawed "LB_E"$%s {F6F6F6}from your bank account.\n"LB_E"Current Balance: {F6F6F6}$%s", ToCurrency(amount), ToCurrency(BankMoney[playerid]));
  				ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Bank", line, "Close", "");
			}
			return 1;
		}
		// == HOUSE ===
		case HOUSEMENU:
	    {
	    	if(!response) return true;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, HOUSEMENU+19, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Sell your house to the server.\nSell your house to a player.\nPut your house on the market.", "Select", "Cancel");
	  			case 1:
				{
					ShowPlayerDialog(playerid, HOUSEMENU+10, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Deposit Money\nWithdraw Money\nCheck Balance", "Select", "Cancel");
				}
				case 2: ShowPlayerDialog(playerid, HOUSEMENU+14, DIALOG_STYLE_INPUT, INFORMATION_HEADER, "Type In The New House Name Below:\n\nPress 'Cancel' To Cancel", "Set", "Cancel");
			    case 3: ShowPlayerDialog(playerid, HOUSEMENU+13, DIALOG_STYLE_INPUT, INFORMATION_HEADER, "Type In The New House Password Below:\nLeave The Box Empty If You Want To Keep Your Current House Password.\nPress 'Remove' To Remove The House Password.", "Set", "Remove");
				case 4:
		 		{
					ShowPlayerDialog(playerid, HOUSEMENU+24, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Open House For Visitors\nClose House For Visitors", "Select", "Cancel");
				}
				case 5:
			 	{
					ShowPlayerDialog(playerid, HOUSEMENU+16, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Preview House Interior\nBuy House Interior", "Select", "Cancel");
				}
				case 6:
				{
					// Needs to be worked upon.
					new count = 0;
					new h = GetPVarInt(playerid, "LastHouseCP");
					foreach(Player, ii)
					{
					    if(IsPlayerInHouse(ii, h))
						{
							if(playerid == ii) continue;
							count++;
	   					}
					}
					if(count == 0) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_NONE_IN_HOUSE);
					new tmpcount = 1, total = count;
					CMDSString = "";
					foreach(Player, ii)
					{
					    if(playerid == ii) continue;
					    if(IsPlayerInHouse(ii, h))
						{
							if(tmpcount == total)
							{
							    format(tmp, sizeof(tmp), "{00BC00}%d.\t{FFFF2A}%s", tmpcount, pNick(ii));
							}
							else format(tmp, sizeof(tmp), "{00BC00}%d.\t{FFFF2A}%s\n", tmpcount, pNick(ii));
							strcat(CMDSString, tmp);
							tmpcount++;
						}
					}
					ShowPlayerDialog(playerid, HOUSEMENU+25, DIALOG_STYLE_LIST, INFORMATION_HEADER, CMDSString, "Select", "Cancel");
				}
				case 7:
			 	{
					ShowPlayerDialog(playerid, HOUSEMENU+22, DIALOG_STYLE_MSGBOX, INFORMATION_HEADER, "Would you like to set your house as your spawn place?", "Yes", "Cancel");
				}
				case 8:
			 	{
			 		ShowInfoBoxEx(playerid, COLOR_SYSTEM, "Your house is no longer for sale!");
			 		new h = GetPVarInt(playerid, "LastHouseCP");
			 		hInfo[h][HouseForSale] = 0;
			 		format(query, sizeof(query), "UPDATE houses SET hforsale=0 WHERE house_id=%d", h);
					MySQL_updateQuery(query);
					UpdateHouseText(h);

					DestroyDynamicMapIcon(HouseMIcon[h]);
					HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 32, -1, -1, -1, -1, MICON_VD);
			 	}
			}
			return 1;
		}
		case HOUSEMENU+3: // House Sale.
	    {
	    	if(!response) return true;
			if(GetOwnedHouses(playerid) == 0) return Error(playerid, "You do not own any houses.");
			else
			{
				new h = GetPVarInt(playerid, "LastHouseCP");
			    new procent = ReturnProcent(hInfo[h][HouseValue], HOUSE_SELLING_PROCENT);
				GivePlayerCash(playerid, procent);

				if(hInfo[h][HouseStorage] >= 1)
				{
				    CMDSString = "";
					format(tmp, sizeof(tmp), I_SELL_HOUSE1_1, procent);
					strcat(CMDSString, tmp);
					format(tmp, sizeof(tmp), I_SELL_HOUSE1_2, (hInfo[h][HouseValue] - procent), hInfo[h][HouseStorage]);
					strcat(CMDSString, tmp);
	   				ShowInfoBoxEx(playerid, COLOR_INFO, CMDSString);
					GivePlayerCash(playerid, hInfo[h][HouseStorage]);
					ExitHouse(playerid, h);
				}
				if(hInfo[h][HouseStorage] == 0)
				{
				    ShowInfoBox(playerid, I_SELL_HOUSE2, hInfo[h][HouseName], procent, (hInfo[h][HouseValue] - procent));
				    ExitHouse(playerid, h);
				}
				format(hInfo[h][HouseName], MAX_HOUSE_NAME, "%s", DEFAULT_HOUSE_NAME);
	   			format(hInfo[h][HouseOwner], MAX_PLAYER_NAME, "%s", INVALID_HOWNER_NAME);
	   			format(hInfo[h][HousePassword], MAX_PLAYER_NAME, "%s", "INVALID_HOUSE_PASSWORD");
			    hInfo[h][HouseStorage] = 0;
			    hInfo[h][HouseForSale] = 0;
				format(query, sizeof(query), "UPDATE houses SET hname='House For Sale!',howner='INVALID_PLAYER_ID',hpass='INVALID_HOUSE_PASSWORD',hstorage=0,hforsale=0,last_visited=0 WHERE house_id=%d", h);
				MySQL_updateQuery(query);
				format(query, sizeof(query), "UPDATE players SET house_id=-1 WHERE house_id=%d", h);
				MySQL_updateQuery(query);
				if(houseID[playerid] == h) houseID[playerid] = -1;
				if(GetOwnedHouses(playerid) == 0)
				{
					if(pSpawnPlace[playerid] == 1)
					{
					    format(query, sizeof(query), "UPDATE players SET spawnplace=-1 WHERE reg_id=%d", pRegID[playerid]);
						MySQL_updateQuery(query);
					}
				}

				foreach(Player, ii)
				{
				    if(IsPlayerInHouse(ii, h))
				    {
				        ExitHouse(ii, h);
						ShowInfoBoxEx(ii, COLOR_INFO, I_TO_PLAYERS_HSOLD);
				    }
				}

				DestroyDynamicMapIcon(HouseMIcon[h]);
				HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 31, -1, 0, 0, -1, MICON_VD);

				UpdateHouseText(h);
				// Notify Server
				format(str, sizeof(str), ""LB_E"Server: "WHITEP_E"%s(%d) has sold his house (ID: %d) to the server for "LG_E"$"WHITE_E"%s!", pName[playerid], playerid, h, ToCurrency(procent));
				SendClientMessageToAll(COLOR_WHITEP, str);
			}
			return 1;
		}
		case HOUSEMENU+40: // House Sale to Player
	    {
	        otherid = GetPVarInt(playerid, "houseBuyer");
	    	if(!response)
			{
				DeletePVar(playerid, "houseBuyer");
				DeletePVar(otherid, "houseSeller");
 				return true;
			}
	    	if(!IsNumeric(inputtext))
	    	{
	    		ShowPlayerDialog(playerid, HOUSEMENU+40, DIALOG_STYLE_MSGBOX, INFORMATION_HEADER,""WHITEP_E"Enter the the amount you would like to sell your house for:", "Enter", "Cancel");
				Error(playerid, "You must enter a number! No spaces or commas.");
			}
			new housePrice = strval(inputtext);
			if(pCash[otherid] < housePrice) return Error(playerid, "The other player does not have enough money to make this transaction!");
			if(housePrice < 1) return Error(playerid, "You can't sell your house for less than $1.");
			if(pTotalHours[otherid] < 12) return Error(playerid, "The other player does not have sufficient playing time to buy a house!");

			SetPVarInt(otherid, "housePrice", housePrice);

			format(str, sizeof(str), ""WHITE_E"%s(%d) has offered you to purchase his house for "LG_E"$"WHITE_E"%s. Click buy to accept the offer.", pName[playerid], playerid, ToCurrency(housePrice));
			ShowPlayerDialog(otherid, HOUSEMENU+41, DIALOG_STYLE_MSGBOX, "Buy House", str, "Buy", "Cancel");

			format(str, sizeof(str), ""WHITE_E"You have sent %s(%d) an offer to purchase your house for "LG_E"$"WHITE_E"%s.", pName[otherid], otherid, ToCurrency(housePrice));
			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, "House Selling", str, "OK", "");

			return 1;
		}
		case HOUSEMENU+41: // House Sale to Player
	    {
	        otherid = GetPVarInt(playerid, "houseSeller");
	        if(!response)
			{
				DeletePVar(otherid, "houseBuyer");
				DeletePVar(playerid, "houseSeller");
				DeletePVar(playerid, "housePrice");
 				return true;
			}
	        new housePrice = GetPVarInt(playerid, "housePrice");

			// Change house owner
			new h = GetPVarInt(playerid, "LastHouseCP");
		 	format(hInfo[h][HouseOwner], MAX_HOUSE_NAME, "%s", pName[playerid]);
		 	format(hInfo[h][HouseName], MAX_HOUSE_NAME, "%s's House", pName[playerid]);
		 	format(hInfo[h][HousePassword], MAX_PLAYER_NAME, "%s", "INVALID_HOUSE_PASSWORD");
			new escaped_hname[40];
			new escaped_owner[24];
			mysql_real_escape_string(pName[playerid], escaped_owner);
			mysql_real_escape_string(hInfo[h][HouseName], escaped_hname);
			format(query, sizeof(query), "UPDATE houses SET howner='%s',hname='%s',hforsale=0,hpass='INVALID_HOUSE_PASSWORD' WHERE house_id=%d", escaped_owner, escaped_hname, h);
			MySQL_updateQuery(query);
			UpdateHouseText(h);
			format(query, sizeof(query), "UPDATE players SET house_id=-1 WHERE house_id=%d", h);
			MySQL_updateQuery(query);
			if(houseID[otherid] == h) houseID[otherid] = -1;
			if(hInfo[h][HouseForSale] != 0)
			{
			    hInfo[h][HouseForSale] = 0;
				DestroyDynamicMapIcon(HouseMIcon[h]);
				HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 32, -1, -1, -1, -1, MICON_VD);
			}
			if(GetOwnedHouses(otherid) == 0)
			{
				if(pSpawnPlace[otherid] == 1)
				{
				    format(query, sizeof(query), "UPDATE players SET spawnplace=-1 WHERE reg_id=%d", pRegID[otherid]);
					MySQL_updateQuery(query);
				}
			}

			// Put players in front of house.
			foreach(Player, ii)
			{
   				if(IsPlayerInHouse(ii, h))
		    	{
       				ExitHouse(ii, h);
					ShowInfoBoxEx(ii, COLOR_INFO, I_TO_PLAYERS_HSOLD);
	    		}
			}

			format(str, sizeof(str), ""WHITE_E"You have successfully sold your house to %s(%d) for "LG_E"$"WHITE_E"%s.", pName[playerid], playerid, ToCurrency(housePrice));
			ShowPlayerDialog(otherid, NO_DIALOG, DIALOG_STYLE_MSGBOX, "House Selling", str, "OK", "");

			format(str, sizeof(str), ""WHITE_E"You have successfully purchased %s(%d)'s house for "LG_E"$"WHITE_E"%s.", pName[otherid], otherid, ToCurrency(housePrice));
			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, "House Selling", str, "OK", "");
			GivePlayerCash(otherid, housePrice);
			GivePlayerCash(playerid, -housePrice);
			// Notify Server
			format(str, sizeof(str), ""LB_E"Server: "WHITEP_E"%s(%d) has purchased house id %d from %s(%d) for "LG_E"$"WHITE_E"%s!", pName[playerid], playerid, h, pName[otherid], otherid, ToCurrency(housePrice));
			SendClientMessageToAll(COLOR_WHITEP, str);

			// Delete variables no longer needed
			DeletePVar(otherid, "houseBuyer");
			DeletePVar(playerid, "houseSeller");
			DeletePVar(playerid, "housePrice");
	    }
     	case HOUSEMENU+43: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements(housestring,2,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+44, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+44: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements(housestring,3,left,inserted);
		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+45, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+45: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements(housestring,4,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+46, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+46: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements(housestring,5,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+55: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements2(housestring,2,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+56, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+56: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements2(housestring,3,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+57, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+57: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements2(housestring,4,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, HOUSEMENU+58, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
		      	}
		    }
	    }
	    case HOUSEMENU+58: // House List
	    {
	        if(!response) return true;
	    	new inserted;
    		new left;
		    GetHouseElements2(housestring,5,left,inserted);

		    if(inserted == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"No houses currently available on this page");
				return 1;
			}
		    else
		    {
		        if(left)
				{
		  			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Next Page", "Close");
		    	}
			    else
			    {
			    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
		      	}
		    }
	    }
		case HOUSEMENU+39: // House Sale to Player
	    {
            if(!response) return true;
	    	sscanf(inputtext, "u", otherid);

			if(otherid == INVALID_PLAYER_ID)
   				return Error(playerid, "Player not connected!");
			if(otherid == playerid)
		 		return Error(playerid, "You are not able to sell your house to yourself!");

			new h = GetPVarInt(playerid, "LastHouseCP");
			if(!IsPlayerInHouse(otherid, h)) return Error(playerid, "The player must be in your house for you to sell it.");

			if(pAdmin[otherid] != 0)
			{
				if(pPremium[otherid] >= 1)
				{
	   				if(GetPVarInt(playerid, "tempPremium") == 1 || premiumExpired[playerid] != 0)
					{
						if(GetOwnedHouses(otherid) >= MAX_HOUSES_OWNED)
						{
	    					Error(playerid, "This player already has a house!");
							return 1;
						}
					}
					if(pPremium[otherid] != 1)
					{
						if(GetOwnedHouses(otherid) >= 2)
						{
							Error(playerid, "This player already has two houses!");
							return 1;
						}
					}
					else if(GetOwnedHouses(otherid) >= 3)
					{
				 		Error(playerid, "This player already has three houses!");
						return 1;
					}
				}
	   			else
	   			{
	   				if(GetOwnedHouses(otherid) >= MAX_HOUSES_OWNED)
					{
						Error(playerid, "This player already has a house!");
						return 1;
					}
	   			}
  			}

            SetPVarInt(otherid, "houseSeller", playerid);
            SetPVarInt(playerid, "houseBuyer", otherid);

			ShowPlayerDialog(playerid, HOUSEMENU+40, DIALOG_STYLE_INPUT, INFORMATION_HEADER,""WHITEP_E"Enter the the amount you would like to sell your house for:", "Enter", "Cancel");
		}
		case HOUSEMENU+4: // House Buying.
		{
			if(response)
			{
                if(pAdmin[playerid] != 5)
				{
 					if(GetOwnedHouses(playerid) >= MAX_HOUSES_OWNED)
					{
 				    	Error(playerid, "You can't purchase more than 5 houses");
 						return 1;
					}
	 				if(pPremium[playerid] != 1)
	 				{
						if(GetOwnedHouses(playerid) >= 5)
						{
							ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, 2);
							return 1;
						}
					}
					else if(GetOwnedHouses(playerid) >= 5)
					{
    					ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, 3);
						return 1;
					}
   					else
   					{
						if(GetOwnedHouses(playerid) >= MAX_HOUSES_OWNED)
						{
							ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, MAX_HOUSES_OWNED);
							return 1;
						}
					}
				}
				new h = GetPVarInt(playerid, "LastHouseCP");
				if(strcmp(hInfo[h][HouseOwner], pNick(playerid), CASE_SENSETIVE) && strcmp(hInfo[h][HouseOwner], INVALID_HOWNER_NAME, CASE_SENSETIVE)) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_H_ALREADY_OWNED);
				if(hInfo[h][HouseValue] > pCash[playerid]) { ShowInfoBox(playerid, E_CANT_AFFORD_HOUSE, hInfo[h][HouseValue], pCash[playerid], (hInfo[h][HouseValue] - pCash[playerid])); return 1; }
				else
				{
				    format(hInfo[h][HouseName], 40, "%s's House", pName[playerid]);
				    format(hInfo[h][HouseOwner], 21, "%s", pName[playerid]);
				    GivePlayerCash(playerid, -hInfo[h][HouseValue]);

				    new escaped_hname[40];
					mysql_real_escape_string(hInfo[h][HouseName], escaped_hname);

					format(query, sizeof(query), "UPDATE houses SET hname='%s', howner='%s' WHERE house_id=%d", escaped_hname, pName[playerid], h);
					MySQL_updateQuery(query);

					ShowInfoBox(playerid, I_BUY_HOUSE, hInfo[h][HouseValue]);
					UpdateHouseText(h);
					DestroyDynamicMapIcon(HouseMIcon[h]);
					//HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 32, -1, 0, 0, -1, MICON_VD);
					DestroyDynamicPickup(HousePickupOut[h]);
                    HousePickupOut[h] = CreateDynamicPickup(19522, PICKUP_TYPE, hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 0, -1, -1, 30.0);
					// Notify Server
					format(str, sizeof(str), ""LB_E"UFF "WHITEP_E"%s(%d) has purchased house id %d for "LG_E"$"WHITEP_E"%s!", pName[playerid], playerid, h, ToCurrency(hInfo[h][HouseValue]));
					SendClientMessageToAll(COLOR_WHITEP, str);
					if(pAch30[playerid] == 0)
					{
						pAch30[playerid] = 1;
						format(query, sizeof(query), "UPDATE achievements SET a30=1 WHERE reg_id=%d", pRegID[playerid]);
						MySQL_updateQuery(query);
						GivePlayerAchievement(playerid, "Settled", "Congrats you purchased a house!~n~~y~+$100000 and 10 score!~n~~w~Type /ach to view your achievements.");
					}

				}
			}
			return 1;
		}
		case HOUSEMENU+13: // House Password
		{
			new h = GetPVarInt(playerid, "LastHouseCP");
			if(response)
			{
				if(strlen(inputtext) > MAX_HOUSE_PASSWORD || (strlen(inputtext) < MIN_HOUSE_PASSWORD && strlen(inputtext) >= 1)) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HPASS_LENGTH);
				if(!IsValidPassword(inputtext))
				{
					Error(playerid, "Password can contain only A-Z, a-z, 0-9, _, [ ], ( )");
					return true;
				}
				if(!strcmp(inputtext, "INVALID_HOUSE_PASSWORD", CASE_SENSETIVE)) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HPASS);
				if(strlen(inputtext) > 16) return Error(playerid, "Please insert a valid password! Must be at less than 16 characters.");

				if(strlen(inputtext) >= 1)
    			{
    				new escaped_pw[16];
					mysql_real_escape_string(inputtext, escaped_pw);
       				format(hInfo[h][HousePassword], MAX_HOUSE_NAME, "%s", inputtext);
					format(query, sizeof(query), "UPDATE houses SET hpass='%s' WHERE house_id=%d", escaped_pw, h);
					MySQL_updateQuery(query);
					ShowInfoBox(playerid, I_HPASSWORD_CHANGED, inputtext);
				}
				else ShowInfoBoxEx(playerid, COLOR_INFO, I_HPASS_NO_CHANGE);

			}
			else if(!response)
			{
				format(query, sizeof(query), "UPDATE houses SET hpass='INVALID_HOUSE_PASSWORD' WHERE house_id=%d", h);
				MySQL_updateQuery(query);
				ShowInfoBoxEx(playerid, COLOR_INFO, I_HPASS_REMOVED);
			}
			return 1;
		}
		case HOUSEMENU+14: // House Name
		{
			if(response)
			{
				new h = GetPVarInt(playerid, "LastHouseCP");
				if(strfind(inputtext, "%", CASE_SENSETIVE) != -1 || strfind(inputtext, "~", CASE_SENSETIVE) != -1) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HNAME_CHARS);
				if(strlen(inputtext) < MIN_HOUSE_NAME || strlen(inputtext) > MAX_HOUSE_NAME) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_HNAME_LENGTH);
				else
				{
					format(hInfo[h][HouseName], MAX_HOUSE_NAME, "%s", inputtext);
				    new escaped_hname[40];
					mysql_real_escape_string(inputtext, escaped_hname);
				    format(query, sizeof(query), "UPDATE houses SET hname='%s' WHERE house_id=%d", escaped_hname, h);
					MySQL_updateQuery(query);
					ShowInfoBox(playerid, I_HNAME_CHANGED, inputtext);
	                UpdateHouseText(h);
				}
			}
			return 1;
		}
		case HOUSEMENU+15: // House Interior Buying.
	  	{
	  		if(!response) return true;
			new h = GetPVarInt(playerid, "LastHouseCP");
	  		new _int = hInfo[h][HouseInterior];
		    SetPVarInt(playerid, "OldHouseInt", _int);
            if(!IsPlayerInHouse(playerid, h)) return Error(playerid, "You must be in your house to purchase an interior!");
			switch(listitem)
	    	{
				case 0: {hInfo[h][HouseInterior] = 0, SetPVarInt(playerid, "HousePrevInt", 0), SetPVarInt(playerid, "HousePrevValue",9000000), SetPVarString(playerid, "HousePrevName", "Madd Dogg's Mansion"); }
				case 1: {hInfo[h][HouseInterior] = 1, SetPVarInt(playerid, "HousePrevInt", 1), SetPVarInt(playerid, "HousePrevValue", 500000), SetPVarString(playerid, "HousePrevName", "CJ's House"); }
				case 2: {hInfo[h][HouseInterior] = 2, SetPVarInt(playerid, "HousePrevInt", 2), SetPVarInt(playerid, "HousePrevValue", 800000), SetPVarString(playerid, "HousePrevName", "Ryder's House"); }
				case 3: {hInfo[h][HouseInterior] = 3, SetPVarInt(playerid, "HousePrevInt", 3), SetPVarInt(playerid, "HousePrevValue", 500000), SetPVarString(playerid, "HousePrevName", "Sweet's House"); }
				case 4: {hInfo[h][HouseInterior] = 4, SetPVarInt(playerid, "HousePrevInt", 4), SetPVarInt(playerid, "HousePrevValue", 600000), SetPVarString(playerid, "HousePrevName", "Standard"); }
				case 5: {hInfo[h][HouseInterior] = 5, SetPVarInt(playerid, "HousePrevInt", 5), SetPVarInt(playerid, "HousePrevValue", 7000000), SetPVarString(playerid, "HousePrevName", "Advance Standard"); }
				case 6: {hInfo[h][HouseInterior] = 6, SetPVarInt(playerid, "HousePrevInt", 6), SetPVarInt(playerid, "HousePrevValue", 1000000), SetPVarString(playerid, "HousePrevName", "Luxury"); }
				case 7: {hInfo[h][HouseInterior] = 7, SetPVarInt(playerid, "HousePrevInt", 7), SetPVarInt(playerid, "HousePrevValue", 500000), SetPVarString(playerid, "HousePrevName", "Big Villa"); }
				case 8: {hInfo[h][HouseInterior] = 8, SetPVarInt(playerid, "HousePrevInt", 8), SetPVarInt(playerid, "HousePrevValue", 2000000), SetPVarString(playerid, "HousePrevName", "Small Villa"); }
				case 9: {hInfo[h][HouseInterior] = 9, SetPVarInt(playerid, "HousePrevInt", 9), SetPVarInt(playerid, "HousePrevValue", 340000), SetPVarString(playerid, "HousePrevName", "Big house"); }
				case 10: {hInfo[h][HouseInterior] = 10, SetPVarInt(playerid, "HousePrevInt", 10), SetPVarInt(playerid, "HousePrevValue", 900000), SetPVarString(playerid, "HousePrevName", "Underground"); }
				case 11: {hInfo[h][HouseInterior] = 11, SetPVarInt(playerid, "HousePrevInt", 11), SetPVarInt(playerid, "HousePrevValue", 2000000), SetPVarString(playerid, "HousePrevName", "Modern"); }
			}
			if(_int == GetPVarInt(playerid, "HousePrevInt")) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_ALREADY_HAVE_HINTERIOR);
			else
			{
			    new hprevvalue = GetPVarInt(playerid, "HousePrevValue");
			    GetPVarString(playerid, "HousePrevName", line, 50);

			    switch(GetPVarInt(playerid, "HouseIntUpgradeMod"))
			    {
					case 1:
					{
					    SetPVarInt(playerid, "IsHouseVisiting", 1);
						SetPVarInt(playerid, "HousePreview", 1);
						SetPVarInt(playerid, "ChangeHouseInt", 1);
						SetPVarInt(playerid, "HousePrevTime", GetTickCount());
						SetPVarInt(playerid, "HousePrevTimer", SetTimerEx("HouseVisiting", (MAX_VISIT_TIME * 60000), false, "i", playerid));
						ShowInfoBox(playerid, I_VISITING_HOUSEINT, line, hprevvalue, MAX_VISIT_TIME, AddS(MAX_VISIT_TIME));
					}
					case 2:
					{
						if(hprevvalue > pCash[playerid] && pPremium[playerid] < 1)
     					{
						    CMDSString = "";
						    DeletePVar(playerid, "ChangeHouseInt");
							format(tmp, sizeof(tmp), E_CANT_AFFORD_HINT1, line, hprevvalue);
							strcat(CMDSString, tmp);
							format(tmp, sizeof(tmp), E_CANT_AFFORD_HINT2, pCash[playerid], (hprevvalue - pCash[playerid]));
							strcat(CMDSString, tmp);
							ShowInfoBoxEx(playerid, COLOR_INFO, CMDSString);
							return true;
						}
      					if(pPremium[playerid] < 1)
				  		{
					  		GivePlayerCash(playerid, -hprevvalue);
					  		ShowInfoBox(playerid, I_HINT_BOUGHT, line, hprevvalue);
				  		}
				  		else
				  		{
				  			ShowInfoBox(playerid, I_HINT_BOUGHTFREE, line);
				  		}
		    			format(query, sizeof(query), "UPDATE houses SET hint=%d WHERE house_id=%d", hInfo[h][HouseInterior], h);
						MySQL_updateQuery(query);
						UpdateHouseText(h);
						SetPVarInt(playerid, "ChangeHouseInt", 1);
						DeletePVar(playerid, "HousePreview");
					}
				}

				if(GetPVarInt(playerid, "ChangeHouseInt") == 1)
			    {
			        hInfo[h][HouseInterior] = GetPVarInt(playerid, "HousePrevInt");
					DestroyHouseEntrance(h, TYPE_INT);
					CreateCorrectHouseExitCP(h);
					foreach(Player, ii)
			  		{
			  		    if(GetPVarInt(ii, "LastHouseCP") == h && IsInHouse{ii} == 1)
			  		    {
			  				SetPlayerHouseInterior(ii, h);
			  			}
			  		}
			  		DeletePVar(playerid, "ChangeHouseInt");
	  			}
			}
			return 1;
		}
		case HOUSEMENU+16: // House Interior Mode Selecting
	 	{
	 		if(!response) return true;
            if(GetPVarInt(playerid, "HousePreview") != 0)
	 		{
	 		    Error(playerid, "You are currently previewing an interior, please exit the preview by entering the exit pickup.");
	 		    return true;
	 		}
            switch(listitem)
		    {
		        case 0: SetPVarInt(playerid, "HouseIntUpgradeMod", 1);
      		    case 1: SetPVarInt(playerid, "HouseIntUpgradeMod", 2);
            }
		    CMDSString = "";

			strcat(CMDSString, ""WHITE_E"Madd Dogg's Mansion\t"LG_E"$9000000\n"WHITE_E"CJ's House\t\t"LG_E"$5000000\n"WHITE_E"Ryder's House\t\t"LG_E"$800000");
			strcat(CMDSString, "\n"WHITE_E"Sweet's House\t\t"LG_E"$80000\n"WHITE_E"Standard\t\t"LG_E"$600000\n"WHITE_E"Advance Standard\t"LG_E"$7000000\n"WHITE_E"Luxury\t\t\t"LG_E"$10000000");
			strcat(CMDSString, "\n"WHITE_E"Big Villa\t\t"LG_E"$500000\n"WHITE_E"Small Villa\t\t"LG_E"$2000000\n"WHITE_E"Big house\t\t"LG_E"$340000\n"WHITE_E"Underground\t\t"LG_E"$900000\n"WHITE_E"Modern\t\t\t"LG_E"$2000000");
			ShowPlayerDialog(playerid, HOUSEMENU+15, DIALOG_STYLE_LIST, INFORMATION_HEADER, CMDSString, "Buy", "Cancel");
			return 1;
		}
		case HOUSEMENU+17: // Interior Upgrade
	    {
	    	new h = GetPVarInt(playerid, "LastHouseCP");
	    	KillTimer(GetPVarInt(playerid, "HousePrevTimer"));
		    DeletePVar(playerid, "IsHouseVisiting"), DeletePVar(playerid, "HousePrevTimer");

			new hprevvalue = GetPVarInt(playerid, "HousePrevValue");
   			GetPVarString(playerid, "HousePrevName", line, 50);

   			if(!IsPlayerInHouse(playerid, h)) return Error(playerid, "You must be in your house to purchase an interior!");
	   		if(!response)
			{
				hInfo[h][HouseInterior] = GetPVarInt(playerid, "OldHouseInt");
			}
			else
			{
				if(pPremium[playerid] == 1)
				{
					hInfo[h][HouseInterior] = GetPVarInt(playerid, "HousePrevInt");
  					format(query, sizeof(query), "UPDATE houses SET hint=%d WHERE house_id=%d", hInfo[h][HouseInterior], h);
					MySQL_updateQuery(query);
					ShowInfoBox(playerid, I_HINT_BOUGHTFREE, line);
				}
				else
				{
					if(pCash[playerid] < GetPVarInt(playerid, "HousePrevValue"))
		      		{
		        		hInfo[h][HouseInterior] = GetPVarInt(playerid, "OldHouseInt");
						CMDSString = "";
						format(tmp, sizeof(tmp), E_CANT_AFFORD_HINT1, line, hprevvalue);
						strcat(CMDSString, tmp);
						format(tmp, sizeof(tmp), E_CANT_AFFORD_HINT2, pCash[playerid], (hprevvalue - pCash[playerid]));
						strcat(CMDSString, tmp);
						ShowInfoBoxEx(playerid, COLOR_INFO, CMDSString);
					}
					else
					{
		  				GivePlayerCash(playerid, -hprevvalue);
		     			hInfo[h][HouseInterior] = GetPVarInt(playerid, "HousePrevInt");
		       			format(query, sizeof(query), "UPDATE houses SET hint=%d WHERE house_id=%d", hInfo[h][HouseInterior], h);
						MySQL_updateQuery(query);
						UpdateHouseText(h);
						ShowInfoBox(playerid, I_HINT_BOUGHT, line, hprevvalue);
					}
				}
			}
    		DestroyHouseEntrance(h, TYPE_INT);
			CreateCorrectHouseExitCP(h);
			foreach(Player, ii)
			{
	  			if(GetPVarInt(ii, "LastHouseCP") == h && IsInHouse{ii} == 1)
	  			{
					SetPlayerHouseInterior(ii, h);
				}
			}
			DeletePVar(playerid, "HousePreview");
			return 1;
		}

	 	case HOUSEMENU+10: // Money Storage
	  	{
	  		if(!response) return true;
	  		new h = GetPVarInt(playerid, "LastHouseCP");
	  		if(listitem == 0) // Deposit
		   	{
	     		format(line, sizeof(line), I_HINT_DEPOSIT1, hInfo[h][HouseStorage]);
	  			ShowPlayerDialog(playerid, HOUSEMENU+11, DIALOG_STYLE_INPUT, INFORMATION_HEADER, line, "Deposit", "Cancel");
		    }
		    else if(listitem == 1) // Withdraw
		    {
	     		format(line, sizeof(line), I_HINT_WITHDRAW1, hInfo[h][HouseStorage]);
	       		ShowPlayerDialog(playerid, HOUSEMENU+12, DIALOG_STYLE_INPUT, INFORMATION_HEADER, line, "Withdraw", "Cancel");
	    	}
		    else if(listitem == 2) // Check Balance
		    {
	     		ShowInfoBox(playerid, I_HINT_CHECKBALANCE, hInfo[h][HouseStorage]);
			}
			return 1;
		}

		// House Storage, case 11-12
		case HOUSEMENU+11:
	 	{
	 		if(!response) return true;
	 		new h = GetPVarInt(playerid, "LastHouseCP");
	 		new amount = floatround(strval(inputtext));
			if(amount > pCash[playerid]) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_NOT_ENOUGH_PMONEY);
			if(amount < 1) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_AMOUNT);
			if((hInfo[h][HouseStorage] + amount) >= 500000000) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_HSTORAGE_L_REACHED);
			else
			{
			    hInfo[h][HouseStorage] = (hInfo[h][HouseStorage] + amount);
       			GivePlayerCash(playerid, -amount);
				format(query, sizeof(query), "UPDATE houses SET hstorage=%d WHERE house_id=%d", hInfo[h][HouseStorage], h);
				MySQL_updateQuery(query);
				format(query, sizeof(query), "UPDATE players SET money=%d WHERE reg_id=%d", pCash[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
				ShowInfoBox(playerid, I_HINT_DEPOSIT2, amount, hInfo[h][HouseStorage]);
			}
			return 1;
		}
		case HOUSEMENU+12:
	 	{
	 		if(!response) return true;
	 		new h = GetPVarInt(playerid, "LastHouseCP");
	 		new amount = floatround(strval(inputtext));
			if(amount > hInfo[h][HouseStorage]) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_NOT_ENOUGH_HSMONEY);
			if(amount < 1) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_INVALID_AMOUNT);
			else
			{
			    hInfo[h][HouseStorage] = (hInfo[h][HouseStorage] - amount);
			    GivePlayerCash(playerid, amount);
			    format(query, sizeof(query), "UPDATE houses SET hstorage=%d WHERE house_id=%d", hInfo[h][HouseStorage], h);
				MySQL_updateQuery(query);
				format(query, sizeof(query), "UPDATE players SET money=%d WHERE reg_id=%d", pCash[playerid], pRegID[playerid]);
				MySQL_updateQuery(query);
				ShowInfoBox(playerid, I_HINT_WITHDRAW2, amount, hInfo[h][HouseStorage]);
			}
			return 1;
		}

		case HOUSEMENU+19: // Selling House Confirmation..
	  	{
	  		if(!response) return true;
	  		new h = GetPVarInt(playerid, "LastHouseCP");
	  		switch(listitem)
			{
			    case 0: // Selling house to server
				{
					format(line, sizeof(line), HMENU_SELL_HOUSE, hInfo[h][HouseName], ToCurrency(ReturnProcent(hInfo[h][HouseValue], HOUSE_SELLING_PROCENT)));
					ShowPlayerDialog(playerid, HOUSEMENU+3, DIALOG_STYLE_MSGBOX, INFORMATION_HEADER, line, "Sell", "Cancel");
				}
				case 1: // Selling house to player
				{
					ShowPlayerDialog(playerid, HOUSEMENU+39, DIALOG_STYLE_INPUT, INFORMATION_HEADER,""WHITEP_E"Enter the player's name who you would like to sell the house to:", "Continue", "Cancel");
				}
				case 2: // Putting house on market
				{
				    if(GetPVarInt(playerid, "ChangedHouseValue") == 1)
					{
						Error(playerid, "You must wait one minute between setting house values!");
						return true;
					}
                	ShowPlayerDialog(playerid, HOUSEMENU+42, DIALOG_STYLE_INPUT, INFORMATION_HEADER,""WHITEP_E"Enter the amount you would like to sell the house for:", "Continue", "Cancel");
				}
			}
			return 1;
		}
        case HOUSEMENU+42: // Putting house on market
	  	{
	  	    if(!response) return true;
	  	    new amount = floatround(strval(inputtext));
  	    	if(amount > 1000000000) return Error(playerid, "You can't sell your house for more than 1B..");
			if(amount < 1) return Error(playerid, "You can't sell your house for less than $1..");

	 		new h = GetPVarInt(playerid, "LastHouseCP");

	 		hInfo[h][HouseForSale] = amount;
	 		hInfo[h][HousePrivacy] = 1;
    		format(query, sizeof(query), "UPDATE houses SET hforsale=%d,hprivacy=1 WHERE house_id=%d", amount, h);
			MySQL_updateQuery(query);

			DestroyDynamicMapIcon(HouseMIcon[h]);
			HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 31, -1, -1, -1, -1, MICON_VD);

            UpdateHouseText(h);
			ShowInfoBox(playerid, ""WHITE_E"Your house is now up for sale on the market for "GREEN_E"$%s"WHITE_E"!", ToCurrency(amount));
			SetPVarInt(playerid, "ChangedHouseValue", 1);
			SetTimerEx("ResetHouseValue", 60000, false, "i", playerid);
			// Notify Server
		//	format(str, sizeof(str), ""LB_E"Server: "WHITEP_E"%s(%d) has set his house (ID:%d) on the market for "LG_E"$"WHITE_E"%s!", pName[playerid], playerid, h, ToCurrency(amount));
			//SendClientMessageToAll(COLOR_WHITEP, str);
	  	}
	  	case HOUSEMENU+52:
		{
		    if(!response) return true;
			new h = GetPVarInt(playerid, "LastHouseCP");
			new PlayerOnline;
			new housePrice = hInfo[h][HouseForSale];
			if(pCash[playerid] < housePrice) return Error(playerid, "You don't have enough money to purchase this house!");
			// Check if owner is online..
		    foreach(Player, ii)
			{
				GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);
				if(!strcmp(PlayerName, hInfo[h][HouseOwner], true))
				{
					PlayerOnline = 1;
					otherid = ii;
				}
			}
			format(PlayerName, 24, "%s", hInfo[h][HouseOwner]);
			if(!strcmp(pName[playerid], PlayerName, true))
			{
				return ShowInfoBoxEx(playerid, COLOR_SYSTEM, "You can't purchase your own house...");
			}
			// Change house owner
			format(hInfo[h][HouseOwner], MAX_HOUSE_NAME, "%s", pName[playerid]);
			format(hInfo[h][HouseName], MAX_HOUSE_NAME, "%s's House", pName[playerid]);
			format(hInfo[h][HousePassword], MAX_PLAYER_NAME, "%s", "INVALID_HOUSE_PASSWORD");
			hInfo[h][HouseForSale] = 0, hInfo[h][HouseStorage] = 0;
			new escaped_hname[40];
			new escaped_owner[24];
			mysql_real_escape_string(pName[playerid], escaped_owner);
			mysql_real_escape_string(hInfo[h][HouseName], escaped_hname);
			format(query, sizeof(query), "UPDATE houses SET howner='%s',hname='%s',hforsale=0,hstorage=0,hpass='INVALID_HOUSE_PASSWORD' WHERE house_id=%d", escaped_owner, escaped_hname, h);
			MySQL_updateQuery(query);
			UpdateHouseText(h);

			DestroyDynamicMapIcon(HouseMIcon[h]);
			HouseMIcon[h] = CreateDynamicMapIcon(hInfo[h][CPOutX], hInfo[h][CPOutY], hInfo[h][CPOutZ], 32, -1, -1, -1, -1, MICON_VD);

			// Put player in front of house..
			foreach(Player, ii)
			{
   				if(IsPlayerInHouse(ii, h))
		    	{
       				ExitHouse(ii, h);
					ShowInfoBoxEx(ii, COLOR_INFO, I_TO_PLAYERS_HSOLD);
	    		}
			}
			format(str, sizeof(str), ""WHITE_E"You have successfully purchased %s's house for "LG_E"$"WHITE_E"%s.", PlayerName, ToCurrency(housePrice));
			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, "House Selling", str, "OK", "");
			GivePlayerCash(playerid, -housePrice);

		    if(PlayerOnline == 1)
		    {
		    	GivePlayerCash(otherid, housePrice);
		    	format(str, sizeof(str), ""WHITE_E"%s(%d) has purchased your house for "LG_E"$"WHITE_E"%s!", pName[playerid], playerid, ToCurrency(housePrice));
				ShowPlayerDialog(otherid, NO_DIALOG, DIALOG_STYLE_MSGBOX, "House Selling", str, "OK", "");
				format(query, sizeof(query), "UPDATE players SET house_id=-1 WHERE house_id=%d", h);
				MySQL_updateQuery(query);
				if(houseID[otherid] == h) houseID[otherid] = -1;
				if(GetOwnedHouses(otherid) == 0)
				{
					if(pSpawnPlace[otherid] == 1)
					{
			  			format(query, sizeof(query), "UPDATE players SET spawnplace=-1 WHERE reg_id=%d", pRegID[otherid]);
						MySQL_updateQuery(query);
					}
				}
		    }
		    else
		    {
		    	format(query, sizeof(query), "INSERT INTO soldhouses(name, hID, hbuyer, hprice) VALUES ('%s', '%d', '%s', '%d')", PlayerName, h, pName[playerid], housePrice);
				MySQL_updateQuery(query);
		    }

		    format(str, sizeof(str), ""LB_E"Server: "WHITEP_E"%s(%d) has purchased house id %d from %s for "LG_E"$"WHITE_E"%s!", pName[playerid], playerid, h, PlayerName, ToCurrency(housePrice));
			SendClientMessageToAll(COLOR_WHITEP, str);
		}
		case HOUSEMENU+24: // House Privacy
	 	{
	 		if(!response) return true;
	 		new h = GetPVarInt(playerid, "LastHouseCP");
	 		switch(listitem)
			{
			    case 0: // Open
				{
				    hInfo[h][HousePrivacy] = 1;
				    format(query, sizeof(query), "UPDATE houses SET hprivacy=1 WHERE house_id=%d", h);
					MySQL_updateQuery(query);
				    GameTextForPlayer(playerid,"~y~House: ~n~~g~Unlocked",3000,3);
				}
				case 1: // Closed
			    {
			        new count;
			        hInfo[h][HousePrivacy] = 0;
				   	format(query, sizeof(query), "UPDATE houses SET hprivacy=0 WHERE house_id=%d", h);
					MySQL_updateQuery(query);
                    GameTextForPlayer(playerid,"~y~House: ~n~~r~locked",3000,3);
			      	foreach(Player, ii)
					{
					    if(ii == playerid) continue;
			  			if(GetPVarInt(ii, "LastHouseCP") == h && IsInHouse{ii} == 1)
			  			{
							ExitHouse(ii, GetPVarInt(ii, "LastHouseCP"));
							count++;
						}
					}
			    }
			}
			UpdateHouseText(h);
			return 1;
		}

		case HOUSEMENU+25: // Selecting Player.
	 	{
			if(!response) return true;
		    new tmpcount;
		    new h = GetPVarInt(playerid, "LastHouseCP");
			foreach(Player, ii)
			{
	  			if(!IsPlayerInHouse(ii, h)) continue;
		    	if(playerid == ii) continue;
		    	if(listitem == tmpcount)
		    	{
		    	    SetPVarInt(playerid, "ClickedPlayer", ii);
		    	    break;
		    	}
		    	tmpcount++;
			}
			ShowPlayerDialog(playerid, HOUSEMENU+26, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Kick Out From House\nGive House Key\nTake House Key", "Select", "Cancel");
			return 1;
		}

		case HOUSEMENU+26: // Selecting Player.2
	 	{
	 		if(!response) return true;
	 		new h = GetPVarInt(playerid, "LastHouseCP");
		    new clickedplayer = GetPVarInt(playerid, "ClickedPlayer"), _temp_[17];
		    switch(listitem)
		    {
		        case 0:
				{
				    if(!IsPlayerInHouse(clickedplayer, h)) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_KICKED_NOT_IN_HOUSE);
				    ExitHouse(clickedplayer, h);
				    ShowInfoBox(playerid, I_KICKED_FROM_HOUSE1, pNick(clickedplayer), clickedplayer);
				    ShowInfoBox(clickedplayer, I_KICKED_FROM_HOUSE2, pNick(playerid), playerid);
				}
		        case 1:
				{
				    format(_temp_, sizeof(_temp_), "HouseKeys_%d", h);
				    if(GetPVarInt(clickedplayer, _temp_) == 1)  return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_ALREADY_HAVE_HOUSEKEYS);
				    SetPVarInt(clickedplayer, _temp_, 1);
				    ShowInfoBox(playerid, I_HOUSEKEYS_RECIEVED_1, pNick(clickedplayer), clickedplayer);
				    ShowInfoBox(clickedplayer, I_HOUSEKEYS_RECIEVED_2, hInfo[h][HouseName], hInfo[h][HouseLocation], pNick(playerid), playerid);
		        }
		        case 2:
		        {
				    format(_temp_, sizeof(_temp_), "HouseKeys_%d", h);
				    if(GetPVarInt(clickedplayer, _temp_) == 0)  return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_DOESNT_HAVE_HOUSEKEYS);
				    DeletePVar(clickedplayer, _temp_);
				    ShowInfoBox(playerid, I_HOUSEKEYS_TAKEN_1, pNick(clickedplayer), clickedplayer);
				    ShowInfoBox(clickedplayer, I_HOUSEKEYS_TAKEN_2, pNick(playerid), playerid, hInfo[h][HouseName], hInfo[h][HouseLocation]);
		        }
		    }
			return 1;
		}
		case BIZMENU1: // Mybusiness Selecting
	 	{
	    	if(!response) return true;
		    SetPVarInt(playerid, "ClickedBusiness", ReturnPlayerBusinessID(playerid, (listitem + 1)));
		  	ShowPlayerDialog(playerid, BIZMENU2, DIALOG_STYLE_LIST,""BLUE_E"UFF "YELLOW_E":: "WHITE_E"Houses", "Teleport To This Business", "Select", "Cancel");
	       	return 1;
		}
		case BIZMENU2: // MyHouse Selecting 2
	 	{
	 		if(!response) return true;
	 		new _b = GetPVarInt(playerid, "ClickedBusiness");
			Player_GoToBusiness(playerid, _b);
		    return 1;
		}
		case HOUSEMENU+50: // MyHouse Selecting
	 	{
	    	if(!response) return true;
		    SetPVarInt(playerid, "ClickedHouse", ReturnPlayerHouseID(playerid, (listitem + 1)));
		  	ShowPlayerDialog(playerid, HOUSEMENU+51, DIALOG_STYLE_LIST, INFORMATION_HEADER, "Show Information\nTeleport To This House", "Select", "Cancel");
	       	return 1;
		}

		case HOUSEMENU+51: // MyHouse Selecting 2
	 	{
	 		if(!response) return true;
	 		new _h = GetPVarInt(playerid, "ClickedHouse");
		    SetPVarInt(playerid, "LastHouseCP", _h);
		    switch(listitem)
		    {
				case 0:
				{
	                GetPlayerPos(playerid, Xp, Yp, Zp);
				    CMDSString = "";
				    format(line, sizeof(line), I_HOWNER_HINFO_1, hInfo[_h][HouseName], hInfo[_h][HouseLocation], DistanceToPoint(Xp, Yp, Zp, hInfo[_h][CPOutX], hInfo[_h][CPOutY], hInfo[_h][CPOutZ]));
				    strcat(CMDSString, line);
					format(line, sizeof(line), I_HOWNER_HINFO_2, hInfo[_h][HouseValue], hInfo[_h][HouseStorage], Answer(hInfo[_h][HousePrivacy], "Open For Public", "Closed For Public"), _h);
	                strcat(CMDSString, line);
					ShowInfoBoxEx(playerid, COLOR_INFO, CMDSString);
				}
				case 1:
				{
					SetPlayerHouseInterior(playerid, _h);
					GameTextForPlayer(playerid, "~w~ Use ~y~/exit ~w~ to leave the house", 3000, 3);
					format(str, sizeof(str), ""UFF" "WHITE_E"Type "YELLOW_E"/hm "WHITE_E"to access the house menu.");
					SendClientMessage(playerid, COLOR_YELLOW, str);
					if(GetPVarInt(playerid, "houseChecked") != _h)
	  				{
		  				SetPVarInt(playerid, "houseChecked", _h);
						format(query, sizeof(query), "UPDATE houses SET last_visited=UNIX_TIMESTAMP() WHERE house_id=%d", _h);
						MySQL_updateQuery(query);
					}
				}
		    }
		    return 1;
		}
		case HOUSEMENU+22: // Setting house as spawn place.
	 	{
	 	    new h = GetPVarInt(playerid, "LastHouseCP");
	 		pSpawnPlace[playerid] = 1;
	 		houseID[playerid] = h;
	 		format(query, sizeof(query), "UPDATE players SET spawnplace=1,house_id=%d WHERE reg_id=%d", h, pRegID[playerid]);
			MySQL_updateQuery(query);
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "ORANGE_E"You have set your spawnpoint to your house.");
			SendClientMessage(playerid, COLOR_GREY, "> "GREY2_E"Type /spawnplace to change your spawn place at anytime.");
			return 1;
	 	}
	    case DIALOG_HOLD+20:
		{
			new hugestring[1300];
			if(response)
			{
				if(listitem == 0) // Animals
				{
					strcat(hugestring, "Cow\n");//0
					strcat(hugestring, "Parrot\n");//1
					strcat(hugestring, "Giant Parrot\n");//2
					strcat(hugestring, "Steer Skull\n");//3
					strcat(hugestring, "Deer\n");//4
					strcat(hugestring, "Turtle\n");//5
					strcat(hugestring, "StarFish\n");//6
					strcat(hugestring, "Dragon\n");//7
					strcat(hugestring, "Chicken\n");//8
					strcat(hugestring, "Dolphin\n");//9
					strcat(hugestring, "Shark\n");//10
					strcat(hugestring, "Big Deer\n");//11
					strcat(hugestring, "Back");//12
	                ShowPlayerDialog(playerid, DIALOG_HOLD+1, DIALOG_STYLE_LIST, ""GREEN_E"Animals",hugestring,"Select", "Exit");
				}
				else if(listitem == 1) // Weapons&Tools
				{
					strcat(hugestring, "Country Rifle\n");//9
					strcat(hugestring, "Minigun\n");//10
					strcat(hugestring, "Desert Eagle\n");//11
					strcat(hugestring, "Silenced Pistol\n");//12
					strcat(hugestring, "Molotov\n");//13
					strcat(hugestring, "Grenade\n");//14
					strcat(hugestring, "Pool Cue\n");//15
					strcat(hugestring, "Shovel\n");//16
					strcat(hugestring, "Baseball Bat\n");//17
					strcat(hugestring, "Knife\n");//18
					strcat(hugestring, "Police Stick\n");//19
					strcat(hugestring, "Golf Cross\n");//20
					strcat(hugestring, "BrassKnuckes\n");//21
					strcat(hugestring, "Flowers\n");//22
					strcat(hugestring, "Katana\n");//23
					strcat(hugestring, "Katana 2\n");//24
					strcat(hugestring, "Katana 3\n");//25
					strcat(hugestring, "ChainSaw\n");//26
					strcat(hugestring, "Camera Head\n");//27
					strcat(hugestring, "Weapon Body\n");//28
					strcat(hugestring, "Back");//29
					ShowPlayerDialog(playerid, DIALOG_HOLD+2, DIALOG_STYLE_LIST, ""GREEN_E"Weapons and Tools",hugestring,"Select", "Exit");
				}
				else if(listitem == 2) // Cop Gear
				{
					strcat(hugestring, "Full Cop\n");//0
					strcat(hugestring, "S.W.A.T\n");//1
					strcat(hugestring, "Cop\n");//2
					strcat(hugestring, "Cop2\n");//3
					strcat(hugestring, "Cop3\n");//4
					strcat(hugestring, "Shield-arm\n");//5
					strcat(hugestring, "Shield-Back\n");//6
					strcat(hugestring, "Flashlight\n");//7
					strcat(hugestring, "Taser\n");//8
					ShowPlayerDialog(playerid, DIALOG_HOLD+19, DIALOG_STYLE_LIST, ""GREEN_E"Weapons and Tools",hugestring,"Select", "Exit");
				}
				else if(listitem ==  3)// HeadGear
				{
				    new listitems[] = "Motorcross Helmet\nMotorcross Helmet\nMotorcross Helmet\nMotorcross Helmet\nMotorcross Helmet\nBoater 1\nBoater 2\nBoater 3\nBowler 1\nBowler 2\nBowler 3\nBowler 4\nBowler 5\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+4,DIALOG_STYLE_LIST,""GREEN_E"HeadGear (Page 1/6)",listitems,"Select","Exit");
				}
				else if(listitem ==  4)//Glasses
				{
				    new listitems[] = "Glass 1\nGlass 2\nGlass 3\nGlass 4\nGlass 5\nGlass 6\nGlass 7\nGlass 8\nGlass 9\nGlass 10\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+5,DIALOG_STYLE_LIST,""GREEN_E"Glasses (Page 1/3)",listitems,"Select","Exit");
				}
				else if(listitem ==  5)//bandanna
				{
				    new listitems[] = "Bandanna 1\nBandanna 2\nBandanna 3\nBandanna 4\nBandanna 5\nBandanna 6\nBandanna 7\nBandanna 8\nBandanna 9\nBandanna 10\nBack";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+6,DIALOG_STYLE_LIST,""GREEN_E"Bandannas",listitems,"Select","Exit");
				}
				else if(listitem ==  6)//Masks
				{
				    new listitems[] = "Hockey Mask 1\nHockey Mask 2\nHockey Mask 3\nZorro Mask\nBoxing\nBack";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+7,DIALOG_STYLE_LIST,""GREEN_E"Masks",listitems,"Select","Exit");
				}
				else if(listitem ==  7)//watches
				{
				    new listitems[] = "Watch 1\n\
					 					Watch 2\n\
										 Watch 3\n\
										 Watch 4\n\
										 Watch 5\n\
										 Watch 6\n\
										 Watch 7\n\
										 Watch 8\n\
										 Watch 9\n\
										 Watch 10\n\
										 Watch 11\n\
										 Watch 12\n\
										 Watch 13\n\
										 Watch 14\n\
										 Watch 15\n\
										 Back";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+14,DIALOG_STYLE_LIST,""GREEN_E"Watches",listitems,"Select","Exit");
				}
				else if(listitem == 8) // Santa hat
				{
                    SetPlayerAttachedObject( playerid, 0, 19065, 2, 0.121128, 0.023578, 0.001139, 222.540847, 90.773872, 211.130859, 1.098305, 1.122310, 1.106640 ); // SantaHat
				}
				else if(listitem == 9) // Others
				{
					strcat(hugestring, ""LB_E"Christmas Hat\n"LB_E"Glass Sphere\n"LB_E"Water Sphere\n"LB_E"Mobile Phone\n"LB_E"Parrot\n"LB_E"Big Parrot\n"LB_E"Dice\n"LB_E"Disco Ball\n"LB_E"Knife\n"LB_E"Laser\n"LB_E"Chainsaw Dildo\n"LB_E"Glasses\n"LB_E"Weaponizer\n"LB_E"Swat Outfit\n"LB_E"Super Powers\n"LB_E"Red Flare");
					strcat(hugestring, "\n"LB_E"Beret\n"LB_E"Pink Neon Tube\n"LB_E"Police Shield\n"LB_E"Moneybag\n"LB_E"Big Shark\n"LB_E"Big Turtle\n"LB_E"CJ Head\n"LB_E"Egg Head\n"LB_E"Swat Vest\n"LB_E"ClucknBell Hat\n"LB_E"Fire\n"LB_E"Trashcan Man\n"LB_E"Mine\n"LB_E"SA-MP Logo\n"LB_E"Dead Man Walking\nGuitar\n"RED_E"Back");
					ShowPlayerDialog(playerid, DIALOG_HOLD+3, DIALOG_STYLE_LIST, ""GREEN_E"Other Objects", hugestring, "Select", "Exit");
				}
				else if(listitem == 10) // Toys
				{
	   				cmd_toys(playerid);
				}
				else if(listitem == 11) // Remove Items
				{
	   				RemoveItems(playerid);
				}
	   		}
		}
	    case DIALOG_HOLD:
		{
			if(response)
			{
				if(listitem == 0)
				{
				    SetPlayerAttachedObject( playerid, 3,  348, 6, -0.059909, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				else if(listitem == 1)
				{
					cmd_incred(playerid);
				}
	            else if(listitem == 2)
				{
    				SetPlayerAttachedObject(playerid,1 ,2114 , 2, 0.1, 0, 0, 0, 0, 0);
				}
				else if(listitem == 3)
				{
				    SetPlayerAttachedObject(playerid,1 ,2780 , 2, 0, 0, 0, 0, 90, 180);
				}
				else if(listitem == 4)
				{
				    SetPlayerAttachedObject( playerid, 3,  325, 6, -0.046102, -0.041808, 0.011599, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				else if(listitem == 5)
				{
				    SetPlayerAttachedObject(playerid, 2,18642, 5, 0.12, 0.02, -0.05, 0, 0, 45,1,1,1);
				}
				else if(listitem == 6)
				{
				    SetPlayerAttachedObject( playerid, 1, 18706, 1, 0.117854, 0.152451, -1.198078, 353.179779, 338.109832, 307.894836, 1.171286, 1.000000, 0.739636 );
				}
				else if(listitem == 7)
				{
				    SetPlayerAttachedObject( playerid, 0, 18867, 1, -0.250574, -0.335935, -0.378996, 89.238151, 180.057632, 85.303810, 18.932508, 18.932508, 18.932508 ); // MobilePhone3 - cell
				}
				else if(listitem == 8)
				{
				    SetPlayerAttachedObject( playerid, 3,  344, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				else if(listitem == 9)
				{
				    SetPlayerAttachedObject( playerid, 3,  342, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				else if(listitem == 10)
				{
				    SetPlayerAttachedObject( playerid, 0, 18645, 2, 0.017478, 0.051500, 0.003912, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514 ); // MotorcycleHelmet1 - HEAD
					SetPlayerAttachedObject( playerid, 1, 18690, 2, -2.979508, 0.306475, -0.388553, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514 ); // fire_car - fire2
					SetPlayerAttachedObject( playerid, 2, 18716, 2, -2.979508, 0.306475, -0.388553, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514 ); // prt_smoke_expand - smoke3
				}
				else if(listitem == 11)
				{
				    SetPlayerAttachedObject( playerid, 4, 367, 2, 0.000180, -0.194320, -0.363765, 5.802183, 83.707130, 89.211784, 3.500000, 3.000000, 3.000000 );
				}
				else if(listitem == 12)
				{
				    SetPlayerAttachedObject( playerid, 1, 18640, 1, 0.426865, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 6.000000, 6.000000, 6.529343 ); // Hair1 - 0
			    	SetPlayerAttachedObject( playerid, 3, 336, 2, -0.130748, 1.232422, 1.210894, 302.307189, 45.490215, 342.612670, 6.314194, 6.000000, 6.731550 ); // bat - 0
			    	SetPlayerAttachedObject( playerid, 2, 1337, 1, -0.260767, 0.000000, 0.000000, 0.000000, 87.215736, 183.103057, 2.000000, 1.000000, 1.381448 ); // BinNt07_LA -
			    	SetPlayerAttachedObject( playerid, 4, 19011, 1, 0.301029, -0.247661, 0.051991, 89.057189, 71.483779, 0.000000, 10.000000, 10.000000, 10.428989 ); // GlassesType17 - 2
				}
				else if(listitem == 13)
				{
				    SetPlayerAttachedObject( playerid, 4, 19011, 1, 0.301029, -0.247661, 0.051991, 89.057189, 71.483779, 0.000000, 10.000000, 10.000000, 10.428989 ); // GlassesType17 - 2
				}
				else if(listitem == 14)
				{
   					SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
				}
				else if(listitem == 15)
				{
   					SetPlayerAttachedObject(playerid, 1 , 18637, 1, 0, -0.1, 0.18, 90, 0, 272, 1, 1, 1);
				}
				else if(listitem == 16)
				{
				    SetPlayerAttachedObject(playerid, 2,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
				}
				else if(listitem == 17)
				{
				    SetPlayerAttachedObject( playerid, 1, 18650, 1, -0.323403, 1.036446, -0.033354, 0, 0, 0,1, 1, 1);
				}
				else if(listitem == 18)
				{
				    SetPlayerAttachedObject( playerid, 1, 19076, 1, -1.222714, 0.043251, -0.044644, 0, 87.416610, 0, 1, 1, 1);
				}
				else if(listitem == 19)
				{
				    SetPlayerAttachedObject( playerid, 1, 16442, 1, 0, 0.293180, 0, 85.574798, 73.857925, 0, 1, 1, 1 );
				}
				else if(listitem == 20)
				{
				    SetPlayerAttachedObject( playerid, 4, 18926, 1, 0.435196, 0.062818, -0.017257, 89.176856, 77.139472, 350.660552, 0.132324, 0.132324, 0.132324 ); // vgsEdragon -
				}
				else if(listitem == 21)
				{
	       			SetPlayerAttachedObject(playerid,1 ,322 , 1, -0.1, 0.2, -0.04, 90, 180, 0);
				}
				else if(listitem == 22)
				{
	   				SetPlayerAttachedObject(playerid,1 , 354, 2);
				}
				else if(listitem == 23)
				{
				    SetPlayerAttachedObject( playerid, 1, 18702, 1, -0.341428, -0.154013, -1.638275, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				else if(listitem == 24)
				{
	                SetPlayerAttachedObject( playerid, 4, 3528, 1, 0.435196, 0.062818, -0.017257, 89.176856, 77.139472, 350.660552, 0.132324, 0.132324, 0.132324 ); // vgsEdragon -
				}
				else if(listitem == 25)
				{
				    SetPlayerAttachedObject( playerid, 1, 19102, 1, 0.544685, 0.061225, 0.000000, 0.000000, 0.000000, 0.000000, 1.175775, 1.175775, 1.175775 );
	    			SetPlayerAttachedObject( playerid, 2, 19138, 1, 0.502970, 0.078710, 0.000000, 90.891593, 83.645950, 4.222108, 1.000000, 1.000000, 1.000000 ); // PoliceGlasses1 - 8
	    			SetPlayerAttachedObject( playerid, 3, 19142, 1, 0.022054, 0.059119, 0.000000, 0.000000, 0.000000, 0.000000, 1.134816, 1.134816, 1.134816 ); // SWATArmour1 - 2
				}
				else if(listitem == 26)
				{
				    new skinn = GetPlayerSkin(playerid);
					SetPlayerAttachedObject(playerid, 4, 18645, 2, HelmetPos[skinn][0], HelmetPos[skinn][1], HelmetPos[skinn][2], HelmetPos[skinn][3], HelmetPos[skinn][4], HelmetPos[skinn][5]);
				}
				else if(listitem == 27)
				{
				    RemoveItems(playerid);
				}
	   		}
		}
		case DIALOG_HOLD+14:
		{
		    if(response)
		    {
				if(listitem ==  0)//watch1
				{
					SetPlayerAttachedObject(playerid,1,19039,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//0
				}
				if(listitem ==  1)//watch2
				{
					SetPlayerAttachedObject(playerid,1,19040,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//1
				}
				if(listitem ==  2)//watch3
				{
					SetPlayerAttachedObject(playerid,1,19041,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//2
				}
				if(listitem ==  3)//watch4
				{
				    SetPlayerAttachedObject(playerid,1,19042,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//3
				}
				if(listitem ==  4)//watch5
				{
					SetPlayerAttachedObject(playerid,1,19043,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//4
				}
				if(listitem ==  5)//watch6
				{
				    SetPlayerAttachedObject(playerid,1,19044,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//5
				}
				if(listitem ==  6)//watch7
				{
				    SetPlayerAttachedObject(playerid,1,19045,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//6
				}
				if(listitem ==  7)//watch8
				{
					SetPlayerAttachedObject(playerid,1,19046,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//7
				}
				if(listitem ==  8)//watch9
				{
				    SetPlayerAttachedObject(playerid,1,19047,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//8
				}
				if(listitem ==  9)//watch10
				{
				    SetPlayerAttachedObject(playerid,1,19048,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//9
				}
				if(listitem ==  10)//watch11
				{
				    SetPlayerAttachedObject(playerid,1,19049,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//10
				}
				if(listitem ==  11)//watch12
				{
				    SetPlayerAttachedObject(playerid,1,19050,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//11
				}
				if(listitem ==  12)//watch13
				{
				    SetPlayerAttachedObject(playerid,1,19051,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//12
				}
				if(listitem ==  13)//watch14
				{
				    SetPlayerAttachedObject(playerid,1,19052,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//13
				}
				if(listitem ==  14)//watch15
				{
				    SetPlayerAttachedObject(playerid,1,19053,5,0.000000,-0.008285,-0.007307,63.175521,67.837768,118.995666,1.004594,1.000000,1.000000);//14
				}
				if(listitem ==  15)//back
				{
				    HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+4:
		{
		    if(response)
		    {
				if(listitem ==  0)//MotorcrossHelmet
				{
	                SetPlayerAttachedObject(playerid, 1, 18976, 2, 0.09, 0.03, 0, 88, 75, 0);
				}
				if(listitem ==  1)//MotorcycleHelmet 1
				{
				    SetPlayerAttachedObject(playerid, 1, 18645, 2, 0.07, 0, 0, 88, 75, 0);
				}
				if(listitem ==  2)//MotorcycleHelmet 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18977, 2, 0.07, 0, 0, 88, 75, 0);
				}
				if(listitem ==  3)//MotorcycleHelmet 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18978, 2, 0.07, 0, 0, 88, 75, 0);
				}
				if(listitem ==  4)//MotorcycleHelmet 4
				{
	                SetPlayerAttachedObject(playerid, 1, 18979, 2, 0.07, 0, 0, 88, 75, 0);
				}
				if(listitem ==  5)//HatBoater1
				{
	                SetPlayerAttachedObject(playerid, 1, 18944, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  6)//HatBoater2
				{
	                SetPlayerAttachedObject(playerid, 1, 18945, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  7)//HatBoater3
				{
	                SetPlayerAttachedObject(playerid, 1, 18946, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  8)//Bowler1
				{
	                SetPlayerAttachedObject(playerid, 1, 18947, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  9)//Bowler2
				{
	                SetPlayerAttachedObject(playerid, 1, 18948, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  10)//Bowler3
				{
	                SetPlayerAttachedObject(playerid, 1, 18949, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  11)//Bowler4
				{
	                SetPlayerAttachedObject(playerid, 1, 18950, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  12)//Bowler5
				{
	                SetPlayerAttachedObject(playerid, 1, 18951, 2, 0.15, 0.0, 0, 180, 0, 10);
				}
				if(listitem ==  13)//next
				{
		    		new listitems[] = "Barret 1\nBarret 2\nBarret 3\nBarret 4\nBarret 5\nCap Back 1\n\
									Cap Back 2\nCap Back 3\nCap Back 4\nCap Back 5\nCap Knit 1\n\
									Cap Knit 2\nCap Rim Up\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+8,DIALOG_STYLE_LIST,""GREEN_E"Headgear (Page 2/6)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+8:
		{
		    if(response)
		    {
				if(listitem ==  0)//Beret 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18921, 2, 0.15, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  1)//Beret 2
				{
				    SetPlayerAttachedObject(playerid, 1, 18922, 2, 0.15, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  2)//Beret 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18923, 2, 0.15, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  3)//Beret 4
				{
	                SetPlayerAttachedObject(playerid, 1, 18924, 2, 0.15, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  4)//Beret 5
				{
	                SetPlayerAttachedObject(playerid, 1, 18925, 2, 0.15, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  5)//Cap Back1
				{
	                SetPlayerAttachedObject(playerid, 1, 18939, 2, 0.17, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  6)//Cap Back2
				{
	                SetPlayerAttachedObject(playerid, 1, 18940, 2, 0.17, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  7)//Cap Back3
				{
	                SetPlayerAttachedObject(playerid, 1, 18941, 2, 0.17, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  8)//Cap Back4
				{
	                SetPlayerAttachedObject(playerid, 1, 18942, 2, 0.17, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  9)//Cap Back5
				{
	                SetPlayerAttachedObject(playerid, 1, 18943, 2, 0.17, -0.03, 0.01, 180, 0, 30);
				}
				if(listitem ==  10)//Cap Knit 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18953, 2, 0.13, -0.03, 0.00, 180, 0, 30);
				}
				if(listitem ==  11)//Cap Knit 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18954, 2, 0.13, -0.03, 0.00, 180, 0, 30);
				}
				if(listitem ==  12)//Cap RimUp
				{
	                SetPlayerAttachedObject(playerid, 1, 18960, 2, 0.13, 0, 0, 88, 75, 0);
				}
				if(listitem ==  13)//next
				{
		    		new listitems[] = "Cap Trucker 1\nCowboyHat 1\nSkullyCap  1\nSkullyCap  2\nSkullyCap  3\n\
		    							HatMan 1\nHatMan 2\nHatMan 3\nHatTiger\nHat Cool 1\nHat Cool 2\n\
										Hat Cool 3\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+9,DIALOG_STYLE_LIST,""GREEN_E"Headgear (Page 3/6)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+9:
		{
		    if(response)
		    {
				if(listitem ==  0)//Cap Trucker 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18961, 2, 0.14, 0, 0, 88, 75, 0);
				}
				if(listitem ==  1)//CowboyHat 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18962, 2, 0.14, 0, 0, 88, 75, 0);
				}
				if(listitem ==  2)//SkullyCap  1
				{
	                SetPlayerAttachedObject(playerid, 1, 18964, 2, 0.125, 0.015, 0, 90, 100, 0);
				}
				if(listitem ==  3)//SkullyCap  2
				{
	                SetPlayerAttachedObject(playerid, 1, 18965, 2, 0.125, 0.015, 0, 90, 100, 0);
				}
				if(listitem ==  4)//SkullyCap  3
				{
	                SetPlayerAttachedObject(playerid, 1, 18966, 2, 0.125, 0.015, 0, 90, 100, 0);
				}
				if(listitem ==  5)//HatMan 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18967, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  6)//HatMan 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18968, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  7)//HatMan 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18969, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  8)//HatTiger
				{
	                SetPlayerAttachedObject(playerid, 1, 18970, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  9)//Hat Cool1
				{
	                SetPlayerAttachedObject(playerid, 1, 18971, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  10)//Hat Cool2
				{
	                SetPlayerAttachedObject(playerid, 1, 18972, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  11)//Hat Cool3
				{
	                SetPlayerAttachedObject(playerid, 1, 18973, 2, 0.125, 0.015, 0, 90, 80, 0);
				}
				if(listitem ==  12)//next
				{
		    		new listitems[] = "Cap Over Eye 1\nCap Over Eye 2\nCap Over Eye 3\nCap Over Eye 4\n\
									Cap Over Eye 5\nHelmet 1\nHelmet 2\nHelmet 3\nCap 1\n\
									Cap 2\nCap 3\nCap 4\nCap 5\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+11,DIALOG_STYLE_LIST,""GREEN_E"Headgear (Page 4/6)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+11:
		{
		    if(response)
		    {
				if(listitem ==  0)//Cap Over Eye 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18955, 2, 0.11, 0.02, 0, 88, 75, 0);
				}
				if(listitem ==  1)//Cap Over Eye 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18956, 2, 0.11, 0.02, 0, 88, 75, 0);
				}
				if(listitem ==  2)//Cap Over Eye 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18957, 2, 0.11, 0.02, 0, 88, 75, 0);
				}
				if(listitem ==  3)//Cap Over Eye 4
				{
	                SetPlayerAttachedObject(playerid, 1, 18958, 2, 0.11, 0.02, 0, 88, 75, 0);
				}
				if(listitem ==  4)//Cap Over Eye 5
				{
	                SetPlayerAttachedObject(playerid, 1, 18959, 2, 0.11, 0.02, 0, 88, 75, 0);
				}
				if(listitem ==  5)//Helmet 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18936, 2, 0.105, 0.02, 0, 0, 0, 0);
				}
				if(listitem ==  6)//Helmet 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18937, 2, 0.105, 0.02, 0, 0, 0, 0);
				}
				if(listitem ==  7)//Helmet 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18938, 2, 0.105, 0.02, 0, 0, 0, 0);
				}
				if(listitem ==  8)//Cap 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18926, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  9)//Cap 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18927, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  10)//Cap 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18928, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  11)//Cap 4
				{
	                SetPlayerAttachedObject(playerid, 1, 18929, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  12)//Cap 5
				{
	                SetPlayerAttachedObject(playerid, 1, 18930, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem == 13)//next
				{
		    		new listitems[] = "Cap 6\nCap 7\nCap 8\nCap 9\nCap 10\nHeadScarf 1\n\
					HeadScarf 2\nHeadScarf 3\nHeadScarf 4\nHeadScarf 5\nHeadScarf 6\n\
					HeadScarf 7\nHeadScarf 8\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+12,DIALOG_STYLE_LIST,""GREEN_E"Headgear (Page 5/6)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+12:
		{
		    if(response)
		    {
				if(listitem ==  0)//Cap 6
				{
	                SetPlayerAttachedObject(playerid, 1, 18931, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  1)//Cap 7
				{
	                SetPlayerAttachedObject(playerid, 1, 18932, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  2)//Cap 8
				{
	                SetPlayerAttachedObject(playerid, 1, 18933, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  3)//Cap 9
				{
	                SetPlayerAttachedObject(playerid, 1, 18934, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  4)//Cap 10
				{
	                SetPlayerAttachedObject(playerid, 1, 18935, 2, 0.17, 0, -0.01, 0, 0, 0);
				}
				if(listitem ==  5)//HeadScarf 1
				{
	                SetPlayerAttachedObject(playerid, 1, 18891, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  6)//HeadScarf 2
				{
	                SetPlayerAttachedObject(playerid, 1, 18892, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  7)//HeadScarf 3
				{
	                SetPlayerAttachedObject(playerid, 1, 18893, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  8)//HeadScarf 4
				{
	                SetPlayerAttachedObject(playerid, 1, 18894, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  9)//HeadScarf 5
				{
	                SetPlayerAttachedObject(playerid, 1, 18895, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  10)//HeadScarf 6
				{
	                SetPlayerAttachedObject(playerid, 1, 18896, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  11)//HeadScarf 7
				{
	                SetPlayerAttachedObject(playerid, 1, 18897, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  12)//HeadScarf 8
				{
	                SetPlayerAttachedObject(playerid, 1, 18898, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  13)//next
				{
		    		new listitems[] = "HeadScarf 9\nHeadScarf 10\nHeadScarf 11\nHeadScarf 12\n\
					HeadScarf 13\nHeadScarf 14\nHeadScarf 15\nHeadScarf 16\nHeadScarf 17\n\
					HeadScarf 18\nHeadScarf 19\nHeadScarf 20\nBack";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+13,DIALOG_STYLE_LIST,""GREEN_E"Headgear (Page 6/6)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+13:
		{
		    if(response)
		    {
				if(listitem ==  0)//HeadScarf 9
				{
	                SetPlayerAttachedObject(playerid, 1, 18899, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  1)//HeadScarf 10
				{
	                SetPlayerAttachedObject(playerid, 1, 18900, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  2)//HeadScarf 11
				{
	                SetPlayerAttachedObject(playerid, 1, 18901, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  3)//HeadScarf 12
				{
	                SetPlayerAttachedObject(playerid, 1, 18902, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  4)//HeadScarf 13
				{
	                SetPlayerAttachedObject(playerid, 1, 18903, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  5)//HeadScarf 14
				{
	                SetPlayerAttachedObject(playerid, 1, 18904, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  6)//HeadScarf 15
				{
	                SetPlayerAttachedObject(playerid, 1, 18905, 2, 0.15, -0.013, 0.001, 90, -30, -90);
				}
				if(listitem ==  7)//HeadScarf 16
	   			{
	                SetPlayerAttachedObject(playerid, 1, 18906, 2, 0.12, -0.02, 0.001, 90, -60, -90);
				}
				if(listitem ==  8)//HeadScarf 17
				{
	                SetPlayerAttachedObject(playerid, 1, 18907, 2, 0.12, -0.02, 0.001, 90, -60, -90);
				}
				if(listitem ==  9)//HeadScarf 18
				{
	                SetPlayerAttachedObject(playerid, 1, 18908, 2, 0.12, -0.02, 0.001, 90, -60, -90);
				}
				if(listitem ==  10)//HeadScarf 19
				{
	                SetPlayerAttachedObject(playerid, 1, 18909, 2, 0.12, -0.02, 0.001, 90, -60, -90);
				}
				if(listitem ==  11)//HeadScarf 20
				{
	                SetPlayerAttachedObject(playerid, 1, 18910, 2, 0.12, -0.02, 0.001, 90, -60, -90);
				}
				if(listitem==12)
				{
					HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+5:
		{
		    if(response)
		    {
				if(listitem ==  0)//GlassesType1
				{
	                SetPlayerAttachedObject(playerid, 2, 19006, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  1)//GlassesType2
				{
	                SetPlayerAttachedObject(playerid, 2, 19007, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  2)//GlassesType3
				{
	                SetPlayerAttachedObject(playerid, 2, 19008, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  3)//GlassesType4
				{
	                SetPlayerAttachedObject(playerid, 2, 19009, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  4)//GlassesType5
				{
	                SetPlayerAttachedObject(playerid, 2, 19010, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  5)//GlassesType6
				{
	                SetPlayerAttachedObject(playerid, 2, 19011, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  6)//GlassesType7
				{
	                SetPlayerAttachedObject(playerid, 2, 19012, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  7)//GlassesType8
				{
	                SetPlayerAttachedObject(playerid, 2, 19013, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  8)//GlassesType9
				{
	                SetPlayerAttachedObject(playerid, 2, 19014, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  9)//GlassesType10
				{
	                SetPlayerAttachedObject(playerid, 2, 19015, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem == 10)//next
				{
	 				new listitems[] = "Glass 11\nGlass 12\nGlass 13\nGlass 14\nGlass 15\n\
					 				Glass 16\nGlass 17\nGlass 18\nGlass 19\nGlass 20\nNext Page";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+16,DIALOG_STYLE_LIST,""GREEN_E"Glasses (Page 2/3)",listitems,"Select","Exit");
				}
			}
		}
	 	case DIALOG_HOLD+16:
		{
		    if(response)
		    {
				if(listitem ==  0)//GlassesType11
				{
	                SetPlayerAttachedObject(playerid, 2, 19016, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  1)//GlassesType12
				{
	                SetPlayerAttachedObject(playerid, 2, 19017, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  2)//GlassesType13
				{
	                SetPlayerAttachedObject(playerid, 2, 19018, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  3)//GlassesType14
				{
	                SetPlayerAttachedObject(playerid, 2, 19019, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  4)//GlassesType15
				{
	                SetPlayerAttachedObject(playerid, 2, 19020, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  5)//GlassesType16
				{
	                SetPlayerAttachedObject(playerid, 2, 19021, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  6)//GlassesType17
				{
	                SetPlayerAttachedObject(playerid, 2, 19022, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  7)//GlassesType18
				{
	                SetPlayerAttachedObject(playerid, 2, 19023, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  8)//GlassesType19
				{
	                SetPlayerAttachedObject(playerid, 2, 19024, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  9)//GlassesType20
				{
	                SetPlayerAttachedObject(playerid, 2, 19025, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem == 10)//next
				{
	 				new listitems[] = "Glass 21\nGlass 22\nGlass 23\nGlass 24\nGlass 25\nGlass 26\n\
									Glass 27\nGlass 28\nGlass 29\nGlass 30\nBack";
		    		ShowPlayerDialog(playerid,DIALOG_HOLD+17,DIALOG_STYLE_LIST,""GREEN_E"Glasses (Page 3/3)",listitems,"Select","Exit");
				}
			}
		}
		case DIALOG_HOLD+17:
		{
		    if(response)
		    {
				if(listitem ==  0)//GlassesType21
				{
	                SetPlayerAttachedObject(playerid, 2, 19026, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  1)//GlassesType22
				{
	                SetPlayerAttachedObject(playerid, 2, 19027, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  2)//GlassesType23
				{
	                SetPlayerAttachedObject(playerid, 2, 19028, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  3)//GlassesType24
				{
	                SetPlayerAttachedObject(playerid, 2, 19029, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  4)//GlassesType25
				{
	                SetPlayerAttachedObject(playerid, 2, 19030, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  5)//GlassesType26
				{
	                SetPlayerAttachedObject(playerid, 2, 19031, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  6)//GlassesType27
				{
	                SetPlayerAttachedObject(playerid, 2, 19032, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  7)//GlassesType28
				{
	                SetPlayerAttachedObject(playerid, 2, 19033, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  8)//GlassesType29
				{
	                SetPlayerAttachedObject(playerid, 2, 19034, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem ==  9)//GlassesType30
				{
	                SetPlayerAttachedObject(playerid, 2, 19035, 2, 0.09, 0.04, 0, 88, 75, 0);
				}
				if(listitem==10)
				{
					HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+6:
		{
		    if(response)
		    {
				if(listitem ==  0)//Bandanna1
				{
	                SetPlayerAttachedObject(playerid, 3, 18911, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  1)//Bandanna2
				{
	                SetPlayerAttachedObject(playerid, 3, 18912, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  2)//Bandanna3
				{
	                SetPlayerAttachedObject(playerid, 3, 18913, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  3)//Bandanna4
				{
	                SetPlayerAttachedObject(playerid, 3, 18914, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  4)//Bandanna5
				{
	                SetPlayerAttachedObject(playerid, 3, 18915, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  5)//Bandanna6
				{
	                SetPlayerAttachedObject(playerid, 3, 18916, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  6)//Bandanna7
				{
	                SetPlayerAttachedObject(playerid, 3, 18917, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  7)//Bandanna8
				{
	                SetPlayerAttachedObject(playerid, 3, 18918, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  8)//Bandanna9
				{
	                SetPlayerAttachedObject(playerid, 3, 18919, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem ==  9)//Bandanna10
				{
	                SetPlayerAttachedObject(playerid, 3, 18920, 2, -0.08, 0.03, 0.0, 90, -180, -90);
				}
				if(listitem==10)
				{
					HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+7:
		{
		    if(response)
		    {
				if(listitem ==  0)//Hockeymask1
				{
	                SetPlayerAttachedObject(playerid, 1, 19036, 2, 0.107, 0.020, 0.0, 90, 90, 0);
				}
				if(listitem ==  1)//Hockeymask2
				{
	                SetPlayerAttachedObject(playerid, 1, 19037, 2, 0.107, 0.020, 0.0, 90, 90, 0);
				}
				if(listitem ==  2)//Hockeymask3
				{
	                SetPlayerAttachedObject(playerid, 1, 19038, 2, 0.107, 0.020, 0.0, 90, 90, 0);
				}
				if(listitem ==  3)//Zorromask
				{
	                SetPlayerAttachedObject(playerid, 1, 18974, 2, 0.098, 0.0258, 0.0, 90, 90, 0);
				}
				if(listitem ==  4)//Boxing
				{
	                SetPlayerAttachedObject(playerid, 1, 18952, 2, 0.105, 0.01, 0.0, 0, 0, 0);
				}
				if(listitem==5)
				{
					HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+1:
		{
			if(response)
			{
				if(listitem == 0) //cow
				{
					SetPlayerAttachedObject( playerid, 1, 16442, 1, 0, 0.293180, 0, 85.574798, 73.857925, 0, 1, 1, 1 );
				}
				if(listitem == 1) //parrot
				{
					SetPlayerAttachedObject(playerid,0,19078,1,0.320722,-0.067912,-0.165151,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); // Parrot
				}
				if(listitem == 2) //parrot big
				{
					SetPlayerAttachedObject( playerid, 4, 19078, 1, 0.327153, -0.238273, -0.025565, 6.325685, 356.464935, 347.150024, 2.999643, 3.000000, 3.000000 );
				}
				if(listitem == 3) //steer
				{
					SetPlayerAttachedObject( playerid, 0, 6865, 1, 0.304225, 0.000000, 0.000000, 331.737609, 85.931182, 259.530731, 0.165295, 0.165295, 0.165295 ); // steerskull - steer
				}
				if(listitem == 4) //deer
				{
					SetPlayerAttachedObject( playerid, 1, 1736, 1, 0.411395, 0.071141, 0.000000, 104.665779, 68.543235, 78.359771, 1.000000, 1.000000, 1.000000 );
				}
				if(listitem == 5) //turtle
				{
					SetPlayerAttachedObject( playerid, 1, 1609, 1, 0.007776, 0.161924, 0.000000, 360.000000, 82.020347, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				if(listitem == 6) //starfish
				{
					SetPlayerAttachedObject( playerid, 1, 902, 1, -1.352694, 0.077251, 0.000000, 0.000000, 88.976806, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				if(listitem == 7) //dragon
				{
					SetPlayerAttachedObject( playerid, 4, 3528, 1, 0.435196, 0.062818, -0.017257, 89.176856, 77.139472, 350.660552, 0.132324, 0.132324, 0.132324 ); // vgsEdragon -
				}
				if(listitem == 8) //chicken
				{
					SetPlayerAttachedObject( playerid, 0, 16776, 1, -0.655542, 0.000000, 0.000000, 0.000000, 269.365753, 355.201538, -0.129275, -0.129275, -0.129275 );
				}
				if(listitem == 9) //dolphin
				{
					SetPlayerAttachedObject( playerid, 0, 1607, 1, 0.511116, 0.000000, 0.010858, 357.650634, 88.734855, 358.452239, 0.245372, 0.245372, 0.245372 );
				}
				if(listitem == 10) //shark
				{
					SetPlayerAttachedObject( playerid, 0, 1608, 1, 0.500848, 0.000000, 0.000000, 0.000000, 90.593528, 0.000000, 0.274349, 0.274349, 0.274349 );
				}
				if(listitem == 11) //bigdeer
				{
					SetPlayerAttachedObject( playerid, 0,19315,1,0.00,0.00,0.00,0.0,86.0,93.0,3.74,2.99,2.65);
				}
				if(listitem==12)
				{
					HoldObjects(playerid);
				}
			}
		}
		case DIALOG_HOLD+3:
		{
			if(!response) return true;
			if(GetPVarType(playerid, "SpecialObj"))
			{
    			RemoveItems(playerid);
				DeletePVar(playerid, "SpecialObj");
			}
			switch(listitem)
			{
				// Christmas hat
				case 0:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19065, 2, 0.114000, 0.017000, 0.000000, -74.300018, 67.699966, 163.499954, 1.222998, 1.074000, 1.362000);
				}
				// glass sphere
				case 1:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 18843, 1, -0.377177, 0.030848, 0.0, 0.0, 0.0, 0.0, 0.021999, 0.021999, 0.021999);
				}
				// water sphere
				case 2:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 18844, 1, -0.377177, 0.030848, 0.0, 0.0, 0.0, 0.0, 0.021999, 0.021999, 0.021999);
				}
				// mobile phone
				case 3:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 18874, 1, -0.076304, -0.353463, -0.452506, 270, 0.0, 270, 22.0, 22.0, 22.0);
				}
				// parrot
				case 4:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19078, 1, 0.312595, -0.080548, 0.156741, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
				}
				// big parrot
				case 5:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19078, 1, -1.124628, -0.388645, -0.024471, 0.0, 0.0, 0.0, 8.0, 8.0, 8.0);
				}
				// dice
				case 6:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 1852, 2, 0.024471, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1, 1.1, 1.1);
				}
				// mirror ball
				case 7:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19159, 2, 0.0, 0.017840, 0.002123, 90.0, 270, 90, 2.0, 2.0, 2.0);
				}
				// knife
				case 8:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 335, 18, -0.360101, -0.108754, -0.106567, 0, 62.146984, 0.0, 1.0, 1.0, 1.0);
				}
				// laser
				case 9:
				{
				    new temp;
					switch(random(4))
					{
						case 0: temp = 19081;
						case 1: temp = 19082;
						case 2: temp = 19083;
						case 3: temp = 19080;
					}
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, temp, 6, 0.075554, 0.019184, 0.018647, 90, 0.0, 90.0, 1.0, 1.0, 1.0);
				}
				// Chainsaw dildo
				case 10:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19086, 6, -0.020373, -0.002333, 0.183234, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0); // chainsaw dildo
				}
				// Glasses
				case 11:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM2, 19006, 2, 0.108999, 0.062000, 0.001999, -3.999998, 89.599998, 96.400054, 1.000000, 1.097999, 1.413000); // GLasss
				}
				// Weaponizer
				case 12:
				{
				    cmd_weaponizer(playerid);
				}
				// Swat
				case 13:
				{
					cmd_swat(playerid);
				}
				// Incred
				case 14:
				{
					cmd_incred(playerid);
				}
				// Red Flare
				case 15:
				{
					cmd_redflare(playerid);
				}
				// Beret
				case 16:
				{
					new temp;
					switch(random(3))
					{
						case 0: temp = 18922;
						case 1: temp = 18923;
						case 2: temp = 18924;
					}
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, temp, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999);
				}
				// Pink neon tube
				case 17:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 18651, 1, -0.106289, -0.114429, 0.005976, 125.970176, 95.122421, 237.139724, 0.995487, 1.0, 1.0); // pink neon tube
				}
				// Police Shielf
				case 18:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM2, 18637, 3, 0.230999, -0.102999, 0.004999, -10.400001, 10.800008, 26.700016, 1.000000, 1.000000, 1.000000);
				}
				// MoneyBag
				case 19:
				{
			 		SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 1550, 17, -0.253999, -0.149000, -0.016999, 65.699943, 67.599983, 59.299983, 1.000000, 0.849000, 0.956000);
				}
				// Shark
				case 20:
				{
			 		SetPlayerAttachedObject(playerid, 4, 1608, 1, 0.149000, -0.777999, 0.007999, -1.499999, 91.599975, 0.199999, 0.365000, 0.409999, 0.580000);
				}
				// Big Turtle
				case 21:
				{
					SetPlayerAttachedObject(playerid, 4, 1609, 1, -0.150000, 0.230000, 0.036999, -7.599997, 89.200004, 4.700000, 1.000000, 1.000000, 1.298999);
				}
				// CJ Head
				case 22:
				{
					SetPlayerAttachedObject(playerid, 4, 18963, 2, 0.103000, 0.065000, 0.020999, -3.600000, 79.599998, 95.699989, 1.680000, 1.381999, 1.518999);
				}
				// Egg Head
				case 23:
				{
					SetPlayerAttachedObject(playerid, 4, 19343, 2, 0.121999, -0.018999, 0.010999, 0.000000, 81.500000, -5.700002, 0.572000, 0.635999, 0.644000);
				}
				// Swat Vest
				case 24:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM2, 19142, 1, 0.015999, 0.045999, 0.008999, 0.000000, 0.000000, 0.000000, 1.257999, 1.090000, 1.026000);
				}
				// ClucknBell Hat
				case 25:
				{
					SetPlayerAttachedObject(playerid, 4, 19137, 2, 0.096000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.151999, 1.158000, 1.023000);
				}
				// fire
				case 26:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 18691, 2, 0.0, 0.0, -3.005537, 0.0, 0.0, 0.0, 3.970835, 3.320107, 1.0);
				}
				// Trash Can Man
				case 27:
				{
					cmd_trashcan(playerid);
				}
				// mine
				case 28:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 2918, 13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // mine
				}
				// SA-MP logo
				case 29:
				{
					SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM2, 18749, 2, 0.446479, 0.0, 0.000037, 335.772155, 85.145317, 199.438522, 4.599256, 4.766139, 2.875207); // SA-MP logo
				}
				// Dead Man
				case 30:
				{
					cmd_deadman(playerid);
				}
				// Guitar
				case 31:
				{
					cmd_guitar(playerid);
				}
				// Back
				case 32:
				{
					HoldObjects(playerid);
					return 1;
				}
			}
			SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"Object attached! Use /dropobject to remove the object!");
			return true;
		}
		case DIALOG_HOLD+19:
		{
			if(response)
			{
				if(listitem==0)//FullCop
				{
					cmd_swat(playerid);
				}
				if(listitem==1)//swat
				{
					SetPlayerAttachedObject( playerid, 1, 19102, 1, 0.544685, 0.061225, 0.000000, 0.000000, 0.000000, 0.000000, 1.175775, 1.175775, 1.175775 );
					SetPlayerAttachedObject( playerid, 2, 19138, 1, 0.502970, 0.078710, 0.000000, 90.891593, 83.645950, 4.222108, 1.000000, 1.000000, 1.000000 ); // PoliceGlasses1 - 8
					SetPlayerAttachedObject( playerid, 3, 19142, 1, 0.022054, 0.059119, 0.000000, 0.000000, 0.000000, 0.000000, 1.134816, 1.134816, 1.134816 ); // SWATArmour1 - 2
				}
				if(listitem==2)//cop 1
				{
					SetPlayerAttachedObject( playerid, 2, 19142, 1, 0.060179, 0.061534, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				if(listitem==3)//cop 2
				{
					SetPlayerAttachedObject( playerid, 2, 19101, 1, 0.540188, 0.022517, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				if(listitem==4)//cop 3
				{
					SetPlayerAttachedObject(playerid,1 ,3092 ,6, 0.1, 0, 0, 0, 0, 0);
				}
				if(listitem==5)//SHIELDARM
				{
					SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
				}
				if(listitem==6)//SHIELDBACK
				{
					SetPlayerAttachedObject(playerid, 1 , 18637, 1, 0, -0.1, 0.18, 90, 0, 272, 1, 1, 1);
				}
				if(listitem==7)//FLASHLIGHT
				{
					SetPlayerAttachedObject(playerid, 2,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
				}
				if(listitem==8)//TASER
				{
					SetPlayerAttachedObject(playerid, 2, 18642, 5, 0.12, 0.02, -0.05, 0, 0, 45,1,1,1);
				}
			}
		}

		case DIALOG_HOLD+2:
		{
			if(response)
			{
				if(listitem==0)//CountryRifle
				{
					SetPlayerAttachedObject( playerid, 3,  357, 6, -0.094173, -0.027371, -0.071345, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==1)//minigun
				{
					SetPlayerAttachedObject( playerid, 3,  362, 6, -0.286588, -0.007757, 0.026663, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==2)//deserteagle
				{
					SetPlayerAttachedObject( playerid, 3,  348, 6, -0.059909, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==3)//Silencedpistol
				{
					SetPlayerAttachedObject( playerid, 3,  347, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==4)//molotov
				{
					SetPlayerAttachedObject( playerid, 3,  344, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==5)//grenade
				{
					SetPlayerAttachedObject( playerid, 3,  342, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==6)//poolcue
				{
					SetPlayerAttachedObject( playerid, 3,  338, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==7)//shovel
				{
					SetPlayerAttachedObject( playerid, 3,  337, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==8)//baseballbat
				{
					SetPlayerAttachedObject( playerid, 3,  336, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==9)//knife
				{
					SetPlayerAttachedObject( playerid, 3,  335, 6, -0.094780, -0.040289, -0.028835, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==10)//policestick
				{
					SetPlayerAttachedObject( playerid, 3,  334, 6, -0.100756, -0.040289, 0.258847, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==11)//golfcross
				{
					SetPlayerAttachedObject( playerid, 3,  333, 6, -0.064937, -0.051176, -0.051956, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==12)//brassknuckles
				{
					SetPlayerAttachedObject( playerid, 3,  331, 6, -0.046102, -0.041808, -0.002409, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==13)//flowers
				{
					SetPlayerAttachedObject( playerid, 3,  325, 6, -0.046102, -0.041808, 0.011599, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==14)//Katana
				{
					SetPlayerAttachedObject( playerid, 4, 339, 2, -0.041599, -0.021626, 0.149578, 1.009989, 163.989974, 146.011611, 0.800000, 0.800000, 0.800000 );
				}
				if(listitem==15)//katana2
				{
					SetPlayerAttachedObject( playerid, 4, 339, 1, -0.134983, 0.161055, 0.149578, 307.616241, 163.989974, 146.011611, 0.800000, 0.800000, 0.800000 );
				}
				if(listitem==16)//bigkatana
				{
					SetPlayerAttachedObject( playerid, 3,  339, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000 );
				}
				if(listitem==17)//CHAINSAW
				{
					SetPlayerAttachedObject( playerid, 4, 341, 2, -0.142268, -0.214803, 0.435896, 311.341491, 166.186813, 96.577270, 0.800000, 0.800000, 0.800000 );
				}
				if(listitem==18)//camerahead
				{
					SetPlayerAttachedObject( playerid, 4, 367, 2, 0.000180, -0.194320, -0.363765, 5.802183, 83.707130, 89.211784, 3.500000, 3.000000, 3.000000 );
				}
				if(listitem==19)//weapon
				{
					SetPlayerAttachedObject( playerid, 0, 369, 2, -0.183602, 0.016535, -0.039228, 1.763265, 356.138977, 355.971618, 3.034477, 3.000000, 3.000000 ); // irgoggles - ON FACE
					SetPlayerAttachedObject( playerid, 1, 356, 6, 0.013610, -0.021393, -0.144862, 2.354303, 354.413848, 0.219168, 3.034477, 3.000000, 3.000000 ); // m4 - M4 HAND
					SetPlayerAttachedObject( playerid, 2, 359, 1, 0.000000, -0.232854, -0.241260, 354.348602, 29.348077, 357.846679, 2.000000, 2.000000, 2.000000 ); // rocketla - ROCKETBACK
					SetPlayerAttachedObject( playerid, 3, 363, 7, 0.176143, 0.281574, -0.120761, 79.200103, 267.183990, 337.320526, 1.200000, 1.200000, 1.200000 ); // satchel - packet
				}
				if(listitem==20)
				{
					HoldObjects(playerid);
				}
	  		}
	 	}
	 	case INTERIORMENU:
		{
			if(response)
			{
				switch(listitem)
				{
		   			case 0: ShowPlayerDialog(playerid, INTERIORMENU+1, DIALOG_STYLE_LIST, "24/7's", "24/7 Interior 1\n24/7 Interior 2\n24/7 Interior 3\n24/7 Interior 4\n24/7 Interior 5\n24/7 Interior 6\nBack", "Select", "Cancel");
					case 1: ShowPlayerDialog(playerid, INTERIORMENU+2, DIALOG_STYLE_LIST, "Airport Interiors", "Francis Ticket Sales Airport\nFrancis Baggage Claim Airport\nAndromada Cargo Hold\nShamal Cabin\nLS Airport Baggage Claim\nInterernational Airport\nAbandoned AC Tower\nBack", "Select", "Cancel");
					case 2: ShowPlayerDialog(playerid, INTERIORMENU+3, DIALOG_STYLE_LIST, "Ammunation Interiors", "Ammunation 1\nAmmunation 2\nAmmunation 3\nAmmunation 4\nAmmunation 5\nBooth Ammunation\nRange Ammunation\nBack", "Select", "Cancel");
					case 3: ShowPlayerDialog(playerid, INTERIORMENU+4, DIALOG_STYLE_LIST, "Houses", "B Dup's Apartment\nB Dup's Crack Palace\nOG Loc's House\nRyder's house\nSweet's house\nMadd Dogg's Mansion\nBig Smoke's Crack Palace\nBack", "Select", "Cancel");
					case 4: ShowPlayerDialog(playerid, INTERIORMENU+5, DIALOG_STYLE_LIST, "Houses 2", "Johnson House\nAngel Pine Trailer\nSafe House\nSafe House 2\nSafe House 3\nSafe House 4\nVerdant Bluffs Safehouse\nWillowfield Safehouse\nThe Camel's Toe Safehouse\nBack", "Select", "Cancel");
					case 5: ShowPlayerDialog(playerid, INTERIORMENU+6, DIALOG_STYLE_LIST, "Missions", "Atrium\nBurning Desire Building\nColonel Furhberger\nWelcome Pump\nWu Zi Mu's Apartement\nJizzy's\nDillimore Gas Station\nJefferson Motel\nLiberty City\nSherman Dam\nBack", "Select", "Cancel");
					case 6: ShowPlayerDialog(playerid, INTERIORMENU+7, DIALOG_STYLE_LIST, "Stadiums", "RC War Arena\nRacing Stadium\nRacing Stadium 2\nBloodbowl Stadium\nKickstart Stadium\nBack", "Select", "Cancel");
					case 7: ShowPlayerDialog(playerid, INTERIORMENU+8, DIALOG_STYLE_LIST, "Casino Interiors", "Caligulas Casino\n4 Dragons Casino\nRedsands Casino\n4 Dragons Managerial Suite\nInside Track Betting\nCaligulas Roof\nRosenberg's Caligulas Office\n4 Dragons Janitors Office\nBack", "Select", "Cancel");
					case 8: ShowPlayerDialog(playerid, INTERIORMENU+9, DIALOG_STYLE_LIST, "Shop Interiors", "Tattoo\nBurger Shot\nWell Stacked Pizza\nCluckin' Bell\nRusty Donut's\nZero's RC Shop\nSex Shop\nBack", "Select", "Cancel");
					case 9: ShowPlayerDialog(playerid, INTERIORMENU+10, DIALOG_STYLE_LIST, "Mod Shops/Garages","Loco Low Co.\nWheel Arch Angels\nTransfender\nDoherty Garage\nBack", "Select", "Cancel");
					case 10: ShowPlayerDialog(playerid, INTERIORMENU+11, DIALOG_STYLE_LIST, "CJ's Girlfriends Interiors","Denises Bedroom\nHelena's Barn\nBarbara's Love Nest\nKatie's Lovenest\nMichelle's Love Nest\nMillie's Bedroom\nBack", "Select", "Cancel");
					case 11: ShowPlayerDialog(playerid, INTERIORMENU+12, DIALOG_STYLE_LIST, "Clothing & Barber Store","Barber Shop\nPro-Laps\nVictim\nSubUrban\nReece's Barber Shop\nZip\nDidier Sachs\nBinco\nBarber Shop 2\nWardrobe\nBack", "Select", "Cancel");
		   			case 12: ShowPlayerDialog(playerid, INTERIORMENU+13, DIALOG_STYLE_LIST, "Resturants & Clubs","Brothel\nBrothel 2\nThe Big Spread Ranch\nDinner\nWorld Of Coq\nThe Pig Pen\nClub\nJay's Diner\nSecret Valley Diner\nFanny Batter's Whore House\nBack", "Select", "Cancel");
		   			case 13: ShowPlayerDialog(playerid, INTERIORMENU+14, DIALOG_STYLE_LIST, "No Specific Category","Blastin' Fools Records\nWarehouse\nWarehouse 2\nBudget Inn Motel Room\nLil' Probe Inn\nCrack Den\nMeat Factory\nBike School\nDriving School\nBack", "Select", "Cancel");
		   			case 14: ShowPlayerDialog(playerid, INTERIORMENU+15, DIALOG_STYLE_LIST, "Burglary Houses","Burglary House 1\nBurglary House 2\nBurglary House 3\nBurglary House 4\nBurglary House 5\nBurglary House 6\nBurglary House 7\nBurglary House 8\nBurglary House 9\nBurglary House 10\nBack", "Select", "Cancel");
					case 15: ShowPlayerDialog(playerid, INTERIORMENU+16, DIALOG_STYLE_LIST, "Burglary Houses 2","Burglary House 11\nBurglary House 12\nBurglary House 13\nBurglary House 14\nBurglary House 15\nBurglary House 16\nBurglary House 17\nBack", "Select", "Cancel");
		   			case 16: ShowPlayerDialog(playerid, INTERIORMENU+17, DIALOG_STYLE_LIST, "Gyms","Los Santos Gym\nSan Fierro Gym\nLas Venturas Gym\nBack", "Select", "Cancel");
		   			case 17: ShowPlayerDialog(playerid, INTERIORMENU+18, DIALOG_STYLE_LIST, "Departments","SF Police Department\nLS Police Department\nLV Police Department\nPlanning Department\nBack", "Select", "Cancel");
		   			case 18: ShowPlayerDialog(playerid, INTERIORMENU+19, DIALOG_STYLE_LIST, "World Locations","Market Stall #1\nMarket Stall #2\nMarket Stall #3\nMarket Stall #4\nMarket Stall #5\nBack", "Select", "Cancel");
				}
	   		}
	   		else cmd_misc(playerid);
			return 1;
		}
		//==============================================================================
		//                          	24/7's
		//==============================================================================
		case INTERIORMENU+1:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, -25.884499,-185.868988,1003.549988, 17, "24/7 #1");
				case 1: SetPlayerPosEx(playerid, -6.091180,-29.271898,1003.549988, 10, "24/7 #2");
				case 2: SetPlayerPosEx(playerid, -30.946699,-89.609596,1003.549988, 18, " 24/7 #3");
				case 3: SetPlayerPosEx(playerid, -25.132599,-139.066986,1003.549988, 16, " 24/7 #4");
				case 4: SetPlayerPosEx(playerid, -27.312300,-29.277599,1003.549988, 4, " 24/7 #5");
				case 5: SetPlayerPosEx(playerid, -26.691599,-55.714897,1003.549988, 6, "24/7 #6");
				case 6: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Airports
		//==============================================================================
		case INTERIORMENU+2:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, -1827.147338,7.207418,1061.143554, 14, "Francis Ticket Sales Airport");
				case 1: SetPlayerPosEx(playerid, -1855.568725,41.263156,1061.143554, 14, "Francis Baggage Claim Airport");
				case 2: SetPlayerPosEx(playerid, 315.856170,1024.496459,1949.797363, 9, "Andromada Cargo Hold");
				case 3: SetPlayerPosEx(playerid, 2.384830,33.103397,1199.849976, 1, "Shamal Cabin");
				case 4: SetPlayerPosEx(playerid, -1870.80,59.81,1056.25, 14, "LS Airport Baggage Claim");
				case 5: SetPlayerPosEx(playerid, -1830.81,16.83,1061.14, 14, "Interernational Airport");
				case 6: SetPlayerPosEx(playerid, 419.8936, 2537.1155, 10, 10, "Abounded AC Tower");
				case 7: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Ammunation
		//==============================================================================
		case INTERIORMENU+3:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 286.148987,-40.644398,1001.569946, 1, "Ammunation #1");
				case 1: SetPlayerPosEx(playerid, 286.800995,-82.547600,1001.539978, 4, "Ammunation #2");
				case 2: SetPlayerPosEx(playerid, 296.919983,-108.071999,1001.569946, 6, "Ammunation #3");
				case 3: SetPlayerPosEx(playerid, 314.820984,-141.431992,999.661987, 7, "Ammunation #4");
				case 4: SetPlayerPosEx(playerid, 316.524994,-167.706985,999.661987, 6, "Ammunation #5");
				case 5: SetPlayerPosEx(playerid, 302.292877,-143.139099,1004.062500, 7, "Booth Ammunation");
				case 6: SetPlayerPosEx(playerid, 280.795104,-135.203353,1004.062500, 7, "Range Ammunation");
				case 7: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Houses
		//==============================================================================
		case INTERIORMENU+4:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 1527.0468, -12.0236, 1002.0971, 3, "B Dup's Apartment");
				case 1: SetPlayerPosEx(playerid, 1523.5098, -47.8211, 1002.2699, 2, "B Dup's Crack Palace");
				case 2: SetPlayerPosEx(playerid, 512.9291, -11.6929, 1001.565, 3, "OG Loc's House");
				case 3: SetPlayerPosEx(playerid, 2447.8704, -1704.4509, 1013.5078, 2, "Ryder's House");
				case 4: SetPlayerPosEx(playerid, 2527.0176, -1679.2076, 1015.4986, 1, "Sweet's House");
	 			case 5: SetPlayerPosEx(playerid, 1267.8407, -776.9587, 1091.9063, 5, "Madd Dogg's Mansion");
				case 6: SetPlayerPosEx(playerid, 2536.5322, -1294.8425, 1044.125, 2, "Big Smoke's Crack Palace");
				case 7: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Safe Houses
		//==============================================================================
		case INTERIORMENU+5:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 2496.0549, -1695.1749, 1014.7422, 3, "CJ's House");
				case 1: SetPlayerPosEx(playerid, 1.1853, -3.2387, 999.4284, 2, "Angel Pine trailer");
				case 2: SetPlayerPosEx(playerid, 2233.6919, -1112.8107, 1050.8828, 5, "Safe House #1");
				case 3: SetPlayerPosEx(playerid, 2194.7900, -1204.3500, 1049.0234, 6, "Safe House #2");
				case 4: SetPlayerPosEx(playerid, 2319.1272, -1023.9562, 1050.2109, 9, "Safe House #3");
				case 5: SetPlayerPosEx(playerid, 2262.4797,-1138.5591,1050.63285, 10, "Safe House #4");
				case 6: SetPlayerPosEx(playerid, 2365.1089, -1133.0795, 1050.875, 8, "Verdant Bluff safehouse");
				case 7: SetPlayerPosEx(playerid, 2282.9099, -1138.2900, 1050.8984, 11, "Willowfield Safehouse");
				case 8: SetPlayerPosEx(playerid, 2216.1282, -1076.3052, 1050.4844, 1, "The Camel's Toe Safehouse");
				case 9: cmd_interiors(playerid);

			}
			return 1;
		}
		//==============================================================================
		//                          	Missions 1
		//==============================================================================
		case INTERIORMENU+6:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 1726.18,-1641.00,20.23, 18, "Atrium");
				case 1: SetPlayerPosEx(playerid, 2338.32,-1180.61,1027.98, 5, "Burning Desire");
				case 2: SetPlayerPosEx(playerid, 2807.63,-1170.15,1025.57, 8, "Colonel Furhberger");
				case 3: SetPlayerPosEx(playerid, 681.66,-453.32,-25.61, 1, "Welcome Pump(Dillimore)");
				case 4: SetPlayerPosEx(playerid, -2158.72,641.29,1052.38, 1, "Woozies Apartment");
				case 5: SetPlayerPosEx(playerid, -2637.69,1404.24,906.46, 3, "Jizzy's");
				case 6: SetPlayerPosEx(playerid, 664.19,-570.73,16.34, 0, "Dillimore Gas Station");
				case 7: SetPlayerPosEx(playerid, 2220.26,-1148.01,1025.80, 15, "Jefferson Motel");
				case 8: SetPlayerPosEx(playerid, -750.80,491.00,1371.70, 1, "Liberty City");
				case 9: SetPlayerPosEx(playerid, -944.2402, 1886.1536, 5.0051, 17, "Sherman Dam");
				case 10: cmd_interiors(playerid);

			}
			return 1;
		}
		//==============================================================================
		//                          	Missions 2
		//==============================================================================
		case INTERIORMENU+7:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, -1079.99,1061.58,1343.04, 10, "RC War Arena");
				case 1: SetPlayerPosEx(playerid, -1395.958,-208.197,1051.170, 7, "Racing Stadium");
				case 2: SetPlayerPosEx(playerid, -1424.9319,-664.5869,1059.8585, 4, "Racing Stadium 2");
				case 3: SetPlayerPosEx(playerid, -1394.20,987.62,1023.96, 15, "Bloodbowl Stadium");
				case 4: SetPlayerPosEx(playerid, -1410.72,1591.16,1052.53, 14, "Kickstart Stadium");
				case 5: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Casino Interiors
		//==============================================================================
		case INTERIORMENU+8:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 2233.8032,1712.2303,1011.7632, 1, "Caligulas Casino");
				case 1: SetPlayerPosEx(playerid, 2016.2699,1017.7790,996.8750, 10, "4 Dragons Casino");
				case 2: SetPlayerPosEx(playerid, 1132.9063,-9.7726,1000.6797, 12, "Redsands Casino");
				case 3: SetPlayerPosEx(playerid, 2003.1178, 1015.1948, 33.008, 11, "4 Dragons' Managerial Suite (Unsolid floor)");
				case 4: SetPlayerPosEx(playerid, 830.6016, 5.9404, 1004.1797, 3, "Inside Track betting");
				case 5: SetPlayerPosEx(playerid, 2268.5156, 1647.7682, 1084.2344, 1, "Caligulas Roof");
				case 6: SetPlayerPosEx(playerid, 2182.2017, 1628.5848, 1043.8723, 2, "Rosenberg's Caligulas Office (Unsolid floor)");
				case 7: SetPlayerPosEx(playerid, 1893.0731, 1017.8958, 31.8828, 10, "4 Dragons Janitor's Office");
				case 8: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Shop Interiors
		//==============================================================================
		case INTERIORMENU+9:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, -203.0764,-24.1658,1002.2734, 16, "Tattoo");
				case 1: SetPlayerPosEx(playerid, 365.4099,-73.6167,1001.5078, 10, "Burger Shot");
				case 2: SetPlayerPosEx(playerid, 372.3520,-131.6510,1001.4922, 5, "Well Stacked Pizza");
				case 3: SetPlayerPosEx(playerid, 365.7158,-9.8873,1001.8516, 9, "Cluckin Bell");
				case 4: SetPlayerPosEx(playerid, 378.026,-190.5155,1000.6328, 17, "Rusty Donut's");
				case 5: SetPlayerPosEx(playerid, -2240.1028, 136.973, 1035.4141, 6, "Zero's");
				case 6: SetPlayerPosEx(playerid, -100.2674, -22.9376, 1000.7188, 3, "Sex Shop");
				case 7: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Mod Shops/Garages
		//==============================================================================
		case INTERIORMENU+10:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 616.7820,-74.8151,997.6350, 2, "Loco Low Co.");
				case 1: SetPlayerPosEx(playerid, 615.2851,-124.2390,997.6350, 3, "Wheel Arch Angels");
				case 2: SetPlayerPosEx(playerid, 617.5380,-1.9900,1000.6829, 1, "Transfender");
				case 3: SetPlayerPosEx(playerid, -2041.2334, 178.3969, 28.8465, 1, "Doherty Garage");
				case 4: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Girlfriend Interiors
		//==============================================================================
		case INTERIORMENU+11:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 245.2307, 304.7632, 999.1484, 1, "Denise's Bedroom");
				case 1: SetPlayerPosEx(playerid, 290.623, 309.0622, 999.1484, 3, "Helena's Barn");
				case 2: SetPlayerPosEx(playerid, 322.5014, 303.6906, 999.1484, 5, "Barbaras Lovenest");
				case 3: SetPlayerPosEx(playerid, 269.6405, 305.9512, 999.1484, 2, "Katie's Lovenest");
				case 4: SetPlayerPosEx(playerid, 306.1966, 307.819, 1003.3047, 4, "Michelle's Lovenest");
				case 5: SetPlayerPosEx(playerid, 344.9984, 307.1824, 999.1557, 6, "Millie's Bedroom");
				case 6: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                              Clothing/Barber Shops
		//==============================================================================
		case INTERIORMENU+12:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 418.4666, -80.4595, 1001.8047, 3, "Barber Shop");
				case 1: SetPlayerPosEx(playerid, 206.4627, -137.7076, 1003.0938, 3, "Pro Laps");
				case 2: SetPlayerPosEx(playerid, 225.0306, -9.1838, 1002.218, 5, "Victim");
				case 3: SetPlayerPosEx(playerid, 204.1174, -46.8047, 1001.8047, 1, "Suburban");
				case 4: SetPlayerPosEx(playerid, 414.2987, -18.8044, 1001.8047, 2, "Reece's Barber Shop");
				case 5: SetPlayerPosEx(playerid, 161.4048, -94.2416, 1001.8047, 18, "Zip");
				case 6: SetPlayerPosEx(playerid, 204.1658, -165.7678, 1000.5234, 14, "Didier Sachs");
				case 7: SetPlayerPosEx(playerid, 207.5219, -109.7448, 1005.1328, 15, "Binco");
				case 8: SetPlayerPosEx(playerid, 411.9707, -51.9217, 1001.8984, 12, "Barber Shop 2");
				case 9: SetPlayerPosEx(playerid, 256.9047, -41.6537, 1002.0234, 14, "Wardrobe");
				case 10: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Resturants/Clubs
		//==============================================================================
		case INTERIORMENU+13:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 974.0177, -9.5937, 1001.1484, 3, "Brotel");
				case 1: SetPlayerPosEx(playerid, 961.9308, -51.9071, 1001.1172, 3, "Brotel 2");
				case 2: SetPlayerPosEx(playerid, 1212.0762,-28.5799,1000.9531, 3, "Big Spread Ranch");
				case 3: SetPlayerPosEx(playerid, 454.9853, -107.2548, 999.4376, 5, "Dinner");
				case 4: SetPlayerPosEx(playerid, 445.6003, -6.9823, 1000.7344, 1, "World Of Coq");
				case 5: SetPlayerPosEx(playerid, 1204.9326,-8.1650,1000.9219, 2, "The Pig Pen");
				case 6: SetPlayerPosEx(playerid, 490.2701,-18.4260,1000.6797, 17, "Dance Club");
				case 7: SetPlayerPosEx(playerid, 449.0172, -88.9894, 999.5547, 4, "Jay's Dinner");
				case 8: SetPlayerPosEx(playerid, 442.1295, -52.4782, 999.7167, 6, "Secret Valley Dinner");
				case 9: SetPlayerPosEx(playerid, 748.4623, 1438.2378, 1102.9531, 6, "Fanny Batter's Whore House");
				case 10: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	No Specific Group
		//==============================================================================
		case INTERIORMENU+14:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 1037.8276, 0.397, 1001.2845, 3, "Blastin' Fools Records");
				case 1: SetPlayerPosEx(playerid, 1290.4106, 1.9512, 1001.0201, 18, "Warehouse");
				case 2: SetPlayerPosEx(playerid, 1411.4434,-2.7966,1000.9238, 1, "Warehouse 2");
				case 3: SetPlayerPosEx(playerid, 446.3247, 509.9662, 1001.4195, 12, "Budget Inn Motel Room");
				case 4: SetPlayerPosEx(playerid, -227.5703, 1401.5544, 27.7656, 18, "Lil' Probe Inn");
				case 5: SetPlayerPosEx(playerid, 318.5645, 1118.2079, 1083.8828, 5, "Crack Den");
				case 6: SetPlayerPosEx(playerid, 963.0586, 2159.7563, 1011.0303, 1, "Meat Factory");
				case 7: SetPlayerPosEx(playerid, 1494.8589, 1306.48, 1093.2953, 3, "Bike School");
				case 8: SetPlayerPosEx(playerid, -2031.1196, -115.8287, 1035.1719, 3, "Driving School");
				case 9: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Burglary Houses 1
		//==============================================================================
		case INTERIORMENU+15: //
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 234.6087, 1187.8195, 1080.2578, 3, "Burglary House #1");
				case 1: SetPlayerPosEx(playerid, 225.5707, 1240.0643, 1082.1406, 2, "Burglary House #2");
				case 2: SetPlayerPosEx(playerid, 224.288, 1289.1907, 1082.1406, 1, "Burglary House #3");
				case 3: SetPlayerPosEx(playerid, 239.2819, 1114.1991, 1080.9922, 5, "Burglary House #4");
				case 4: SetPlayerPosEx(playerid, 295.1391, 1473.3719, 1080.2578, 15, "Burglary House #5");
				case 5: SetPlayerPosEx(playerid, 261.1165, 1287.2197, 1080.2578, 4, "Burglary House #6");
				case 6: SetPlayerPosEx(playerid, 24.3769, 1341.1829, 1084.375, 10, "Burglary House #7");
				case 7: SetPlayerPosEx(playerid, -262.1759, 1456.6158, 1084.36728, 4, "Burglary House #8");
				case 8: SetPlayerPosEx(playerid, 22.861, 1404.9165, 1084.4297, 5, "Burglary House #9");
				case 9: SetPlayerPosEx(playerid, 140.3679, 1367.8837, 1083.8621, 5, "Burglary House #10");
				case 10: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Burglary Houses 2
		//==============================================================================
		case INTERIORMENU+16:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 234.2826, 1065.229, 1084.2101, 6, "Burglary House #11");
				case 1: SetPlayerPosEx(playerid, -68.5145, 1353.8485, 1080.2109, 6, "Burglary House #12");
				case 2: SetPlayerPosEx(playerid, -285.2511, 1471.197, 1084.375, 15, "Burglary House #13");
				case 3: SetPlayerPosEx(playerid, -42.5267, 1408.23, 1084.4297, 8, "Burglary House #14");
				case 4: SetPlayerPosEx(playerid, 84.9244, 1324.2983, 1083.8594, 9, "Burglary House #15");
				case 5: SetPlayerPosEx(playerid, 260.7421, 1238.2261, 1084.2578, 9, "Burglary House #16");
				case 6: SetPlayerPosEx(playerid, 447.0000, 1400.3000, 1084.3047, 2, "Burglary House #17");
				case 7: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          	Gyms
		//==============================================================================
		case INTERIORMENU+17:
		{
			switch(listitem)
			{
				case 0: SetPlayerPosEx(playerid, 771.7984,-3.2346,1000.7285, 5, "Los Santos Gym");
				case 1: SetPlayerPosEx(playerid, 771.8632,-40.5659,1000.6865, 6, "San Fierro Gym");
				case 2: SetPlayerPosEx(playerid, 774.0681,-71.8559,1000.6484, 7, "Las Venturas Gym");
				case 3: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          Deparments
		//==============================================================================
		case INTERIORMENU+18:
		{
		    switch(listitem)
		    {
				case 0: SetPlayerPosEx(playerid, 246.40,110.84,1003.22, 10, "San Fierro Police Department");
				case 1: SetPlayerPosEx(playerid, 246.6695, 65.8039, 1003.6406, 6, "Los Santos Police Department");
				case 2: SetPlayerPosEx(playerid, 288.4723, 170.0647, 1007.1794, 3, "Las Venturas Police Department");
				case 3: SetPlayerPosEx(playerid, 386.5259, 173.6381, 1008.382, 3, "Planning Department (City Hall)");
				case 4: cmd_interiors(playerid);
			}
			return 1;
		}
		//==============================================================================
		//                          World Locations
		//==============================================================================
		case INTERIORMENU+19:
		{
		    switch(listitem)
		    {
				case 0: SetPlayerPosEx(playerid, 390.6189, -1754.6224, 8.2057, 0, "Market Stall #1");
				case 1: SetPlayerPosEx(playerid, 398.1151, -1754.8677, 8.2150, 0, "Market Stall #2");
				case 2: SetPlayerPosEx(playerid, 380.1665, -1886.9348, 7.8359, 0, "Market Stall #3");
				case 3: SetPlayerPosEx(playerid, 383.4514, -1912.3203, 7.8359, 0, "Market Stall #4");
				case 4: SetPlayerPosEx(playerid, 380.8439, -1922.2300, 7.8359, 0, "Market Stall #4");
				case 5: cmd_interiors(playerid);
			}
			return 1;
		}
	}
    return true;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(pSpawned[playerid] == 0) return Error(playerid, "You must be spawned to check player stats!");
    if(pAdmin[playerid] == 0)
	{
		if(pLogged[clickedplayerid] == true)
		{
			DisplayStats(playerid, clickedplayerid);
   		}
   		else Error(playerid, "The selected player is not logged in!");
	}
	else
	{
		controlPlayer[playerid] = clickedplayerid;
	    format(tmp, sizeof(tmp), "%s(%i)", pName[clickedplayerid], clickedplayerid);
		ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, tmp, "Kick\nBan\nSpectate\n(un)mute\nFreeze\nUnfreeze\nSlap\nExplode\nWarp to\nGet here\nDisarm\nEject\nSet Temp Name", "Select", "Cancel");
	}
	return 1;
}
stock SkydiveCompletion(playerid)
{
	if(pAch11[playerid] == 0 && pLogged[playerid] == true)
	{
		if(GetPVarInt(playerid, "CompletedSD1") == 1 && GetPVarInt(playerid, "CompletedSD2") == 1 && GetPVarInt(playerid, "CompletedSD3") == 1)
		{
			pAch11[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a11=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "Skydiver", "Congrats you completed 3 skydives!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
	}
}
//========================================================[FUNCTIONS]====================================================================]
public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
   if(pSpectating[playerid] != -1) return true;
   if(InDM[playerid] == 19)
   {
		if(GetPlayerTeam(playerid) == CounterTerrorist)
	    {
	                KillTimer(DefuseTimer);
	                SendClientMessage(playerid, COLOR_RED, "(ERROR) Defuse failed, you must in checkpoint to defuse bomb");
	    }
   }
   ClosePlayerDialog(playerid);
   return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(pSpectating[playerid] != -1) return true;
	if(checkpointid == BombC)
    {
        if(GetPlayerTeam(playerid) == CounterTerrorist)
            {
                if(IsPlayerInRangeOfPoint(playerid, 7.0, -1149.7280,2390.5259,146.7129))
                {
                    if(IsPlanted[playerid] == 1)
                    {
                        format(str,sizeof(str),""CSDM"Bomb being defused", pName[playerid], playerid);
                        SendCSMessage(COLOR_WHITEP, str);
                        DefuseTimer = SetTimer("Defuse",10000,false);
                        if(IsPlanted[playerid] == 0)
                        {
                        format(str,sizeof(str),""CSDM"Defusion failed!", pName[playerid], playerid);
                        SendCSMessage(COLOR_WHITEP, str);
                        }
                        return 1;
                        }
                                else return SendClientMessage(playerid, COLOR_RED, "(ERROR) Bomb has not been planted");
                      }
                        else return SendClientMessage(playerid, COLOR_RED, "(ERROR) You must in the B site");
                }
                else return SendClientMessage(playerid, COLOR_RED, "(ERROR) Only CT can defused the bomb");
     }
	switch(checkpointid)
	{
	   	case 1..4:
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(InDM[playerid] == 13)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"You can't tune your vehicle while playing cops and robbers!");
					return true;
				}
			    ShowTuneMenu(playerid);
			}
   		}
   		case 5: //Regular players club SF
   		{
   			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				//if(pTotalHours[playerid] < 10) return ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""ORANGE_E"Regular Player Club.", "{F6F6F6}You must have at least a total of 10 hours of online time to enter the regular players club! (/stats)", "OK", "");
				SetPlayerPosition(playerid, -3936.5417,1307.7101,2.7777,4.0602);
				SetPlayerVirtualWorld(playerid, 10);
				ResetPlayerWeapons(playerid);
				PlayerPlaySound(playerid, 1068, 0, 0, 0);
    			SetPlayerWeather(playerid, 10);
				SetPlayerTime(playerid, 0, 0);
				doingStunt[playerid] = 20;
    			SetPVarInt(playerid, "TimeChanged", 1);
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "YELLOW_E"Welcome to the Regular Players Club!");
			}
   		}
   		case 6: //Regular players club AA
   		{
   			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    if(InDM[playerid] != 0) return Error(playerid, "You can't enter the club while playing CnR!");
				//if(pTotalHours[playerid] < 10) return ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""ORANGE_E"Regular Player Club.", "{F6F6F6}You must have at least a total of 10 hours of online time to enter the regular players club! (/stats)", "OK", "");
				SetPlayerPosition(playerid, -3936.5417,1307.7101,2.7777,4.0602);
				SetPlayerVirtualWorld(playerid, 10);
				ResetPlayerWeapons(playerid);
				PlayerPlaySound(playerid, 1068, 0, 0, 0);
				SetPlayerWeather(playerid, 10);
				SetPlayerTime(playerid, 0, 0);
    			doingStunt[playerid] = 20;
				SetPVarInt(playerid, "TimeChanged", 2);
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" Welcome to the Regular Players Club!");
			}
   		}
   		case 7: //Regular players club SF/AA exit
   		{
   			if(GetPVarInt(playerid, "TimeChanged") == 1)
  			{
   				SetPlayerPosition(playerid, -2621.4216,1408.9989,7.1016,220.3183); // SF
			}
			else SetPlayerPosition(playerid, 30.5797,2595.9666,26.6703,218.4528); // AA

			PlayerPlaySound(playerid, 1186, 0, 0, 0);
   			SetPlayerVirtualWorld(playerid, 0);
   			// Set player custom Time/Weather
			if(pTime[playerid] != -1) SetPlayerTime(playerid, pTime[playerid], 0);
			else SetPlayerTime(playerid, 10, 0);
			if(pWeather[playerid] != -1) SetPlayerWeather(playerid, pWeather[playerid]);
			else SetPlayerWeather(playerid, 24);
			doingStunt[playerid] = 0;
			DeletePVar(playerid, "TimeChanged");
   		}
   		case 8: //Regular players club LV
   		{
   			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(InDM[playerid] != 0) return Error(playerid, "You can't enter the club while playing CnR!");
   				if(pTotalHours[playerid] < 10) return ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""ORANGE_E"Regular Player Club.", "{F6F6F6}You must have at least a total of 10 hours of online time to enter the regular players club! (/stats)", "OK", "");

				SetPlayerPosition(playerid, 965.5705,-53.1208,1001.1246,91.1551, 3);
				SetPlayerVirtualWorld(playerid, 10);
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" Welcome to the LV Regular Players Club!");
				doingStunt[playerid] = 20;
			}
   		}
   		case 9: //Regular players club LV exit
   		{
   			SetPlayerPosition(playerid, 2221.7544,1838.3141,10.8203,86.7277);
   			SetPlayerVirtualWorld(playerid, 0);
   			doingStunt[playerid] = 0;
   		}
		case 10: // UFF HQ
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
   				SetPlayerPosition(playerid, 377.6150,173.7396,1008.3828,89.7775, 3);
				SetPlayerVirtualWorld(playerid, 10);
				SendClientMessage(playerid, COLOR_BLUE, ""UFF" "YELLOW_E"Welcome to the UFF HeadQuarters.");
			}
		}
		case 11: // UFF HQ exit
		{
			SetPlayerPosition(playerid, 58.0462,2301.5356,26.7352,359.0816);
   			SetPlayerVirtualWorld(playerid, 0);
		}
		case 12: //QuadParkour Prize
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the quad parkour.",6000, 5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /quadparkour.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 50000);
		  		format(str, sizeof(str), "~g~~h~~h~+$50000~w~~n~~y~~h~+6 score", PlayerName);
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the quad parkour~n~~r~~h~6 score and $50000!");
				cmd_aa(playerid);
	  		}
 		}
 		case 13: //BikeChallenge Prize
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER )
	  		{
     			iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPVarInt(playerid, "completedBikeC") == 1)
	  			{
	  				SendClientMessage(playerid, COLOR_GREY, "*** "DARK_E"You have already completed this challenge, come back later!");
	  			}
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	  			SetPVarInt(playerid, "CompletedBC1", 1);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the bike challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bikec.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 8);
		  		GivePlayerCash(playerid, 20000);
		  		format(str, sizeof(str), "~g~~h~~h~+$20000~w~~n~~y~~h~+8 score", PlayerName);
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the bike challenge~n~~r~~h~8 score and $20000!");
				CheckBCCompleted(playerid);
	  		}
 		}
	 	case 14.17: //Refill Stations
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	 		{
	 			ShowPlayerDialog(playerid, 508, DIALOG_STYLE_LIST, ""ORANGE_E"Refill Station", ""GREEN_E"Repair Vehicle\t\t"LG_E"$2000\n"LB_E"Add Nitro (x10)\t\t"LG_E"$5000\n"LB_E"Repair and add Nitro\t"LG_E"$6500", "Select", "Exit");
			}
		}
	 	case 18: //24/7
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		SetPlayerPosition(playerid, -29.3253,-89.4238,1003.5469,309.1852);
	 		SetPlayerInterior(playerid, 18);
			SetPVarInt(playerid, "InStore", 1);
	 		if(GetPVarInt(playerid, "Robber") != 0)
  			{
  				GameTextForPlayer(playerid,"~b~/rob~w~to~n~attempt a robbery", 2000, 5);
			}
	 	}
	 	case 19: //24/7 2
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPlayerPosition(playerid, -25.7717,-185.2310,1003.5469,357.3543);
	 		SetPlayerInterior(playerid, 17);
	 		SetPVarInt(playerid, "InStore", 2);
	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
	 	}
	 	case 20: //Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 3);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);
	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 21: //Ammunation
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 4);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
	  		if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 22: //24/7 Exit
		{
            if(InBusiness[playerid] == INVALID_BUSINESS)
            {
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2096.8403,2218.1736,10.8203,180.3828);
			}
			else
			{
			Error(playerid,"You are not allowed to use this cp right now, use /bexit to leave the business");
			}
 		}
		case 23: //24/7 2 Exit
		{
		    if(InBusiness[playerid] == INVALID_BUSINESS)
            {
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.4414,1989.8256,10.8203,89.8401);
            }
			else
			{
			Error(playerid,"You are not allowed to use this cp right now, use /bexit to leave the business");
			}
		}
		case 24: //Casino Exit
		{
			if(GetPVarInt(playerid, "InStore") == 8)
	  		{
	  			SetPlayerPosition(playerid, 2087.2427,1518.5631,10.8203,42.2712);
	  		}
	  		else SetPlayerPosition(playerid, 2166.8091,2118.7424,10.8203,2.7188);
	  		SetPVarInt(playerid, "InStore", 0);
		}
		case 25: //Ammunation Exit
		{
			if(GetPVarInt(playerid, "InStore") == 9)
	  		{
	  			SetPlayerPosition(playerid, 2535.6519,2083.6223,10.8203,87.9963);
	  		}
	  		else SetPlayerPosition(playerid, 2152.6311,943.3882,10.8203,86.5536);
			SetPVarInt(playerid, "InStore", 0);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 26: //Ammunation Weapons Menu
		{
		    if(GOD[playerid] == 1 && InDM[playerid] != 13) return Error(playerid, "You can't purchase weapons with godmode enabled!");

			if(InDM[playerid] == 13) ShowPlayerDialog(playerid, WEAPON_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Weapons", "Rifles\t\t\t"LG_E"\nSubmachine Guns\t"LG_E"\nShot Guns\t\t\nHand Guns\t\t\nMelee Weapons\t\nSpecial Weapons\t"LG_E"", "Select", "Cancel");
			else ShowWeaponMenu(playerid);
		}
  		case 27: //PD Refill
		{
			if(GetPVarInt(playerid, "Cop") != 0)
			{
				ShowPlayerDialog(playerid, 509, 2, ""BLUE_E"LVPD Refill", "Refill Health\nRefill Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
			}
		}
		case 28: //Robber Refill
		{
			if(GetPVarInt(playerid, "Robber") != 0)
			{
				ShowPlayerDialog(playerid, 510, 2, ""ORANGE_E"Robbery Refill", "Refill Health\nRefill Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
			}
		}
		case 29: //BMX Prize
		{
			if(doingStunt[playerid] == 5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the BMX challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bmx.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 5);
	  			GivePlayerCash(playerid, 20000);
	  			format(str, sizeof(str), "~g~~h~~h~+$20000~w~~n~~y~~h~+5 score", PlayerName);
              	MSTD_MSG(playerid,6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the BMX challenge~n~~r~~h~5 score and $20000!");
				pBMX[playerid]++;
				format(query, sizeof(query), "UPDATE players SET bmxs=bmxs+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			 	if(pBMX[playerid] >= 1)
				{
					if(pAch32[playerid] == 0)
					{
						pAch32[playerid] = 1;
						format(query, sizeof(query), "UPDATE achievements SET a32=1 WHERE reg_id=%d", pRegID[playerid]);
						MySQL_updateQuery(query);
						GivePlayerAchievement(playerid, "BMX Lord", "Congrats you have won Bmx Challenge!~n~~y~+$100000 and 10 score!~n~~w~Type /ach to view your achievements.");
					}
				}
			}
		}
		case 30: //PD Entrance
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPlayerPosition(playerid, 238.2997,143.0537,1003.0234,0.3759, 3);
		}
		case 31: //PD Exit
		{
		    if(InDM[playerid] == 101) return Error(playerid, "You can't get out of this checkpoint this moment, type /leave to get out.!");
			SetPlayerPosition(playerid, 2286.9224,2428.6223,10.8203,175.3422);
		}
		case 32: //Roca Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 5);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

 			if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 33: //LV Bank    // bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 6);
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);

	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
        case 34: // LV/Roca Bank Exit
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 5: SetPlayerPosition(playerid, 2270.9590,2288.6978,10.8203,180.1512);
				case 6: SetPlayerPosition(playerid, 2354.8496,1540.2738,10.8203,176.5952);
				case 90: SetPlayerPosition(playerid, -1553.1549,1168.3955,7.1875,90.9583);
				case 91: SetPlayerPosition(playerid, -2450.2944,503.9173,30.0857,263.3090);
				case 92: SetPlayerPosition(playerid, 1876.6860,-1741.3016,13.5056,180.8800);
				case 93: SetPlayerPosition(playerid, 1553.6498,-1790.9058,13.5469,265.9901);
				case 94: SetPlayerPosition(playerid, 1462.9047,-1015.3142,26.2472,181.1370);
				case 95: SetPlayerPosition(playerid, 1498.4811,-1584.6191,13.5469,182.4508);
				case 96: SetPlayerPosition(playerid, 132.7777,2293.4326,26.5000,296.9093);
			}
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerVirtualWorld(playerid, 0);
            if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 35: //4D
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 7);
			SetPlayerPosition(playerid, 2015.3188,1018.1863,996.8719,92.0147, 10);

	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 36: //4D Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2024.8165,1007.8154,10.8203,269.4927);
		}
		case 37: //Royal Casino
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 8);
			SetPlayerPosition(playerid, 1133.2571,-8.3218,1000.6797,358.5323, 12);

	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 38: //Ammunation 2
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 9);
			SetPlayerPosition(playerid, 286.2168,-39.0749,1001.5156,5.4098);
	 		SetPlayerInterior(playerid, 1);
	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
	  		if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 39: // Caligulas
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			SetPVarInt(playerid, "InStore", 10);
			SetPlayerPosition(playerid, 2235.1345,1707.5121,1010.3026,181.5232, 1);
	 		if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
		}
		case 40: // Caligulas Exit
		{
			SetPVarInt(playerid, "InStore", 0);
			SetPlayerPosition(playerid, 2188.1687,1677.7380,11.1118,87.6053);
		}
		case 41:
		{
			if(IsPlayerInAnyVehicle(playerid)) return true;
		    SpawnPlayerVehicle(playerid, 415, false);
		}
		case 42..50: //Bank
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
            switch(checkpointid)
			{
					case 47:
					{
						SetPVarInt(playerid, "InStore", 90);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);
					}
					case 48:
					{
						SetPVarInt(playerid, "InStore", 91);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);
					}
					case 49:
					{
						SetPVarInt(playerid, "InStore", 92);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 122);
					}
					case 50:
					{
						SetPVarInt(playerid, "InStore", 93);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 123);
	  				}
					case 51:
					{
						SetPVarInt(playerid, "InStore", 94);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 124);
					}
					case 52:
					{
						SetPVarInt(playerid, "InStore", 95);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 125);
					}
					case 53:
					{
						SetPVarInt(playerid, "InStore", 96);
						if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 126);
					}
			}
			SetPlayerPosition(playerid, 2308.4314,-16.2335,26.7496,274.7572);
			if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
	  		}
 		}
		case 51: // Bank CP
		{
			ShowPlayerDialog(playerid, 126, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Bank", "Deposit Money\nWithdraw Money\nCheck Balance", "Select", "Cancel");
		}
		case 52: // Wang's Private Vehicles to custom carshop
		{
			SetPVarInt(playerid, "PVShop", 1);
			if(!CanPlayerTeleport(playerid)) return true;
			SetPlayerPositionEx(playerid, -1401.1024,989.6992,1049.0078,0.6266);
			ResetPlayerWeapons(playerid);
			TogglePlayerControllable(playerid, false);
			SetPlayerInterior(playerid, 15);
			doingStunt[playerid] = 20;
			SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
		}
		case 53: // Otto's Private Vehicles to car shop
		{
			SetPVarInt(playerid, "PVShop", 2);
			if(!CanPlayerTeleport(playerid)) return true;
			SetPlayerPositionEx(playerid, -1401.1024,989.6992,1049.0078,0.6266);
			ResetPlayerWeapons(playerid);
			TogglePlayerControllable(playerid, false);
			SetPlayerInterior(playerid, 15);
			doingStunt[playerid] = 20;
			SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
		}
		case 54: // Robber's HQ
		{
			if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			SetPlayerPosition(playerid, 2573.0037,-1299.9639,1060.9844,93.2543, 2);
	  			SetPVarInt(playerid, "RobbersHQ", 1);
	  		}
	  		else SendClientMessage(playerid, COLOR_GREY2, "Server: "RED_E"Only robbers may enter this area!");
		}
		case 55: // Robber's HQ Exit
		{
		    if(GetPVarInt(playerid, "RobbersHQ") == 1)
	  		{
				SetPlayerPosition(playerid, 1266.7892,2672.8845,10.8203,270.2877);
			}
			else SetPlayerPosition(playerid, 2829.7666,1288.3926,10.7719,85.4957);
			DeletePVar(playerid, "RobbersHQ");
		}
		case 56: //AA NRG
		{
			if(IsPlayerInAnyVehicle(playerid)) return true;
		    SpawnPlayerVehicle(playerid, 522, false);
		}
		case 57: // Parkour 2 End
		{
			if(doingStunt[playerid] == 7)
			{
			    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour2 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour2.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 2);
		  		GivePlayerCash(playerid, 80000);
		  		format(str, sizeof(str), "~g~~h~~h~+$80000~w~~n~~y~~h~+2 score");
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour challenge~n~~r~~h~2 score and $80000!");
			}
		}
		case 58: // Refill Station
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	 		{
	 			ShowPlayerDialog(playerid, 508, DIALOG_STYLE_LIST, ""ORANGE_E"Refill Station", ""GREEN_E"Repair Vehicle\t\t"LG_E"$2000\n"LB_E"Add Nitro (x10)\t\t"LG_E"$5000\n"LB_E"Repair and add Nitro\t"LG_E"$6500", "Select", "Exit");
			}
		}
		case 59: // Binco (Roca)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 11);
		 	if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);

			SetPlayerPosition(playerid, 207.6357,-107.8551,1005.1328,2.6274, 15);
	 	}
	 	case 60: // Binco (LVAIR)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 12);
		 	if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);

			SetPlayerPosition(playerid, 207.6357,-107.8551,1005.1328,2.6274, 15);
	 	}
	 	case 61: // BurgerShot (Old LV Strip)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 13);
		 	if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);

			SetPlayerPosition(playerid, 366.2076,-73.5953,1001.5078,305.3458, 10);
	 	}
	 	case 62: // BurgerShot (Old LV Strip 2)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 14);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);

			SetPlayerPosition(playerid, 366.2076,-73.5953,1001.5078,305.3458, 10);
	 	}
	 	case 63: // BurgerShot (Redsands East)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 15);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 122);

			SetPlayerPosition(playerid, 366.2076,-73.5953,1001.5078,305.3458, 10);
	 	}
	 	case 64: // BurgerShot (Whitewood Estates)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 16);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 123);

			SetPlayerPosition(playerid, 366.2076,-73.5953,1001.5078,305.3458, 10);
	 	}
	 	case 65: // BurgerShot (Spinybed)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 17);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 124);

			SetPlayerPosition(playerid, 366.2076,-73.5953,1001.5078,305.3458, 10);
	 	}
	 	case 66: // Cluckin Bell (Pillgrim)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 18);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);

			SetPlayerPosition(playerid, 364.8943,-8.5190,1001.8516,357.9184, 9);
	 	}
	 	case 67: // Cluckin Bell (Creek)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 19);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);

			SetPlayerPosition(playerid, 364.8943,-8.5190,1001.8516,357.9184, 9);
	 	}
	 	case 68: // Well Stacked Pizza (PillGrim)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 20);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);

			SetPlayerPosition(playerid, 371.9259,-130.5635,1001.4922,0.5392, 5);
	 	}
	 	case 69: // Well Stacked Pizza (Creek)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 21);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);

			SetPlayerPosition(playerid, 371.9259,-130.5635,1001.4922,0.5392, 5);
	 	}
	 	case 70: // 247 (Redsands East)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 22);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 120);

			SetPlayerPosition(playerid, -27.3669,-54.9687,1003.5469,0.4137, 6);
	 	}
	 	case 71: // 247 (Creek)
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			SetPVarInt(playerid, "InStore", 23);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 121);

			SetPlayerPosition(playerid, -27.3669,-54.9687,1003.5469,0.4137, 6);
	 	}
	 	case 72: // LV Aiport
	 	{
	 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	 		if(GetPVarInt(playerid, "Robber") != 0) GameTextForPlayer(playerid,"~b~/rob ~w~to~n~attempt a robbery", 2000, 5);
			if(InDM[playerid] == 13) SetPVarInt(playerid, "InStore", 25);

			SetPlayerPosition(playerid, -1844.6172,17.1797,1061.1436,281.0522, 14);
	 	}
 		case 73: // Binco Exits
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 11: SetPlayerPosition(playerid, 2104.7188,2257.3389,11.0234,263.6317);
				case 12: SetPlayerPosition(playerid, 1653.1044,1733.6038,10.8203,91.8603);
			}
			SetPVarInt(playerid, "InStore", 0);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 74: // Burger Shot Exits
		{
			if(InBusiness[playerid] == INVALID_BUSINESS)
            {
				switch(GetPVarInt(playerid, "InStore"))
				{
					case 13: SetPlayerPosition(playerid, 2363.8821,2071.4553,10.8203,87.2767);
					case 14: SetPlayerPosition(playerid, 2468.9604,2034.7755,11.0625,95.3186);
					case 15: SetPlayerPosition(playerid, 1874.8138,2071.7192,11.0625,268.0414);
					case 16: SetPlayerPosition(playerid, 1160.9463,2072.0908,11.0625,269.5957);
					case 17: SetPlayerPosition(playerid, 2172.4138,2795.4441,10.8203,266.0840);
				}
				SetPVarInt(playerid, "InStore", 0);
				if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
			}
			else
			{
			Error(playerid,"You are not allowed to use this cp right now, use /bexit to leave the business");
			}
		}
		case 75: // Cluckin Bell Exits
		{
		  if(InBusiness[playerid] == INVALID_BUSINESS)
          {
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 18: SetPlayerPosition(playerid, 2635.1038,1671.9712,11.0234,84.3771);
				case 19: SetPlayerPosition(playerid, 2848.6047,2412.7878,11.0690,226.2170);
			}
			SetPVarInt(playerid, "InStore", 0);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		 }
		 else
		 {
			Error(playerid,"You are not allowed to use this cp right now, use /bexit to leave the business");
		 }
		}
		case 76: // Well Stacked Pizza Exits
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 20: SetPlayerPosition(playerid, 2635.0864,1850.3779,11.0234,91.5271);
				case 21: SetPlayerPosition(playerid, 2761.4868,2466.5315,11.0625,137.1999);
			}
			SetPVarInt(playerid, "InStore", 0);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 77: // 247 Exits
		{
			switch(GetPVarInt(playerid, "InStore"))
			{
				case 22: SetPlayerPosition(playerid, 1934.1273,2307.2227,10.8203,92.7234);
				case 23: SetPlayerPosition(playerid, 2886.0100,2450.5110,11.0690,222.8539);
				case 24: SetPlayerPosition(playerid, 2546.3965,1968.6648,10.8203,180.0609);
			}
			SetPVarInt(playerid, "InStore", 0);
			if(InDM[playerid] == 13) SetPlayerVirtualWorld(playerid, 20);
		}
		case 78: // LV Airport Exit
		{
			SetPlayerPosition(playerid, 1676.9756,1446.9008,10.7829,268.0375);
			SetPVarInt(playerid, "InStore", 0);
		}
 		case 79: // Parkour 3 Reward
		{
		    if(doingStunt[playerid] == 7)
			{
				iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour3 challenge.",6000, 5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour3.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 20000);
		  		format(str, sizeof(str), "~g~~h~~h~+$20000~w~~n~~y~~h~+4 score");
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour 3 challenge~n~~r~~h~4 score and $20000!");
			}
		}
		case 80: // Hayclimb 2 Reward
		{
		    if(doingStunt[playerid] == 6)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  		    doingStunt[playerid] = 0;
	  		    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the hayclimb 2 challenge.",6000, 5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /hayclimb2.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 2);
		  		GivePlayerCash(playerid, 10000);
		  		GivePlayerWeapon(playerid, 46, 1);
		  		format(str, sizeof(str), "~g~~h~~h~+$10000~w~~n~~y~~h~+2 score", PlayerName);
              	MSTD_MSG(playerid,6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the hayclimb 2 challenge~n~~r~~h~2 score and $10000!");
			}
		}
 		case 81: // Parkour 4 Reward
		{
			if(doingStunt[playerid] == 7)
			{
			    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour4 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour4.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 50000);
		  		format(str, sizeof(str), "~g~~h~~h~+$50000~w~~n~~y~~h~+4 score", PlayerName);
              	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour 4 challenge~n~~r~~h~4 score and $50000!");
			}
		}
		case 82: // Parkour 5 Reward
		{
			if(doingStunt[playerid] == 7)
			{
			    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour5 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour5.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 10);
		  		GivePlayerCash(playerid, 90000);
		  		format(str, sizeof(str), "~g~~h~~h~+$90000~w~~n~~y~~h~+10 score", PlayerName);
              	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour 5 challenge~n~~r~~h~10 score and $90000!");
			}
		}
		case 83: // Robber's HQ
		{
			if(GetPVarInt(playerid, "Robber") != 0)
	  		{
	  			SetPlayerPosition(playerid, 2573.0037,-1299.9639,1060.9844,93.2543, 2);
	  			SetPVarInt(playerid, "RobbersHQ", 2);
	  		}
	  		else SendClientMessage(playerid, COLOR_GREY2, "Server: "RED_E"Only robbers may enter this area!");
		}
		case 84: // Robbers Refill CP 2
		{
			if(GetPVarInt(playerid, "Robber") != 0)
			{
				ShowPlayerDialog(playerid, 510, 2, ""ORANGE_E"Robbery Refill", "Refill Health\nRefill Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
			}
		}
		case 85: // PD Refill (LVAIR)
		{
			if(GetPVarInt(playerid, "Cop") != 0)
			{
				ShowPlayerDialog(playerid, 509, 2, ""BLUE_E"LVPD Refill", "Refill Health\nRefill Armour (Premium Only)\nRefill Weapons", "Select", "Exit");
			}
		}
        case 86: //ip
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 1",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 1 (/chal1).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 10);
		  		GivePlayerCash(playerid, 80000);
		  		format(str, sizeof(str), "~g~~h~~h~+$80000~w~~n~~y~~h~+10 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 1~n~~r~~h~10 score and $80000!");

	  		}
 		}
 		case 87: //chall2
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 2",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 2 (/chal2).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 15);
		  		GivePlayerCash(playerid, 20000);
		  		format(str, sizeof(str), "~g~~h~~h~+$20000~w~~n~~y~~h~+15 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 2 ~n~~r~~h~15 score and $20000!");
	  		}
 		}
        case 88: //BMX2 Prize
		{
			if(doingStunt[playerid] == 5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the BMX 2 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bmx2.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 10);
	  			GivePlayerCash(playerid, 40000);
                format(str, sizeof(str), "~g~~h~~h~+$40000~w~~n~~y~~h~+10 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the BMX 2 challenge~n~~r~~h~10 score and $40000!");
			}
		}
        case 89: //tm1
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 3",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 3  (/chal3).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 10);
		  		GivePlayerCash(playerid, 40000);
                format(str, sizeof(str), "~g~~h~~h~+$40000~w~~n~~y~~h~+20 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 3 ~n~~r~~h~20 score and $40000!");
	  		}
 		}
        case 90: //tm2
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 4",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 4 (/chal4).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 20);
		  		GivePlayerCash(playerid, 80000);
                format(str, sizeof(str), "~g~~h~~h~+$80000~w~~n~~y~~h~+20 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 4~n~~r~~h~20 score and $80000!");
	  		}
 		}
        case 91: //tm3
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 5",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 5 (/chal5).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 25);
		  		GivePlayerCash(playerid, 50000);
		  		format(str, sizeof(str), "~g~~h~~h~+$50000~w~~n~~y~~h~+25 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 5~n~~r~~h~25 score and $50000!");
	  		}
 		}
        case 92: // Skydive 1 Reward
		{
			if(doingStunt[playerid] == 9)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the skydive challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				ResetPlayerWeapons(playerid);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /skydive.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 3);
		  		GivePlayerCash(playerid, 30000);
		  		ResetPlayerWeapons(playerid);
		  		format(str, sizeof(str), "~g~~h~~h~+$30000~w~~n~~y~~h~+3 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
		  		InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the skydive challenge~n~~r~~h~3 score and $30000!");
				SetTimerEx("skydive2", 1500, false, "i", playerid);
				SetPVarInt(playerid, "CompletedSD1", 1);
				SkydiveCompletion(playerid);
			}
		}
   		case 93: // Bc2 Reward
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
	    			Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	  			GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished bike challenge 2!",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				SetPVarInt(playerid, "CompletedBC2", 1);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bc2.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 8);
		  		GivePlayerCash(playerid, 90000);
		  		format(str, sizeof(str), "~g~~h~~h~+$90000~w~~n~~y~~h~+8 score", PlayerName);
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished bike challenge 2!~n~~r~~h~8 score and $90000!");
                CheckBCCompleted(playerid);
	  		}
 		}
        case 94: //bmx3 Prize
		{
			if(doingStunt[playerid] == 5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the BMX 3 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bmx3.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 15);
	  			GivePlayerCash(playerid, 80000);
	  			format(str, sizeof(str), "~g~~h~~h~+$80000~w~~n~~y~~h~+15 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the BMX 3 challenge~n~~r~~h~15 score and $80000!");
			}
		}
        case 95: // Skydive 2 Reward
		{
			if(doingStunt[playerid] == 9)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the skydive2 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				ResetPlayerWeapons(playerid);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /skydive2.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				doingStunt[playerid] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 50000);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the skydive2 challenge~n~~r~~h~4 score and $50000!");
                SetTimerEx("skydive3", 1500, false, "i", playerid);
                format(str, sizeof(str), "~g~~h~~h~+$50000~w~~n~~y~~h~+4 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				SetPVarInt(playerid, "CompletedSD2", 1);
				SkydiveCompletion(playerid);
			}
    	}
        case 96: // Skydive 3 Reward
		{
			if(doingStunt[playerid] == 9)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			ResetPlayerWeapons(playerid);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the skydive challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /skydive3.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 3);
		  		GivePlayerCash(playerid, 40000);
		  		ResetPlayerWeapons(playerid);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the skydive challenge~n~~r~~h~3 score and $40000!");
				SetPVarInt(playerid, "CompletedSD3", 1);
				format(str, sizeof(str), "~g~~h~~h~+$40000~w~~n~~y~~h~+3 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
              	SetTimerEx("skydive4", 1500, false, "i", playerid);
				SkydiveCompletion(playerid);
			}
		}
      	case 97: //BikeChallenge 5 Prize
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER )
	  		{
     			iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPVarInt(playerid, "completedBikeC") == 1)
	  			{
	  				SendClientMessage(playerid, COLOR_GREY, "*** "DARK_E"You have already completed this challenge, come back later!");
	  			}
	  			doingStunt[playerid] = 0;
	  			ResetPlayerWeapons(playerid);
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	  			SetPVarInt(playerid, "CompletedBC3", 1);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the bike challenge 3.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bikec3.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 40000);
		  		format(str, sizeof(str), "~g~~h~~h~+$400000~w~~n~~y~~h~+6 score", PlayerName);
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the bike challenge 3~n~~r~~h~6 score and $40000!");
				CheckBCCompleted(playerid);
	  		}
 		}
        case 98: //offorad
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Offroad",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed offroad  (/offroad).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 40000);
		  		format(str, sizeof(str), "~g~~h~~h~+$40000~w~~n~~y~~h~+4 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Offroad ~n~~r~~h~4 score and $40000!");
	  		}
 		}
	    case 99: // Parkour 6 Reward
		{
			if(doingStunt[playerid] == 7)
			{
			    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour6 challenge.",6000,0);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour6.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 12);
		  		GivePlayerCash(playerid, 90000);
		  		format(str, sizeof(str), "~g~~h~~h~+$90000~w~~n~~y~~h~+12 score", PlayerName);
              	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour 6 challenge~n~~r~~h~12 score and $90000!");
			}
		}
     	case 100: // gbhop
		{
				if(pLogged[playerid] == false)
			    return Error(playerid, "You must be logged in to view the gbshop!");
			    if(InEvent[playerid] != 0)
		 	    {
		 		Error(playerid, "You can't purchase items while in an event!");
				return 1;
		    	}
			 	new wString[1600];
				strcat(wString, "Heal Yourself\t\t\t"LG_E"Price: 10 gbs\nBuy Armour\t\t\t"LG_E"Price: 15 gbs\nBuy Jetpack\t\t\t"LG_E"Price: 30 gbs\nBuy Name Change\t\t"LG_E"Price: 100 gbs\nReset KDR (Kills/Deaths)\t"LG_E"Price: 200 gbs\n"RED_E"-> "IVORY_E"Convert your Gold Blocks into money");
				ShowPlayerDialog(playerid, GC_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Gold Block Shop", wString, "Select", "Cancel");
	    }
	    case 101: // disco
		{
		       if(!CanPlayerTeleport(playerid)) return true;
	           SetPlayerPositionEx(playerid, 913.8759,-1663.5565,10003.9453,91.2083);
           	   TeleMSG(playerid, "Disco /disco");
           	   GameTextForPlayer(playerid, "~y~Disco /disco", 4000, 4);
	           TogglePlayerControllable(playerid, false);
	           SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
        }
         case 102: //challenge 6
         {
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
				ResetPlayerWeapons(playerid);
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 6",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 6 (/chal6).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 40);
		  		GivePlayerCash(playerid, 30000);
		  		format(str, sizeof(str), "~g~~h~~h~+$30000~w~~n~~y~~h~+40 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 1~n~~r~~h~40 score and $30000!");

	  		}
 		}
 		case 103: //Challenge 7
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			ResetPlayerWeapons(playerid);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 7",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 7 (/chal7).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 40);
		  		GivePlayerCash(playerid, 50000);
		  		format(str, sizeof(str), "~g~~h~~h~+$50000~w~~n~~y~~h~+40 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 7~n~~r~~h~40 score and $50000!");

	  		}
 		}
 		case 104: //challenge 8
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
				ResetPlayerWeapons(playerid);
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 8",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 8 (/chal8).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 50);
				ResetPlayerWeapons(playerid);
		  		GivePlayerCash(playerid, 120000);
		  		format(str, sizeof(str), "~g~~h~~h~+$120000~w~~n~~y~~h~+50 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 8~n~~r~~h~50 score and $120000!");

	  		}
 		}
 		case 105: // Skydive 4 Reward
		{
			if(doingStunt[playerid] == 9)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the skydive 4 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /skydive4.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				doingStunt[playerid] = 0;
				ResetPlayerWeapons(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				GivePlayerScore(playerid, 15);
		  		GivePlayerCash(playerid, 60000);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the skydive 4 challenge~n~~r~~h~15 score and $60000!");
                SetTimerEx("skydive5", 1500, false, "i", playerid);
                format(str, sizeof(str), "~g~~h~~h~+$60000~w~~n~~y~~h~+15 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
			}
    	}
    	case 106: // Skydive 5 Reward
		{
			if(doingStunt[playerid] == 9)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPlayerWeapon(playerid) != 46)
	  			{
	  				SendClientMessage(playerid, COLOR_YELLOW, "Server: "RED_E"Challenge failed, you must have a parachute to complete this challenge.");
	  				return 1;
	  			}
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the skydive 5 challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /skydive5.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				doingStunt[playerid] = 0;
				ResetPlayerWeapons(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				GivePlayerScore(playerid, 25);
		  		GivePlayerCash(playerid, 100000);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the skydive 5 challenge~n~~r~~h~25 score and $100000!");
                format(str, sizeof(str), "~g~~h~~h~+$100000~w~~n~~y~~h~+25 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
			}
    	}
    	case 107: //BikeChallenge 4 Prize
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER )
	  		{
     			iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  			if(GetPVarInt(playerid, "completedBikeC") == 1)
	  			{
	  				SendClientMessage(playerid, COLOR_GREY, "*** "DARK_E"You have already completed this challenge, come back later!");
	  			}
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the bike challenge 4.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /bikec4.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 40);
		  		GivePlayerCash(playerid, 200000);
		  		ResetPlayerWeapons(playerid);
		  		format(str, sizeof(str), "~g~~h~~h~+$200000~w~~n~~y~~h~+41 score", PlayerName);
             	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the bike challenge 4~n~~r~~h~41 score and $200000!");
	  		}
 		}
 		case 108: //challenge 9
		{
			if(doingStunt[playerid] == 9 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					doingStunt[playerid] = 0;
					return true;
				}
				pChallengeCompleted[playerid] = iTemp;
	  			doingStunt[playerid] = 0;
	  			SetPlayerVirtualWorld(playerid, 0);
	  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 9",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 9 (/chal9).", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 65);
		  		GivePlayerCash(playerid, 150000);
		  		format(str, sizeof(str), "~g~~h~~h~+$150000~w~~n~~y~~h~+65 score", PlayerName);
              	MSTD_MSG(playerid, 6000, str);
              	ResetPlayerWeapons(playerid);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 9~n~~r~~h~65 score and $150000!");

	  		}
 		}
 		case 109: //challenge 10
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  		{
	  		    new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 522)
	            {
		  		    iTemp = GetTickCount();
					if((iTemp - pChallengeCompleted[playerid]) < 30000)
					{
						format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
						SendAdminMessage(COLOR_RED, str);
						Error(playerid, "You recently completed a challenge, please wait before completing another.");
						doingStunt[playerid] = 0;
						return true;
					}
					pChallengeCompleted[playerid] = iTemp;
		  			doingStunt[playerid] = 0;
		  			SetPlayerVirtualWorld(playerid, 0);
		  			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
					GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the Challenge 10",6000,5);
					PlayerPlaySound(playerid, 1149,0,0,0);
					format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed Challenge 10 (/chal10).", pColor[playerid], pName[playerid], playerid);
					SendClientMessageToAll(COLOR_PINK, str);
					ResetPlayerWeapons(playerid);
					GivePlayerScore(playerid, 50);
			  		GivePlayerCash(playerid, 170000);
			  		format(str, sizeof(str), "~g~~h~~h~+$170000~w~~n~~y~~h~+50 score", PlayerName);
	              	MSTD_MSG(playerid, 6000, str);
					InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the Challenge 10~n~~r~~h~50 score and $170000!");
                }
                else Error(playerid, "You are not in the desired vehcile to complete this challenge. You Lost");
	  		}
 		}
 		case 110:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Wangs
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 522)
	            {
	              SpawnPlayerVehicle(playerid, 510, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 111:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 510)
	            {
	              SpawnPlayerVehicle(playerid, 411, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 112:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 411)
	            {
	              SpawnPlayerVehicle(playerid, 501, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 113:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 501)
	            {
	              SpawnPlayerVehicle(playerid, 411, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 114:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 411)
	            {
	              SpawnPlayerVehicle(playerid, 473, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 115:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 473)
	            {
	              SpawnPlayerVehicle(playerid, 411, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 116:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 411)
	            {
	              SpawnPlayerVehicle(playerid, 556, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 117:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 556)
	            {
	              SpawnPlayerVehicle(playerid, 411, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
		case 118:
		{
			if(doingStunt[playerid] == 42 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
	            new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleModel(vehicleid) == 411)
	            {
	              SpawnPlayerVehicle(playerid, 522, false);
	              SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
				}
				else Error(playerid, "You need to be in the desired vehcile to continue the challenge");
			}
		}
     }
    return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(pSpectating[playerid] != -1) return true;
	if(InDM[playerid] == 13 || doingStunt[playerid] != 0)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); //Removes Jetpack
		SetTimerEx("DelayRemoveJetpack", 2000, false, "i", playerid);
	}
	if(GetPVarInt(playerid, "BusinessCooldown") < gettime())
	{
	    if(InBusiness[playerid] == INVALID_BUSINESS) {
		    foreach(new i : Business)
		    {
				if(pickupid == BusinessData[i][BusinessPickup])
				{
				    if(InDM[playerid] == 13 || doingStunt[playerid] != 0) return Error(playerid, "You can't enter business in this area, type /leave!");
				    SetPVarInt(playerid, "BusinessCooldown", gettime() + 8);
			        SetPVarInt(playerid, "PickupBusinessID", i);
	                if(Player_OwnsBusiness(playerid, i)) return Player_GoToBusiness(playerid, i);

			        if(!strcmp(BusinessData[i][Owner], "-") || BusinessData[i][SalePrice] > 0) {
			            new string[828];
			            if(BusinessData[i][SalePrice] > 0) {
			                format(string, sizeof(string), "This business is for sale. You can buy it if the owner is online.\nPrice: {2ECC71}$%s\n{FFFFFF}Tyoe: {2ECC71}%s\n{FFFFFF}Earning: {FFFFFF}%s for every %d minutes", convertNumber(BusinessData[i][SalePrice]), BusinessInteriors[ BusinessData[i][Type]][InteriorName], convertNumber(BusinessData[i][Earning]), BUSINESS_INTERVAL);
							ShowPlayerDialog(playerid, DIALOG_BUY_BUSINESS_FROM_OWNER, DIALOG_STYLE_MSGBOX, ""UFF" :: Business", string, "Buy", "Cancel");
						}else{
			                format(string, sizeof(string), "Do you want to buy this business for {2ECC71}$%s\n{FFFFFF}Type: {FFFFFF}%s\n{FFFFFF}Earning: {2ECC71}%s for every %d minutes", convertNumber(BusinessData[i][Price]) , BusinessInteriors[ BusinessData[i][Type]][InteriorName], convertNumber(BusinessData[i][Earning]), BUSINESS_INTERVAL);
							ShowPlayerDialog(playerid, DIALOG_BUY_BUSINESS, DIALOG_STYLE_MSGBOX, ""UFF" :: Business", string, "Buy", "Cancel");
			            }
			        }else{
				        if(!BusinessData[i][Closed]) {
				            Player_GoToBusiness(playerid, i);
						}else{
						    Error(playerid, "You can't enter this business right now.");
						}
			        }
			        return 1;
				}
		    }
	    }
	}
  	switch(pickupid)
	{
		case BarPC, BarPC2:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			if(GetPVarInt(playerid, "ShowBarDialog") == 0)
 			{
				SetPVarInt(playerid, "ShowBarDialog", 1);
				SetTimerEx("ResetBarDialog", 3500, false, "i", playerid);
	 			ShowPlayerDialog(playerid, 66, DIALOG_STYLE_LIST, ""ORANGE_E"Regular Players Club Bar.", ""GREY2_E"Purchase Beer\n"GREY2_E"Purchase Wine\n"GREY2_E"Purchase Soda\n"GREY2_E"Purchase Cigar", "Select", "Exit");
	 		}
		}
		case mbPC:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		    if(MoneyBagFound == 1) return true;
			datez = GetTickCount() - MoneyBagStart;
			hour = datez;
			second = datez / 1000;
			datez = datez - second * 1000;

			MoneyBagFound = 1;
			MoneyBagStart = 0;
			new money = MoneyBagCash;
			format(str, sizeof(str), ""MB" "LB2_E"%s(%i) has found the moneybag worth $%s in %2d.%02d seconds, located in %s.", pName[playerid], playerid, ToCurrency(money), second, datez, MoneyBagLocation);
			SendClientMessageToAll(COLOR_LB, str);
			format(str, sizeof(str), "4Moneybag: 2%s(%i) has found the money bag worth $%s in %2d.%03d seconds, located in %s.", pName[playerid], playerid, ToCurrency(money), second, datez, MoneyBagLocation);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			format(str, sizeof(str),  ""UFF" "WHITE_E"You have found the moneybag! You have received $%s and 1 score!", ToCurrency(money));
			SendClientMessage(playerid, COLOR_WHITE, str);
			format(str, sizeof(str), "~g~~h~Congrats you found the moneybag~w~!~n~~g~~h~~h~+$%s and +1 score", ToCurrency(money));
			InfoTD_MSG(playerid, 4000, str);
			GivePlayerCash(playerid, money);
	   /*
			if(pPremium[playerid] >= 1)
   			{
				new procent = ReturnProcent(money, 20);
				GivePlayerCash(playerid, procent);
				format(str, sizeof(str),  "** "LB2_E"As a premium member you have received 20 percent cash for this gold block package!");
				SendClientMessage(playerid, COLOR_ORANGE, str);

			}
*/
			GivePlayerScore(playerid, 1);
			pInfo[playerid][pMBFound]++;
			format(query, sizeof(query), "UPDATE players SET mb_found=mb_found+1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_X, 0.0);
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Y, 0.0);
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Z, 2140.0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			SetPVarInt(playerid, "pickedUpMB", 1);
			SetTimerEx("ResetMBPickup", 10000, false, "i", playerid);
			/*if(pInfo[playerid][pMBFound] >= 100)
			{
				if(pAch7[playerid] == 0)
				{
					pAch7[playerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a7=1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(playerid, "Moneybag Hunter", "Congrats you found 100 moneybags!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
				}
			}*/
		}
		case gbPC:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		    if(GoldBlockFound == 1) return true;
			datez = GetTickCount() - GoldBlockStart;
			hour = datez;
			second = datez / 1000;
			datez = datez - second * 1000;

			GoldBlockFound = 1;
			GoldBlockStart = 0;
			new money = GoldBlockCash;
			format(str, sizeof(str), ""GB" "WHITE_E"%s(%i) has found the gold block in %2d.%02d seconds,Location %s.", pName[playerid], playerid, second, datez, GoldBlockLocation);
			SendClientMessageToAll(COLOR_GREEN, str);

            format(str, sizeof(str), "4Gold Block: 2%s(%i) has found the gold block in %2d.%03d seconds,Location %s.", pName[playerid], playerid, second, datez, GoldBlockLocation);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			GivePlayerGB(playerid, 1);
			format(str, sizeof(str),  ""UFF" "GANG_CHAT"You have found the gold block! You can use it in /gbshop!");
			SendClientMessage(playerid, COLOR_ORANGE, str);
			if(pPremium[playerid] >= 1)
   			{
				new procent = ReturnProcent(money, 20);
				GivePlayerCash(playerid, procent);
				format(str, sizeof(str),  "** "LB2_E"As a premium member you have received 20 percent cash for this gold block!");
				SendClientMessage(playerid, COLOR_ORANGE, str);
			}
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_X, 0.0);
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Y, 0.0);
			Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Z, 2140.0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			pGoldBlocks[playerid]++;
			format(query, sizeof(query), "UPDATE players SET goldblocks=goldblocks+1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			// Same Logic as MB, Apply it to Gold Block.
			SetPVarInt(playerid, "pickedUpMB", 1);
			SetTimerEx("ResetMBPickup", 10000, false, "i", playerid);
			if(pGoldBlocks[playerid] >= 100)
			{
				if(pAch27[playerid] == 0)
				{
					pAch27[playerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a27=1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(playerid, "Gold Block Hunter", "Congrats you found 150 gbs!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
				}
			}
		}
		case TelePC_1, TelePC_2, TelePC_3, TelePC_4, TelePC_5, TelePC_6, TelePC_7, TelePC_8, TelePC_9, TelePC_10, TelePC_11, TelePC_12:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		    if(InDM[playerid] == 13) return Error(playerid, "You can't use any pickups while playing cops and robbers.");
			ShowTeleportMenu(playerid);
		}
		case vPC_1, vPC_2, vPC_3, vPC_4, vPC_5, vPC_6, vPC_7, vPC_8, vPC_9, vPC_10, vPC_11, vPC_12:
  		{
  		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
  		    if(InDM[playerid] == 13) return Error(playerid, "You can't use any pickups while playing cops and robbers.");
  			ShowVehicleMenu(playerid);
		}
		case SHVEH1, SHVEH2:
  		{
  		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	        if(doingStunt[playerid] == 97)
	        {
	            if(GetPVarInt(playerid, "UsedSHealth") == 1)
			    {
	            format(str, sizeof(str), "~y~Vehicle Helath in Cooldown");
                GameTextForPlayer(playerid,str, 3000,3);
				return true;
			    }
			    SetPVarInt(playerid, "UsedSHealth", 1);
			    SetTimerEx("ResetSHealth", 20000, false, "i", playerid);
			    AddVehicleComponent(vID, 1010);
			    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	        }
		}
		case SHNOS1, SHNOS2:
		{
  		     if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		     if(doingStunt[playerid] == 97)
		     {
		    	if(GetPVarInt(playerid, "UsedNitro") ==1)
				{
					format(str, sizeof(str), "~y~Nitro in Cooldown");
	                GameTextForPlayer(playerid,str, 3000,3);
					return true;
				}
			    SetPVarInt(playerid, "UsedNitro", 1);
			    SetTimerEx("ResetNitro", 20000, false, "i", playerid);
	  			vID = GetPlayerVehicleID(playerid);
				PlayerPlaySound(playerid, 1057, 0, 0, 0);
				RepairVehicle(vID);
	         }
		}
		case PVMENU:
		{
		   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
           ShowCarBuyMenu(playerid);
		}
		case PVEXIT:
		{
			if(GetPVarInt(playerid, "PVShop") == 1) // Wangs
		 	{
		  		SetPlayerPosition(playerid, -1981.2803,285.6966,34.8096,88.1494);
			}
			else SetPlayerPosition(playerid, -1644.7314,1213.2747,6.9067,226.3120);
            doingStunt[playerid] = 0;
		}
		case StuntPC_1, StuntPC_2, StuntPC_5, StuntPC_6, StuntPC_7, StuntPC_8:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
		    if(InDM[playerid] == 13) return Error(playerid, "You can't use any pickups while playing cops and robbers.");
			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerPos(playerid, POS[0], POS[1], POS[2] + 420.0);
			GivePlayerWeapon(playerid, 46, 1);
			format(tmp, sizeof(tmp), "~y~~h~dive");
            GameTextForPlayer(playerid, tmp, 3500, 4);
		}
		case StuntPC_3:
		{
			if(doingStunt[playerid] == 6)
	  		{
	  		    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
	  		    doingStunt[playerid] = 0;
	  		    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the hayclimb challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /hayclimb.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 50000);
		  		GivePlayerWeapon(playerid, 46, 1);
		  		format(str, sizeof(str), "~g~~h~~h~+$5000~w~~n~~y~~h~+4 score", PlayerName);
              	MSTD_MSG(playerid,6000, str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the hayclimb challenge~n~~r~~h~4 score and $50000!");
			}
		}
		case StuntPC_4:
		{
			if(doingStunt[playerid] == 7)
			{
			    iTemp = GetTickCount();
				if((iTemp - pChallengeCompleted[playerid]) < 30000)
				{
					format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Possible teleport hack detected on %s(%i).", pName[playerid], playerid);
					SendAdminMessage(COLOR_RED, str);
					Error(playerid, "You recently completed a challenge, please wait before completing another.");
					return true;
				}
	  		    pChallengeCompleted[playerid] = iTemp;
			    doingStunt[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
			    SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~r~~h~Congrats!~n~~w~You finished the parkour challenge.",6000,5);
				PlayerPlaySound(playerid, 1149,0,0,0);
				format(str, sizeof(str), ""UFF" {%06x}%s(%i) "PINK_E"has successfully completed /parkour1.", pColor[playerid], pName[playerid], playerid);
				SendClientMessageToAll(COLOR_PINK, str);
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 10000);
		  		format(str, sizeof(str), "~g~~h~~h~+$10000~w~~n~~y~~h~+4 score", PlayerName);
              	MSTD_MSG(playerid,6000,str);
				InfoTD_MSG(playerid, 5000, "~r~~h~Congratulations!~n~~w~You finished the parkour challenge~n~~r~~h~4 score and $10000!");
			}
		}
		default: // House Pickup.
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
			foreach(Houses, h)
			{
				if(pickupid == HousePickupOut[h])
			    {
			        if(InDM[playerid] == 13 || doingStunt[playerid] != 0) return Error(playerid, "You can't enter houses in this area, type /leave!");
	   		 		SetPVarInt(playerid, "LastHouseCP", h);
			        if(!strcmp(hInfo[h][HouseOwner], pName[playerid], CASE_SENSETIVE))
			        {
			            SetPlayerHouseInterior(playerid, h);
                        GameTextForPlayer(playerid, "~w~Use ~y~/exit ~w~ to leave the house", 3000, 3);
			           	format(str, sizeof(str), ""UFF" "WHITE_E"Type "YELLOW_E"/hm "WHITE_E"to access the house menu.", hInfo[h][HouseName]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
			            if(GetPVarInt(playerid, "houseChecked") != h)
				  		{
				  			SetPVarInt(playerid, "houseChecked", h);
							format(query, sizeof(query), "UPDATE houses SET last_visited=UNIX_TIMESTAMP() WHERE house_id=%d", h);
							MySQL_updateQuery(query);
						}
						break;
			        }
	                format(str, sizeof(str), "HouseKeys_%d", h);
				    if(GetPVarInt(playerid, str) == 1)
				    {
				        SetPlayerHouseInterior(playerid, h);
				        break;
				    }
					//Prevents pickup dialog spam.
				    if(GetPVarInt(playerid, "ShowHouseDialog") == 1) continue;
				    SetPVarInt(playerid, "ShowHouseDialog", 1);
	  				SetTimerEx("ResetHouseDialog", 3500, false, "i", playerid);
					if(strcmp(hInfo[h][HouseOwner], pNick(playerid), CASE_SENSETIVE) && strcmp(hInfo[h][HouseOwner], INVALID_HOWNER_NAME, CASE_SENSETIVE))
		        	{
		         		switch(hInfo[h][HousePrivacy])
			    		{
       						case 0:
       						{
				   				format(line, sizeof(line), ""WHITE_E"This house belongs to "WHITEP_E"%s. "WHITE_E"It is currently locked by the owner.\n\n"GREY2_E"Enter the password to enter the house.", hInfo[h][HouseOwner]);
			                 	ShowPlayerDialog(playerid, HOUSE_ENTER_PASSWORD, DIALOG_STYLE_PASSWORD, ""BLUE_E"UFF "YELLOW_E":: "LB_E"House Password", line , "Enter", "");
					   		}
							case 1:
							{
							    GameTextForPlayer(playerid, "~w~ Use ~y~/exit ~w~ to leave the house", 3000, 3);
								SetPlayerHouseInterior(playerid, h);
        						if(hInfo[h][HouseForSale] != 0) Info(playerid, "This house is for sale, type /buyhouse to purchase it!");

							}
						}
						break;
					}
					if(!strcmp(hInfo[h][HouseOwner], INVALID_HOWNER_NAME, CASE_SENSETIVE) && hInfo[h][HouseValue] > 0)
					{
	                    if(h == 333 || h == 342 || h == 349 || h == 355 || h == 360 || h == 371 || h == 374|| h == 379)
						{
			   				if(pPremium[playerid] < 1) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_VIPHOUSE);
						}
		    			format(str, sizeof(str), HMENU_BUY_HOUSE, ToCurrency(hInfo[h][HouseValue]));
						ShowPlayerDialog(playerid, HOUSEMENU+4, DIALOG_STYLE_MSGBOX, INFORMATION_HEADER, str, "Buy", "Cancel");
						break;
					}
			    }
			    if(pickupid == HousePickupInt[h])
			    {
			        switch(GetPVarInt(playerid, "HousePreview"))
			        {
			            case 0: ClosePlayerDialog(playerid), ExitHouse(playerid, h);
			            case 1:
				        {
							GetPVarString(playerid, "HousePrevName", tmp, 50);
							if(pPremium[playerid] == 1)
							{
							    format(str, sizeof(str), HMENU_BUY_HINTERIORFREE, tmp, GetPVarInt(playerid, "HousePrevValue"));
							}
							else format(str, sizeof(str), HMENU_BUY_HINTERIOR, tmp, GetPVarInt(playerid, "HousePrevValue"));
							ShowPlayerDialog(playerid, HOUSEMENU+17, DIALOG_STYLE_MSGBOX, INFORMATION_HEADER, str, "Buy", "Cancel");
				        }
			   		}
					break;
			    }
		    }
		}
	}
	return true;
}
stock DisplayStats(playerid, p2)
{
    if(!IsPlayerConnected(p2) || !IsPlayerConnected(playerid)) return Error(playerid, "Player not connected!");
    if(!pLogged[p2]) return Error(playerid, "Player not logged in!");
    GetPlayerName(p2, giveplayer, sizeof(giveplayer));
    new line4[750];
    new line3[2100];
    new str3[80], str4[80], str5[80], str6[80], str7[80], str11[140];

    // Main Statistics

//============== Group and VIp==================
    if(pGroupID[p2] != -1)
    {
        format(str11, sizeof(str11), ""WHITE_E"Gang: "StatsBlue"%s", pGroupName[p2]);
    }
    else format(str11, sizeof(str11), ""WHITE_E"Gang: "StatsBlue"- None -");
    if(pPremium[p2] > 0)
    {
        format(str6, sizeof(str6), ""WHITE_E"VIP: "StatsBlue"Yes\n", pPremium[p2]);
    }
    else format(str6, sizeof(str6), ""WHITE_E"VIP: "StatsBlue"No\n");
    
//======================================

    format(line4, sizeof(line4), ""LG_E"Statistics of player: "WHITE_E"%s(%d)\n{FF4545}%s\n\
    "WHITE_E"Score: "LB2_E"%d\n"WHITE_E"Money: "StatsBlue"$%s\n"WHITE_E"Bank: "StatsBlue"$%s\n%s\n%s",giveplayer,  pRegID[p2],str3, pScore[p2], ToCurrency(pCash[p2]), ToCurrency(BankMoney[p2]), str11, str6);
    strcat(line3, line4);

//============== Current time and Total play time==================
    if(pCurrHours[p2] == 0)
    {
        if(pCurrMinutes[p2] == 0)
        {
            format(str5, sizeof(str5), ""WHITE_E"Current Time: "StatsBlue"%d seconds", pCurrSeconds[p2]);
        }
        else format(str5, sizeof(str5), ""WHITE_E"Current Time: "StatsBlue"%d minutes and %d seconds", pCurrMinutes[p2], pCurrSeconds[p2]);
    }
    else format(str5, sizeof(str5), ""WHITE_E"Current Time: "StatsBlue"%d hours and %d minutes", pCurrHours[p2], pCurrMinutes[p2]);
    if(pTotalHours[p2] == 0)
    {
        if(pTotalMinutes[p2] == 0)
        {
            format(str4, sizeof(str4), ""WHITE_E"Playing Time: "StatsBlue"%ds", pTotalSeconds[p2]);
        }
        else format(str4, sizeof(str4), ""WHITE_E"Playing Time: "StatsBlue"%dm, %ds", pTotalMinutes[p2], pTotalSeconds[p2]);
    }
    else format(str4, sizeof(str4), ""WHITE_E"Playing Time: "StatsBlue"%dh %dm %ds ", pTotalHours[p2], pTotalMinutes[p2], pTotalSeconds[p2]);
//============== Current time and Total play time==================


    format(line4, sizeof(line4), ""WHITE_E"Register Date: "StatsBlue"%s\n"WHITE_E"Last log in: "StatsBlue"%s\n%s\n", pRegDate[p2], pLastDate[p2], str4);
    strcat(line3, line4);

    format(line4, sizeof(line4), ""WHITE_E"Kills: "StatsBlue"%d\n"WHITE_E"Deaths: "StatsBlue"%d\n"WHITE_E"KDR: "StatsBlue"%0.2f\n", pInfo[p2][pKills], pInfo[p2][pDeaths], Float:pInfo[p2][pKills]/Float:pInfo[p2][pDeaths]);
    strcat(line3, line4);

    format(line4, sizeof(line4), ""WHITE_E"Duels wins: "StatsBlue"%d\n"WHITE_E"Events wins: "StatsBlue"%d\n"WHITE_E"Arrests: "StatsBlue"%d\n\
    "WHITE_E"Race wins: "StatsBlue"%d\n"WHITE_E"GunGame wins: "StatsBlue"%d\n",pDuelsWon[p2], pInfo[p2][pEventsWon], pArrests[p2], pInfo[p2][pRacesWon], pGGWins[p2]);
    strcat(line3, line4);
    format(line4, sizeof(line4), ""WHITE_E"Country: "StatsBlue"%s\n"WHITE_E"GoldBlocks: "StatsBlue"%d GB\n"WHITE_E"Shooter Wins: "StatsBlue"%d\n"WHITE_E"Business: "StatsBlue"%d\n", pCountry[p2], pGBs[p2], pShooters[p2], Player_BusinessCount(p2));
    strcat(line3, line4);

    format(line4, sizeof(line4), ""WHITE_E"GBs found: "StatsBlue"%d\n"WHITE_E"Reactions wins: "StatsBlue"%d\n"WHITE_E"Math wins: "StatsBlue"%d\n"WHITE_E"Fallouts wins: "StatsBlue"%d\n"WHITE_E"Derby wins: "StatsBlue"%d\n\
    "WHITE_E"Houses: "StatsBlue"%d\n"WHITE_E"Report points: "StatsBlue"%d\n",pGoldBlocks[p2], reactionsWon[p2], mathsWon[p2], pFallouts[p2], pDerbys[p2], GetOwnedHouses(p2),pReportPoints[p2]);
    strcat(line3, line4);

    format(line4, sizeof(line4), ""WHITE_E"Status:\n   "StatsBlue"%s", pDescription[p2]);
    strcat(line3, line4);
    
    ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Statistics", line3, "OK", "");
    return true;
}


stock DisplayCnRStats(playerid, p2)
{
	if(!IsPlayerConnected(p2) || !IsPlayerConnected(playerid)) return Error(playerid, "Player not connected!");
	if(!pLogged[p2]) return Error(playerid, "Player not logged in!");
	new longstr[900];
	format(longstr, sizeof(longstr), ""LG_E"Cops and Robbers Stats: "WHITE_E"%s(%d)\n\n"WHITE_E"Arrests: "StatsBlue"%d\n"WHITE_E"Takedowns: "StatsBlue"%d\n\
			"WHITE_E"Robberies: "StatsBlue"%d\n"WHITE_E"Player Robberies: "StatsBlue"%d\n"WHITE_E"Cops Killed: "StatsBlue"%d\n"WHITE_E"Times Arrested: "StatsBlue"%d", pName[p2], pRegID[p2], pArrests[p2], pTakedowns[p2], pRobberies[p2], pPlayerRobberies[p2], pCopKills[p2], pTimesArrested[p2]);

	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"CnR Statistics", longstr, "OK", "");
	return true;
}
new p4 = 10;
function LoadStats(playerid, PlayersName[])
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), ""RED_E"[ERROR] "GREY_E"Account '%s' does not exist.", PlayersName);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
	else
	{
		pAdmin[p4] = MySQL_getInt(0, 0);
		pTotalHours[p4] = MySQL_getInt(0, 1);
		pTotalMinutes[p4] = MySQL_getInt(0, 2);
		pTotalSeconds[p4] = MySQL_getInt(0, 3);
		pInfo[p4][pKills] = MySQL_getInt(0, 4);
		pInfo[p4][pDeaths] = MySQL_getInt(0, 5);
		pCash[p4] = MySQL_getInt(0, 6);
		pScore[p4] = MySQL_getInt(0, 7);
		pPremium[p4] = MySQL_getInt(0, 8);
		pInfo[p4][pSaveSkin] = MySQL_getInt(0, 9);
		pGBs[p4] = MySQL_getInt(0, 10);
		pInfo[p4][pEventsWon] = MySQL_getInt(0, 11);
		pInfo[p4][pRacesWon] = MySQL_getInt(0, 12);
		pInfo[p4][pMBFound] = MySQL_getInt(0, 13);
 		MySQL_getString(0, 14, pRegDate[p4]);
 		MySQL_getString(0, 15, pLastDate[p4]);
		BankMoney[p4] = MySQL_getInt(0, 16);
		reactionsWon[p4] = MySQL_getInt(0, 17);
		pArrests[p4] = MySQL_getInt(0, 18);
		TotalKillStreak[p4] = MySQL_getInt(0, 19);
		MySQL_getString(0, 20, pDescription[p4]);
		pDuelsWon[p4] = MySQL_getInt(0, 21);
		pFallouts[p4] = MySQL_getInt(0, 22);
		pGroupID[p4] = MySQL_getInt(0, 23);
		pGroupRank[p4] = MySQL_getInt(0, 24);
		pDerbys[p4] = MySQL_getInt(0, 25);
		pGoldBlocks[p4] = MySQL_getInt(0, 26);
		pSpawnPlace[p4] = MySQL_getInt(0, 27);
		mathsWon[p4] = MySQL_getInt(0, 28);
		pReportPoints[p4] = MySQL_getInt(0, 29);
		pRegID[p4] = MySQL_getInt(0, 31);
		MySQL_query(query, true, "LoadStats2", "is", playerid, PlayersName);
	}
	return true;
}

function LoadStats2(playerid, PlayersName[])
{
    GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
    if(MySQL_rowCount())
	{
		cache_get_row(0, 0, pGroupName[p4]);
	}
	new line4[750];
	new line3[2100];
	new str3[80], str4[80], str5[80], str6[80], str7[80], str11[140];

	// Main Statistics
    //new pCity[28];
	if(pGroupID[p4] != -1)
	{
		format(str11, sizeof(str11), ""LB2_E"Gang: \t\t\t%s", pGroupName[p4]);
	}
	else format(str11, sizeof(str11), ""LB2_E"Gang: \t\t\t"RED_E"None");
	if(pPremium[p4] > 0)
	{
		format(str6, sizeof(str6), ""LB2_E"VIP: \t\t\t"GREEN_E"Yes\n", pPremium[p4]);
	}
	else format(str6, sizeof(str6), ""LB2_E"VIP: \t\t\t"RED_E"No\n");
 	/*GetPlayerCity(p4, pCity, sizeof(pCity));
	format(str9, sizeof(str9), ""LB2_E"> Country: "WHITE_E"%s "RED_E"|| "LB2_E"City: "WHITE_E"%s "RED_E"|| "LB2_E"GMT: "WHITE_E"%d", pCountry[p4], pCity, GetPlayerGMT(p4));*/
	//format(str9, sizeof(str9), ""LB2_E"> Country: "WHITE_E"- "RED_E"|| "LB2_E"City: "WHITE_E"- "RED_E"|| "LB2_E"GMT: "WHITE_E"-");
	format(line4, sizeof(line4), ""BLUE_E"Statistics of player "WHITE_E"%s\n\n{FF4545}%s\n\
	"LB2_E"Score: "WHITE_E"\t\t\t%d\n"LB2_E"Gold Blocks: "WHITE_E"\t\t%d GB\n"LB2_E"Money: "WHITE_E"\t\t\t\t$"WHITE_E"%s\n"LB2_E"Bank: "WHITE_E"\t\t\t$"WHITE_E"%s\n%s\n%s", PlayersName, str3, pScore[p4], pGBs[p4], ToCurrency(pCash[p4]), ToCurrency(BankMoney[p4]), str11, str6);
	strcat(line3, line4);

	/// General Statistics
	if(pCurrHours[p4] == 0)
	{
		if(pCurrMinutes[p4] == 0)
		{
  			format(str5, sizeof(str5), ""LB2_E"Current Time: "WHITE_E"\t\t%d seconds", pCurrSeconds[p4]);
		}
		else format(str5, sizeof(str5), ""LB2_E"Current Time: "WHITE_E"\t\t%d minutes and %d seconds", pCurrMinutes[p4], pCurrSeconds[p4]);
	}
	else format(str5, sizeof(str5), ""LB2_E"Current Time: "WHITE_E"\t\t%d hours and %d minutes", pCurrHours[p4], pCurrMinutes[p4]);
	if(pTotalHours[p4] == 0)
	{
		if(pTotalMinutes[p4] == 0)
		{
  			format(str4, sizeof(str4), ""LB2_E"Playing Time: "WHITE_E"\t\t%ds", pTotalSeconds[p4]);
		}
		else format(str4, sizeof(str4), ""LB2_E"Playing Time: "WHITE_E"\t\t%dm, %ds", pTotalMinutes[p4], pTotalSeconds[p4]);
	}
	else format(str4, sizeof(str4), ""LB2_E"Playing Time: "WHITE_E"\t\t%dh %dm %ds ", pTotalHours[p4], pTotalMinutes[p4], pTotalSeconds[p4]);

    format(line4, sizeof(line4), ""LB2_E"Register Date: "WHITE_E"\t%s\n"LB2_E"Last log in:"WHITE_E"\t\t%s\n%s\n", pRegDate[p4], pLastDate[p4], str4);
	strcat(line3, line4);

	format(line4, sizeof(line4), ""LB2_E"Kills: "WHITE_E"\t\t\t%d\n"LB2_E"Deaths: "WHITE_E"\t\t%d\n"LB2_E"KDR: "WHITE_E"\t\t\t%0.2f\n"LB2_E"Highest Killstreak: "WHITE_E"\t%d\n", pInfo[p4][pKills], pInfo[p4][pDeaths], Float:pInfo[p4][pKills]/Float:pInfo[p4][pDeaths], TotalKillStreak[p4]);
	strcat(line3, line4);

	// Other Statistics
   	switch(pSpawnPlace[p4])
	{
		case -1: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tRandom.";
		case 0: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tSan Fierro";
 		case 1: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tBayside";
  		case 2: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tAbandoned Airport";
   		case 3: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tLas Venturas Airport";
    	case 4: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tHalfPipe";
    	case 5: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tSan Fierro Airport";
    	case 6: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tOwn House.";
    	case 7: str7 = ""LB2_E"Spawn Place: "WHITE_E"\t\tLos Santos Airport";
	}
	format(line4, sizeof(line4), "%s\n"LB2_E"Skin ID: "WHITE_E"\t\t%d\n"LB2_E"Duels wins: "WHITE_E"\t\t%d\n"LB2_E"Events wins: "WHITE_E"\t\t%d\n"LB2_E"Arrests: "WHITE_E"\t\t%d\n\
	"LB2_E"Race wins: "WHITE_E"\t\t%d\n",str7, GetPlayerSkin(p4), pDuelsWon[p4], pInfo[p4][pEventsWon], pArrests[p4], pInfo[p4][pRacesWon]);
	strcat(line3, line4);

	format(line4, sizeof(line4), ""LB2_E"GBs found: "WHITE_E"\t\t%d\n"LB2_E"Reactions wins: "WHITE_E"\t%d\n"LB2_E"Math wins: "WHITE_E"\t\t%d\n"LB2_E"Fallouts wins: "WHITE_E"\t\t%d\n"LB2_E"Derby wins: "WHITE_E"\t\t%d\n\
    "LB2_E"Report points: "WHITE_E"\t%d"WHITE_E"", pGoldBlocks[p4], reactionsWon[p4], mathsWon[p4], pFallouts[p4], pDerbys[p4], pReportPoints[p4]);
	strcat(line3, line4);
  	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Offline Statistics", line3, "Close", "");
	return true;
}

// Achivements
stock GivePlayerAchievement(playerid, achname[], stuffz[])
{
	if(GetPVarInt(playerid, "AchShowing") == 1) return true;
	// Give Score Money
	GivePlayerCash(playerid, 100000);
	GivePlayerScore(playerid, 5);

	InfoTD_MSG(playerid, 5000, "~g~Congratulations, you've earned an achivement!~n~~g~$~w~100000 and 5 score!");
	format(str, sizeof(str), ""WHITE_E"["YELLOW_E"UFF"WHITE_E"] {%06x}%s(%i) "GREEN_E"has unlocked the achievement '%s'!", pColor[playerid], pName[playerid], playerid, achname);
	SendClientMessageToAll(COLOR_GREEN, str);

	SendClientMessage(playerid, COLOR_WHITEP, ""GREEN_E"*** "WHITEP_E"Type "WHITE_E"/ach "WHITEP_E"to view the achievements you have completed.");
	ShowPlayerAchievement(playerid, achname, stuffz);
	CheckPlayerAchievementCompleted(playerid);
	return true;
}
stock GivePlayerAchievementNoReward(playerid, achname[], stuffz[])
{
	if(GetPVarInt(playerid, "AchShowing") == 1) return true;
	// Give Score Money
	GivePlayerCash(playerid, 100000);
	GivePlayerScore(playerid, 5);

	InfoTD_MSG(playerid, 5000, "~g~Congratulations, you've earned an achivement!~n~~g~$~w~100000 and 5 score!");
	format(str, sizeof(str), ""WHITE_E"["YELLOW_E"UFF"WHITE_E"]{%06x}%s(%i) "GANG_CHAT"has unlocked the achievement '%s'!", pColor[playerid], pName[playerid], playerid, achname);
	SendClientMessageToAll(COLOR_GREEN, str);
	SendClientMessage(playerid, COLOR_WHITEP, ""GREEN_E"*** "RED_E"Type "WHITE_E"/ach "WHITEP_E"to view the achievements you have completed.");
	ShowPlayerAchievement(playerid, achname, stuffz);
	CheckPlayerAchievementCompleted(playerid);
	return true;
}

stock GetPlayerAchievement(playerid)
{
	new achs;
	if(pAch1[playerid] == 1) achs++;
	if(pAch2[playerid] == 1) achs++;
	if(pAch3[playerid] == 1) achs++;
	if(pAch4[playerid] == 1) achs++;
	if(pAch5[playerid] == 1) achs++;
	if(pAch6[playerid] == 1) achs++;
	if(pAch7[playerid] == 1) achs++;
	if(pAch8[playerid] == 1) achs++;
	if(pAch9[playerid] == 1) achs++;
	if(pAch10[playerid] == 1) achs++;
	if(pAch11[playerid] == 1) achs++;
	if(pAch12[playerid] == 1) achs++;
	if(pAch13[playerid] == 1) achs++;
	if(pAch14[playerid] == 1) achs++;
	if(pAch15[playerid] == 1) achs++;
	if(pAch16[playerid] == 1) achs++;
	if(pAch17[playerid] == 1) achs++;
	if(pAch18[playerid] == 1) achs++;
	if(pAch19[playerid] == 1) achs++;
	if(pAch20[playerid] == 1) achs++;
	if(pAch21[playerid] == 1) achs++;
	if(pAch22[playerid] == 1) achs++;
	if(pAch23[playerid] == 1) achs++;
	if(pAch24[playerid] == 1) achs++;
	if(pAch25[playerid] == 1) achs++;
	if(pAch26[playerid] == 1) achs++;
	if(pAch27[playerid] == 1) achs++;
	if(pAch28[playerid] == 1) achs++;
	if(pAch29[playerid] == 1) achs++;
	if(pAch30[playerid] == 1) achs++;
	if(pAch31[playerid] == 1) achs++;
	if(pAch32[playerid] == 1) achs++;
	
	return achs;
}

stock CheckPlayerAchievementCompleted(playerid)
{
	if(pAch1[playerid] == 1 && pAch2[playerid] == 1 && pAch3[playerid] == 1 && pAch4[playerid] == 1 && pAch5[playerid] == 1 && pAch6[playerid] == 1 && pAch7[playerid] == 1 && pAch8[playerid] == 1 && pAch9[playerid] == 1 &&
	   pAch10[playerid] == 1 && pAch11[playerid] == 1 && pAch12[playerid] == 1 && pAch13[playerid] == 1 && pAch14[playerid] == 1 && pAch15[playerid] == 1 && pAch16[playerid] == 1 && pAch17[playerid] == 1 && pAch18[playerid] == 1 &&
   	   pAch19[playerid] == 1 && pAch20[playerid] == 1 && pAch21[playerid] == 1 && pAch22[playerid] == 1 && pAch23[playerid] == 1 && pAch24[playerid] == 1&& pAch25[playerid] == 1 && pAch26[playerid] == 1 && pAch27[playerid] == 1 &&
       pAch28[playerid] == 1 && pAch29[playerid] == 1 && pAch30[playerid] == 1 && pAch31[playerid] == 1 && pAch32[playerid] == 1)
	{
		InfoTD_MSG(playerid, 5000, "~g~Congratulations, you completed all achievements! ~w~+~g~~h~2000 gbs!");
		format(str, sizeof(str), ""UFF" {%06x}%s(%i) "GREEN_E"has completed all his achievements and recived 2000 gbs!", pColor[playerid], pName[playerid], playerid);
		SendClientMessageToAll(COLOR_GREEN, str);
		SendClientMessage(playerid, COLOR_GREEN, ""RED_E"*** "GREEN_E"Congratulations, you have completed all your achievements and recived 2000 gbs!");
		pGBs[playerid] += 2000;
	}

}

stock DisplayAch(playerid, player2)
{
	new tmp3[20], tmp4[20], tmp5[20], tmp6[20], tmp7[20], tmp8[20], tmp9[20], tmp10[20],tmp11[20], tmp12[20], tmp13[20], tmp14[20], tmp15[20], tmp16[20], tmp17[20];
	new line3[1800];
	if(pAch1[player2] == 1)
		tmp = ""GREEN_E"X";
	else tmp = ""RED_E"X";
	if(pAch2[player2] == 1)
		tmp3 = ""GREEN_E"X";
	else tmp3 = ""RED_E"X";
	if(pAch3[player2] == 1)
		tmp4 = ""GREEN_E"X";
	else tmp4 = ""RED_E"X";
	if(pAch4[player2] == 1)
		tmp5 = ""GREEN_E"X";
	else tmp5 = ""RED_E"X";
	if(pAch5[player2] == 1)
		tmp6 = ""GREEN_E"X";
	else tmp6 = ""RED_E"X";
	if(pAch6[player2] == 1)
		tmp7 = ""GREEN_E"X";
	else tmp7 = ""RED_E"X";
	if(pAch7[player2] == 1)
		tmp8 = ""GREEN_E"X";
	else tmp8 = ""RED_E"X";
	if(pAch8[player2] == 1)
		tmp9 = ""GREEN_E"X";
	else tmp9 = ""RED_E"X";
	if(pAch9[player2] == 1)
		tmp10 = ""GREEN_E"X";
	else tmp10 = ""RED_E"X";
	if(pAch10[player2] == 1)
		tmp11 = ""GREEN_E"X";
	else tmp11 = ""RED_E"X";
	if(pAch11[player2] == 1)
		tmp12 = ""GREEN_E"X";
	else tmp12 = ""RED_E"X";
	if(pAch12[player2] == 1)
		tmp13 = ""GREEN_E"X";
	else tmp13 = ""RED_E"X";
	if(pAch13[player2] == 1)
		tmp14 = ""GREEN_E"X";
	else tmp14 = ""RED_E"X";
	if(pAch14[player2] == 1)
		tmp15 = ""GREEN_E"X";
	else tmp15 = ""RED_E"X";
	if(pAch15[player2] == 1)
		tmp16 = ""GREEN_E"X";
	else tmp16 = ""RED_E"X";
	if(pAch16[player2] == 1)
		tmp17 = ""GREEN_E"X";
	else tmp17 = ""RED_E"X";


	//format(str, sizeof(str), "{%06x}%s(%d)"WHITE_E"'s Achievements:\n\n", pColor[player2], pName[player2], player2);
	//strcat(line3, str);
	format(str, sizeof(str), "{FFFFFF}[%s"WHITE_E"] "WHITE_E"Grim Reaper\t\t-> "LB_E"Kill 150 players in deathmatches.", tmp);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Mass Killer!\t\t-> "LB_E"Reach a 20-player kill streak.", tmp3);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"You're Rich!\t\t-> "LB_E"Earn 5 million dollars.", tmp4);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Official Player\t\t-> "LB_E"Played for a total of 24 hours.", tmp5);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"No Lifer\t\t\t-> "LB_E"Played for a total of 200 hours.", tmp6);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Elite Racer\t\t-> "LB_E"Win 10 or more races.", tmp7);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Score Whore\t\t-> "LB_E"Get 2000 score.", tmp8);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Event Champion\t\t-> "LB_E"Win 20 or more events.", tmp9);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Too Fast\t\t\t-> "LB_E"Win 50 reaction tests", tmp10);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Filthy Rich\t\t-> "LB_E"Earn 20 million dollars", tmp11);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Skydiver\t\t\t-> "LB_E"Complete first 3 skydives in 1 connect.", tmp12);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Rest in Peace\t\t-> "LB_E"Get killed 50 times.", tmp13);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Gold Block Monster\t\t-> "LB_E"Collect 50 or more gbss.", tmp14);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Silent Killer\t\t-> "LB_E"Kill a player in a DM using a knife.", tmp15);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Hitman\t\t\t-> "LB_E"Complete a hit contract.", tmp16);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Pro Racer\t\t-> "LB_E"Beat a Race Record.", tmp17);
	strcat(line3, str);
	SetPVarInt(playerid, "achPlayer", player2);
	ShowPlayerDialog(playerid, 221, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Achievements", line3, "Next", "");
}
stock DisplayAch2(playerid, player2)
{
	new tmp18[20], tmp19[20], tmp20[20], tmp21[20], tmp22[20], tmp23[20], tmp24[20], tmp25[20], tmp26[20], tmp27[20], tmp28[20], tmp29[20], tmp30[20], tmp31[20], tmp32[20],tmp33[20];
    new line3[1500];
    if(pAch17[player2] == 1)
		tmp18 = ""GREEN_E"X";
	else tmp18 = ""RED_E"X";
	if(pAch18[player2] == 1)
		tmp19 = ""GREEN_E"X";
	else tmp19 = ""RED_E"X";
	if(pAch19[player2] == 1)
		tmp20 = ""GREEN_E"X";
	else tmp20 = ""RED_E"X";
	if(pAch20[player2] == 1)
		tmp21 = ""GREEN_E"X";
	else tmp21 = ""RED_E"X";
	if(pAch21[player2] == 1)
		tmp22 = ""GREEN_E"X";
	else tmp22 = ""RED_E"X";
	if(pAch22[player2] == 1)
		tmp23 = ""GREEN_E"X";
	else tmp23 = ""RED_E"X";
	if(pAch23[player2] == 1)
		tmp24 = ""GREEN_E"X";
	else tmp24 = ""RED_E"X";
	if(pAch24[player2] == 1)
		tmp25 = ""GREEN_E"X";
	else tmp25 = ""RED_E"X";
	if(pAch25[player2] == 1)
		tmp26 = ""GREEN_E"X";
	else tmp26 = ""RED_E"X";
	if(pAch26[player2] == 1)
		tmp27 = ""GREEN_E"X";
	else tmp27 = ""RED_E"X";
	if(pAch27[player2] == 1)
		tmp28 = ""GREEN_E"X";
	else tmp28 = ""RED_E"X";
	if(pAch28[player2] == 1)
		tmp29 = ""GREEN_E"X";
	else tmp29 = ""RED_E"X";
	if(pAch29[player2] == 1)
		tmp30 = ""GREEN_E"X";
	else tmp30 = ""RED_E"X";
	if(pAch30[player2] == 1)
		tmp31 = ""GREEN_E"X";
	else tmp31 = ""RED_E"X";
	if(pAch31[player2] == 1)
		tmp32 = ""GREEN_E"X";
	else tmp32 = ""RED_E"X";
	if(pAch32[player2] == 1)
		tmp33 = ""GREEN_E"X";
	else tmp33 = ""RED_E"X";


	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Elite Cop\t\t-> "LB_E"Make 50 Arrests in CnR.", tmp18);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Duelist\t\t\t-> "LB_E"Win 50 Duels.", tmp19);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Pro Biker\t\t-> "LB_E"Complete 3 bike challenges in one connect.", tmp20);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Fallout King\t\t-> "LB_E"Win 50 Fallout Minigames.", tmp21);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Human Calculator\t-> "LB_E"Answer 80 Math Questions.", tmp22);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Derby Pro\t\t-> "LB_E"Win 50 Derby Games.", tmp23);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Pro Cop\t\t\t-> "LB_E"Make 50 Takedowns in CnR.", tmp24);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Pro Thief\t\t-> "LB_E"Rob 50 Shops in CnR.", tmp25);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Pickpocketer\t\t-> "LB_E"Rob 50 players in CnR.", tmp26);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Ruthless\t\t\t-> "LB_E"Kill 100 cops in CnR.", tmp27);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"GoldBlock Hunter\t-> "LB_E"Find 150 gbs jars.", tmp28);
	strcat(line3, str);
   	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Shooter Master\t-> "LB_E"Win 10 Shooters", tmp29);
	strcat(line3, str);
   	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Business Man\t-> "LB_E"Purchase a business", tmp30);
	strcat(line3, str);
    format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"Settled\t-> "LB_E"Purchase a House", tmp31);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"One Shot Two Kills\t-> "LB_E"Win 15 Gungames", tmp32);
	strcat(line3, str);
	format(str, sizeof(str), "\n{FFFFFF}[%s"WHITE_E"] "WHITE_E"BMX Lord\t-> "LB_E"Complete BMX Challenge", tmp33);
	strcat(line3, str);
	format(str, sizeof(str), "\n\n"WHITE_E"%d/32 Achievements Completed.", GetPlayerAchievement(player2));
	strcat(line3, str);

	format(line, sizeof(line), "\n"WHITE_E"["GREEN_E"X"WHITE_E"] - "LB_E"Completed. "RED_E"|| "WHITE_E"["RED_E"X"WHITE_E"] - "LB_E"Not Completed");
	strcat(line3, line);
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Player Achievements", line3, "Close", "");

	DeletePVar(playerid, "achPlayer");
}
stock UpdateDMText()
{
	new c1[20], c2[20], c3[20], c4[20], c5[20], c6[20], c7[20], c8[20], c9[20], c10[20];
	if(CnR <= 0) c1 = "~r~~h~"; else c1 = "~r~~h~";
	if(CurrentDerbyPlayers <= 0) c2 = "~r~~h~"; else c2 = "~r~~h~";
	if(CurrentShooterPlayers <= 0) c3 = "~r~~h~"; else c3 = "~r~~h~";
	if(CurrentFalloutPlayers <= 0) c4 = "~r~~h~"; else c4 = "~r~~h~";
	if(WarDM <= 0) c5 = "~r~~h~"; else c5 = "~r~~h~";
	if(TDM <= 0) c6 = "~r~~h~"; else c6 = "~r~~h~";
	if(GunGame <= 0) c7 = "~r~~h~"; else c7 = "~r~~h~";
	if(JoinCount <= 0) c8 = "~r~~h~"; else c8 = "~r~~h~";
	if(Mini <= 0) c9 = "~r~~h~"; else c9 = "~r~~h~";
	if(LMS_Players <= 0) c10 = "~r~~h~"; else c10 = "~r~~h~";

	format(line, sizeof(line), "~y~/~y~CnR %s~h~%d ~y~/~y~Derby %s~h~%d ~y~/~y~Shooter %s~h~%d ~y~/~y~Fallout %s~h~%d ~y~/~y~WAR %s~h~%d ~y~/~y~LMS %s~h~%d ~y~/~y~TDM %s~h~%d ~y~/~y~GUNGAME %s~h~%d ~y~/~y~RACE %s~h~%d ~y~/~y~Mini %s~h~%d",
    c1, CnR, c2, CurrentDerbyPlayers, c3, CurrentShooterPlayers, c4, CurrentFalloutPlayers, c5, WarDM,c10, LMS_Players, c6, TDM, c7, GunGame, c8, JoinCount, c9, Mini);
	TextDrawSetString(DMTextdraw, line);
}

stock CheckDM(playerid)
{
	switch(InDM[playerid])
	{
		case 4: Rocket--;
		case 5: WarDM--;
		case 7: Mini--;
		case 10: TDM--;
		case 13: CnR--;
		case 99: dm1--;
		case 101: dm2--;
		case 102: SawnDM--;
		case 63: GunGame--;
   }

	if(Rocket < 0) Rocket = 0;
	if(WarDM < 0) WarDM = 0;
	if(Mini < 0) Mini = 0;
	if(TDM < 0) TDM = 0;
	if(CnR < 0) CnR = 0;
	if(SawnDM < 0) SawnDM = 0;
	if(dm2 < 0) dm2 = 0;
	if(GunGame < 0) GunGame = 0;
	//if(dss < 0) dss = 0;
}
stock GetDMName(playerid)
{
	new dm_name[12];
	switch(InDM[playerid])
	{
     case 1: dm_name = "BattleField";
	    case 2: dm_name = "DM Island";
	    case 3: dm_name = "MinigunDM2";
	    case 4: dm_name = "Rocket";
	    case 5: dm_name = "WAR";
	    case 6: dm_name = "TankDM";
	    case 7: dm_name = "MinigunDM";
	    case 8: dm_name = "ShipDM";
	    case 9: dm_name = "UWDM";
	    case 10: dm_name = "TDM";
	    case 11: dm_name = "MinigunDM3";
	    case 13: dm_name = "CnR";
	    case 16: dm_name = "ODM";
	    case 17: dm_name = "SniperDM";
	    case 18: dm_name = "csdm";
	    case 99: dm_name = "dm1";
	    case 101: dm_name = "dm2";
	    case 102: dm_name = "SawnDM";
	}
	return dm_name;
}
stock GetStoreName(playerid)
{
	new store_name[40];
	switch(GetPVarInt(playerid, "InStore"))
	{
		case 1:
		{
			store_name = "24/7 in Roca Escalente";
		}
		case 2:
		{
			store_name = "24/7 in Strip";
		}
		case 3:
		{
			store_name = "Casino in Strip";
		}
		case 4:
		{
			store_name = "Ammunation in Come-A-Lot";
		}
		case 5:
		{
			store_name = "Bank in Roca Escalente";
		}
		case 6:
		{
			store_name = "Bank in Las Venturas";
		}
		case 7:
		{
			store_name = "4 Dragons Casino";
		}
		case 8:
		{
			store_name = "Royal Casino";
		}
		case 9:
		{
			store_name = "Ammunation in Strip";
		}
		case 10:
		{
			store_name = "Caligulas Casino";
		}
		case 11:
		{
			store_name = "Binco in Roca Escalente";
		}
		case 12:
		{
			store_name = "Binco by LV Airport";
		}
		case 13:
		{
			store_name = "Burger Shot in Old Venturas Strip";
		}
		case 14:
		{
			store_name = "Burger Shot in Old Venturas Strip";
		}
		case 15:
		{
			store_name = "Burger Shot in Redsands East";
		}
		case 16:
		{
			store_name = "Burger Shot in Whitewood Estates";
		}
		case 17:
		{
			store_name = "Burger Shot in Spinybed";
		}
		case 18:
		{
			store_name = "Cluckin Bell in Pilgrim";
		}
		case 19:
		{
			store_name = "Cluckin Bell in Creek";
		}
		case 20:
		{
			store_name = "Well Stacked Pizza in Pilgrim";
		}
		case 21:
		{
			store_name = "Well Stacked Pizza in Creek";
		}
		case 22:
		{
			store_name = "24/7 in Redsands East";
		}
		case 23:
		{
			store_name = "24/7 in Creek";
		}
		case 24:
		{
			store_name = "24/7 in Starfish Casino";
		}
		case 25:
		{
			store_name = "Las Venturas Airport";
		}
		case 90:
		{
			store_name = "Bank in Esplanade East (SF)";
		}
		case 91:
		{
			store_name = "Bank in Queens (SF)";
		}
		case 92:
		{
			store_name = "Bank in Idlewood (LS)";
		}
		case 93:
		{
			store_name = "Bank in Commerce (LS)";
		}
		case 94:
		{
			store_name = "Bank in Downtown Los Santos";
		}
		case 95:
		{
			store_name = "Bank in Pershing Square (LS)";
		}
		case 96:
		{
			store_name = "Bank in Bone County (Abandoned Airport)";
		}
		default:
		{
			store_name = "Unknown Location";
		}
  	}
	return store_name;
}


stock GetWheelName(wheelid)
{
        new wText[24];
        switch(wheelid)
        {
            case 1073: wText = "Shadow";
            case 1074: wText = "Mega";
            case 1053: wText = "Rimshine";
            case 1076: wText = "Wires";
            case 1077: wText = "Classic";
            case 1078: wText = "Twist";
            case 1079: wText = "Cutter";
            case 1080: wText = "Switch";
            case 1081: wText = "Grove";
            case 1082: wText = "Import";
            case 1083: wText = "Dollar";
            case 1084: wText = "Trance";
            case 1085: wText = "Atomic";
            case 1096: wText = "Ahab";
            case 1097: wText = "Virtual";
            case 1098: wText = "Access";
            case 1025: wText = "Offroad";
            default: wText = "Unknown";
        }
        return wText;
}

stock IsValidSkin(skin)
{
	return (0 <= skin <= 311 && skin != 74);
}

// Custom Kick/Ban Functions
function Kick2(playerid) { Kick(playerid); }
stock KickEx(playerid)
{
    SetTimerEx("Kick2", 100, 0, "i", playerid);
}

function Ban2(playerid, msg[]) { BanEx(playerid, msg); }
stock BanPlayer(playerid, reason[])
{
    SetTimerEx("Ban2", 100, 0, "is", playerid, reason);
}

stock BanPlayerMSG(playerid, adminid, reason[], bool:serverBan = false)
{
    for(new i = 0; i < 7; i++) SendClientMessage(playerid, -1, " ");
    gettime(hour, minute, second);
	getdate(year, month, day);
	SendClientMessage(playerid, COLOR_RED, "YOU HAVE BEEN BANNED!");
	if(serverBan == false)
 	{
		format(str, sizeof(str), ""UFF" "GREY_E"Admin: %s(%i)", pName[adminid], adminid);
	}
	else SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"Admin: System Anti-Cheat");
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"Reason: %s", reason);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"The time is %02d:%02d (%02d/%02d/%d)", hour, minute, month, day, year);
	SendClientMessage(playerid, COLOR_GREY, str);
	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"Go to uffserver.com/forum to appeal your ban. Include a screenshot of your ban.");
	GameTextForPlayer(playerid, "~r~~h~Banned!", 4000, 5);

	format(line, sizeof(line), ""RED_E"You have been banned!\n\n"LB2_E"Ban Info:\n"RED_E"Name: "GREY2_E"%s\n"RED_E"IP: "GREY2_E"%s\n"RED_E"Admin: "GREY2_E"%s\n"RED_E"Ban Reason: "GREY2_E"%s\n"RED_E"Ban Date: "GREY2_E"%02d:%02d (%02d/%02d/%d)\n\n"WHITE_E"Feel that you were wrongfully banned? Appeal at uffserver.com/forum", pName[playerid], pIP[playerid], pName[adminid], reason, hour, minute, month, day, year);
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"BANNED", line, "Exit", "");
}
forward ForceStop(playerid);
public ForceStop(playerid)
{
	TogglePlayerControllable(playerid, true);
}
function unfreezePutInVehicle(playerid, vid, Float:x, Float:y, Float:z, Float:a)
{
	if(vid != -1)
	{
		PutPlayerInVehicle(playerid, vid, 0);
		SetVehiclePos(vid, x, y, z+1.5);
		SetVehicleZAngle(vid, a);
		SetCameraBehindPlayer(playerid);
	}
	TogglePlayerControllable(playerid, true);
	//GameTextForPlayer(playerid, "~w~Objects~n~Loaded~r~!", 2000, 4);
}

function unfreezePutInDerbyVehicle(playerid, vid, Float:x, Float:y, Float:z, Float:a)
{
	if(vid != -1)
	{
		PutPlayerInVehicle(playerid, vid, 0);
		SetPlayerVehiclePosition(playerid, x, y, z, a);
		SetVehiclePos(vid, x, y, z+1.5);
		SetVehicleZAngle(vid, a);
		SetCameraBehindPlayer(playerid);
	}
}
function unfreezePutInShooterVehicle(playerid, vid, Float:x, Float:y, Float:z, Float:a)
{
	if(vid != -1)
	{
		PutPlayerInVehicle(playerid, vid, 0);
		SetPlayerVehiclePosition(playerid, x, y, z, a);
		SetVehiclePos(vid, x, y, z+1.5);
		SetVehicleZAngle(vid, a);
		SetCameraBehindPlayer(playerid);
	}
}
function unfreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
//	GameTextForPlayer(playerid, "~w~Objects~n~Loaded~r~!", 2000, 4);
	TextDrawHideForPlayer(playerid, OTEXT);
	TextDrawHideForPlayer(playerid, OTEXT2);
}

SetPlayerPosition(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
    	OnPlayerExitVehicle(playerid, GetPlayerVehicleID(playerid));
    }
    SetPlayerInterior(playerid, inter);
    SetPlayerPos(playerid, X, Y, Z+1);
	SetPlayerFacingAngle(playerid, a);
	SetCameraBehindPlayer(playerid);
	SetPlayerWorldBounds(playerid, 20000, -20000, 20000, -20000);
}
SetPlayerVehiclePosition(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
	vID = GetPlayerVehicleID(playerid);
	SetVehiclePos(vID, X, Y, Z+1.5);
	SetVehicleZAngle(vID, a);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, inter);
	LinkVehicleToInterior(vID, inter);
	SetPlayerWorldBounds(playerid, 20000, -20000, 20000, -20000);
}
SetPlayerPositionEx(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
    	OnPlayerExitVehicle(playerid, GetPlayerVehicleID(playerid));
    }
    SetPlayerInterior(playerid, inter);
    SetPlayerPos(playerid, X, Y, Z+2);
	SetPlayerFacingAngle(playerid, a);
	SetCameraBehindPlayer(playerid);
	SetPlayerWorldBounds(playerid, 20000, -20000, 20000, -20000);
	TextDrawShowForPlayer(playerid, OTEXT);
	TextDrawShowForPlayer(playerid, OTEXT2);
//	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3500, false, "i", playerid);
}

SetPlayerVehiclePositionEx(playerid, Float:X, Float:Y, Float:Z, Float:a, inter = 0)
{
	vID = GetPlayerVehicleID(playerid);
	SetVehiclePos(vID, X, Y, Z);
	SetVehicleZAngle(vID, a);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, inter);
	LinkVehicleToInterior(vID, inter);
	SetPlayerWorldBounds(playerid, 20000, -20000, 20000, -20000);

	SetPlayerPosition(playerid, X, Y, Z+1.5, a);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePutInVehicle", 1500, false, "idffff", playerid, vID, X, Y, Z+1, a);
}

// Interiors
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, interior, location[])
{
    SetPlayerPos(playerid, X, Y, Z);
	SetPlayerInterior(playerid,interior);
	SetPlayerVirtualWorld(playerid, 0);
	format(str, 128, ""UFF" You've teleported to %s. [X: %0.2f | Y: %0.2f | Z: %0.2f | Interior: %d].", location, X, Y, Z, interior);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	SetPlayerWorldBounds(playerid, 20000, -20000, 20000, -20000);
	return 1;
}

TelePlayer(playerid, Float:X, Float:Y, Float:Z, Float:a)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, X, Y, Z, a);
	}
	else
	{
		SetPlayerPosition(playerid, X, Y, Z, a);
	}
}
TeleMSG(playerid, telename[])
{
	format(str, sizeof(str), "~y~~h~%s(%i) ~w~went to ~b~~h~~h~%s", pName[playerid], playerid, telename);
	TextDrawSetString(TeleTD, str);
	format(tmp, sizeof(tmp), "7[Teleport]4 %s(%i) has gone to 2%s", pName[playerid], playerid, telename);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
	if(GetPVarInt(playerid, "TimeChanged"))
	{
		// Set player custom Time/Weather
		if(pTime[playerid] != -1) SetPlayerTime(playerid, pTime[playerid], 0);
		else SetPlayerTime(playerid, 10, 0);
		if(pWeather[playerid] != -1) SetPlayerWeather(playerid, pWeather[playerid]);
		else SetPlayerWeather(playerid, 24);

		DeletePVar(playerid, "TimeChanged");
	}
	if(GOD[playerid] == 1) ResetPlayerWeapons(playerid);
  	telesUsed++;
}

TeleMSGDM(playerid, telename[])
{
	format(str, sizeof(str), "~y~~h~%s(%i) ~w~went to ~b~~h~~h~%s", pName[playerid], playerid, telename);
	TextDrawSetString(TeleTD, str);
	format(tmp, sizeof(tmp), "7[Teleport]4 %s(%i) has gone to 2%s", pName[playerid], playerid, telename);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
	if(GetPVarInt(playerid, "TimeChanged"))
	{
		// Set player custom Time/Weather
		if(pTime[playerid] != -1) SetPlayerTime(playerid, pTime[playerid], 0);
		else SetPlayerTime(playerid, 10, 0);
		if(pWeather[playerid] != -1) SetPlayerWeather(playerid, pWeather[playerid]);
		else SetPlayerWeather(playerid, 24);
		DeletePVar(playerid, "TimeChanged");
     }
	IsInHouse{playerid} = 0;
	doingStunt[playerid] = 0;
	canUseKey[playerid] = false;
	SetPlayerVirtualWorld(playerid, 5);

	SetPlayerHealth(playerid, 99999);
    SetTimerEx("ResetHealth", 2000, false, "i", playerid);

	if(pPremium[playerid] >= 1)
	{
		if(pPremium[playerid] == 1)
		{
			SetPlayerArmour(playerid, 100.0);
		}
	}
	telesUsed++;
	GodModeLabel(playerid, false);
	HidePlayerMSGBox(playerid);
 	UpdateDMText();
 	if(playerSpectated[playerid] != 0)
 	{
		format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) has joined a DM (%s).", pName[playerid], playerid, telename);
		foreach(Player, ii)
		{
			if(pSpectating[ii] == playerid && GetPlayerState(ii) == PLAYER_STATE_SPECTATING)
   			{
	   			SetPlayerVirtualWorld(ii, GetPlayerVirtualWorld(playerid));
		   		SetPlayerInterior(ii, GetPlayerInterior(playerid));
		   		PlayerSpectatePlayer(ii, playerid);
    			SendClientMessage(ii, COLOR_WHITEP, str);
   			}
   		}
	}
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
}

function DelayRemoveJetpack(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); // Removes Jetpack
}
function ResetHouseDialog(playerid)
{
	DeletePVar(playerid, "ShowHouseDialog");
}
function ResetBarDialog(playerid)
{
	DeletePVar(playerid, "ShowBarDialog");
}
function ResetMBPickup(playerid)
{
	DeletePVar(playerid, "pickedUpMB");
}
function ResetCount(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedCount");
}
function ResetCMD(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedCMD");
}
function ResetAnn(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedAnn");
}
function ResetSHealth(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedSHealth");
}
function ResetNitro(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedNitro");
}
function ResetJump(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedJump");
}
function ResetMe(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedMe");
}
function ResetHouseValue(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "ChangedHouseValue");
}
function ResetWarning(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "JustWarned");
}
function ResetBackup(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "CalledBackup");
}
function ResetAsk(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedAsk");
}
function URMSG(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "URMSG");
}
function ResetReport(playerid)
{
	SetPVarInt(playerid, "ReportedPlayer", -1);
}
function ResetHeal(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "UsedHeal");
}
function ResetGoTo(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "usedGoto");
}
function resetEvent(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "startedEvent");
}
function resetKill(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "commitSuicide");
}

function RemoveFromDeathmatch(playerid)
{
	RemovePlayerFromDM(playerid);
	pSpawned[playerid] = 1;
	SetPlayerHealth(playerid, 100);
	TogglePlayerControllable(playerid, true);
	LoadPlayerPosition(playerid);
	DeletePVar(playerid, "hackWarns");
    TextDrawShowForPlayer(playerid, TeleTD);
	return 1;
}

stock GodModeLabel(playerid, bool:show)
{
	if(GOD[playerid] == 1 && god3D[playerid] != Text3D:-1)
	{
		if(show == true)
		{
			//UpdateDynamic3DTextLabelText(god3D[playerid], 0xFFFF8288, "Godmode {41FF00}ON");
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
		}
		else
		{
			TextDrawHideForPlayer(playerid, godTD);
			TextDrawHideForPlayer(playerid, godTDBOX);
		}
	}
}


stock SendToDM(playerid)
{
        TextDrawHideForPlayer(playerid, TeleTD);
		if(playerSpectated[playerid] != 0)
		{
			hour = GetPlayerVirtualWorld(playerid);
			minute = GetPlayerInterior(playerid);
			format(str, sizeof(str), ""UFF" %s(%i) has respawned.", pName[playerid], playerid);
		    foreach(Player, ii)
		    {
				if(pSpectating[ii] == playerid)
				{
					PlayerSpectatePlayer(ii, playerid);
					SetPlayerVirtualWorld(ii, hour);
					SetPlayerInterior(ii, minute);
					SendClientMessage(ii, COLOR_YELLOW, str);
				}
			}
		}
		ResetPlayerWeapons(playerid);
		GodModeLabel(playerid, false);
		if(InDM[playerid] != 16 && InDM[playerid] != 18 && pSpectating[playerid] == -1)
		{
			SetPlayerHealth(playerid, 99999);
			SetTimerEx("ResetHealth", 2000, false, "i", playerid);
		}
		switch(InDM[playerid])
    	{
  			case 2:
  			{
  				switch(random(7))
				{
				    case 0: SetPlayerPosition(playerid, 219.6814,3895.2542,4.5991,358.9801);
				    case 1: SetPlayerPosition(playerid, 177.1893,3938.9832,16.9032,163.5494);
			     	case 2: SetPlayerPosition(playerid, 100.5644,3786.9727,17.0848,323.2767);
			     	case 3: SetPlayerPosition(playerid, 173.8595,3683.2500,34.1575,7.7185);
			     	case 4: SetPlayerPosition(playerid, 96.5482,3605.1855,17.7281,318.5654);
			     	case 5: SetPlayerPosition(playerid, 147.2755,3689.2710,17.2376,8.6723);
			     	case 6: SetPlayerPosition(playerid, 47.3489,3700.6030,20.1901,300.0449);
				}
				TogglePlayerControllable(playerid, false);
				SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
			 	GivePlayerWeapon(playerid, 3, 1);
			  	GivePlayerWeapon(playerid, 24, 9999999);
			   	GivePlayerWeapon(playerid, 25, 9999999);
			    GivePlayerWeapon(playerid, 28, 9999999);
			    GivePlayerWeapon(playerid, 30, 9999999);
			    GivePlayerWeapon(playerid, 33, 9999999);
			    GivePlayerWeapon(playerid, 39, 2);
			    GivePlayerWeapon(playerid, 17, 10);
				GivePlayerWeapon(playerid, 10, 1);
				InDM[playerid] = 2;
			}
  			case 4:
  			{
	  			switch(random(6))
				{
					case 0: SetPlayerPosition(playerid, -1039.3151,-700.0047,64.5321,8.7347);
				    case 1: SetPlayerPosition(playerid, -1110.8236,-656.6070,59.6141,258.1738);
				    case 2: SetPlayerPosition(playerid, -1098.3698,-733.9731,59.4140,301.0774);
				    case 3: SetPlayerPosition(playerid, -1077.9307,-613.7368,50.5078,187.67310);
				    case 4: SetPlayerPosition(playerid, -1039.3147,-700.0067,64.5321,8.7347);
				    case 5: SetPlayerPosition(playerid, -1056.9666,-739.1432,59.3372,40.7064);
				}
				InDM[playerid] = 4;
				GivePlayerWeapon(playerid, 35, 999999);
				SetPlayerVirtualWorld(playerid, 59);
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
				
			}
  			case 5:
  			{
  				switch(random(6))
				{
				    case 0: SetPlayerPosition(playerid, 353.952, 2030.409, 23.538, 0.0);
				    case 1: SetPlayerPosition(playerid, 188.534, 2079.781, 23.576, 282.0);
				    case 2: SetPlayerPosition(playerid, 211.569, 1811.228, 21.495, 282.0);
				    case 3: SetPlayerPosition(playerid, 211.569, 1811.228, 21.495, 282.0);
				    case 4: SetPlayerPosition(playerid, 121.277, 1934.025, 22.421, 282.0);
				    case 5: SetPlayerPosition(playerid, 213.260, 1888.249, 14.772, 7.0);
				}
       			GivePlayerWeapon(playerid, 3, 1);
        		GivePlayerWeapon(playerid, 24, 9999999);
        		GivePlayerWeapon(playerid, 25, 9999999);
   			 	GivePlayerWeapon(playerid, 28, 9999999);
        		GivePlayerWeapon(playerid, 30, 9999999);
        		GivePlayerWeapon(playerid, 33, 9999999);
        		GivePlayerWeapon(playerid, 39, 2);
        		GivePlayerWeapon(playerid, 17, 10);
        		GivePlayerWeapon(playerid, 10, 1);
        		GivePlayerWeapon(playerid, 35, 5);
				InDM[playerid] = 5;
				SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
  			case 7:
  			{
  				switch(random(6))
				{
					case 0: SetPlayerPosition(playerid, 817.2140,1718.3855,21.2277,170.7724);
				    case 1: SetPlayerPosition(playerid, 798.2598,1726.5173,5.7693,176.1226);
				    case 2: SetPlayerPosition(playerid, 773.2479,1713.7971,5.2813,206.2031);
				    case 3: SetPlayerPosition(playerid, 762.0003,1632.0261,5.4628,297.3372);
				    case 4: SetPlayerPosition(playerid, 777.0068,1622.3917,12.3045,19.7446);
				    case 5: SetPlayerPosition(playerid, 799.2064,1595.1538,21.1677,6.5612);

				}
				InDM[playerid] = 7;
				GivePlayerWeapon(playerid, 38, 999999);
				SetPlayerVirtualWorld(playerid, 54);
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);

			}
			case 10: //TDM
  			{
				if(GetPVarInt(playerid, "inTDM") == 1) //Red Team
				{
					SetPlayerColor(playerid, COLOR_RED);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 8, 500); //Knife
					GivePlayerWeapon(playerid, 29, 500); //MP5
					GivePlayerWeapon(playerid, 30, 1000);
					GivePlayerWeapon(playerid, 33, 1000);
					GivePlayerWeapon(playerid, 24, 1000);
					GivePlayerWeapon(playerid, 25, 1000);
					GivePlayerWeapon(playerid, 16, 5);
					SetPlayerTeam(playerid, 1);
                    switch(random(3))
					{
					case 0: SetPlayerPosition(playerid,-4447.6196,-6768.3623,16.1091,271.9799);
					case 1: SetPlayerPosition(playerid,-4448.2549,-6777.8931,17.5719,270.4132);
					case 3: SetPlayerPosition(playerid,-4449.2021,-6758.0952,17.5700,270.7266);
					}
					TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
					SetPlayerSkin(playerid, 254);
					InDM[playerid] = 10;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 1);
				}
				else //Blue Team
				{
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 6, 500); //Knife
					GivePlayerWeapon(playerid, 29, 500); //MP5
					GivePlayerWeapon(playerid, 31, 1000);
					GivePlayerWeapon(playerid, 33, 1000);
					GivePlayerWeapon(playerid, 24, 1000);
					GivePlayerWeapon(playerid, 25, 1000);
					GivePlayerWeapon(playerid, 16, 5);
					SetPlayerTeam(playerid, 2);
                    switch(random(3))
					{
					case 0: SetPlayerPosition(playerid,-4181.5200,-6772.8530,11.9720,176.0758);
					case 1: SetPlayerPosition(playerid,-4190.9971,-6783.6855,11.9720,283.2134);
					case 3: SetPlayerPosition(playerid,-4168.7339,-6752.3457,16.0720,89.8849);
					}
					TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
					SetPlayerSkin(playerid, 285);
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 10;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 2);
				}
			}
  			case 11: //mini3
  			{
  				switch(random(7))
				{
					case 0: SetPlayerPositionEx(playerid, -3087.7554,3079.1292,11.2749,287.2781);
				    case 1: SetPlayerPositionEx(playerid, -3017.5295,3053.7922,7.6258,86.3177);
				    case 2: SetPlayerPositionEx(playerid, -2989.9478,3163.2749,4.9426,317.8708);
				    case 3: SetPlayerPositionEx(playerid, -2998.7949,3186.6499,2.0598,55.7835);
				    case 4: SetPlayerPositionEx(playerid, -3045.4407,3193.2966,11.9308,166.7983);
				    case 5: SetPlayerPositionEx(playerid, -3058.8586,3184.8613,9.5224,273.6935);
				    case 6: SetPlayerPositionEx(playerid, -3059.7729,3148.5239,17.7458,329.1971);
				}

			   	SetPlayerInterior(playerid, 14);
				InDM[playerid] = 11;
				GivePlayerWeapon(playerid, 38, 999999);
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
  			case 13: // CnR
  			{
  				if(GetPVarInt(playerid, "Robber") != 0)
				{
     				if(GetPVarInt(playerid, "Robber") == 1)
  					{
						SetPVarInt(playerid, "Robber", 1);
						SetPVarInt(playerid, "Cop", 0);
						GameTextForPlayer(playerid, "~w~You have joined the ~r~Robbers team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_ORANGE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 5, 500); // Bat
						GivePlayerWeapon(playerid, 29, 800); // MP5
						GivePlayerWeapon(playerid, 30, 1000); //AK
						GivePlayerWeapon(playerid, 27, 200); //Combat
						GivePlayerWeapon(playerid, 16, 1); // 1 Nade
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						SetPlayerTeam(playerid, 2);
						switch(random(2))
	  					{
							case 0: SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
							case 1: SetPlayerPosition(playerid, 2771.9722,1256.8436,10.7500,326.0133);
						}
						if(GetPVarInt(playerid, "CnRSkin"))
						{
						    SetPlayerSkin(playerid, GetPVarInt(playerid, "CnRSkin"));
	  					}
	  					else
	  					{
		  					switch(random(5))
							{
								case 0: SetPlayerSkin(playerid, 125);
								case 1: SetPlayerSkin(playerid, 126);
								case 2: SetPlayerSkin(playerid, 111);
								case 3: SetPlayerSkin(playerid, 112);
								case 4: SetPlayerSkin(playerid, 108);
							}
	  					}
						cmd_cnrhelp(playerid);
						InDM[playerid] = 13;
						SetPlayerVirtualWorld(playerid, 20);
						SetPlayerWantedLevel(playerid, 2);
					}
					else if(GetPVarInt(playerid, "Robber") == 2) /// Pro Robbers
  					{
						SetPVarInt(playerid, "Robber", 2);
						SetPVarInt(playerid, "Cop", 0);
						InDM[playerid] = 13;
						PreloadAnimLib(playerid, "SHOP");
						SetPlayerColor(playerid, COLOR_ORANGE2);
						ResetPlayerWeapons(playerid);
      					GivePlayerWeapon(playerid, 4, 500); // Knife
						GivePlayerWeapon(playerid, 29, 1200); // MP5
						GivePlayerWeapon(playerid, 31, 2000); //AK
						GivePlayerWeapon(playerid, 24, 600); // Deagle
						GivePlayerWeapon(playerid, 27, 500); //Combat
						GivePlayerWeapon(playerid, 16, 3); // 3 Nade
						GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 4);
      					switch(random(2))
	  					{
							case 0: SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
							case 1: SetPlayerPosition(playerid, 2771.9722,1256.8436,10.7500,326.0133);
						}
						if(GetPVarInt(playerid, "CnRSkin"))
						{
						    SetPlayerSkin(playerid, GetPVarInt(playerid, "CnRSkin"));
	  					}
	  					else SetPlayerSkin(playerid, 113);
	  					RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
					}
					else
					{
						SetPVarInt(playerid, "Robber", 3);
						SetPVarInt(playerid, "Cop", 0);
						InDM[playerid] = 13;
						PreloadAnimLib(playerid, "SHOP");
						SetPlayerColor(playerid, COLOR_ORANGE2);
						ResetPlayerWeapons(playerid);
      					GivePlayerWeapon(playerid, 4, 500); // Knife
						GivePlayerWeapon(playerid, 29, 1200); // MP5
						GivePlayerWeapon(playerid, 31, 2000); //AK
						GivePlayerWeapon(playerid, 24, 600); // Deagle
						GivePlayerWeapon(playerid, 27, 500); //Combat
						GivePlayerWeapon(playerid, 16, 3); // 3 Nade
						GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
						GivePlayerWeapon(playerid, 35, 3); // RPG
						SetPlayerTeam(playerid, 2);
						SetPlayerWantedLevel(playerid, 4);
      					switch(random(2))
	  					{
							case 0: SetPlayerPosition(playerid, 1276.4218,2670.2009,10.8203,278.1060);
							case 1: SetPlayerPosition(playerid, 2771.9722,1256.8436,10.7500,326.0133);
						}
						if(GetPVarInt(playerid, "CnRSkin"))
						{
						    SetPlayerSkin(playerid, GetPVarInt(playerid, "CnRSkin"));
	  					}
	  					else SetPlayerSkin(playerid, 113);
	  					RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						cmd_cnrhelp(playerid);
						SetPlayerArmour(playerid, 97);
						SetPlayerVirtualWorld(playerid, 20);
					}
   				}
  				switch(GetPVarInt(playerid, "Cop"))
				{
					case 1: // Cops
  					{
						SetPVarInt(playerid, "Cop", 1);
						SetPVarInt(playerid, "Robber", 0);
						PreloadAnimLib(playerid, "PED");
						GameTextForPlayer(playerid, "~w~You have joined the ~b~cops team~w~!", 4000, 4);
						SetPlayerColor(playerid, 0x1F75FEFF);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); 	// Baton
						GivePlayerWeapon(playerid, 29, 700); 	// MP5
						GivePlayerWeapon(playerid, 31, 1000); 	// M4
						GivePlayerWeapon(playerid, 16, 1); 		// 1 Nade
						GivePlayerWeapon(playerid, 24, 300); 	// Deagle
						SetPlayerTeam(playerid, 1);
						switch(random(3))
						{
							case 0: SetPlayerPosition(playerid, 2287.1199,2429.8420,10.8203,179.0726);
							case 1: SetPlayerPosition(playerid, 2239.2463,2449.3398,11.0372,269.9510);
							case 2: SetPlayerPosition(playerid, 2297.4517,2473.0193,3.2734,228.0779);
						}
						switch(random(4))
						{
							case 0: SetPlayerSkin(playerid, 282);
							case 1: SetPlayerSkin(playerid, 283);
							case 2: SetPlayerSkin(playerid, 286);
							case 3: SetPlayerSkin(playerid, 280);
						}

						cmd_cnrhelp(playerid);
						InDM[playerid] = 13;
						SetPlayerVirtualWorld(playerid, 20);
					}
					case 2: // Swat
  					{
						SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 2);
						InDM[playerid] = 13;
						GameTextForPlayer(playerid, "~w~You have joined the ~b~SWAT TEAM~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_BLUE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); 	// Baton
						GivePlayerWeapon(playerid, 29, 1200); 	// MP5
						GivePlayerWeapon(playerid, 24, 1000); 	// Deagle
						GivePlayerWeapon(playerid, 31, 2000); 	//M4
						GivePlayerWeapon(playerid, 27, 1000); 	//Combat
						GivePlayerWeapon(playerid, 35, 2); 		//RPG
						GivePlayerWeapon(playerid, 16, 5); 		// 5 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						RemoveItems(playerid);
						SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // Glasses
						SetPlayerAttachedObject(playerid, 2, 18922, 2, 0.156999, 0.007999, -0.009000, 0.000000, 0.000000, 14.099987, 1.184000, 1.135000, 1.163999); // Berret
						SetPlayerAttachedObject(playerid, 3, 355, 1, -0.092000, -0.130999, 0.031000, -0.299999, 28.799989, 3.400002, 0.919999, 1.098000, 1.054999); // AK47
						SetPlayerAttachedObject(playerid, 4, 18872, 17, -0.000999, 0.047999, 0.158999, -81.299995, 30.699989, 87.399986, 1.000000, 1.000000, 1.000000);
						SetPlayerAttachedObject(playerid, 5, 19347, 17, 0.020000, 0.092000, -0.095999, -100.499938, 34.699993, 58.300003, 1.467000, 1.556999, 2.68999);
						SetPlayerAttachedObject(playerid, 1, 19418, 7, -0.050999, 0.025999, 0.251000, 61.900035, -7.999997, 9.499998, 1.000000, 0.987998, 1.000000);
						SetPlayerSkin(playerid, 285);
						SetPlayerArmour(playerid, 100);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
					}
					case 3: // Army
  	    			{
  	    				SetPVarInt(playerid, "Robber", 0);
						SetPVarInt(playerid, "Cop", 3);
						InDM[playerid] = 13;
						GameTextForPlayer(playerid, "~w~You have joined the ~p~army team~w~!", 4000, 4);
						SetPlayerColor(playerid, COLOR_PURPLE);
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, 3, 500); // Baton
						GivePlayerWeapon(playerid, 29, 1000); // MP5
						GivePlayerWeapon(playerid, 31, 5000); //M4
						GivePlayerWeapon(playerid, 24, 300); // Deagle
						GivePlayerWeapon(playerid, 34, 300); // Sniper
						GivePlayerWeapon(playerid, 27, 1000); //Combat
						GivePlayerWeapon(playerid, 16, 2); // 1 Nade
						SetPlayerTeam(playerid, 1);
						SetPlayerPosition(playerid, 1286.8466,1269.5372,10.8203,333.2522);
						SetPlayerSkin(playerid, 287);
	  					SetPlayerHealth(playerid, 100);
						cmd_cnrhelp(playerid);
						SetPlayerVirtualWorld(playerid, 20);
					}
	  			}
                SetPlayerWorldBounds(playerid, 2896.113, -467.115, 2884.435, 595.5717); // LV
	  			Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
		  	}
			case 16: // OneShot-DM
  			{
				switch(random(6))
				{
				    case 0: SetPlayerPosition(playerid, -1294.8566,2492.8191,87.0213,337.2820);
				    case 1: SetPlayerPosition(playerid, -1257.8141,2528.0540,91.0575,153.6593);
			     	case 2: SetPlayerPosition(playerid, -1290.0471,2555.1465,85.7115,196.4285);
			     	case 3: SetPlayerPosition(playerid, -1314.5081,2564.6431,86.5863,221.0024);
			     	case 4: SetPlayerPosition(playerid, -1333.3208,2500.5798,87.0469,291.6472);
			     	case 5: SetPlayerPosition(playerid, -1307.2798,2530.7917,87.7202,288.8469);
				}
				GivePlayerWeapon(playerid, 23, 9999999);
				SetPlayerArmour(playerid, 0.0);
				SetPlayerHealth(playerid, 2.0);
				SetPlayerVirtualWorld(playerid, 21);
				InDM[playerid] = 16;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
			case 17: // SniperDM
			{
				RemoveItems(playerid);
				switch(random(9))
				{
				    case 0: SetPlayerPositionEx(playerid, -1526.2155,-444.1110,269.4490,5.7962);
				    case 1: SetPlayerPositionEx(playerid, -1607.9478,-392.2644,270.6663,74.1264);
				    case 2: SetPlayerPositionEx(playerid, -1496.8945,-396.1531,269.4578,15.2601);
				    case 3: SetPlayerPositionEx(playerid, -1545.0111,-405.7469,269.4578,270.0850);
				    case 4: SetPlayerPositionEx(playerid, -1644.1897,-394.3685,276.9054,269.7141);
				    case 5: SetPlayerPositionEx(playerid, -1614.1342,-379.5268,273.4054,3.3222);
				    case 6: SetPlayerPositionEx(playerid, -1616.9463,-397.5317,273.4254,272.8892);
				    case 7: SetPlayerPositionEx(playerid, -1503.6364,-340.5645,271.4578,205.9406);
				    case 8: SetPlayerPositionEx(playerid, -1550.1138,-307.6401,276.0767,52.7860);
				}
				InDM[playerid] = 17;
				GivePlayerWeapon(playerid, 34, 9999999);
				SetPlayerVirtualWorld(playerid, 18);
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
            }
			case 19: //csdm
  			{
				if(GetPVarInt(playerid, "inTDM") == 1) //Red Team
				{
					SetPlayerColor(playerid, COLOR_RED);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 34, 99999); //
					GivePlayerWeapon(playerid, 30, 99999); //
					GivePlayerWeapon(playerid, 25, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 17, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
					SetPlayerTeam(playerid, terror);
	  				SetPlayerPositionEx(playerid,-982.3886,2600.1868,141.2628,178.0494);
                    TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
				    switch(random(4))
	  					{
	  						case 0: SetPlayerSkin(playerid, 293);
	  						case 1: SetPlayerSkin(playerid, 254);
	  						case 2: SetPlayerSkin(playerid, 217);
	  						case 3: SetPlayerSkin(playerid, 247);
	  					}
					InDM[playerid] = 19;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 1);
				}
				else //Blue Team
				{
					SetPlayerColor(playerid, COLOR_BLUE);
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, 34, 99999); //Knife
					GivePlayerWeapon(playerid, 30, 99999); //MP5
					GivePlayerWeapon(playerid, 25, 99999);
					GivePlayerWeapon(playerid, 16, 99999);
					GivePlayerWeapon(playerid, 17, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 24, 99999);
					//GivePlayerWeapon(playerid, 16, 99999); // no atomic bomb for Counter terrorist
					SetPlayerTeam(playerid, CounterTerrorist);
	                SetPlayerPositionEx(playerid,-1177.5842,2370.7673,146.8929,0.7009);
                 	TogglePlayerControllable(playerid, false);
					SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
					switch(random(4))
	  					{
	  						case 0: SetPlayerSkin(playerid, 284);
	  						case 1: SetPlayerSkin(playerid, 285);
	  						case 2: SetPlayerSkin(playerid, 287);
	  						case 3: SetPlayerSkin(playerid, 280);
	  					}
					SetPlayerHealth(playerid, 100);
					InDM[playerid] = 19;
					SetPlayerVirtualWorld(playerid, 6);
					SetPVarInt(playerid, "inTDM", 2);
				}
			}
	   		case 99: // deathmatch1
			{
				switch(random(4))
				{
					case 0: SetPlayerPos(playerid, 1415.3765, -43.8384, 1000.7816);
					case 1: SetPlayerPos(playerid, 1361.1677, -44.7685, 1000.7816);
					case 2: SetPlayerPos(playerid, 1360.8433, 2.3635, 1000.7816);
					case 3: SetPlayerPos(playerid, 1413.4000, 4.1110, 1000.7816);
				}

				GivePlayerWeapon(playerid, 24, 99999);
				SetPlayerInterior(playerid, 1);
				InDM[playerid] = 99;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
			case 101: // dm2
  			{
				switch(random(3))
				{
					case 0: SetPlayerPosition(playerid, 250.0246,195.5269,1008.1719,274.2503);
					case 1: SetPlayerPosition(playerid, 255.1550,175.3655,1003.0234,274.2503);
					case 2: SetPlayerPosition(playerid, 190.7430,158.1582,1003.0234,270.4668);
				}
				GivePlayerWeapon(playerid, 24, 99999);
				GivePlayerWeapon(playerid, 25, 99999);
				GivePlayerWeapon(playerid, 34, 99999);
				SetPlayerInterior(playerid, 3);
				InDM[playerid] = 101;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
            case 102: // sAWNDM
  			{
				switch(random(5))
				{
			    case 0: SetPlayerPosition(playerid, 1381.5352,2182.9851,11.0234,136.8470);
			    case 1: SetPlayerPosition(playerid, 1316.4130,2182.5486,11.0234,227.2073);
		     	case 2: SetPlayerPosition(playerid, 1314.9568,2114.6616,11.0156,314.8883);
		     	case 3: SetPlayerPosition(playerid, 1383.3922,2114.1865,11.0156,40.4900);
		     	case 4: SetPlayerPosition(playerid, 1345.8572,2157.4746,11.0156,224.4315);
			    }

                GivePlayerWeapon(playerid, 26, 9999999);
				InDM[playerid] = 102;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
            case 103: // dm3
  			{
				switch(random(7))
				{
 				case 0: SetPlayerPos(playerid, 356.5909,173.9361,1008.3875);
				case 1: SetPlayerPos(playerid, 358.1115,206.9171,1008.3828);
				case 2: SetPlayerPos(playerid, 387.0937,173.6971,1008.3828);
				case 3: SetPlayerPos(playerid, 367.0653,160.5571,1008.3828);
				case 4: SetPlayerPos(playerid, 345.8421,193.7736,1014.1875);
				case 5: SetPlayerPos(playerid, 327.9168,152.7613,1014.1875);
				case 6: SetPlayerPos(playerid, 346.4809,161.6494,1025.7964);
			   }
                GivePlayerWeapon(playerid, 31, 99999);
				GivePlayerWeapon(playerid, 24, 99999);
				GivePlayerWeapon(playerid, 16, 99999);
				GivePlayerWeapon(playerid, 25, 99999);
				GivePlayerWeapon(playerid, 26, 99999);
				SetPlayerInterior(playerid, 3);
				InDM[playerid] = 103;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
			case 908: //dm4
			{
				RemoveItems(playerid);
				GOD[playerid] = 0;
			    SetPlayerHealth(playerid, 100);
				switch(random(2))
				{
					case 0: SetPlayerPosition(playerid, 1827.9011,-1283.8387,109.3594,122.2704);
					case 1: SetPlayerPosition(playerid, 1785.1157,-1310.7410,109.3594,291.7854);
				}
				GivePlayerWeapon(playerid, 24, 99999);
				GivePlayerWeapon(playerid, 25, 99999);
	            GivePlayerWeapon(playerid, 31, 99999);
                SetPlayerHealth(playerid, 100);
                SetPlayerVirtualWorld(playerid, 18);
			   	InDM[playerid] = 908;
			   	if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
			}
		    case 87:
		    {
		       if(IsTdmRunning)
	           {
                    SetTdmDeath(playerid);
			   }
			   else SetPlayerTdmStaticMeshes(playerid);
		    }
		    case 63:
		    {
                ResetPlayerWeapons(playerid);
		        JoinToGG(playerid);
		        TextDrawShowForPlayer(playerid, GGBOX);
				PlayerTextDrawShow(playerid, GGTD[playerid]);
				TextDrawShowForPlayer(playerid, GGTD2);
				InDM[playerid] = 63;
				if(pInfo[playerid][pSaveSkin] != 999) SetPlayerSkin(playerid, pInfo[playerid][pSaveSkin]);
		    }
		}
    	if(pSpectating[playerid] != -1)
	   	{
	   		pSpectating[playerid] = -1;
	   		LoadPlayerPositionEx(playerid);
		 	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have been put back to your old position.");
		}
		return true;
}


stock RemovePlayerFromDM(playerid)
{
    TextDrawShowForPlayer(playerid, TeleTD);
	CheckDM(playerid);
	UpdateDMText();
	if(InDM[playerid] == 13)
	{
		SetPlayerSkin(playerid, GetPVarInt(playerid, "dSkin"));
		if(pColor[playerid] != 0)
		{
			SetPlayerColor(playerid, GetPVarInt(playerid, "oldColor"));
		}
		else SetPlayerColor(playerid, PlayerColors[playerid]);
		pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
		RemoveItems(playerid);
		DeletePVar(playerid, "Cop");
		DeletePVar(playerid, "Robber");
		DeletePVar(playerid, "InStore");
		SetPlayerTeam(playerid, 255);
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		TextDrawHideForPlayer(playerid, cnrTD);
		//TextDrawHideForPlayer(playerid, helpTD);
		TextDrawShowForPlayer(playerid, TeleTD);
		TextDrawShowForPlayer(playerid, SEv2TD);
		TextDrawShowForPlayer(playerid, SEv2TD2);
		TextDrawShowForPlayer(playerid, SEv2TD3);
		TextDrawShowForPlayer(playerid, SEv2TD4);
		if(RobberyCount[playerid] != 0)
		{
			KillTimer(RobberyTimer[playerid]);
			GameTextForPlayer(playerid, " ", 1000, 3);
			RemovePlayerAttachedObject(playerid, 8);
			RobberyCount[playerid] = 0;
		}
	}
	else if(GetPVarInt(playerid, "inTDM") != 0)
	{
		SetPlayerSkin(playerid, GetPVarInt(playerid, "dSkin"));
		if(pColor[playerid] != 0)
		{
			SetPlayerColor(playerid, GetPVarInt(playerid, "oldColor"));
		}
		else SetPlayerColor(playerid, PlayerColors[playerid]);
		pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
		DeletePVar(playerid, "inTDM");
		SetPlayerTeam(playerid, 255);
		/*if(GetPVarInt(playerid, "RedTeam") == 1) RedCount--;
		else if(GetPVarInt(playerid, "BlueTeam") == 1) BlueCount--;*/
		DeletePVar(playerid, "BlueTeam"), DeletePVar(playerid, "BlueTeam2");
		DeletePVar(playerid, "RedTeam"), DeletePVar(playerid, "RedTeam2");
	}
	
	if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
	{
		TextDrawShowForPlayer(playerid, godTD);
		TextDrawShowForPlayer(playerid, godTDBOX);
    	GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
	    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
		TextDrawHideForPlayer(playerid, GGBOX);
	    PlayerTextDrawHide(playerid, GGTD[playerid]);
	    TextDrawHideForPlayer(playerid, GGTD2);
	}
	
	if(InDM[playerid] == 63)
	{
        InDM[playerid] = 0;
        GGLevel[playerid] = 0;
        InGGMap[playerid] = 0;
        SetPlayerVirtualWorld(playerid, 0);
		ResetPlayerWeapons(playerid);
        TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
		TextDrawHideForPlayer(playerid, GGTD2);
	}
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 100);
	SetPlayerArmour(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	SetPlayerWorldBounds(playerid, 20000.0, -20000.0, 20000.0, -20000.0);
 	SetPlayerWantedLevel(playerid, 0);
 	InDM[playerid] = 0;
 	if(!GetPVarInt(playerid, "toysDisabled")) AttachPlayerToys(playerid);
 	canUseKey[playerid] = true;
  	GodModeLabel(playerid, true);
	HidePlayerTDMTextdraws(playerid);
 	ShowPlayerMSGBox(playerid);
}
stock RemovePlayerFromEvent(playerid)
{
	if(InDerby[playerid] >= 1)
	{
		OnPlayerExitVehicle(playerid, GetPlayerVehicleID(playerid));
		DeletePVar(playerid, "DerbyVeh");
		SetTimer("EndDerbyCheck", 2000, 0);
   		DerbyPlayers--;
   		InDerby[playerid] = 0;
   	}
	else if(InEvent[playerid] >= 1 && InDerby[playerid] == 0)
	{
		SetTimer("EndEventCheck", 2000, 0);
   		NumEventPlayers--;
	}
	GameTextForPlayer(playerid, " ", 500, 6);
	TextDrawHideForPlayer(playerid, raceCT);
	TogglePlayerControllable(playerid, 1);
	doingStunt[playerid] = 0;
	InEvent[playerid] = 0;
	InDM[playerid] = 0;
	canUseKey[playerid] = true;
	ResetPlayerWeapons(playerid);
	LoadPlayerPosition(playerid);
}

stock IsBikeModel(modelid)
{
	switch(modelid)
	{
	    case 581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 471, 468, 586: return true;
	}
	return false;
}

stock IsValidName(const name[])
{
	new len = strlen(name);

	for(new ch = 0; ch != len; ch++)
	{
		switch(name[ch])
		{
			case 'A' .. 'Z', 'a' .. 'z', '0' .. '9', ']', '[', '(', ')', '_', '.': continue;
			default: return false;
		}
	}
	return true;
}

stock IsValidPassword(const name[])
{
	new len = strlen(name);

	for(new ch = 0; ch != len; ch++)
	{
		switch(name[ch])
		{
			case 'A' .. 'Z', 'a' .. 'z', '0' .. '9', ']', '[', '(', ')', '_', '.', '@', '#': continue;
			default: return false;
		}
	}
	return true;
}
stock IsValidChar(const name[])
{
	new len = strlen(name);

	for(new ch = 0; ch != len; ch++)
	{
		switch(name[ch])
		{
			case 'A' .. 'Z', 'a' .. 'z', '0' .. '9', ']', '[', '(', ')', '_', '.', '@', '#', ' ': continue;
			default: return false;
		}
	}
	return true;
}

stock GetPlayerAdminLevelName(playerid)
{
	new lvlstr[99];
	switch(pAdmin[playerid])
	{
		case 0:
		{
			if(pPremium[playerid] != 1)
			{
				if(pPremium[playerid] == 1) lvlstr = "vip member";
				else
				lvlstr = "premium member";
			}
   			else lvlstr = "regular player";
		}
		case 1: lvlstr = "Junior Administrator";
		case 2: lvlstr = "General Administrator";
		case 3: lvlstr = "Lead Administrator";
		case 4: lvlstr = "Head Administrator";
		case 5: lvlstr = "Executive Admin";
	}
	return lvlstr;
}

stock GetPlayerAdminLevelName2(playerid)
{
	new lvlstr[30];
	switch(pAdmin[playerid])
	{
		case 0:
		{
			if(pPremium[playerid] == 1) lvlstr = "VIP";
			else lvlstr = "Premium Member";
		}
		case 1: lvlstr = "Junior Administrator";
		case 2: lvlstr = "General Administrator";
		case 3: lvlstr = "Lead Administrator";
		case 4: lvlstr = "Head Administrator";
		case 5: lvlstr = "Executive Administrator";
	}
	return lvlstr;
}

ResetVariables(playerid)
{
	// Important
	pInfo[playerid][phitsound] = 0;
	pInfo[playerid][pSeePMs] = 0;
	pInfo[playerid][pSeeGC] = 0;
	pInfo[playerid][pHearSong] = 0;
	pInfo[playerid][pVipLogin] = 0;
	pInfo[playerid][pEventsWon] = 0;
	pInfo[playerid][pRacesWon] = 0;
	pInfo[playerid][pMBFound] = 0;
	pGBs[playerid] = 0;
	pGoldBlocks[playerid] = 0;
	doingStunt[playerid] = 0;
	pHidden[playerid] = 0;
	pInfo[playerid][pKills] = 0;
	pInfo[playerid][pDeaths] = 0;
	pLogged[playerid] = false;
	Freezed[playerid] = false;
	FalloutLost[playerid] = true;
	canUseKey[playerid] = true;
	//justSpawnedVehicle[playerid] = false;
	hideMSG[playerid] = 1;
	pAdmin[playerid] = 0;
	pIP[playerid][16] = 0;
	pSpawnPlace[playerid] = -1;
	pLastVehicle[playerid] = 0;
	LastSeat[playerid] = 0;
	pWeaponSet[playerid] = 0;
	killCam[playerid] = 1;
	specOFF[playerid] = 0;
	pReportPoints[playerid] = 0;
	pRegDate[playerid][40] = 0;
	pLastDate[playerid][40] = 0;
	pDescription[playerid] = "None.";
	pCountry[playerid] = "*";
	pPlate[playerid] = "*";
	for(new i = 1; i < MAX_PMS; i++) PMs[playerid][i] = "none";
	snowOn{playerid} = false;

	pTotalHours[playerid] = 0;
	pTotalMinutes[playerid] = 0;
 	pTotalSeconds[playerid] = 0;
	pCurrHours[playerid] = 0;
	pCurrMinutes[playerid] = 0;
	pCurrSeconds[playerid] = 0;
	pPremium[playerid] = 0;
	pScore[playerid] = 0;
	pInfo[playerid][pRainbow] = 0;
	pMute[playerid] = 0;
	pBlocked[playerid] = 0;
	pJail[playerid] = 0;
	pWarns[playerid] = 0;
	pWarns2[playerid] = 0;
	showCD[playerid] = 0;
 	DeathSpam{playerid} = 0;
	LastDeath[playerid] = 0;
	IsInHouse{playerid} = 0;
	pCash[playerid] = 0;
	pColor[playerid] = 0;
	pChatColor[playerid] = 0;
	pIDColor[playerid] = 0;
	BankMoney[playerid] = 0;
	SpawnPos[playerid][SpawnSavedPos] = 0;
	ParkPos[playerid][ParkSavedPos] = 0;
	RepeatMsg[playerid] = 0;
	pGoTo[playerid] = 0;
	pAutoFix[playerid] = 1;
	pTime[playerid] = -1;
	pWeather[playerid] = -1;
	TotalKillStreak[playerid] = 0;
	premiumExpired[playerid] = 0;
	autoLogin[playerid] = 0;
	duelsOFF[playerid] = 0;
	SpawnHack[playerid] = 0;
	pLastCapsed[playerid] = 0;

	pGroupID[playerid] = -1;
	pGroupRank[playerid] = 0;

	// Connect
	PlayerHit[playerid] = false;
	pSpawned[playerid] = 0;
	pArrests[playerid] = 0;
	pTakedowns[playerid] = 0;
	pRobberies[playerid] = 0;
	pCopKills[playerid] = 0;
	pPlayerRobberies[playerid] = 0;
	pTimesArrested[playerid] = 0;
    pSpectating[playerid] = -1;
    Mapper[playerid] = 0;
    playerSpectated[playerid] = 0;
	controlPlayer[playerid] = -1;
	speedBoost[playerid] = 1.3;
	speedBreak[playerid] = 0;
	pBounce[playerid] = 1;
	pSuperJump[playerid] = 0;
	pAirbreak[playerid] = false;
	pInvincible[playerid] = false;
	killCamON[playerid] = false;
	RaceParticipant[playerid] = false;
	SpamCount[playerid] = 0;
	InDM[playerid] = 0;
	SavedVehicle[playerid] = 0;
	pInfo[playerid][pSaveSkin] = 999;
	pAutoTune[playerid] = 1;
	InEvent[playerid] = 0;
	InDerby[playerid] = 0;
	GOD[playerid] = 0;
	Speedo[playerid] = 1;
	Siren[playerid] = 0;
	pWheels[playerid] = 0;
	killStreak[playerid] = 0;
	bounty[playerid] = 0;
	SetPVarInt(playerid, "InfoTDshown", -1);
	SetPVarInt(playerid, "MS_TDshown", -1);
	//SetPVarInt(playerid, "antiFall", 1);
	SetPVarInt(playerid, "lastPMer", -2);
	SetPVarInt(playerid, "betPlayer", -1);
	SetPVarInt(playerid, "gInvitedPlayer", -1);
	SetPVarInt(playerid, "ReportedPlayer", -1);
	SetPVarInt(playerid, "gbseller", -1);
	SetPVarInt(playerid, "Hitman", -1);
	pSpawnVehicle[playerid] = -1;
	RobberyCount[playerid] = 0;
	reactionsWon[playerid] = 0;
	mathsWon[playerid] = 0;
	pDuelsWon[playerid] = 0;
	pFallouts[playerid] = 0;
	pDerbys[playerid] = 0;
	pblock[playerid] = 0;
    pShooters[playerid] = 0;
    pGGWins[playerid] = 0;
    pBMX[playerid] = 0;
	// Labels
 	//god3D[playerid] = Text3D:-1;
 	//admin3D[playerid] = Text3D:-1;
 	//mapper3D[playerid] = Text3D:-1;
    GangLabel[playerid] = Text3D:-1;
	// Duel
	InDuel[playerid] = 0;

	// Achievements.
	pAch1[playerid] = 0;
	pAch2[playerid] = 0;
    pAch3[playerid] = 0;
    pAch4[playerid] = 0;
    pAch5[playerid] = 0;
    pAch6[playerid] = 0;
    pAch7[playerid] = 0;
    pAch8[playerid] = 0;
    pAch9[playerid] = 0;
    pAch10[playerid] = 0;
    pAch11[playerid] = 0;
	pAch12[playerid] = 0;
	pAch13[playerid] = 0;
    pAch14[playerid] = 0;
	pAch15[playerid] = 0;
	pAch16[playerid] = 0;
	pAch17[playerid] = 0;
	pAch18[playerid] = 0;
	pAch19[playerid] = 0;
	pAch20[playerid] = 0;
	pAch21[playerid] = 0;
	pAch22[playerid] = 0;
	pAch23[playerid] = 0;
	pAch24[playerid] = 0;
	pAch25[playerid] = 0;
	pAch26[playerid] = 0;
	pAch27[playerid] = 0;
	pAch28[playerid] = 0;
    pAch29[playerid] = 0;
    pAch30[playerid] = 0;
    pAch31[playerid] = 0;
    pAch32[playerid] = 0;
	// Player Positions
	sPOS_X[playerid] = 0;
	sPOS_Y[playerid] = 0;
	sPOS_Z[playerid] = 0;
	sPOS2_X[playerid] = 0;
	sPOS2_Y[playerid] = 0;
	sPOS2_Z[playerid] = 0;

	// Private Vehicles
	PlayerInfoVeh[playerid][Owner] = 0;
	PlayerInfoVeh[playerid][Model] = -1;
    PlayerInfoVeh[playerid][Price] = -1;
    PlayerInfoVeh[playerid][PaintJob] = -1;
    PlayerInfoVeh[playerid][Color1] = 0;
    PlayerInfoVeh[playerid][Color2] = 0;
    PlayerInfoVeh[playerid][Locked] = 0;
    PlayerInfoVeh[playerid][Mod1] = 0;
    PlayerInfoVeh[playerid][Mod2] = 0;
    PlayerInfoVeh[playerid][Mod3] = 0;
    PlayerInfoVeh[playerid][Mod4] = 0;
    PlayerInfoVeh[playerid][Mod5] = 0;
    PlayerInfoVeh[playerid][Mod6] = 0;
    PlayerInfoVeh[playerid][Mod7] = 0;
    PlayerInfoVeh[playerid][Mod8] = 0;
    PlayerInfoVeh[playerid][Mod9] = 0;
    PlayerInfoVeh[playerid][Mod10] = 0;
    PlayerInfoVeh[playerid][Mod11] = 0;
    PlayerInfoVeh[playerid][Mod12] = 0;
    PlayerInfoVeh[playerid][Mod13] = 0;
    PlayerInfoVeh[playerid][Mod14] = 0;
    PlayerInfoVeh[playerid][Mod15] = 0;
    PlayerInfoVeh[playerid][Mod16] = 0;
    PlayerInfoVeh[playerid][Mod17] = 0;
    PlayerVehicle[playerid] = -1;
	BoughtVehicle[playerid] = false;

	// Player Textdraws
    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCancelButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;

    for(new x=0; x < mS_SELECTION_ITEMS; x++)
	{
        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	}

	gItemAt[playerid] = 0;

	//Toys
    PurchasedToy[playerid] = false;
	toySelected[playerid] = 0;
	for(new i = 0; i < 6; i++)
	{
		pToys[playerid][i][toy_model] = 0;
		pToys[playerid][i][toy_bone] = 0;
		pToys[playerid][i][toy_x] = 0.0;
		pToys[playerid][i][toy_y] = 0.0;
		pToys[playerid][i][toy_z] = 0.0;
		pToys[playerid][i][toy_rx] = 0.0;
		pToys[playerid][i][toy_ry] = 0.0;
		pToys[playerid][i][toy_rz] = 0.0;
		pToys[playerid][i][toy_sx] = 0.0;
		pToys[playerid][i][toy_sy] = 0.0;
		pToys[playerid][i][toy_sz] = 0.0;
	}
}

stock IsValidWeapon(wepid)
{
	if(wepid > 0 && wepid < 19 || wepid > 21 && wepid < 47)
   	{
		return 1;
   	}
    return 0;
}

stock IsNosVehicleModel(modelid)
{
	switch(modelid)
	{
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472,
		473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449,
		520, 425, 476, 432, 513, 497, 593, 511:
		{
		    return false;
		}
	}
	return true;
}

SendClientMessageToAllEx(exception, color, message[])
{
	foreach(Player, ii)
	{
	    if(ii == exception) continue;
	    SendClientMessage(ii, color, message);
	}
}
SendAdminMessage(color, mzgz[])
{
	foreach(Player, i)
	{
	    if(pAdmin[i] == 0)
			if(!IsPlayerAdmin(i)) continue;
    	SendClientMessage(i, color, mzgz);
	}
}

SendCNRMessage(color, mzgz[])
{
	foreach(Player, i)
	{
	    if(InDM[i] == 13) SendClientMessage(i, color, mzgz);
	}
}
SendGGMessage(color, mzgz[])
{
	foreach(Player, i)
	{
	    if(InDM[i] == 63) SendClientMessage(i, color, mzgz);
	}
}
function skydive(playerid)
{
	TeleMSG(playerid, "Sky Dive /skydive");
	SavePlayerPosition(playerid);
    GameTextForPlayer(playerid, "~y~SkyDive 1~n~~w~/skydive", 4000, 4);
	SetPlayerPositionEx(playerid,13.4397,7467.0752,3184.3162,1.0143);
	TogglePlayerControllable(playerid, false);
	GOD[playerid] = 0;
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerVirtualWorld(playerid, 12);
	SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
}

//==============================================
function skydive2(playerid)
{
	TeleMSG(playerid, "Sky Dive 2 /skydive2");
	SavePlayerPosition(playerid);
    GameTextForPlayer(playerid, "~y~SkyDive 2~n~~w~/skydive2", 4000, 4);
	SetPlayerPositionEx(playerid,1436.8721,-848.7169,2511.2512,269.8101);
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerVirtualWorld(playerid, 12);
}
function skydive3(playerid)
{
	TeleMSG(playerid, "Sky Dive 3 /skydive3");
	SavePlayerPosition(playerid);
    GameTextForPlayer(playerid, "~y~SkyDive 3~n~~w~/skydive3", 4000, 4);
	SetPlayerPositionEx(playerid, -113.0264,-1169.6085,2237.7954,89.6650);
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerVirtualWorld(playerid, 12);
}
function skydive4(playerid)
{
	TeleMSG(playerid, "Sky Dive 4 /skydive4");
	SavePlayerPosition(playerid);
    GameTextForPlayer(playerid, "~y~SkyDive 4~n~~w~/skydive4", 4000, 4);
	SetPlayerPositionEx(playerid, 1541.5452, -1363.4098, 3945.7163, -91.0000);
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerVirtualWorld(playerid, 12);
}
function skydive5(playerid)
{
	TeleMSG(playerid, "Sky Dive 5 /skydive5");
	SavePlayerPosition(playerid);
    GameTextForPlayer(playerid, "~y~SkyDive 5~n~~w~/skydive5", 4000, 4);
	SetPlayerPositionEx(playerid, 3617.8762, -2455.4170, 1536.6774, 91.0000);
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerVirtualWorld(playerid, 12);
}

// Random Messages
function RandMsgs()
{
	msgTDswitch ++;
	switch(msgTDswitch)
	{
		case 1:
		{
			TextDrawSetString(msgTD, "      Join our ~r~~h~forums~w~! Register at ~b~~h~uffserver.com/forum!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Looking for a speedboost? Type /sb to activate it!");
		}
		case 2:
		{
			TextDrawSetString(msgTD, "~w~Purchase your own ~b~~h~private vehicle ~w~at /vs");
		}
		case 3:
		{
			TextDrawSetString(msgTD, "Want access to ~y~bonus commands~w~? Check out ~r~/premium~w~!");
			SendClientMessageToAll(COLOR_LB,""WHITE_E"["VPINK_E"UFF"WHITE_E"] Access your personal user control panel using /settings!");
		}
		case 4: TextDrawSetString(msgTD, "      In for a challenge? Check out ~g~/loop ~w~and ~g~/skyroad!");
		case 5:
		{
			TextDrawSetString(msgTD, "        Check out our ~y~Team Deathmatch ~w~- ~r~/tdm");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Type /teles for teleports and /cmds for commands!");
	 	}
		case 6:
		{
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] See a cheater? Don't scream in chat, use /report and it will be handled!");
		}
		case 7: TextDrawSetString(msgTD, "Don't wanna get killed in stuntzones? Enable ~g~/god!");
		case 8:
		{
			TextDrawSetString(msgTD, "    Need a ~b~~h~~h~vehicle?~w~ Spawn one using ~r~/v ~w~or ~r~/v <ID>~w~!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Everything and anything. Only at UFF!");
		}
		case 9:
		{
			TextDrawSetString(msgTD, "  Set your own ~y~time ~r~(/mytime) ~w~and ~y~weather ~r~(/myw)~w~.");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Need help? Type /ask to ask one of our server admins!");
		}
		case 10: TextDrawSetString(msgTD, "         Check ~r~/news~W~ for the new server updates and releases!");
		case 11:
		{
			TextDrawSetString(msgTD, "       Type ~g~~h~~h~/cmds ~b~~h~~h~/teles~w~ for ~y~commands ~w~and ~y~teleports!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Want access to bonus commands and features? Check out /vip!");
		}
		case 12: TextDrawSetString(msgTD, "                 In for a ~g~~h~crazy spin!? ~w~Check out ~r~/spiral!");
		case 13:
		{
			TextDrawSetString(msgTD, "See a rulebreaker? Use ~r~/report ~w~and it will be handled!");
		}
		case 14:
		{
			TextDrawSetString(msgTD, "~w~Edit your server preferences and features using ~r~/settings~w~!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Spawn any vehicle you like using the command /v or /v <ID>!");
		}
		case 15:
		{
			TextDrawSetString(msgTD, "     Prevent your vehicle from being stolen! Use ~r~~h~/lock~w~!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Follow us on Facebook (facebook.com/uffserver)!");
		}
		case 16:
		{
			TextDrawSetString(msgTD, "  Do you want a ~g~~h~speedboost~w~? Type ~r~/sb ~w~to activate it!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Visit /gbshop to purchase cool items with your gbs!");
		}
		case 17:
		{
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Save your position using /spos and load it using /lpos.");
		}
		case 18:
		{
			TextDrawSetString(msgTD, "~w~Attach permanent objects to your skin using ~b~~h~/toys~w~!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Enjoying the server? Add our IP (34.228.165.73:7777) to your favorites!");
		}
		case 19:
		{
			TextDrawSetString(msgTD, "~w~Want to access ~y~bonus features~w~? Read up ~b~~h~/vip!");
			SendClientMessageToAll(COLOR_LB,""WHITE_E"["VPINK_E"UFF"WHITE_E"] Join cops and robbers minigame! /CNR!");
		}
		case 20:
		{
			TextDrawSetString(msgTD, "         ~w~Press ~y~N~w~ to halut your vehicle!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Press N on your keyboard to halut your vehicle.");
		}
		case 21:
		{
			TextDrawSetString(msgTD, "~w~Looking for a 1 vs 1? Use ~r~/duel ~w~to challenge a player!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Duel with your fellow players using the command /duel!");
		}
		case 22:
		{
			TextDrawSetString(msgTD, "   ~w~Check our ~b~~h~/vip ~w~for awesome command and features!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] GET VIP (/vip) at uffserver.com/donate");
		}
		case 23:
		{
			TextDrawSetString(msgTD, "        ~w~Cool statistics for the server - ~r~~h~/uptime!");
			SendClientMessageToAll(COLOR_LB, ""WHITE_E"["VPINK_E"UFF"WHITE_E"] Check out /uptime for cool statistics about the server!");
		}
		case 24:
		{
			TextDrawSetString(msgTD, "        ~w~Get random rewards everyday by ~r~/dailyreward!");
				msgTDswitch = 0;
		}
	}
	return true;
}


function DRandMsgs()
{
	DTDswitch ++;
	switch(DTDswitch)
	{
		case 1:
		{
			TextDrawSetString(SEv2TD2, "    ~w~~h~~H~UFF Release 7.5");
		}
        case 2:
		{
			TextDrawSetString(SEv2TD2, "~b~~h~Stunt~w~~h~/~y~~h~Drift~w~~h~/~r~~h~Race~w~~h~/~p~~h~DM~w~~h~/~g~~h~Fun");  //~b~~h~Stunt~w~/~r~~h~Drift~w~/~y~~h~Race~w~/~g~~h~DM~w~/~b~~h~Fun
			DTDswitch = 0;
		}
	}
	return true;
}



function ChangeColors(playerid)
{
	if(pInfo[playerid][pRainbow] == 1)
	{
		ChangeVehicleColor(GetPlayerVehicleID(playerid), randomColors[random(23)], randomColors[random(23)]);
	}
	return true;
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
==============================[|Global Timers|]=================================
=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
function xSFTimer()
{
	foreach(Player, ii)
	{
		vID = GetPlayerVehicleID(ii);
		//if(canUseKey[ii] == true)
		if(InDM[ii] == 0 && InEvent[ii] == 0)
		{
			if(GOD[ii] == 1)
       			SetPlayerHealth(ii, 99999); // Infinith Health

			if(vID != 0)
			{
				if(pAutoFix[ii] == 1 && doingStunt[ii] == 0 && RaceParticipant[ii] == false)
					RepairVehicle(vID);
			}
			if(vID != 0)
			{
				if(doingStunt[ii] == 9)
					RepairVehicle(vID);
			}
		}
   		// Speedometer
   		if(vID != 0 && Speedo[ii] != 0)
	 	{
		 	new Float:SPD, svalue, Float:vx, Float:vy, Float:vz;
	        GetVehicleVelocity(GetPlayerVehicleID(ii), vx,vy,vz);

			SPD = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 100.0);
	       	svalue = floatround(floatdiv(SPD, 0.75), floatround_floor);
	        format(tmp, sizeof(tmp),"%d", svalue);
	        PlayerTextDrawSetString(ii, vSpeed[ii], tmp);
            PlayerTextDrawSetPreviewModel( ii, vSpeedModel[ii], GetVehicleModel( GetPlayerVehicleID( ii) ) );

	        /*// Race Anti-Cheat
	        if(RaceParticipant[ii] == true && svalue > 320)
	        {
	            // Speedhacks
				new sWarns = GetPVarInt(ii, "speedHacks") + 1;
				SetPVarInt(ii, "speedHacks", sWarns);
				format(str, sizeof(str), "* ADMIN-MSG: "GREY2_E"Possible speed hacks detected on %s(%i) "GREY_E"(Speed: %d KMH)", pName[ii], ii, svalue);
				SendAdminMessage(COLOR_RED, str);
				if(GetPVarInt(ii, "speedHacks") == 3)
				{
				    GetPlayerName(ii, PlayerName, sizeof(PlayerName));
					GetPlayerIp(ii, PlayerIP, sizeof(PlayerIP));
					format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has been detected for speed hacks!", PlayerName, ii);
					SendAdminMessage(COLOR_RED, str);
					//BanPlayerMSG(ii, ii, "Speed Hacks", true);
					format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', 'Server Ban', 'Speed Hacks', UNIX_TIMESTAMP(), 0)", PlayerName, PlayerIP);
					//MySQL_updateQuery(query);
					//KickEx(ii);
				}
    		}*/
   		}
	}
	return true;
}

function AntiCheat()
{
	switch(changeHostname)
	{
 		case 0:
   		{
			SendRconCommand("hostname "HOSTNAME_1"");
  			changeHostname = 1;
		}
		case 1:
		{
  			SendRconCommand("hostname "HOSTNAME_1"");
  			changeHostname = 0;
    	}
 	}
	foreach(Player, ii)
	{
		if(pSpawned[ii])
		{
            SpamCount[ii] = 0;
			// Money AC
			if(GetPlayerMoney(ii) > pCash[ii])
			{
				ResetPlayerMoney(ii);
				GivePlayerMoney(ii, pCash[ii]);
			}
			if(InDM[ii] == 13)
			{
				if(GetPVarInt(ii, "Cop") != 0)
				{
				    if(IsPlayerInDynamicArea(ii, 1) || IsPlayerInDynamicArea(ii, 9))
				    {
						new Float:Health;
						GetPlayerHealth(ii, Health);
						SetPlayerHealth(ii, Health-15);
						GameTextForPlayer(ii, "~w~get out of robbers base~y~!~n~~r~-15 health", 4000, 5);
						SetPlayerArmedWeapon(ii, 0);
					}
				}
			}
			if(doingStunt[ii] != 0 || InDM[ii] != 0 && InDM[ii]!=909)
			{
				if(GetPlayerSpecialAction(ii) == SPECIAL_ACTION_USEJETPACK)
				{
					SetPlayerSpecialAction(ii, SPECIAL_ACTION_NONE);
					Error(ii, "You can't use a jetpack in this area!");
				}
			}
			// Weapon/Armour Anti-Cheat
			GetPlayerArmour(ii, A);
			if(A > 98 && pPremium[ii] == 0)
			{
					GetPlayerName(ii, PlayerName, sizeof(PlayerName));
					GetPlayerIp(ii, PlayerIP, sizeof(PlayerIP));
				//	format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has suspected for armour hacks!", PlayerName, ii);
				//	SendAdminMessage(COLOR_RED, str);
/*					format(tmp, sizeof(tmp), "4AUTO-BAN: 3%s(%i) has been banned for armour hacks!", PlayerName, ii);
					IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);

					BanPlayerMSG(ii, ii, "Armour Hacks", true);
					format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', 'Server Ban', 'Armour Hacks', UNIX_TIMESTAMP(), 0)", PlayerName, PlayerIP);
					MySQL_updateQuery(query);
					KickEx(ii);*/
					return true;
			}
			switch(GetPlayerWeapon(ii))
			{
				case 35, 36, 37, 38, 39:
				{
						if(InDM[ii] == 0 && cAFK[ii] == 0 && pAdmin[ii] == 0)
						{
							GetWeaponName(GetPlayerWeapon(ii), tmp, sizeof(tmp));
							new hwarns = GetPVarInt(ii, "hackWarns") + 1;
							SetPVarInt(ii, "hackWarns", hwarns);
							ResetPlayerWeapons(ii);
							SetPlayerArmedWeapon(ii, 0);
							if(GetPVarInt(ii, "hackWarns") == 3 && GetPlayerWeapon(ii) != 38)
							{
        						GetPlayerName(ii, PlayerName, sizeof(PlayerName));
								GetPlayerIp(ii, PlayerIP, sizeof(PlayerIP));
							//	format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has detected auto banned for weapon hacks!", PlayerName, ii);
                              //  SendAdminMessage(COLOR_RED, str);
								return true;
							}
							GetPlayerName(ii, PlayerName, sizeof(PlayerName));
							//format(str, sizeof(str), ""RED_E"* ADMIN-MSG: "GREY2_E"Possible weapon hacks detected on %s(%i). "LB2_E"(%s) "RED_E"Check on this player.", PlayerName, ii, tmp);
							//SendAdminMessage(COLOR_GREY, str);

							format(str, sizeof(str), "4Anti-Cheat 3Possible weapon hacks detected on %s(%d). 2(%s)", PlayerName, ii, tmp);
							IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			 				return true;
						}
				}
			}
		}
   	}
	return true;
}

function onlineTimer()
{
	// Increase server uptime
	up_seconds ++;
	if(up_seconds == 60)
	{
	    up_seconds = 0, up_minutes ++;
	    if(up_minutes == 60)
	    {
	        up_minutes = 0, up_hours ++;
	        if(up_hours == 24) up_hours = 0, up_days ++;

			format(str, sizeof(str), "4UPTIME: 3The server has been up for 10%s2.", Uptime());
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str);

			// Sync Server
			SyncFooter();
			MySQL_updateQuery("OPTIMIZE TABLE `players`,`groups`,`houses`,`toys`,`vehicles`");
			SetTimer("changeWeather", 10000, false);
		}
	}
 	// Update MC Object Material
	new strings[1000];
	format(strings, sizeof(strings), "\t"RED_E"U"WHITE_E"ltimate "GREEN_E"F"WHITE_E"unky "BLUE_E"F"WHITE_E"reeroam\n\t"WHITE_E"UFF Release "BLUE_E""BUILD"\n\t"GREY_E"www.uffserver.com\n"WHITE_E"Players Online: %d", Iter_Count(Player));
	SetDynamicObjectMaterialText(StatsObject, 0, strings, OBJECT_MATERIAL_SIZE_256x128, "Arial", 22, 0, 0xFF0000FF, 9, 0);
	if(IsShooterRunning)
	{
 		ShooterGameTime--;
   		switch(CurrentShooterMap)
	    {
			case 1: format(tmp, sizeof(tmp), "~w~Players: ~y~~h~%d~n~~w~Time Left: ~r~~h~%s~n~~w~Map: ~b~~h~Bright Ground", bShooterPlayers, GameTimeConvert(ShooterGameTime));
		    case 2: format(tmp, sizeof(tmp), "~w~Players: ~y~~h~%d~n~~w~Time Left: ~r~~h~%s~n~~w~Map: ~b~~h~Light Sky", bShooterPlayers, GameTimeConvert(ShooterGameTime));
	    }
		TextDrawSetString(SHTD1, tmp);
	}
	else
	{
		TextDrawSetString(SHTD1, "~w~Players: ~y~~h~-~n~~w~Time Left: ~r~~h~-:-~n~~w~Map: ~g~~h~Voting");
	}
	if(IsTdmRunning)
	{
 		TdmGameTime--;
   		switch(CurrentTdmMap)
	    {
			case 1: format(tmp, sizeof(tmp), "~w~Players: ~b~~h~%d~n~~w~Map: ~y~~h~Train~n~~w~Ranger Kills: ~b~~h~%d~n~~w~Mafia Kills: ~r~~h~%d~n~~w~Time Left: ~y~~h~%s", bTdmPlayers, RangerKills, MafiaKills, GameTimeConvert(TdmGameTime));
		    case 2: format(tmp, sizeof(tmp), "~w~Players: ~b~~h~%d~n~~w~Map: ~y~~h~Duel~n~~w~Ranger Kills: ~b~~h~%d~n~~w~Mafia Kills: ~r~~h~%d~n~~w~Time Left: ~y~~h~%s", bTdmPlayers, RangerKills, MafiaKills, GameTimeConvert(TdmGameTime));
	    }
		TextDrawSetString(tdm1, tmp);
	}
	else
	{
		TextDrawSetString(tdm1, "~w~Players: ~b~-~n~~w~Map: ~y~Voting~n~~w~Ranger Kills: ~b~-~n~~w~Mafia Kills: ~r~-~n~~w~Time Left: ~r~--:--");
	}
	// Derby
	if(IsDerbyRunning)
	{
 		DerbyGameTime--;
   		switch(CurrentDerbyMap)
	    {
			case 1: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Car Madness", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 2: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Road to Sky", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 3: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Road Rush", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 4: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Golden Ground", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 5: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~RockFord", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 6: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Deser", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 7: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Hangout", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
		    case 8: format(tmp, sizeof(tmp), "~w~Players: ~r~%d~n~~w~Time Left: ~y~%s~n~~w~Map: ~b~Paradise", bDerbyPlayers, GameTimeConvert(DerbyGameTime));
	    }
		TextDrawSetString(DerbyTD1, tmp);
	}
	else
	{
		TextDrawSetString(DerbyTD1, "~w~Players: ~r~~h~-~n~~w~Time Left: ~y~~h~-:-~n~~w~Map: ~b~Voting");
	}
	if(g_FalloutStatus != e_Fallout_Inactive)
	{
	    switch(g_FalloutStatus)
	    {
	        case e_Fallout_Startup:
			{
				format(tmp, sizeof(tmp), "~w~Players: ~r~~h~%d~n~~w~Time Left: ~y~~h~-:-~n~~w~Status: ~r~~h~Starting", CurrentFalloutPlayers);
			}
	        case e_Fallout_Running:
	        {
		        FalloutGameTime--;
		        format(tmp, sizeof(tmp), "~w~Players: ~r~~h~%d~n~~w~Time Left: ~y~~h~%s~n~Status: ~g~~h~Playing", CurrentFalloutPlayers, GameTimeConvert(FalloutGameTime));
    		}
		}
		TextDrawSetString(FalloutTD1, tmp);
	}
	foreach(Player, ii)
	{
	    /*// Server Flood Checker
	    if(NetStats_MessagesRecvPerSecond(ii) > MAX_MESSAGE_RATE)  MessageInfractions[ii]++;
        else MessageInfractions[ii] = 0;
        if(MessageInfractions[ii] == MAX_MESSAGE_INFRACTIONS)
        {
            format(str, sizeof(str), ""GREY_E"Anti-Cheat: "RED_E"%s(%i) has been kicked for flooding the server!", pName[ii], ii);
			SendClientMessageToAll(COLOR_RED, str);
            Kick(ii);
   		}*/
		//
		if(pMute[ii] > 0)
		{
		    pMute[ii]--;
		    if(pMute[ii] == 0)
		    {
		    	SendClientMessage(ii, COLOR_GREY, ""RED_E"Server: "YELLOW_E"You have been unmuted by the server. "RED_E"Do not spam or you will be kicked.");
				format(str, sizeof(str), "4Server3 %s(%i) has been unmuted by the server.", pName[ii], ii);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
		}
		if(pBlocked[ii] > 0)
		{
		    pBlocked[ii]--;
		    if(pBlocked[ii] == 0)
		    {
		    	SendClientMessage(ii, COLOR_GREY, ""RED_E"Server: "YELLOW_E"Your commands are now un-blocked.");
				format(str, sizeof(str), "4Server3 %s(%i)'s commands have bene unblocked by the server.", pName[ii], ii);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
		}

		if(pJail[ii] > 0)
		{
			pJail[ii]--;
			if(GetPVarInt(ii, "Arrester") == 0)
			{
				if(InDM[ii] == 13)
				{
			    	format(str, sizeof(str), "~b~~h~You will be released in %d seconds.~n~Type /escape to attempt to escape.", pJail[ii]);
	  			}
	  			else format(str, sizeof(str), "~b~~h~You will be released in ~w~%d ~b~~h~seconds.", pJail[ii]);
				InfoTD_MSG(ii, 1000, str);
			}
		    if(pJail[ii] == 0)
		    {
		    	pJail[ii] = 0;
		    	DeletePVar(ii, "JailedByAdmin");
				DeletePVar(ii, "HasEscaped");
				SpawnPlayer(ii);
				SetPlayerSpecialAction(ii, SPECIAL_ACTION_NONE);
		    	SendClientMessage(ii, COLOR_GREY, ""RED_E"Server: "GREY_E"You have been un-jailed by the server. (times up)");
				format(str, sizeof(str), "4Server3 %s(%i) has been automatically unjailed by the server.", pName[ii], ii);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
		}
		if(RaceParticipant[ii] == true)
		{
			if(RaceStarted > 0 || RaceBusy == 0x01)
			{
				format(tmp, sizeof(tmp), "~w~Position: ~r~~h~%d/%d~n~~w~Checkpoint: ~b~~h~%d/%d~n~~w~Race: ~y~~h~%s~n~~w~Players: ~y~~h~%d~n~~w~Time: ~w~~h~%s", rpInfo[ii][RacePPos], JoinCount, rpInfo[ii][CPProgess], TotalCP, RaceName, JoinCount, TimeConvert(RaceTime));
			}
 			else if(RaceStarted != 2) format(tmp, sizeof(tmp), "~w~Position: ~r~~h~-/-~n~~w~Checkpoint: ~b~~h~%d/%d~n~~w~Race: ~y~~h~%s~n~~w~Players: ~y~~h~%d~n~~w~Time: ~w~~h~%s", rpInfo[ii][CPProgess], TotalCP, RaceName, JoinCount, TimeConvert(RaceTime));
            PlayerTextDrawSetString(ii, RaceTD1[ii], tmp);
		}
		// Online Timer
		if(pLogged[ii] == true && cAFK[ii] == 0)
		{
			pTotalSeconds[ii] ++, pCurrSeconds[ii] ++;
			if(pTotalSeconds[ii] == 60)
			{
		    	pTotalMinutes[ii] ++, pCurrMinutes[ii] ++;
		    	pTotalSeconds[ii] = 0, pCurrSeconds[ii] = 0;

				switch(pTotalMinutes[ii])
				{
				    case 10, 20, 30, 40, 50:
		            {
					    GivePlayerCash(ii, 2000);
					    GivePlayerScore(ii, 2);
 						if(pScore[ii] >= 2000)
						{
							if(pAch7[ii] == 0)
							{
								pAch7[ii] = 1;
								format(query, sizeof(query), "UPDATE achievements SET a7=1 WHERE reg_id=%d", pRegID[ii]);
								MySQL_updateQuery(query);
								GivePlayerAchievement(ii, "Score Whore", "Congrats you've reached 2000 score!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
							}
						}
					}
					case 60:
					{
						GivePlayerCash(ii, 4000);
      					GivePlayerScore(ii, 3);

						pTotalHours[ii] ++;
						pTotalMinutes[ii] = 0;
						//SavePlayerStats(ii);
						if(pTotalHours[ii] >= 200)
						{
							if(pAch5[ii] == 0)
							{
								pAch4[ii] = 1;
								pAch5[ii] = 1;
								format(query, sizeof(query), "UPDATE achievements SET a4=1,a5=1 WHERE reg_id=%d", pRegID[ii]);
								MySQL_updateQuery(query);
								GivePlayerAchievement(ii, "No Lifer", "Congrats you played for a total of 200 hours!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
							}
						}
						else if(pTotalHours[ii] >= 24)
						{
							if(pAch4[ii] == 0)
							{
								pAch4[ii] = 1;
								format(query, sizeof(query), "UPDATE achievements SET a4=1 WHERE reg_id=%d", pRegID[ii]);
								MySQL_updateQuery(query);
								GivePlayerAchievement(ii, "Official Player", "Congrats you played for a total of 24 hours!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
							}
						}
					}
				}
				if(pCurrMinutes[ii] == 60)
				{
				    pCurrMinutes[ii] = 0;
				    pCurrHours[ii] ++;
				}
			}
   		}
   		if(pSpawned[ii])
		{
		    new pPing = GetPlayerPing(ii);
			if(pPing > 1200 && pPing != 65535)
			{
				format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%d) has been kicked for exceeding the ping limit. (Ping: %d) ", pName[ii], ii, pPing);
				SendClientMessageToAll(COLOR_GREY, str);
				format(tmp, sizeof(tmp), "4Server: 2%s(%i) has been kicked for exceeding the ping limit (Ping: %d)", pName[ii], ii, pPing);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				SendClientMessage(ii, COLOR_RED, ""YELLOW_E"> "RED_E"You have been kicked for high ping. Fix your ping and relog!");
				KickEx(ii);
				return true;
			}

			cAFK[ii]++;
			if(cAFK[ii] == 13)
			{
				// AFK Detected
				//Attach3DTextLabelToPlayer(AFK3D[ii], ii, 0.0, 0.0, -0.1);
				if(InDuel[ii] != 0)
				{
					format(str, sizeof(str), ""DUEL" "GREY2_E"%s(%d) has been removed from the duel for pausing.", pName[ii], ii);
					SendClientMessageToAll(COLOR_GREY2, str);
					EndDuel();
	 			}
				else if(InEvent[ii] != 0)
				{
					RemovePlayerFromEvent(ii);
				 	format(str, sizeof(str), ""RED_E"Server: "GREY2_E"%s(%d) has been removed from the event for pausing.", pName[ii], ii);
					SendEventMessage(COLOR_GREY2, str);
				}
				else if(doingStunt[ii] == 18) // Fallout
				{
					format(str, sizeof(str), ""FALLOUT" "GREY2_E"%s(%d) has been removed from the minigame for pausing.", pName[ii], ii);
					SendFalloutMessage(COLOR_GREY2, str);
					RemoveFromFallout(ii);
	 			}
	 			else if(doingStunt[ii] == 19) // Derby
				{
    				if(IsDerbyRunning)
    				{
						format(str, sizeof(str), ""DERBY" "GREY2_E"%s(%d) has been removed from the derby for pausing.", pName[ii], ii);
						SendDerbyMessage(COLOR_GREY2, str);
						RemoveFromDerby(ii);
					}
				}
			}
		}
	}
	return true;
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) {
		return 1;
	}
	return 0;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	switch(areaid)
	{
	   	case 1: // Robbers CNR Area
		{
			if(InDM[playerid] == 13 && GetPVarInt(playerid, "Cop") != 0)
			{
				SendClientMessage(playerid, COLOR_RED, ""YELLOW_E"*** "RED_E"You are not authorized to enter this area, please exit!");
			}
		}
  		case 2: // Robber's Gate
		{
			cmd_opengate(playerid);
  		}
  		case 3: // Cop's Gate
		{
			cmd_opencopgate(playerid);
  		}
    }
    return true;
}

function ReactionTest()
{
	if(Iter_Count(Player) == 0)
		return false;

	if(reactionActive == true)
	{
	    //format(str, sizeof(str), ""WHITE_E"[{58ACFA}REACTION{FFFFFF}] "WHITE_E"No one has yet typed "WHITE_E"'{58ACFA}%s"WHITE_E"' "WHITE_E"worth 2 score & "LG_E"$%d"LB_E"", xChars, reactionAward);
	    //SendClientMessageToAll(COLOR_LB, str);
	    reactionTimeStart = GetTickCount();
		return true;
	}
	reactionAward = 0;

	new xLength = random(6) + 5;

	format(xChars, sizeof(xChars), "");
	for(new ii = 0; ii != xLength; ii++) format(xChars, sizeof(xChars), "%s%s", xChars, xCharacters[random(sizeof(xCharacters))][0]);

	reactionAward = strlen(xChars) * 1000;
	format(str, sizeof(str), ""RED_E"ReactionTest :: "WHITE_E"The first one who types "WHITE_E"'{FF0000}%s"WHITE_E"' wins 2 score and "WHITE_E"$%d!", xChars, reactionAward);
	SendClientMessageToAll(COLOR_LB, str);
	format(str, sizeof(str), "3,1[REACTION]4 The first one who types '%s' wins 2 score and $%d!", xChars, reactionAward);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);

	reactionActive = true;
 	reactionTimeStart = GetTickCount();
	return true;
}
/*
function MoneyBag()
{
	if(!MoneyBagFound)
	{
	    format(str, sizeof(str), ""MB" "WHITE_E"The Money Bag has still not been found! "RED_E"Location: %s.", MoneyBagLocation);
		SendClientMessageToAll(COLOR_GREEN, str);
		SendClientMessageToAll(COLOR_GREEN, ""YELLOW_E"*** "WHITE_E"A new moneybag hunt will start in 5 minutes!");
  		SetTimer("EndMBHunt", 250000, false);
	}
	else if(MoneyBagFound)
	{
	    MoneyBagFound = 0;
	    new randombag = random(sizeof(MBSPAWN));
	    MoneyBagPos[0] = MBSPAWN[randombag][XPOS];
	    MoneyBagPos[1] = MBSPAWN[randombag][YPOS];
	    MoneyBagPos[2] = MBSPAWN[randombag][ZPOS];
	    format(MoneyBagLocation, sizeof(MoneyBagLocation), "%s", MBSPAWN[randombag][Position]);
		format(str, sizeof(str), ""MB" "WHITE_E"The Money Bag hunt has started, find it for a prize! "RED_E"Location: %s!", MoneyBagLocation);
		SendClientMessageToAll(COLOR_GREEN, str);
		MoneyBagStart = GetTickCount();
		foreach(Player, ii)
		{
			if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]), PlayerTextDrawHide(ii, vSpeedBox[ii]);
		}
		TextDrawShowForAll(InfoTD2);
		SetTimer("HideInfoTD", 6000, false);
		// Update the pickup location
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_X, MoneyBagPos[0]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Y, MoneyBagPos[1]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Z, MoneyBagPos[2]);
		format(str, sizeof(str), "4Moneybag: 2The Money Bag hunt has started, find it for a prize! Location: %s!", MoneyBagLocation);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	}
	return 1;
}*/

function RandomSM()
{
  foreach(Player, ii)
  {
	    if(pLogged[ii] == true)
	    {
		   GivePlayerScore(ii, 5);
		   GivePlayerCash(ii, 5000);
	       format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "WHITE_E"You have earned 5 score and $5000 cash for playing in UFF.Thanks for playing!");
	       SendClientMessage(ii, COLOR_YELLOW, str);
	       format(str, sizeof(str), "~g~~h~~h~+$5000~w~~n~~y~~h~+5 score");
	       MSTD_MSG(ii, 3500, str);
	    }
  }
  return 1;
}
function GoldBlocks()
{
	if(!GoldBlockFound)
	{
	    format(str, sizeof(str), ""GB" "WHITE_E"The Gold Block has still not been found! "RED_E"Location: %s.", GoldBlockLocation);
		SendClientMessageToAll(COLOR_GREEN, str);

	}
	if(GoldBlockFound)
	{
	    GoldBlockFound = 0;
	    new randombag = random(sizeof(GBSPAWN));
	    GoldBlockPos[0] = GBSPAWN[randombag][XPOS];
	    GoldBlockPos[1] = GBSPAWN[randombag][YPOS];
	    GoldBlockPos[2] = GBSPAWN[randombag][ZPOS];
	    format(GoldBlockLocation, sizeof(GoldBlockLocation), "%s", GBSPAWN[randombag][Position]);
        format(str, sizeof(str), ""GB" "WHITE_E"A new Gold Block has been spawned, Try to find it now. "RED_E"Location: %s", GoldBlockLocation);
		SendClientMessageToAll(COLOR_WHITEP, str);

		printf("Gold Block hunt has started,%s ", GoldBlockLocation);
		GoldBlockStart = GetTickCount();
		// Update the pickup location
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_X, GoldBlockPos[0]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Y, GoldBlockPos[1]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Z, GoldBlockPos[2]);
		format(str, sizeof(str), "4Gold Block: 2A new Gold Block has been spawned, find it before its gone! Location: %s!", GoldBlockLocation);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	}
	return 1;
}
function StartGoldBlock()
{
		GoldBlockFound = 0;
	    new randombag = random(sizeof(GBSPAWN));
	    GoldBlockPos[0] = GBSPAWN[randombag][XPOS];
	    GoldBlockPos[1] = GBSPAWN[randombag][YPOS];
	    GoldBlockPos[2] = GBSPAWN[randombag][ZPOS];
	    format(GoldBlockLocation, sizeof(GoldBlockLocation), "%s", GBSPAWN[randombag][Position]);
		format(str, sizeof(str), ""GB" "WHITE_E"A new Gold Block has been spawned, Try to find it now. "RED_E"Location: %s", GoldBlockLocation);
		SendClientMessageToAll(COLOR_WHITEP, str);
		GoldBlockStart = GetTickCount();
		//format(str, sizeof(str), "~w~Gold Block hunt has started! ~r~~h~Location: ~r~%s", GoldBlockLocation);
		//TextDrawSetString(InfoTD2, str);
		foreach(Player, ii)
		{
			if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]), PlayerTextDrawHide(ii, vSpeedBox[ii]);
		}
		TextDrawShowForAll(InfoTD2);
		SetTimer("HideInfoTD", 6000, false);
		// Update the pickup location
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_X, GoldBlockPos[0]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Y, GoldBlockPos[1]);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Z, GoldBlockPos[2]);
		format(str, sizeof(str), "4Gold-Coin: 2A new Gold Block has been spawned, find it for a prize! Location: %s!", GoldBlockLocation);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
        //SetTimer("EndGCHunt", 300000, false);
		return 1;
}
function EndGBHunt()
{
	if(!GoldBlockFound)
	{
	    format(str, sizeof(str), ""GB" "WHITE_E"The Gold Block has still not been found! "RED_E"Location: %s.", GoldBlockLocation);
		SendClientMessageToAll(COLOR_WHITEP, str);
		SendClientMessageToAll(COLOR_WHITEP, ""GB" "WHITE_E"The Gold Block hunt will end in 10 minutes!");
  		SetTimer("EndGBHunt2", 600000, false);
	}
	return 1;
}
function EndGBHunt2()
{
	if(!GoldBlockFound)
	{
		GoldBlockFound = 1;
		GoldBlockStart = 0;
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_X, 0.0);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Y, 0.0);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, gbPC, E_STREAMER_Z, 2140.0);
	    format(str, sizeof(str), ""GB" "WHITE_E"The Gold Block hunt has ended! A new one will start in 10 minutes.");
		SendClientMessageToAll(COLOR_WHITEP, str);
	}
	return 1;
}
function HideInfoTD()
{
	TextDrawHideForAll(InfoTD2);
	foreach(Player, ii)
	{
		if(Speedo[ii] == 1 && IsPlayerInAnyVehicle(ii)) PlayerTextDrawShow(ii, vSpeed[ii]), PlayerTextDrawHide(ii, vSpeedModel[ii]), PlayerTextDrawShow(ii, vSpeedBox[ii]);
	}
}

function EndMBHunt()
{
	MoneyBagFound = 0;
	new randombag = random(sizeof(MBSPAWN));
  	MoneyBagPos[0] = MBSPAWN[randombag][XPOS];
   	MoneyBagPos[1] = MBSPAWN[randombag][YPOS];
   	MoneyBagPos[2] = MBSPAWN[randombag][ZPOS];
    format(MoneyBagLocation, sizeof(MoneyBagLocation), "%s", MBSPAWN[randombag][Position]);
	format(str, sizeof(str), ""MB" "WHITE_E"The Money Bag hunt has started, find it for a prize! "RED_E"Location: %s!", MoneyBagLocation);
 	SendClientMessageToAll(COLOR_YELLOW2, str);
 	MoneyBagStart = GetTickCount();
  	//format(str, sizeof(str), "~g~~h~Money bag hunt has started! ~y~Location: ~r~%s", MoneyBagLocation);
	//TextDrawSetString(InfoTD2, str);
	foreach(Player, ii)
	{
		if(Speedo[ii] == 1) PlayerTextDrawHide(ii, vSpeed[ii]),PlayerTextDrawHide(ii, vSpeedModel[ii]) , PlayerTextDrawHide(ii, vSpeedBox[ii]);
	}
	TextDrawShowForAll(InfoTD2);
	SetTimer("HideInfoTD", 6000, false);
    format(str, sizeof(str), "4Moneybag: 2The Money Bag hunt has started, find it for a prize! Location: %s!", MoneyBagLocation);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	// Update the pickup location
	Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_X, MoneyBagPos[0]);
	Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Y, MoneyBagPos[1]);
	Streamer_SetFloatData(STREAMER_TYPE_PICKUP, mbPC, E_STREAMER_Z, MoneyBagPos[2]);
	return 1;
}


stock SpawnPlayerVehicle(playerid, modelID, bool:byUser = true)
{
	if(byUser)
	{
	    if(pSpawned[playerid] == 0)
		{
		    Error(playerid, "You must be alive to spawn a vehicle!");
		    return false;
		}
	 	if(InDM[playerid] != 0)
		{
		    Error(playerid, "You can't spawn a vehicle while in a DM!");
		    return false;
		}
		if(doingStunt[playerid] != 0)
		{
		    Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
		    return false;
		}
		if(pSpectating[playerid] != -1)
		{
		    Error(playerid, "You can't spawn a vehicle while spectating!");
		    return false;
		}
	}
   	//justSpawnedVehicle[playerid] = true;
  	new Float:velX, Float:velY, Float:velZ;
  	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

  	// Remove the player from their vehicle if they're in one.
	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerFacingAngle(playerid, A);
	}
 	else
 	{
 		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
 		GetVehicleVelocity(GetPlayerVehicleID(playerid), velX, velY, velZ);
   		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			foreach(Player, ii)
			{
				if(GetPlayerVehicleID(ii) == GetPlayerVehicleID(playerid) && ii != playerid)
				{
					// A clever trick to get every player properly back into the vehicle!
					pSpawned[ii] += 10;
					LastSeat[ii] = GetPlayerVehicleSeat(ii);
				}
			}
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		RemovePlayerFromVehicle(playerid);
 	}
	// Destroy the player's current spawned vehicle and remove any other players from it.
	if(pSpawnVehicle[playerid] != -1)
	{
		format(str, sizeof(str), ""UFF" "LB2_E"The vehicle you were in  was created by %s(%i) who has now spawned a new car.", pName[playerid], playerid);
		foreach(Player, ii)
		{
			if(ii == playerid || !IsPlayerInVehicle(ii, pSpawnVehicle[playerid])) continue;
			RemovePlayerFromVehicle(ii);

			SendClientMessage(ii, COLOR_LB, str);
			SendClientMessage(ii, COLOR_LB, ""UFF" "LB2_E"Spawn your own vehicle using "LB_E"/v");
		}
		DestroyVehicle(pSpawnVehicle[playerid]);
	}
	RemoveComponents(playerid);

	// Create the new vehicle!
	pSpawnVehicle[playerid] = CreateVehicle(modelID, POS[0], POS[1], POS[2], A, -1, -1, -1);

	if(pPlate[playerid][0] != '*')
	{
		format(str, 20, "%s", pPlate[playerid]);
		SetVehicleNumberPlate(pSpawnVehicle[playerid], str);
	}
	else
	{
		SetVehicleNumberPlate(pSpawnVehicle[playerid], ""BLUE_E"UFF");
	}
	SetVehicleToRespawn(pSpawnVehicle[playerid]);
	ChangeVehicleColor(pSpawnVehicle[playerid], randomColors[random(23)], randomColors[random(23)]);
	LinkVehicleToInterior(pSpawnVehicle[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(pSpawnVehicle[playerid], GetPlayerVirtualWorld(playerid));

	// Change Wheels
	if(IsNosVehicleModel(modelID))
	{
		if(pWheels[playerid] != 0 && pWheels[playerid] != 999)
		{
		    AddVehicleComponent(pSpawnVehicle[playerid], 1073);
			switch(pWheels[playerid])
			{
				case 1073: AddVehicleComponent(pSpawnVehicle[playerid], 1073);
				case 1074: AddVehicleComponent(pSpawnVehicle[playerid], 1074);
				case 1075: AddVehicleComponent(pSpawnVehicle[playerid], 1075);
				case 1077: AddVehicleComponent(pSpawnVehicle[playerid], 1077);
				case 1078: AddVehicleComponent(pSpawnVehicle[playerid], 1078);
				case 1079: AddVehicleComponent(pSpawnVehicle[playerid], 1079);
				case 1080: AddVehicleComponent(pSpawnVehicle[playerid], 1080);
				case 1081: AddVehicleComponent(pSpawnVehicle[playerid], 1081);
				case 1082: AddVehicleComponent(pSpawnVehicle[playerid], 1082);
				case 1083: AddVehicleComponent(pSpawnVehicle[playerid], 1083);
				case 1085: AddVehicleComponent(pSpawnVehicle[playerid], 1085);
				case 1096: AddVehicleComponent(pSpawnVehicle[playerid], 1096);
				case 1097: AddVehicleComponent(pSpawnVehicle[playerid], 1097);
				case 1098: AddVehicleComponent(pSpawnVehicle[playerid], 1098);
			}
		}
	}
	PutPlayerInVehicle(playerid, pSpawnVehicle[playerid], 0);
	SetVehicleVelocity(pSpawnVehicle[playerid], velX, velY, velZ);

	// Put the previous passengers back in the vehicle
	foreach(Player, ii)
	{
		if(pSpawned[ii] > 10)
		{
			pSpawned[ii]-= 10;
			PutPlayerInVehicle(ii, GetPlayerVehicleID(playerid), LastSeat[ii]);
		}
	}
	pLastVehicle[playerid] = pSpawnVehicle[playerid];

	if(byUser)
	{
		format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED", vehName[modelID - 400]);
        GameTextForPlayer(playerid,tmp, 4000, 4);
  	}
  	if(RaceParticipant[playerid] == true)
	{
		// Lock the vehicle
		CarLocked[pSpawnVehicle[playerid]] = true;
	    foreach(Player, ii)
		{
	 		if(ii != playerid)
			{
	  			SetVehicleParamsForPlayer(pSpawnVehicle[playerid], ii, 0, 1);
	     	}
	 	}
	}
	//SetTimerEx("spawnedV", 3000, false, "i", playerid);
	return pSpawnVehicle[playerid];
}
/*function spawnedV(playerid)
{
	justSpawnedVehicle[playerid] = false;
}*/
stock RemoveComponents(playerid, bool:neon=false)
{
	//printf("DEBUG: Remove Components called on %s(%d)", pName[playerid], playerid);
	// Remove any extra customizations.
	if(GetPVarInt(playerid, "CustomCar"))
	{
		for(new iit = 0; iit < sizeof(sObjects); iit++)
		{
			if(IsValidObject(sObjects[iit][playerid]))  DestroyObject(sObjects[iit][playerid]);
		}
		DeletePVar(playerid, "CustomCar");
	}
	if(neon == true)
	{
		if(GetPVarType(playerid, "Neon")) // Neon
		{
			DestroyObject(NeonObject[0][playerid]);
			DestroyObject(NeonObject[1][playerid]);
			DeletePVar(playerid, "Neon");
 		}
 		if(Siren[playerid] == 1) if(IsValidObject(SirenObject[playerid])) DestroyObject(SirenObject[playerid]); // Remove Siren
	}
}
function ResetHealth(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerHealth(playerid, 100);
	}
}
function ResetHealthODM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerHealth(playerid, 2.0);
	}
}
function ResetCnRHealth(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pHealth"));
		DeletePVar(playerid, "pHealth");
	}
}
function Maths()
{
	if(Iter_Count(Player) == 0)
		return false;

	if(mathsAnswered == 0)
	{
		format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"Previous question wasn't answered "YELLOW_E"(right answer was %d)", mathsAnswer);
		SendClientMessageToAll(COLOR_WHITE, str);
	}
	mathsAnswer = 0;
    mathsAnswered = 0;
    mathsAward = 0;
    mathTimeStart = 0;

    new temp1, addsubtext1[10], addsubtext2[10];

	new number1 = random(100);
	new number2 = random(100);
	new number3 = random(100);
	new addsubnumb1 = random(2);
	new addsubnumb2 = random(2);

	if(addsubnumb1 == 0)
	{
		mathsAward = mathsAward + 2500;

		format(addsubtext1, sizeof(addsubtext1), "-");
		temp1 = number1 - number2;
	}
	else if(addsubnumb1 == 1)
	{
 		mathsAward = mathsAward + 2000;

		format(addsubtext1, sizeof(addsubtext1), "+");
		temp1 = number1 + number2;
	}

	if(addsubnumb2 == 0)
	{
		mathsAward = mathsAward + 3000;

		format(addsubtext2, sizeof(addsubtext2), "-");
		mathsAnswer = temp1 - number3;
	}
	else if(addsubnumb2 == 1)
	{
		mathsAward = mathsAward + 2500;

		format(addsubtext2, sizeof(addsubtext2), "+");
		mathsAnswer = temp1 + number3;
	}

	format(mathsCurrent, sizeof(mathsCurrent), "%d%s%d%s%d", number1, addsubtext1, number2, addsubtext2, number3);
	format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"Calculate "RED_E"%s "WHITE_E"and write /ans <answer> "YELLOW_E"(Score: 2 | Money: $%d)", mathsCurrent, mathsAward);
	SendClientMessageToAll(COLOR_WHITE, str);

	format(str, sizeof(str), "4MATHS: 2Calculate %s and write /ans <answer> ingame 4(POINTS: 2 | MONEY: $%d)", mathsCurrent, mathsAward);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	mathTimeStart = GetTickCount();
	return true;
}

forward RestartServer();
public RestartServer()
{
	Count--;
	if(Count == 0)
	{
	    //GMX
	    Count = -1;
	    return 0;
 	}
 	else
 	{
 		foreach(Player, ii)
		{
 			GameTextForAll(CountText[Count-1], 2500, 6);
		}
 	}
 	SetTimer("CountDown", 900, 0);
 	return 0;
}

function pCountDown()
{
	Count--;
	if(0 >= Count)
	{
		Count = -1;
		KillTimer(countTimer);
		foreach(Player, ii)
		{
 			if(showCD[ii] == 1)
   			{
   				GameTextForPlayer(ii, "~g~~h~Go~w~!! ~g~~h~Go~w~!! ~g~~h~Go~w~!!", 2500, 3);
   				PlayerPlaySound(ii, 1057, 0, 0, 0);
   				showCD[ii] = 0;
			}
		}
	}
	else
	{
		foreach(Player, ii)
		{
            if(showCD[ii] == 1)
   			{
				GameTextForPlayer(ii, CountText[Count-1], 2500, 3);
				PlayerPlaySound(ii, 1056, 0, 0, 0);
   			}
		}
	}
	return 1;
}

function DuelCountDown()
{

    foreach(Player, ii)
	{
		if(InDuel[ii] == 0) continue;
		if(g_DuelCountDown == 5)
		{
			GameTextForPlayer(ii, " ", 500, 6);
			SetCameraBehindPlayer(ii);
			TextDrawShowForPlayer(ii, duelCT);
		}
	}
	switch(g_DuelCountDown)
	{
	    case 5, 4, 3, 2, 1:
	    {
			format(str, sizeof(str), "%d", g_DuelCountDown);
			TextDrawSetString(duelCT, str);

			foreach(Player, ii)
			{
				if(InDuel[ii] != 0)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
	  	}
	  	case 0:
		{
			KillTimer(g_DuelTimer);
			g_DuelTimer = -1;
		    foreach(Player, ii)
		    {
		        if(InDuel[ii] != 0)
		    	{
		    		TextDrawHideForPlayer(ii, duelCT);
					TogglePlayerControllable(ii, true);
					GameTextForPlayer(ii, "~r~~h~fight!", 4000, 3);
					PlayerPlaySound(ii, 3200, 0, 0, 0);
				}
			}
		}
	}
	g_DuelCountDown --;
	return 1;
}
stock GivePlayerHelmet(playerid)
{
	// Don't continue unless player wants a helmet
	if(GetPVarInt(playerid, "HelmetDisabled") == 1)
		return true;

	// Check if this skin even has a helmet preset and store the player's skin in a variable for performance
	new skin = GetPlayerSkin(playerid);
	if(HelmetPos[skin][0] == 0.0)
		return false;

	// Modify the helmet scale
	static Float:HelmetScaleX = 1.0, Float:HelmetScaleY = 1.0, Float:HelmetScaleZ = 1.0;
	if(HelmetPos[skin][6] > 0.0) HelmetScaleX = HelmetPos[skin][6];
	if(HelmetPos[skin][7] > 0.0) HelmetScaleY = HelmetPos[skin][7];
	if(HelmetPos[skin][8] > 0.0) HelmetScaleZ = HelmetPos[skin][8];

	// Attach the helmet to the player
	SetPlayerAttachedObject(playerid, 1, 18645, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5], HelmetScaleX, HelmetScaleY, HelmetScaleZ);
	return true;
}


stock SetPlayerPosOnSpawn(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
	if(SpawnPos[playerid][SpawnSavedPos] == 1)
	{
		SetPlayerPosition(playerid, SpawnPos[playerid][sX], SpawnPos[playerid][sY], SpawnPos[playerid][sZ], SpawnPos[playerid][sA]);
 		SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned at your saved position.");
 		return 1;
  	}
	switch(pSpawnPlace[playerid])
	{
	    case -1:
	    {
			switch(random(3))
			{
			    case 0:
			    {
					switch(random(3))
					{
						case 0: SetPlayerPosition(playerid, 426.1482,-1843.4329,6.1496,182.3893);
				 		case 1: SetPlayerPosition(playerid, 426.1482,-1843.4329,6.1496,182.3893);
						case 2: SetPlayerPosition(playerid, 426.1482,-1843.4329,6.1496,182.3893);
					}
					TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
				}
				case 1:
				{
				    SetPlayerPosition(playerid, -1367.8977,-251.4580,16.5441,313.0739);
				    TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);

				}
				case 2:
				{
					SetPlayerPosition(playerid, 383.3226,2542.7385,19.0481,180.3489);
					TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);

				}
				case 3: // // lva
				{
					SetPlayerPosition(playerid, 1584.9973,1450.9233,13.3351,92.5993);
					TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);

				}
          	}
		}
		//------------------------------------------
   		case 1: // oownhouse
		{
             HouseSpawning(playerid);
   		}
	}
	return 1;
}


function PrepareDerby()
{
	if(EventStarted == 1)
	{
		dcd = 0;
		KillTimer(DerbyStartTimer);
		return true;
	}
 	dcd--;
  	if(dcd == 0)
	{
		KillTimer(DerbyStartTimer);
		EventStarted = 1;
		PlayersJoined = 0;
  		SendClientMessageToAll(COLOR_LB,""LG_E"[DERBY]"LB_E" The Derby has started! Watch the derby using "LB2_E"/watchderby!");
		DerbyEvent = 0; // Avoid Derby Signups
  		foreach(Player, ii)
	   	{
     		if(InDerby[ii] == 1)
    		{
				TogglePlayerControllable(ii, true);
				GameTextForPlayer(ii, "~r~GO!", 6000, 0);
				SendClientMessage(ii, COLOR_PINK, "[DERBY] "YELLOW_E"You must eliminate all the other contenders and be the last vehicle standing to win this derby. Good luck!");
				PlayerPlaySound(ii, 3200, 0, 0, 0);
			}
		}
		return 1;
	}
	else
	{
		format(str, sizeof(str), "~y~Derby starting in:~n~~r~- %d -~n~~y~seconds", dcd);
		foreach(Player, ii)
		{
			if(InDerby[ii] == 1)
    		{
				GameTextForPlayer(ii, str, 2000, 3);
			}
		}
	}
	return 1;
}

function PrepareEvent()
{
	if(EventStarted == 1)
	{
		ecd = 0;
		KillTimer(EStartTimer);
		return true;
	}
 	ecd--;
	if(ecd <= 5)
	{
		KillTimer(EStartTimer);
		if(NumEventPlayers > 1)
		{
			EventStarted = 1;
			if(CageFight != 0) CageFightOn = 1; // To let the server know which event a player is eliminated from
			evcd = 5;
			eCountdown = SetTimer("EventCD", 1000, true);
			return 1;
		}
		else
		{
			end_Event();
			SendClientMessageToAll(COLOR_GREY,""EVENT" "GREY2_E"Event ended due to lack of contenders.");
			return 1;
		}
	}
	else
	{
		format(str,sizeof(str),"~y~Event starting in:~n~~r~- %d -~n~~y~seconds", ecd);
		foreach(Player, ii)
		{
			if(InEvent[ii] != 0)
  			{
				GameTextForPlayer(ii, str, 2000, 3);
			}
		}
	}
	return 1;
}

stock EndDuel()
{
	g_DuelInProgress = 0;
	g_DuelCountDown =0;
	if(g_DuelTimer != -1)
	{
		KillTimer(g_DuelTimer);
		g_DuelTimer = -1;
  	}
  	KillTimer(DuelOverTimer);

 	foreach(Player, ii)
 	{
		if(InDuel[ii] != 0)
		{
			TextDrawHideForPlayer(ii, duelCT);
			TogglePlayerControllable(ii, true);
			InDuel[ii]  = 0;
			ResetPlayerWeapons(ii);
   			InDM[ii] = 0;
			GameTextForPlayer(ii, "~r~Duel Cancelled!", 3500, 5);
			LoadPlayerPosition(ii);
			canUseKey[ii] = true;
			CloseDuelGate();
			if(GetPVarInt(ii, "wasDoingStunt") == 1)
			{
				doingStunt[ii] = 2;
				DeletePVar(ii, "wasDoingStunt");
			}
		}
  		SetPVarInt(ii, "betPlayer", -1);
		DeletePVar(ii, "betAmount");
	}
}


stock SendEventMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(InEvent[i] != 0) SendClientMessage(i, color, Zstring);
	}
}

stock SendDerbyMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(doingStunt[i] == 19) SendClientMessage(i, color, Zstring);
	}
}

stock SendShooterMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(doingStunt[i] == 97) SendClientMessage(i, color, Zstring);
	}
}

stock SendTdmMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(InDM[i] == 87) SendClientMessage(i, color, Zstring);
	}
}


stock SendCSMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(InDM[i] == 19) SendClientMessage(i, color, Zstring);
	}
}

stock SendFalloutMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(doingStunt[i] == 18) SendClientMessage(i, color, Zstring);
	}
}

stock SendLMSMessage(color, Zstring[])
{
	foreach(Player, i)
	{
		if(doingStunt[i] == 33) SendClientMessage(i, color, Zstring);
	}
}

function EndDerbyCheck()
{
	if(EventGoingOn == 2)
    {
		foreach(Player, ii)
		{
			if(InDerby[ii] == 1)
			{
				// Kill any players on Foot.
				if(GetPlayerState(ii) == PLAYER_STATE_ONFOOT) SetPlayerHealth(ii, 0.0);
		 		if(DerbyPlayers == 1)
				{
					format(str,sizeof(str),""PINK_E"[DERBY] "LB_E"%s(%i) has won the Demolition Derby! {E8D04C}Prize: $80,000 and 5 score!", pName[ii], ii);
					SendClientMessageToAll(COLOR_LB,str);
					format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has won the Derby! Prize: $80,000 and 5 score!", pName[ii], ii);
	 				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
					pInfo[ii][pEventsWon]++;
					format(query, sizeof(query), "UPDATE players SET events_won=events_won+1 WHERE reg_id=%d", pRegID[ii]);
					MySQL_updateQuery(query);

					GivePlayerCash(ii, 80000);
					GivePlayerScore(ii, 5);

					GameTextForPlayer(ii, "~g~~h~congratulations~n~~w~You won the event!", 5000, 4);
					if(pInfo[ii][pEventsWon] == 20)
					{
						if(pAch8[ii] == 0)
						{
							pAch8[ii] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a8=1 WHERE reg_id=%d", pRegID[ii]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(ii, "Event Champion", "Congrats you've won 20 events!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
					end_Event();
					return 1;
				}
			}
		}
		if(DerbyPlayers == 0)
		{
			end_Event();
			SendClientMessageToAll(COLOR_PINK, "[DERBY] "LB2_E"No one has won the derby! The event has ended.");
			IRC_GroupSay(ircGroup, IRC_CHANNEL, "3No one has won the derby! The event has ended.");
		}
	}
	return 1;
}

function EndEventCheck()
{
    if(CageFightOn == 1)
    {
	    if(NumEventPlayers == 1)
		{
	    	foreach(Player, ii)
	    	{
				if(InEvent[ii] != 0 && InDerby[ii] == 0)
	 			{
		 			if(CageFight == 1)
	  				{
		  				format(str,sizeof(str),""EVENT" "LB_E"%s(%i) has won the Cage Fight! {E8D04C}Prize: $80,000 and 4 score!", pName[ii], ii);
						SendClientMessageToAll(COLOR_LB,str);
						format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has won the Cage Fight! Prize: $80,000 and 4 score!", pName[ii], ii);
		 				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
	  				}
	  				else
	  				{
	  					format(str,sizeof(str),""EVENT" "LB_E"%s(%i) has won the Field Fight! {E8D04C}Prize: $80,000 and 4 score!", pName[ii], ii);
						SendClientMessageToAll(COLOR_LB,str);
						format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has won the Field Fight! Prize: $80,000 and 4 score!", pName[ii], ii);
		 				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
	  				}


					pInfo[ii][pEventsWon]++;
					canUseKey[ii] = true;
					SetPlayerWorldBounds(ii, 20000.0, -20000.0, 20000.0, -20000.0);
					format(query, sizeof(query), "UPDATE players SET events_won=events_won+1 WHERE reg_id=%d", pRegID[ii]);
					MySQL_updateQuery(query);
					if(pInfo[ii][pEventsWon] >= 20)
					{
						if(pAch8[ii] == 0)
						{
							pAch9[ii] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a8=1 WHERE reg_id=%d", pRegID[ii]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(ii, "Event Champion", "Congrats you've won 20 events!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
					GivePlayerCash(ii, 80000);
					GivePlayerScore(ii, 4);
					GameTextForPlayer(ii, "~g~~h~congratulations~n~~w~You won the event!", 5000, 4);

					end_Event();
					return 1;
				}
			}
		}
		else if(NumEventPlayers == 0)
		{
			end_Event();
			SendClientMessageToAll(COLOR_GREEN, "[EVENT] "LB2_E"No one has won the cage fight! The event has ended.");
			IRC_GroupSay(ircGroup, IRC_CHANNEL, "3No one has won the cage fight! The event has ended.");
			return 1;
		}
	}
    return 1;
}

stock end_Event()
{
	foreach(Player, ii)
	{
		if(InEvent[ii] != 0)
		{
			if(InDerby[ii] != 0)
			{
				DeletePVar(ii, "DerbyVeh");
    			doingStunt[ii] = 0;
				InDerby[ii] = 0;
			}
			InEvent[ii] = 0;
			InDM[ii] = 0;
			canUseKey[ii] = true;
			TogglePlayerControllable(ii, true);
			ResetPlayerWeapons(ii);
			LoadPlayerPosition(ii);
		}
	}
	CageFight = 0;
	EventStarted = 0;
	EventGoingOn = 0;
	ecd = 0;
	dcd = 0;
	KillTimer(EStartTimer);
	KillTimer(DerbyStartTimer);

	EventWeap = 0;
	CageFightOn = 0;
	NumEventPlayers = 0;
}

stock GiveSpawnWeapons(playerid)
{
	ResetPlayerWeapons(playerid);
	switch(pWeaponSet[playerid])
	{
	    case 0: // Default
	    {
          switch(random(7))
		  {
			case 0: // Default Weapons 1
  	        {
			GivePlayerWeapon(playerid, 22, 99999); // 9mm
			GivePlayerWeapon(playerid, 26, 99999); // Sawnoff
			GivePlayerWeapon(playerid, 28, 99999); // Uzi
			GivePlayerWeapon(playerid, 31, 99999); // M4
			GivePlayerWeapon(playerid, 33, 99999); // C Refile
			GivePlayerWeapon(playerid, 43, 1); // Camera
			GivePlayerWeapon(playerid, 3, 1); // night stick
			}
			case 1:// Default Weapons 2
			{
			GivePlayerWeapon(playerid, 22, 99999); // 9mm
			GivePlayerWeapon(playerid, 27, 99999); // Combat
			GivePlayerWeapon(playerid, 32, 99999); // TEC
			GivePlayerWeapon(playerid, 31, 99999); // M4
			GivePlayerWeapon(playerid, 34, 99999); // Sniper Rifle
			GivePlayerWeapon(playerid, 3, 1); // night stick
			}
			case 2:// Default Weapons 3
  	        {
			GivePlayerWeapon(playerid, 9, 1); // Chainsaw
            GivePlayerWeapon(playerid, 23, 99999); // S9mm
			GivePlayerWeapon(playerid, 32, 99999); // TEC
			GivePlayerWeapon(playerid, 30, 99999); // MP5
			GivePlayerWeapon(playerid, 26, 99999); // Sawnoff
			GivePlayerWeapon(playerid, 33, 99999); // C Refile
			GivePlayerWeapon(playerid, 43, 1); // Camera
			}
			case 3:// Default Weapons 4
			{
			GivePlayerWeapon(playerid, 4, 1); // knife
			GivePlayerWeapon(playerid, 23, 99999); // S9mm
			GivePlayerWeapon(playerid, 4, 1); // Knife
			GivePlayerWeapon(playerid, 26, 99999); // Sawnoff
			GivePlayerWeapon(playerid, 31, 99999); // M4
			GivePlayerWeapon(playerid, 33, 99999); // C Refile
			GivePlayerWeapon(playerid, 41, 1); // spray can
			}
			case 4:// Default Weapons 5
			{
			GivePlayerWeapon(playerid, 23, 99999); // 9mm
	        GivePlayerWeapon(playerid, 26, 99999); // sawnoff
			GivePlayerWeapon(playerid, 29, 99999); // mp5
			GivePlayerWeapon(playerid, 30, 99999); // ak47
			GivePlayerWeapon(playerid, 33, 99999); // C  Rifle
			GivePlayerWeapon(playerid, 37, 99999); // flametrow
			GivePlayerWeapon(playerid, 2, 1); // Golf stick
			}
	        case 5:// Default Weapons 6
  	        {
			GivePlayerWeapon(playerid, 6, 1); //Shovel
            GivePlayerWeapon(playerid, 24, 99999); // deagle
			GivePlayerWeapon(playerid, 37, 99999); //combt
			GivePlayerWeapon(playerid, 28, 99999); // uzi
			GivePlayerWeapon(playerid, 30, 99999); // ak47
			GivePlayerWeapon(playerid, 33, 99999); // C  Rifle
			GivePlayerWeapon(playerid, 37, 99999); // flametrow
            GivePlayerWeapon(playerid, 41, 1); // spray can
			}
			case 6:// Default Weapons 7
			{
			GivePlayerWeapon(playerid, 8, 1); // knife
			GivePlayerWeapon(playerid, 24, 99999); // deagle
			GivePlayerWeapon(playerid, 32, 99999); // TEC
			GivePlayerWeapon(playerid, 26, 99999); // Sawnoff
			GivePlayerWeapon(playerid, 30, 99999); // ak47
			GivePlayerWeapon(playerid, 34, 99999); // Sniper  Refile
			GivePlayerWeapon(playerid, 16, 99999); // bombs
            }
		  }
		}
		case 1: // Weapon Set 1
	    {
			GivePlayerWeapon(playerid, 4, 1); // Knife
			GivePlayerWeapon(playerid, 31, 99999); // M4
			GivePlayerWeapon(playerid, 24, 99999); // Deagle
			GivePlayerWeapon(playerid, 27, 99999); // Combat
			GivePlayerWeapon(playerid, 29, 99999); // MP5
		}
		case 2: // Weapon Set 2
	    {
			GivePlayerWeapon(playerid, 8, 1); // Katana
			GivePlayerWeapon(playerid, 30, 99999); // Ak
			GivePlayerWeapon(playerid, 24, 99999); // Deagle
			GivePlayerWeapon(playerid, 26, 99999); // Sawnoff
            GivePlayerWeapon(playerid, 32, 99999); // TEC
		}
		case 3: // Weapon Set 3
	    {
			GivePlayerWeapon(playerid, 9, 1); // Chainsaw
   			GivePlayerWeapon(playerid, 31, 99999); // M4
			GivePlayerWeapon(playerid, 33, 99999); // Country Rifle
			GivePlayerWeapon(playerid, 23, 99999); // Silenced 9MM
			GivePlayerWeapon(playerid, 27, 99999); // Combat
			GivePlayerWeapon(playerid, 32, 99999); // TEC-9
		}
		case 4: // Weapon Set 4
	    {
			GivePlayerWeapon(playerid, 6, 1); // Shovel
			GivePlayerWeapon(playerid, 30, 500); // AK
			GivePlayerWeapon(playerid, 34, 500); // Sniper Rifle
			GivePlayerWeapon(playerid, 24, 300); // Deagle
			GivePlayerWeapon(playerid, 26, 150); // Sawnoff
			GivePlayerWeapon(playerid, 28, 400); // Uzi
		}
	}
}

stock SetDuelLocation(playerid)
{
	switch(duelLoc[playerid])
	{
	    case 1: SetPlayerPosition(playerid, 2361.7122, 1742.0674, 20.6906, 271.0634);
	    case 2: SetPlayerPosition(playerid, -2175.3357, 642.9409, 49.4375, 91.3611);
	    case 3: SetPlayerPosition(playerid, 2685.2095,-1762.7063,40.1386,267.8523);
	    case 4:
        {
		        SetPlayerPosition(playerid, 1361.5778,-46.7547,1000.9238,309.9492);
		        SetPlayerInterior(playerid, 1);
   	    }
   	    case 5: SetPlayerPosition(playerid, 29.5893,1375.6458,9.1719,108.1010);
   	}
}

stock SetDuelLocation2(playerid)
{
	switch(duelLoc[playerid])
	{
	    case 1: SetPlayerPosition(playerid, 2392.3611, 1742.4846, 20.6725, 93.0884);
	    case 2: SetPlayerPosition(playerid, -2228.3813, 642.1494, 49.4477, 268.0595);
	    case 3: SetPlayerPosition(playerid, 2787.7112,-1758.5851,40.7033,91.7572);
	    case 4:
	    {
		        SetPlayerPosition(playerid, 1415.7527,4.9444,1000.9219,129.7809);
		        SetPlayerInterior(playerid, 1);
		}
		case 5: SetPlayerPosition(playerid, -25.2334,1354.3816,9.1719,281.0392);
   	}
}
stock GiveEventWeapons(playerid)
{
	switch(EventWeap)
	{
	    case 1:
	    {
		    GivePlayerWeapon(playerid, 31, 500); // M4
			GivePlayerWeapon(playerid, 24, 400); // Deagle
			GivePlayerWeapon(playerid, 29, 800); // MP5
			GivePlayerWeapon(playerid, 27, 20); // Combat
		}
	    case 2:
	    {
		    GivePlayerWeapon(playerid, 30, 500); // AK
			GivePlayerWeapon(playerid, 24, 400); // Deagle
			GivePlayerWeapon(playerid, 32, 800); // TEC-9
			GivePlayerWeapon(playerid, 26, 20); // SawnOff
	    }
	    case 3:
	    {
		    GivePlayerWeapon(playerid, 24, 9999999); // Deagle
	    }
	    case 4:
	    {
		    GivePlayerWeapon(playerid, 31, 9999999); // M4
	    }
	    case 5:
	    {
		    GivePlayerWeapon(playerid, 30, 9999999); // AK
	    }
	    case 6:
	    {
		    GivePlayerWeapon(playerid, 26, 9999999); // SawnOff
	    }
	    case 7:
	    {
		    GivePlayerWeapon(playerid, 27, 9999999); // Combat
	    }
	    case 8:
	    {
		    GivePlayerWeapon(playerid, 29, 9999999); // MP5
	    }
	    case 9:
	    {
		    GivePlayerWeapon(playerid, 32, 9999999); // TEC-9
	    }
	    case 10:
	    {
		    GivePlayerWeapon(playerid, 34, 9999999); // Sniper
	    }
	    case 11:
	    {
		    GivePlayerWeapon(playerid, 9, 1); // Chainsaw
	    }
	    case 12:
	    {
		    GivePlayerWeapon(playerid, 5, 1); // Bats
	    }
	    case 13:
	    {
		    GivePlayerWeapon(playerid, 16, 999999); // Nades
	    }
   	}
}

stock GiveDuelWeapons(playerid)
{
	ResetPlayerWeapons(playerid);
	switch(duelWeap[playerid])
	{
	    case 1:
	    {
           GivePlayerWeapon(playerid, 4, 500); //Knife
		}
	    case 2:
	    {
	        GivePlayerWeapon(playerid, 9, 1); // Chainsaw
	    }
	    case 3:
	    {
	        GivePlayerWeapon(playerid, 16, 999999); // Nades
	    }
	    case 4:
	    {
		    GivePlayerWeapon(playerid, 23, 999999); // silent pistol
	    }
	    case 5:
	    {
		    GivePlayerWeapon(playerid, 24, 999999); // deagle
	    }
	    case 6:
	    {
		    GivePlayerWeapon(playerid, 25, 999999); // Shotgun
	    }
	    case 7:
	    {
		    GivePlayerWeapon(playerid, 26, 999999); // sawn off
	    }
	    case 8:
	    {
		    GivePlayerWeapon(playerid, 27, 999999); // combat
	    }
	    case 9:
	    {
		    GivePlayerWeapon(playerid, 28, 999999); // UZI
	    }
	    case 10:
	    {
		    GivePlayerWeapon(playerid, 29, 999999); // mp5
	    }
	    case 11:
	    {
		    GivePlayerWeapon(playerid, 30, 999999); // ak47
	    }
	    case 12:
	    {
		    GivePlayerWeapon(playerid, 32, 999999); // tec-9
	    }
	    case 13:
	    {
		    GivePlayerWeapon(playerid, 34, 999999); // sniper
	    }
	    case 14:
	    {
		    GivePlayerWeapon(playerid, 35, 999999); // rpg
	    }
   	}
}


//========================================================[COMMANDS]=====================================================================]
CMD:reloadallh(playerid, params[])
{
    if(pAdmin[playerid] < 3)
    return Error(playerid, "Insufficient permissions!");
    UnloadHouses();
    Info(playerid,"Houses reloaded");
    LoadHouses();
	return true;
}
function LoadHouses2()
{
    UnloadHouses();
    LoadHouses();

}
CMD:commands(playerid) return cmd_cmds(playerid);
CMD:c(playerid) return cmd_cmds(playerid);
CMD:cmd(playerid) return cmd_cmds(playerid);
CMD:cmds(playerid)
{

    ShowPlayerDialog(playerid, 222, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Commands", "Player Commands\t\nVehicle Commands\t\nGang Commands\t\nVery Important Player\t\t\nTeleports", "Select", "Exit");
   	return true;
}
CMD:buyhouse(playerid)// Purchase House
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
		return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsInHouse{playerid} == 0) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, E_NOT_IN_HOUSE);

	new h = GetPVarInt(playerid, "LastHouseCP");
	if(hInfo[h][HouseForSale] == 0) return ShowInfoBoxEx(playerid, COLOR_SYSTEM, "This house is not for sale!");
	if(pCash[playerid] < hInfo[h][HouseForSale]) return Error(playerid, "You don't have enough money to purchase this house!");

	if(pAdmin[playerid] != 5)
	{

	    if(GetOwnedHouses(playerid) >= 2)
		{
			ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, 2);
			return 1;
		}
		else if(GetOwnedHouses(playerid) >= 3)
		{
			ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, 3);
			return 1;
		}
		else
		{
			if(GetOwnedHouses(playerid) >= MAX_HOUSES_OWNED)
			{
				ShowInfoBox(playerid, E_MAX_HOUSES_OWNED, MAX_HOUSES_OWNED);
				return 1;
			}
		}
	}

	format(tmp, sizeof(tmp), ""WHITEP_E"Are you sure you want to buy this house for "GREEN_E"$"WHITE_E"%s?",ToCurrency(hInfo[h][HouseForSale]));
	ShowPlayerDialog(playerid, HOUSEMENU+52, DIALOG_STYLE_MSGBOX, ""GREEN_E"Buy House", tmp, "Buy", "Cancel");
	return 1;
}
/*
CMD:moneybag(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(MoneyBagFound == 0)
	{
		 format(str, sizeof(str), ""MB" "WHITE_E"The Money Bag hunt has started, find it for a prize! "RED_E"Location: %s!", MoneyBagLocation);
		 SendClientMessage(playerid, COLOR_GREEN, str);
	}
	else
	{
		 format(str, sizeof(str), ""MB" "LB2_E"The Moneybag hunt has ended!");
		 SendClientMessage(playerid, COLOR_LB, str);
	}
	return true;
}*/
CMD:gbhunt(playerid) //Gb
{

        if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
		return Error(playerid, "You can't use this command now! Use /exit to leave");
        if(GoldBlockFound == 0)
		{
        format(str, sizeof(str), ""GB" "WHITE_E"A new Gold Block has been spawned, Try to find it now. "RED_E"Location: %s", GoldBlockLocation);
		SendClientMessageToAll(COLOR_WHITEP, str);
		}
		else
		{
	    format(str, sizeof(str), ""GB" "WHITE_E"There is no Gold Blocks hunt is runing!");
		SendClientMessage(playerid, COLOR_WHITEP, str);
	    }
		return true;
}
CMD:xsnow(playerid) // xMAS
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(snowOn[playerid])
	{
	    DeleteSnow(playerid);
	    SendClientMessage(playerid, COLOR_RED, ""UFF" "WHITE_E"You stopped the snow.");
	}
	else
	{
	    CreateSnow(playerid);
	    SendClientMessage(playerid, COLOR_WHITE, ""UFF" "WHITE_E"Let it snow, let it snow, let it snow!");
	}
	GameTextForPlayer(playerid, "~y~~h~let it snow", 4000, 3);
	return 1;
}

CMD:snow(playerid) return cmd_snowcity(playerid);
CMD:snowcity(playerid) // xMAS
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -706.7400,1714.0400,7.0400,95.4732);
	}
	else
	{
		SetPlayerPosition(playerid, -706.7400,1714.0400,7.0400,95.4732);
	}
	TeleMSG(playerid, "Snow City /snowcity");
	GameTextForPlayer(playerid, "~y~Snow City~n~~w~/Snow", 4000, 4);
	return true;
}
CMD:pcmds(playerid)
{

	new line3[2400];
	strcat(line3, ""YELLOW_E"Most Used Commands:\n"BLUE_E"/god\t\t"RED_E"- "WHITE_E"Enable godmode in stunt zones.\n"BLUE_E"/settings\t"RED_E"- "WHITE_E"Edit your ingame server settings.\n"BLUE_E"/teles\t\t"RED_E"- "WHITE_E"Open up the teleport dialog.\n"BLUE_E"/toys\t\t"RED_E"- "WHITE_E"Attach permanent objects to your character.\n"BLUE_E"/hold\t\t"RED_E"- "WHITE_E"Attach temporary custom objects to your character.");
	strcat(line3, "\n"BLUE_E"/duel\t\t"RED_E"- "WHITE_E"Challenge a player to a duel\n"BLUE_E"/premium\t"RED_E"- "WHITE_E"Displays all premium info and commands.\n"BLUE_E"/tops\t\t"RED_E"- "WHITE_E"Displays top statistics for online players.\n"BLUE_E"/weaponset\t"RED_E"- "WHITE_E"Choose your custom spawn weapons.");
	strcat(line3, "\n"BLUE_E"/v\t\t"RED_E"- "WHITE_E"Spawn your own vehicle, use /v <vehicle name> to chose your own.\n"BLUE_E"/anims\t\t"RED_E"- "WHITE_E"List of server animations.\n"BLUE_E"/skin\t\t"RED_E"- "WHITE_E"Select your own skin.\n"BLUE_E"/stats\t\t"RED_E"- "WHITE_E"View your personal server statistics.\n"BLUE_E"/goto\t\t"RED_E"- "WHITE_E"Teleport to any player in the server.");
	strcat(line3, "\n\n"YELLOW_E"Regular Commands:\n"BLUE_E"/spos\t\t"RED_E"- "WHITE_E"Save your position.\n"BLUE_E"/lpos\t\t"RED_E"- "WHITE_E"Load your saved postion.\n"BLUE_E"/pm\t\t"RED_E"- "WHITE_E"Send a player a private message.\n"BLUE_E"/w\t\t"RED_E"- "WHITE_E"Send a message to the players closest to you.\n"BLUE_E"/count\t\t"RED_E"- "WHITE_E"Start a countdown in your area.");
	strcat(line3, "\n"BLUE_E"/givecash\t"RED_E"- "WHITE_E"Send a player money.\n"BLUE_E"/time\t\t"RED_E"- "WHITE_E"Set your own time.\n"BLUE_E"/weather\t"RED_E"- "WHITE_E"Set your own weather.");
	strcat(line3, "\n"BLUE_E"/weapons\t"RED_E"- "WHITE_E"Opens up a weapon menu.\n"BLUE_E"/saveskin\t"RED_E"- "WHITE_E"Spawn with your saved skin on every connect.\n"BLUE_E"/sync\t\t"RED_E"- "WHITE_E"Use this command to sync yourself when stuck.\n"BLUE_E"/kill\t\t"RED_E"- "WHITE_E"Commit suicide.");
	strcat(line3, "\n"BLUE_E"/fightstyles\t"RED_E"- "WHITE_E"Select your fightstyle.\n"BLUE_E"/color\t\t"RED_E"- "WHITE_E"Set your nick color.\n"BLUE_E"/toggoto\t"RED_E"- "WHITE_E"Toggle players from teleporting to you.\n"BLUE_E"/gbshop\t\t"RED_E"- "WHITE_E"Purchase items using your gbs!");

	ShowPlayerDialog(playerid, 223, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Commands (1/2)", line3, "Next", "Exit");
	return true;
}
CMD:vcmds(playerid)
{

	new line3[1700];
	strcat(line3, ""BLUE_E"/carcolor\t"RED_E"- "WHITE_E"Set your own vehicle color.\n"BLUE_E"/sb\t\t"RED_E"- "WHITE_E"Toggle the speedboost feature\n"BLUE_E"/repair, /fix\t"RED_E"- "WHITE_E"Repair your vehicle.\n"BLUE_E"/autotune\t"RED_E"- "WHITE_E"Toggle the autotune feature.\n"BLUE_E"/flip\t\t"RED_E"- "WHITE_E"Flip your vehicle.\n"BLUE_E"/hyd\t\t"RED_E"- "WHITE_E"Add hydraullics to your vehicle.");
	strcat(line3, "\n"BLUE_E"/tune\t\t"RED_E"- "WHITE_E"Vehicle tuning menu\n"BLUE_E"/wheels\t\t"RED_E"- "WHITE_E"Wheels menu\n"BLUE_E"/ramp\t\t"RED_E"- "WHITE_E"Enable ramp spawning.\n"BLUE_E"/lock\t\t"RED_E"- "WHITE_E"Lock your vehicle\n"BLUE_E"/unlock\t\t"RED_E"- "WHITE_E"Unlock your vehicle.\n"BLUE_E"/rainbow\t"RED_E"- "WHITE_E"Make your car flashy.");
	strcat(line3, "\n"BLUE_E"/nos\t\t"RED_E"- "WHITE_E"Add nitro to your vehicle\n"BLUE_E"/paintjob\t"RED_E"- "WHITE_E"Change your vehicle paintjob\n"BLUE_E"/speedo\t"RED_E"- "WHITE_E"Enable the speedometer.\n"BLUE_E"/autofix\t\t"RED_E"- "WHITE_E"Toggle the auto vehicle fix.");
	strcat(line3, "\n"BLUE_E"/siren\t\t"RED_E"- "WHITE_E"Add police sirens to your vehicle.\n"BLUE_E"/removewheels "RED_E"» "WHITE_E"Remove custom wheels from your vehicle.\n"BLUE_E"/lights\t\t"RED_E"- "WHITE_E"Toggle vehicle lights.\n"BLUE_E"/pv\t\t"RED_E"- "WHITE_E"Access your private vehicle controls.\n"BLUE_E"/eject\t\t"RED_E"- "WHITE_E"Eject a passenger from your vehicle.");
	strcat(line3, "\n\n"YELLOW_E"Shortcut Keys:\n"WHITE_E"MMB - Teleport to your last vehicle\nNUM 2 - Flip your vehicle.\nCTRL - Add nos to your vehicle\n\n"RED_E"» "BLUE_E"Use /v or /veh <name> to spawn your own vehicle!");
	ShowPlayerDialog(playerid, 224, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Vehicle Commands", line3, "Back", "Exit");
	return true;
}
CMD:locate(playerid, params[]) return cmd_loc(playerid, params);
CMD:loc(playerid, params[])
{

    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
		    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");
	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/locate <ID>");
 		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d)'s Location: "WHITE_E"%s", pName[otherid], otherid, GetPlayerLocation(otherid));
	SendClientMessage(playerid, COLOR_WHITEP, str);
	return true;
}


CMD:mypv(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(BoughtVehicle[playerid] == false) return Error(playerid, "You don't have a private vehicle! Purchase one at /vs!");
	if(pAdmin[playerid] != 5)
	{
		if(InDM[playerid] != 0)
		{
		    Error(playerid, "You can't spawn your private vehicle while in a deathmatch!");
		    return true;
		}
		if(doingStunt[playerid] != 0)
		{
			Error(playerid, "You can't spawn your private vehicle in this area!");
		    return true;
		}
	}
	if(pSpectating[playerid] != -1) return Error(playerid, "You can't spawn vehicles while spectating!");
	if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
	if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid]) return Error(playerid, "You are already in your private vehicle!");
	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	else GetPlayerFacingAngle(playerid, A);
	if(PlayerVehicle[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(PV_3DLabel[playerid]);
		DestroyVehicle(PlayerVehicle[playerid]);
		PlayerVehicle[playerid] = -1;
	}
	RemoveComponents(playerid);
	if(pSpawnVehicle[playerid] != -1)
	{
		DestroyVehicle(pSpawnVehicle[playerid]);
		pSpawnVehicle[playerid] = -1;
	}
	//justSpawnedVehicle[playerid] = true;
	new vlabel[90];
	format(vlabel, sizeof(vlabel), "{%06x}%s's\n"WHITE_E"Vehicle",pColor[playerid], pName[playerid]);

	PlayerVehicle[playerid] = CreateVehicle(PlayerInfoVeh[playerid][Model], POS[0], POS[1], POS[2], A, PlayerInfoVeh[playerid][Color1], PlayerInfoVeh[playerid][Color2], -1);
	PV_3DLabel[playerid] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerVehicle[playerid], 0, -1, -1, -1, 45.0);

	SetVehicleNumberPlate(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Plate]);
	SetVehicleToRespawn(PlayerVehicle[playerid]);
	LinkVehicleToInterior(PlayerVehicle[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(PlayerVehicle[playerid], GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicle(playerid, PlayerVehicle[playerid], 0);
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	PlayerInfoVeh[playerid][Owner] = pName[playerid];

	if(pAdmin[playerid] == 5 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 415)
	{
		SetPVarInt(playerid, "CustomCar", 1);
		// Cheetah
		sObjects[0][playerid] = CreateObject(2985,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[0][playerid], PlayerVehicle[playerid], -0.450000,0.824999,-0.599999,-27.000003,-0.000000,-269.999877);
		sObjects[1][playerid] = CreateObject(2985,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[1][playerid], PlayerVehicle[playerid], 0.524999,0.824999,-0.674999,21.599998,-0.000000,-269.999877);
		sObjects[2][playerid] =  CreateObject(18647,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[2][playerid], PlayerVehicle[playerid], -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
		sObjects[3][playerid] = CreateObject(18647,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[3][playerid], PlayerVehicle[playerid], 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
		sObjects[4][playerid] = CreateObject(1254,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[4][playerid], PlayerVehicle[playerid], -0.000000,2.100000,0.000000,67.500007,0.000000,0.000000);
		sObjects[5][playerid] = CreateObject(19314,0,0,-1000,0,0,0);
		AttachObjectToVehicle(sObjects[5][playerid], PlayerVehicle[playerid], -0.000000,0.000000,0.599999,70.200004,89.099983,0.000000);
	}
	SetTimerEx("spawnedV", 3000, false, "i", playerid);
	return true;
}

CMD:forceend(playerid)
{


	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	IsDerbyRunning = false;
	DerbyGameTime = DEFAULT_DERBY_TIME;
    KillTimer(tDerbyTimer);
    KillTimer(tDerbyFallOver);
    ClearDerbySpawns();
	ClearDerbyVotes();
	ExecDerbyVotingTimer();

	bDerbyPlayers = 0;
	CurrentDerbyPlayers = 0;
	foreach(Player, ii)
   	{
		if(doingStunt[ii] == 19)
		{
			if(pSpawnVehicle[ii] != -1)
   			{
	    		DestroyVehicle(pSpawnVehicle[ii]);
		    	pSpawnVehicle[ii] = -1;
			}
			DerbyWinner[ii] = false;
			TogglePlayerControllable(ii, false);
			SetPlayerDerbyStaticMeshes(ii);
 			ShowDerbyVotingDialog(ii);
		    CurrentDerbyPlayers++;
		}
	}
	UpdateDMText();

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has ended the current round!", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""DERBY" "LB_E"The current round has been ended by an Administrator.");
	SendClientMessageToAll(COLOR_WHITEP, str);
	return true;
}
CMD:forcemap(playerid, params[])
{

	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

	if(IsDerbyRunning)
		return Error(playerid, "There is a derby currently in progress! To end it use /forceend.");

	if(sscanf(params, "i", otherid))
	{
	    Usage(playerid, "/forcemap <1-6>");
 		return true;
	}
	KillTimer(tDerbyVoting);
	derbycd = 5;
	if(derbyCountdown != -1)
    {
		KillTimer(derbyCountdown);
		derbyCountdown = -1;
	}
	if(otherid > 8)
		return Error(playerid, "Map can't be higher than 7");
	if(otherid < 1)
		return Error(playerid, "Map can't be lower than 1!");
	switch(otherid)
	{
		case 1:
		{
			derbyCountdown = SetTimer("derbyCD", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Car Madness!", pName[playerid], playerid);
		}
		case 2:
		{
			derbyCountdown = SetTimer("derbyCD2", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Road to Sky!", pName[playerid], playerid);
		}
		case 3:
		{
			derbyCountdown = SetTimer("derbyCD3", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Road Rush!", pName[playerid], playerid);
		}
		case 4:
		{
			derbyCountdown = SetTimer("derbyCD4", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Golden Ground!", pName[playerid], playerid);
		}
		case 5:
		{
			derbyCountdown = SetTimer("derbyCD5", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Rockford!", pName[playerid], playerid);
		}
		case 6:
		{
			derbyCountdown = SetTimer("derbyCD6", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Desert!", pName[playerid], playerid);
		}
		case 7:
		{
			derbyCountdown = SetTimer("derbyCD7", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to: Hangout!", pName[playerid], playerid);
		}
		case 8:
		{
			derbyCountdown = SetTimer("derbyCD8", 1000, true);
			format(str, sizeof(str), ""DERBY" "LB_E"%s(%d) has set the map to:Paradise!", pName[playerid], playerid);
		}
	}
	SendClientMessageToAll(COLOR_LB, str);
	return 1;
}

CMD:forceduel(playerid, params[])
{

	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

	if(g_DuelInProgress == 1)
		return Error(playerid, "Another duel is in progress, type /endduel to force end the duel.");

	new player1, player2;
	if(sscanf(params, "uu", player1, player2))
	{
	    Usage(playerid, "/forceduel <Player 1> <Player 2>");
	    SendClientMessage(playerid, COLOR_YELLOW2, "FUNCTION: Will force a duel between the two players selected");
	    return true;
	}
	if(player1 == INVALID_PLAYER_ID)
        return Error(playerid, "Player 1 not connected!");
 	if(player2 == INVALID_PLAYER_ID)
        return Error(playerid, "Player 2 not connected!");

    ShowPlayerDialog(playerid, DUEL_DIALOG+6, DIALOG_STYLE_LIST, ""GREEN_E"Select Duel Location "WHITE_E"Step(1/2)", ""LB2_E"UFF Duel Location\n"LB2_E"Chinatown", "Next", "Cancel");
    SetPVarInt(playerid, "duelPlayer", player1);
    SetPVarInt(playerid, "duelPlayer2", player2);
	return true;
}


// Duel
CMD:duel(playerid, params[])
{

	if(!CanPlayerTeleport(playerid)) return true;
	if(g_DuelInProgress == 1)
		return Error(playerid, "Another duel is in progress at the moment, wait till that duel is finished!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/duel <ID>");
 		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(otherid == playerid)
 		return Error(playerid, "You can't duel yourself!");
	if(pSpawned[otherid] == 0)
		return Error(playerid, "Player is not spawned");
	if(GetPVarInt(playerid, "duelInvited") == 1)
		return Error(playerid, "You have already invited someone for a duel. Type /cancel to cancel the invite.");

	if(InDuel[otherid] != 0)
		return Error(playerid, "Player is already in a duel!");
	if(pJail[otherid] != 0)
		return Error(playerid, "Player is currently in jail and can't be requested.");

	if(duelsOFF[otherid] == 1)
	{
		format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%d) duel invitation has been automatically denied.", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREY, str);
		Error(playerid, "This player currently has duel requests disabled, the player needs to /togduel to challenge you.");
		return 1;
 	}
	if(cAFK[otherid] >= 10)
	{
	 	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in AFK and can't be requested to duel!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	if(pSpectating[otherid] != -1) return Error(playerid, "Player is currently spectating.");

	if(GetPVarInt(otherid, "duelInvited") == 1)
 		return Error(playerid, "That player is currently waiting on another duel.");

	if(InDM[playerid] != 0 || InEvent[playerid] != 0 || RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't duel players while in a DM/Race/Event!");
		return true;
	}
	if(InDM[otherid] != 0 || InEvent[otherid] != 0 || RaceParticipant[otherid] == true)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in a Race/DM or Event and can't be requested to duel!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	if(doingStunt[otherid] == 33 || doingStunt[otherid] == 18 || doingStunt[otherid] == 19)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in a minigame and can't be requested to duel!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}

	format(tmp, sizeof(tmp), ""WHITEP_E"Duel %s(%d) -> Select Location (1/2):", pName[otherid], otherid);
	ShowPlayerDialog(playerid, DUEL_MAP_DIALOG, DIALOG_STYLE_LIST, tmp,
	""WHITE_E"UFF Duel Location\n"WHITE_E"Chinatown\n"WHITE_E"Stadium Top\n"WHITE_E"Warehouse\n"WHITE_E"Campsite", "Next", "Cancel");

	SetPVarInt(playerid, "duelInvited", 1);
	SetPVarInt(playerid, "duelPlayer", otherid);

	return 1;
}



InitializeDuel(playerid, otherplayerid)
{
	SavePlayerPosition(playerid);
	SavePlayerPosition(otherplayerid);
	InDuel[playerid] = 1;
	InDuel[otherplayerid] = 1;
	ClosePlayerDialog(playerid);
	ClosePlayerDialog(otherplayerid);
	if(g_DuelTimer != -1) KillTimer(g_DuelTimer);
	format(str, sizeof(str), ""DUEL" "LB2_E"Duel between %s(%d) and %s(%d) has started! "GREY2_E"(Weapon: %s)", pName[otherplayerid], otherplayerid, pName[playerid], playerid, duelWeapon[otherplayerid]);
 	SendClientMessageToAll(COLOR_LB, str);
 	format(str, sizeof(str), "4DUEL: 2Duel between %s(%d) and and %s(%d) has started!  1Weapon: %s.", pName[otherplayerid], otherplayerid, pName[playerid], playerid, duelWeapon[otherplayerid]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

 	format(str, sizeof(str), ""DUEL" "WHITEP_E"You accepted the duel with %s(%d), Good Luck!.", pName[otherplayerid], otherplayerid);
 	SendClientMessage(playerid, COLOR_WHITEP, str);

 	format(str, sizeof(str), ""DUEL" "WHITEP_E"%s(%d) accepted the duel with you, Good Luck!",pName[playerid], playerid);
 	SendClientMessage(otherplayerid, COLOR_WHITEP, str);

	SetPlayerArmour(playerid, 0);
	SetPlayerArmour(otherplayerid, 0);
 	SetPlayerHealth(playerid, 100);
	SetPlayerHealth(otherplayerid, 100);
	TogglePlayerControllable(playerid, false);
	TogglePlayerControllable(otherplayerid, false);
	SetPlayerVirtualWorld(playerid, 9);

	SetPlayerVirtualWorld(otherplayerid, 9);
	if(doingStunt[playerid] != 0)
	{
		SetPVarInt(playerid, "wasDoingStunt", 1);
	}
	if(doingStunt[otherplayerid] != 0)
	{
		SetPVarInt(otherplayerid, "wasDoingStunt", 1);
	}
	if(GetPVarInt(playerid, "HideObjects") == 1)
 	{
 		DeletePVar(playerid, "HideObjects");
 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	if(GetPVarInt(otherplayerid, "HideObjects") == 1)
 	{
 		DeletePVar(otherplayerid, "HideObjects");
 		Streamer_ToggleItemUpdate(otherplayerid, STREAMER_TYPE_OBJECT, 1);
 	}
 	doingStunt[playerid] = 0;
	doingStunt[otherplayerid] = 0;
	GodModeLabel(playerid, false);
	GodModeLabel(otherplayerid, false);
	g_DuelCountDown = 5;
    g_DuelTimer = SetTimer("DuelCountDown", 1000, 1);
    GiveDuelWeapons(playerid);
    GiveDuelWeapons(otherplayerid);
    SetDuelLocation(playerid);
    SetDuelLocation2(otherplayerid);
 	InDM[playerid] = 20;
 	InDM[otherplayerid] = 20;
 	canUseKey[playerid] = false;
 	canUseKey[otherplayerid] = false;
	g_DuelInProgress = 1;
	SetTimer("OpenDuelGate", 1500, 0);
	if(betTimer != -1) KillTimer(betTimer);

 	canBet = 1;
 	betTimer = SetTimer("CloseBets", 17500, 0);
 	DuelOverTimer = SetTimer("duelTimeOver", 180000, false);
}

CMD:cancel(playerid) return cmd_cduel(playerid);
CMD:cduel(playerid)
{

	if(GetPVarInt(playerid, "duelInvited") == 0)
 		if(GetPVarInt(playerid, "sellinggbs") == 0)
 			return Error(playerid, "You have no reason to use this command at the moment..");

	if(GetPVarInt(playerid, "duelInvited") != 0)
	{
		new otherplayer = GetPVarInt(playerid, "duelPlayer");
		SendClientMessage(playerid, COLOR_GREY, ""DUEL" "GREY_E"You have cancelled your duel invite, you can now use /duel <ID> to duel a new player.");
		format(str, sizeof(str), ""DUEL" "GREY_E"%s(%d) has cancelled his duel invite.",pName[playerid], playerid);
	 	SendClientMessage(otherplayer, COLOR_GREY, str);
 		ClosePlayerDialog(otherplayer);
		DeletePVar(playerid, "duelInvited");
 	}
 	else
 	{
 	    foreach(Player, i)
 	    {
 	        if(GetPVarInt(i, "gbseller") == playerid)
 	        {
				SetPVarInt(i, "gbseller", -1);
				DeletePVar(i, "gcAmount");
				DeletePVar(i, "gcPrice");
 	        	format(str, sizeof(str), ""UFF" "GREY_E"%s(%d) has cancelled his offer for the gbs.",pName[playerid], playerid);
	 			SendClientMessage(i, COLOR_GREY, str);
 	        }
 	    }
		DeletePVar(playerid, "sellinggbs");
 	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have cancelled your gc offer, you can now make a new transaction.");
 	}
	return 1;
}

CMD:cbug(playerid, params[])
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 94) return Msg(playerid, -1, "You are already in the CBug Arena!");

    if(doingStunt[playerid] != 0) return Error(playerid, "You can't use this command from this area..");
    if(InDM[playerid] != 0) return Error(playerid, "You can't  use this command from a DM area!");
    if(doingStunt[playerid] == 70)  return Error(playerid, "You can't  use this command while watching an event, type /stopwatch!");
	if(doingStunt[playerid] == 18 || doingStunt[playerid] == 19)
	{
		Error(playerid, "You can't use this command while in fallout or derby!");
	    return true;
	}
	if(RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't  use this command while in a race!");
	    return true;
	}
	
	if(doingStunt[playerid] != 0) return Error(playerid, "You can't  use this command from this area!");
	if(InDM[playerid] != 0) return Error(playerid, "You can't  use this command from a deathmatch!!");
	ccount[0][playerid] = 0; ccount[1][playerid] = 0; ccount[2][playerid] = 0; ccount[3][playerid] = 0;
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	switch(random(2))
	{
		case 0: SetPlayerPos(playerid, 1415.3765, -43.8384, 1000.7816);
		case 1: SetPlayerPos(playerid, 1361.1677, -44.7685, 1000.7816);
	}
    SetPlayerVirtualWorld(playerid, 98);
	SetPlayerInterior(playerid, 1);
	GivePlayerWeapon(playerid, 24, 7);
	InDM[playerid] = 94;
    return 1;
}

/*
CMD:ctop(playerid, params[]) return cmd_topcbug(playerid, params);
CMD:topcbug(playerid, params[])
{
    INI_ParseFile(fileToWrite,"ini_%s_%s");
    for (new i=0; i<5; i++)
    {
        if(tops[i] == 9999999.0000) tops[i] = 0.0000;
    }
   	format(str1, sizeof(str1), "{FFFFFF}#1 {FFFF00}%s {00FFFF}%0.4f\n{FFFFFF}#2 {FFFF00}%s {00FFFF}%0.4f\n{FFFFFF}#3 {FFFF00}%s {00FFFF}%0.4f\n{FFFFFF}#4 {FFFF00}%s {00FFFF}%0.4f\n{FFFFFF}#5 {FFFF00}%s {00FFFF}%0.4f", jogtops[0], tops[0], jogtops[1], tops[1], jogtops[2], tops[2], jogtops[3], tops[3], jogtops[4], tops[4]);
	ShowPlayerDialog(playerid, DIALOG_TOPS, 0, "Top 5 CBug-Time", str1, "OK", "");
	return 1;
}*/
CMD:nametag(playerid) return cmd_nametags(playerid);
CMD:nametags(playerid)
{

	if(pPremium[playerid] == 0) return Error(playerid, "You must be a premium member to use this command, check /premium for more info.");

	if(InEvent[playerid] != 0)
		return Error(playerid, "You can't disable your nametag in events!");
	if(InDM[playerid] != 0)
		return Error(playerid, "You can't disable your nametag in DMs!");

	if(GetPVarInt(playerid, "nameTagOFF") == 0)
	{
		foreach(Player, ii) ShowPlayerNameTagForPlayer(ii, playerid, false);
		SetPVarInt(playerid, "nameTagOFF", 1);
		format(tmp, sizeof(tmp), "~y~~h~Nametag: ~n~~r~off");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
	}
	else
	{
	    foreach(Player, ii) ShowPlayerNameTagForPlayer(ii, playerid, true);
		DeletePVar(playerid, "nameTagOFF");
		format(tmp, sizeof(tmp), "~y~~h~Nametag: ~n~~g~on");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
	}
	return 1;
}

// Tops
CMD:top5(playerid) return cmd_tops(playerid);
CMD:top10(playerid) return cmd_tops(playerid);
CMD:top(playerid) return cmd_tops(playerid);
CMD:toplist(playerid) return cmd_tops(playerid);
CMD:tops(playerid)
{
	new tStr[1200];
	strcat(tStr, "Top Score\t\t"GREY_E"[/topscore]\nTop Cash\t\t"GREY_E"[/topcash]\nTop Kills\t\t"GREY_E"[/topkills]\nTop Deaths\t\t"GREY_E"[/topdeaths]\nTop Online Time\t"GREY_E"[/toptime]\nTop Event Wins\t\t"GREY_E"[/topevent]");
	strcat(tStr, "\nTop Race Wins\t\t"GREY_E"[/topracers]\nTop Duel Wins\t\t"GREY_E"[/topduels]\nTop Gold Block Hunter\t"GREY_E"[/topgbs]\nTop Gangs\t\t"GREY_E"[/topgangs]\nTop Killstreaks\t\t"GREY_E"[/topks]");
    strcat(tStr, "\nTop Reaction Wins\t"GREY_E"[/topreactions]\nTop Arrests\t\t"GREY_E"[/toparrests]\nTop Maths\t\t"GREY_E"[/topmaths]\nTop Derby\t\t"GREY_E"[/topderby]\nTop Fallout\t\t"GREY_E"[/topfallout]\nTop Shooter\t\t"GREY_E"[/topshooter]\nTop Wanteds\t\t"GREY_E"[/topwanteds]");

	ShowPlayerDialog(playerid, TOPLIST_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Top List", tStr, "Select", "Exit");
	return 1;
}


CMD:gangs(playerid)
{

	new Iterator:Gangs[2]<MAX_PLAYERS>;
	new finstring[2048];

	Iter_Init(Gangs);

	foreach(Player, ii)
	{
	    if(pGroupID[ii] > 0 && !Iter_Contains(Gangs[0], pGroupID[ii]))
        {
            Iter_Add(Gangs[0], pGroupID[ii]);
            Iter_Add(Gangs[1], ii);
        }
	}

	if(Iter_Count(Gangs[1]) > 0)
	{
	    format(tmp, sizeof(tmp), ""WHITE_E"%i gangs online:\n", Iter_Count(Gangs[1]));
	    strcat(finstring, tmp);

	    for(new i = Iter_First(Gangs[1]), count = 0; i != Iter_End(Gangs[1]); i = Iter_Next(Gangs[1], i), ++count)
	    {
	        if(count <= 40)
	        {
	        	format(tmp, sizeof(tmp), "\n%i - %s", count + 1, pGroupName[i]);
	        	strcat(finstring, tmp);
			}
			else
			{
			    format(tmp, sizeof(tmp), "\n[... too many online]");
			    strcat(finstring, tmp);
			    break;
			}
	    }
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF - "WHITE_E"Gangs Online", finstring, "OK", "");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no gangs online!");
	}
	return 1;
}
CMD:gtop(playerid) return cmd_topgangs(playerid);
CMD:topgangs(playerid)
{
	format(query, sizeof(query), "SELECT gName,gTag,gScore,gColor FROM groups WHERE gID ORDER BY gScore DESC LIMIT 30;");
	MySQL_query(query, true, "ShowTopGroups", "i", playerid);
	return true;
}
CMD:ncrecords(playerid)
{

	format(query, sizeof(query), "SELECT oldname,newname,time FROM namechanges WHERE reg_id ORDER BY newname DESC LIMIT 15;");
	MySQL_query(query, true, "NCRECORDS", "i", playerid);
	return true;

}

function NCRECORDS(playerid)
{
	new rows = MySQL_rowCount();
	if(!rows)
	{
	  	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
	if(rows)
	{
		new count = 0;
     	new list1[999];
        strcat(list1, "{FFFFFF}NO\t{FFFFFF}Old Name\t{FFFFFF}New Name\t{FFFFFF}Changed on\n");
		for(new i = 0; i < rows; i++)
		{
			new oldname[24],
			    udate,
			    udatestr[40],
				newname[24];
				
   			MySQL_getString(i, 0, oldname);
   			MySQL_getString(i, 1, newname);
   			udate = cache_get_row_int(0, 2);
   			
			localtime(udate, tmParam);
			strftime(udatestr, sizeof(udatestr), "%d/%m/%Y %H:%M", tmParam);
			
			format(list1, sizeof(list1), "%s\n%d\t%s\t%s\t%s\n", list1, count + 1, oldname, newname, udatestr);
			count++;
		}
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, ""BLUE_E"UFF: "WHITE_E"Name Change Records", list1, "OK", "");
	}
}
CMD:wanteds(playerid) return cmd_topwanteds(playerid);
CMD:topwanteds(playerid)
{
	new wanteds[MAX_PLAYERS][e_top_wanted],
		finstring[2048];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && pHidden[i] == 0)
		{
	        wanteds[i][E_playerid] = i;
	        wanteds[i][E_pwanted] = TotalKillStreak[i];
	 	}
		else
	    {
	        wanteds[i][E_playerid] = -1;
	        wanteds[i][E_pwanted] = -1;
	    }
	}

	SortDeepArray(wanteds, E_pwanted, .order = SORT_DESC);

	for(new i = 0; i < 30; i++)
	{
	    if(wanteds[i][E_pwanted] != -1 && wanteds[i][E_pwanted] != 0)
	    {
		    format(tmp, sizeof(tmp), ""WHITE_E"%i) "WHITEP_E"%s(%d) "RED_E"Wanteds: "WHITEP_E"%i\n", i + 1, pName[wanteds[i][E_playerid]], wanteds[i][E_playerid], wanteds[i][E_playerid]);
		    strcat(finstring, tmp);
		}
		else
		{
		    format(tmp, sizeof(tmp), ""WHITE_E"%i) ----\n", i + 1);
		    strcat(finstring, tmp);
		}
	}
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Wanteds", finstring, "Close", "");
	return 1;
}
function ShowTopGroups(playerid)
{
	new rows = MySQL_rowCount();
	if(rows)
	{
		new count = 0,
			gangcolor,
     		finstring[2400];

		for(new i = 0; i < rows; i++)
		{
			new groupname[25],
				grouptag[25],
   				groupscore = 0,
   				gColor;

   			MySQL_getString(i, 0, groupname);
   			MySQL_getString(i, 1, grouptag);
   			groupscore  = MySQL_getInt(i, 2);
            gColor  = MySQL_getInt(i, 3);
            gangcolor = StripAlpha(gColor);
			format(tmp, sizeof(tmp), "\n{%06x}%i - [%s]%s [%d]", gangcolor, count + 1, grouptag,groupname, groupscore);
			strcat(finstring, tmp);
			count++;
		}
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Gangs", finstring, "OK", "");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topscore(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,score,color FROM players WHERE reg_id ORDER BY score DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopScore", "i", playerid);
    return true;
}

function ShowTopScore(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
                pscore = 0;
			//	pcolor;
				
            MySQL_getString(i, 0, pname);
            pscore = MySQL_getInt(i, 1);
//            pcolor= MySQL_getInt(i, 2);
            
//            color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Score: %d",count + 1, pname, pscore);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Score", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}



CMD:topcash(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,money,color FROM players WHERE reg_id ORDER BY money DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopMoney", "i", playerid);
    return true;
}

function ShowTopMoney(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pmoney = 0;

            MySQL_getString(i, 0, pname);
            pmoney = MySQL_getInt(i, 1);
//            pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Money: $%d", count + 1, pname, pmoney);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Cash", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topkills(playerid)
{

    format(query, sizeof(query), "SELECT name,kills,color FROM players WHERE reg_id ORDER BY kills DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopKills", "i", playerid);
    return true;
}

function ShowTopKills(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pkills = 0;

            MySQL_getString(i, 0, pname);
            pkills = MySQL_getInt(i, 1);
 //           pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);
            
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Kills: %d",count + 1, pname, pkills);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Kills", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topdeaths(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,deaths,color FROM players WHERE reg_id ORDER BY deaths DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopDeath", "i", playerid);
    return true;
}

function ShowTopDeath(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pdeaths = 0;

            MySQL_getString(i, 0, pname);
            pdeaths = MySQL_getInt(i, 1);
//            pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);
            
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Deaths: %d",count + 1, pname, pdeaths);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Deaths", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topderby(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,derby_wins,color FROM players WHERE reg_id ORDER BY derby_wins DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopDerby", "i", playerid);
    return true;
}

function ShowTopDerby(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
		//		pcolor,
                pderby = 0;

            MySQL_getString(i, 0, pname);
            pderby = MySQL_getInt(i, 1);
//            pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);

            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Derby Wins : %d",  count + 1, pname, pderby);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Derby Wins", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topshooter(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,shooter_wins,color FROM players WHERE reg_id ORDER BY shooter_wins DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopShooter", "i", playerid);
    return true;
}

function ShowTopShooter(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pshooter = 0;

            MySQL_getString(i, 0, pname);
            pshooter = MySQL_getInt(i, 1);
 //           pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);

            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Shooter Wins : %d", count + 1, pname, pshooter);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Shooter Wins", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topfallout(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,fallouts,color FROM players WHERE reg_id ORDER BY fallouts DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopfallouts", "i", playerid);
    return true;
}

function ShowTopfallouts(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
		//	color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pfallouts = 0;

            MySQL_getString(i, 0, pname);
            pfallouts = MySQL_getInt(i, 1);
//            pcolor = MySQL_getInt(i, 2);
          //  color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Fallout Wins : %d", count + 1, pname, pfallouts);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Fallout Wins", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:toptime(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,hours,minutes,color FROM players WHERE reg_id ORDER BY hours DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopTime", "i", playerid);
    return true;
}

function ShowTopTime(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
		//	color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
                phours = 0,
           //     pcolor,
                pminutes = 0;

            MySQL_getString(i, 0, pname);
            phours = MySQL_getInt(i, 1);
            pminutes = MySQL_getInt(i, 2);
//            pcolor = MySQL_getInt(i, 3);
          //  color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Total online time - Hours: %d, Mins: %d", count + 1, pname, phours, pminutes);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top online time", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topevent(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,events_won,color FROM players WHERE reg_id ORDER BY events_won DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopEvent", "i", playerid);
    return true;
}

function ShowTopEvent(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
		//	color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
		//		pcolor,
                pevents = 0;

            MySQL_getString(i, 0, pname);
            pevents = MySQL_getInt(i, 1);
           // pcolor = MySQL_getInt(i, 2);
       //     color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Events won: %d", count + 1, pname, pevents);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Events", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}


CMD:topracers(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,races_won,color FROM players WHERE reg_id ORDER BY races_won DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopRaces", "i", playerid);
    return true;
}

function ShowTopRaces(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
		//	color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                praces = 0;

            MySQL_getString(i, 0, pname);
            praces = MySQL_getInt(i, 1);
         //   pcolor = MySQL_getInt(i, 2);
         //   color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Races won: %d",count + 1, pname, praces);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Races", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
/*
CMD:topmbs(playerid)
{
    
    format(query, sizeof(query), "SELECT name,MB_found FROM players WHERE reg_id ORDER BY MB_found DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopMB", "i", playerid);
    return true;
}

function ShowTopMB(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
                pmb = 0;

            MySQL_getString(i, 0, pname);
            pmb = MySQL_getInt(i, 1);

            format(tmp, sizeof(tmp), ""WHITE_E"\n %i)%s - Moneybag found: %d", count + 1, pname, pmb);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Moneybag Hunters", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}*/
CMD:topduels(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,duels_won,color FROM players WHERE reg_id ORDER BY duels_won DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopDuels", "i", playerid);
    return true;
}

function ShowTopDuels(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
		//	 color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
			//	pcolor,
                pduels = 0;

            MySQL_getString(i, 0, pname);
            pduels = MySQL_getInt(i, 1);
          //  pcolor = MySQL_getInt(i, 2);
		//	color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Duels won: %d", count + 1, pname, pduels);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Duels", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topgbs(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,gbs,color FROM players WHERE reg_id ORDER BY gbs DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopGB", "i", playerid);
    return true;
}

function ShowTopGB(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
	//		color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
//				pcolor,
                pgbs = 0;

            MySQL_getString(i, 0, pname);
            pgbs = MySQL_getInt(i, 1);
//           pcolor = MySQL_getInt(i, 2);
      //      color = StripAlpha(pcolor);

            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - gbs: %d", count + 1, pname, pgbs);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top GC Hunter", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}

CMD:topkillstreaks(playerid) return cmd_topks(playerid);
CMD:topks(playerid)
{
    format(query, sizeof(query), "SELECT name,killstreak,color FROM players WHERE reg_id ORDER BY killstreak DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopKillstreaks", "i", playerid);
    return true;
}

function ShowTopKillstreaks(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
	//		 color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
//				pcolor,
                pks = 0;

            MySQL_getString(i, 0, pname);
            pks = MySQL_getInt(i, 1);
           // pcolor = MySQL_getInt(i, 2);
      //      color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Kill streaks: %d", count + 1, pname, pks);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Killstraks", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topreactions(playerid) return cmd_toprecs(playerid);
CMD:toprecs(playerid)
{
    format(query, sizeof(query), "SELECT name,rtests,color FROM players WHERE reg_id ORDER BY rtests DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopRecs", "i", playerid);
    return true;
}

function ShowTopRecs(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
	//		color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
//				pcolor,
                precs = 0;

            MySQL_getString(i, 0, pname);
            precs = MySQL_getInt(i, 1);
        //    pcolor = MySQL_getInt(i, 2);
       //     color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Reactions Test won: %d", count + 1, pname, precs);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Reactions", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topmaths(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,maths,color FROM players WHERE reg_id ORDER BY maths DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopMaths", "i", playerid);
    return true;
}

function ShowTopMaths(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
	//		color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
//				pcolor,
                pmaths = 0;

            MySQL_getString(i, 0, pname);
            pmaths = MySQL_getInt(i, 1);
          //  pcolor = MySQL_getInt(i, 2);
      //      color = StripAlpha(pcolor);
            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - Maths won: %d", count + 1, pname, pmaths);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Maths", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:topar(playerid) return cmd_toparrests(playerid);
CMD:toparrests(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
    format(query, sizeof(query), "SELECT name,arrests,color FROM players WHERE reg_id ORDER BY arrests DESC LIMIT 30;");
    MySQL_query(query, true, "ShowTopAR", "i", playerid);
    return true;
}

function ShowTopAR(playerid)
{
    new rows = MySQL_rowCount();
    if(rows)
    {
        new count = 0,
//			color,
            finstring[2400];

        for(new i = 0; i < rows; i++)
        {
            new pname[25],
//				pcolor,
                parr = 0;

            MySQL_getString(i, 0, pname);
            parr = MySQL_getInt(i, 1);
          //  pcolor = MySQL_getInt(i, 2);
//            color = StripAlpha(pcolor);

            format(tmp, sizeof(tmp), ""WHITE_E"\n%i)%s - CNR Arrests: %d",count + 1, pname, parr);
            strcat(finstring, tmp);
            count++;
        }
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Top Arrests", finstring, "OK", "");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no records to show!");
	}
}
CMD:vmenu(playerid) return cmd_vctrl(playerid);
CMD:vcontrol(playerid) return cmd_vctrl(playerid);
CMD:vctrl(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "LB_E"Vehicle Control", "Engine control\nLight control\nAlarm\nLock or Unlock\nBonnet\nBoot\nCustom Licence Plate", "Toggle", "Cancel");
	}
	else Error(playerid, "You must be the driver of a vehicle to use this command!");
	return 1;
}

CMD:register(playerid)
{
	if(pLogged[playerid] == true)
		return Error(playerid, "You are already registered and logged in!");

	GetPlayerName(playerid, PlayerName, sizeof(PlayerName));
	if(GetPVarInt(playerid, "CantRegister"))
	{
	    Error(playerid, "This account is already in use! Re-connect with a new nick!");
	    return 1;
	}
    ShowRegisterDialog(playerid);
	return true;
}

//===================Lotto
forward STARTLOTTO();
public STARTLOTTO()
{
    if(IsLottoRunning == false)
    {
    format(str, sizeof(str), ""IVORY_E"[LOTTO]: "WHITE_E"Lotto is now active! Current jackpot is $%d [/lotto <1-50>]", Jackpot);
    SendClientMessageToAll(COLOR_WHITE, str);

    KillTimer(tLottoTimer);
    tLottoTimer = SetTimer("JPDraw", LOTTO_DRAW*1000*60, true); //Updates the jackpot}
    tLottoTimer = SetTimer("LOTTOTIME", 900000, true); //Updates the jackpot}
    IsLottoRunning = true;
    return 1;
	}
    return 1;
}
forward LOTTOTIME();
public LOTTOTIME()
{
    if(IsLottoRunning == true)
    {
    format(str, sizeof(str), ""IVORY_E"[LOTTO]: "WHITE_E"Lotto is going to draw in 5 minutes! Current jackpot is $%d [/lotto <1-50>]", Jackpot);
    SendClientMessageToAll(COLOR_WHITE, str);

    return 1;
	}
    return 1;
}
forward RAISEJP();
public RAISEJP()
{
    if(IsLottoRunning == true)
    {
    Jackpot = Jackpot + LOTTO_JACKPOT; //Ads to the lotto jackpo
    }
    return 1;
}
CMD:lotto(playerid, params[])
{
	if(IsLottoRunning == false)
	      return SendClientMessage(playerid, COLOR_RED, "[INFO] Lotto isn't active");
	new lottot;
	if(sscanf(params, "d", lottot))
	{
	    Usage(playerid, "/lotto <1-50>");
	    return true;
	}
	if(lottot > 50) return Error(playerid, "Lotto number ticket can't be greater than 50");
    if(lottot < 1) return Error(playerid, "Lotto number ticket can't be lesser than 1");
    if(Numbers[lottot] == 1) //If the number is used
            return SendClientMessage(playerid, COLOR_RED, "[INFO] Lotto ticket is already taken");

    if(GetPVarInt(playerid, "LottoNumber") != 0)
          return SendClientMessage(playerid, COLOR_RED, "[INFO] You have already got a lotto number");

    SetPVarInt(playerid, "LottoNumber", lottot); //Sets the players number
    Numbers[lottot] = 1; //Number is used
    GivePlayerCash(playerid, -TICKET_COST); //Takes away the ticket cost.

    format(tmp, sizeof(tmp), "~y~~h~Your Lotto Ticket: ~n~~w~%d", lottot);
    GameTextForPlayer(playerid, tmp, 3500, 3);
    format(str, sizeof(str), "~r~~h~-$%d", TICKET_COST);
    MSTD_MSG(playerid, 3500, str);
    Jackpot = Jackpot + LOTTO_JACKPOT; //Ads to the lotto jackpot
    format(str, sizeof(str), ""IVORY_E"[LOTTO]: "WHITE_E"Current jackpot is $%d", Jackpot);
    SendClientMessage(playerid, COLOR_RED, str);
    return 1;
}
forward JPDraw();
public JPDraw()
{
  if(IsLottoRunning == true)
  {
    IsLottoRunning = false;
    KillTimer(tLottoTimer);
    new Lnum = random(50) + 1; //Picks a random number
    new winner = -1; //Winners ID variable
    new Pname[24];
    GetPlayerName(winner, Pname, 24);
    for(new i; i<MAX_PLAYERS; i++) //checks through all players
    {
        if(!IsPlayerConnected(i)) continue; //Players not connected
        if(GetPVarInt(i, "LottoNumber") == Lnum) winner = i; //If the players number is the winning number
        SetPVarInt(i, "LottoNumber", 0); //Resets the number
    }
    if(winner != -1) //If there was a winner
    {
        new ldstr[200];
        SendClientMessageToAll(COLOR_WHITE, "|----------------{FFFF82}Lotto Information{FFFFFF}-----------------|"); //Lotto info
        format(ldstr, sizeof(ldstr), ""WHITE_E"Lotto Drawn! Lotto Winner is %s(%d) by ticket %d has won $%d jackpot!", Pname, winner, Lnum, Jackpot);
        SendClientMessageToAll(COLOR_WHITE, ldstr); //Lotto info
        SendClientMessageToAll(COLOR_WHITE, "Good Luck for the next lotto!"); //Lotto info
        SendClientMessageToAll(COLOR_WHITE, "|------------------------------------------------------------------|"); //Lotto info
        format(str, sizeof(str), "~y~Lotto drawn");
		GameTextForAll(str, 3500, 1);
		printf("Lotto draw winner");
        GivePlayerCash(winner, Jackpot); //Gives the winner the cash
        format(str, sizeof(str), "~g~~h~~h~+$%d", Jackpot);
        MSTD_MSG(winner, 3500, str);
        Jackpot = LOTTO_START; //Resets the jackpot
    }
    if(winner == -1) //No winner
    {
        new ldstr[200];
        SendClientMessageToAll(COLOR_WHITE, "|----------------{FFFF82}Lotto Information{FFFFFF}-----------------|"); //Lotto info
        format(ldstr, sizeof(ldstr), ""WHITE_E"Lotto Drawn! There was no lotto winner for this draw. Drawn Number: %d and Current Jackpot: $%d", Lnum, Jackpot);
        SendClientMessageToAll(COLOR_WHITE, ldstr); //Lotto info
        SendClientMessageToAll(COLOR_WHITE, "Good Luck for the next lotto!"); //Lotto info
        SendClientMessageToAll(COLOR_WHITE, "|------------------------------------------------------------------|"); //Lotto info
        format(str, sizeof(str), "~y~Lotto drawn");
		GameTextForAll(str, 3500, 1);
		printf("Lotto draw no winner");
		Jackpot = LOTTO_START; //Resets the jackpot
	}
    for(new s; s<50; s++)
    {
        Numbers[s] = 0; //Resets all numbers so they are usable.
    }
    return 1;
    }
    return 1;
}
//=========================================
CMD:login(playerid)
{
	if(pLogged[playerid] == true)
		return Error(playerid, "You are already logged in!");
	return true;
}


CMD:serverstats(playerid) return cmd_uptime(playerid);
CMD:uptime(playerid)
{
	localtime(serverStartTime, tmParam);
	strftime(tmp, sizeof(tmp), "%B %d %Y, %H:%M", tmParam);
	new line2[700];
	new line3[700];

	format(line2, sizeof(line2), ""WHITE_E"Server is up for %s since %s. During that time...\n\n",Uptime(), tmp);
	strcat(line2, line3);

	format(line3, sizeof(line3), "\
		\n"WHITE_E".... "YELLOW_E"%s "WHITE_E"chat messages have been sent\n\
		"WHITE_E".... "YELLOW_E"%s "WHITE_E"teleports have been used\n\
		"WHITE_E".... "YELLOW_E"%s "WHITE_E"commands have been used\n\
		"WHITE_E".... "YELLOW_E"%d "WHITE_E"most players have been online\n\
		"WHITE_E".... "YELLOW_E"%s "WHITE_E"new players have registered\n", ToCurrency(msgsSent), ToCurrency(telesUsed), ToCurrency(cmdsUsed), joinPlayerCount, ToCurrency(pRegs)
	);
	strcat(line2, line3);
	format(line3, sizeof(line3), "\
        "WHITE_E".... "YELLOW_E"%s "WHITE_E"total players have been joined"WHITE_E"\n\
		"WHITE_E".... "YELLOW_E"%s "WHITE_E"queries have been sent"WHITE_E"\n\n\
		"WHITE_E"Total objects: %s"WHITE_E"\n\
		"WHITE_E"Record player count: %d\n\n\
 	    ",
		ToCurrency(totalPlayersJoined), ToCurrency(mysqlQueries), ToCurrency(CountDynamicObjects()), CountDynamicPickups(), CountDynamicCPs(), CountDynamic3DTextLabels(),
		Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT), ToCurrency(RegisteredPlayers)
	);
	strcat(line2, line3);

	format(line3, sizeof(line3), "\
        "WHITE_E"Server Version - Ultimate Funky Freeroam Build 7 on SA-MP 0.3.7 R2");
	strcat(line2, line3);
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF "WHITE_E":: Server Statistics", line2, "OK", "");
	return 1;
}

CMD:syncfooter(playerid)
{

	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	SyncFooter();
	SendClientMessage(playerid, COLOR_GREY2, ""RED_E"> "GREY_E"You have sync'd the footer textdraw.");
	return true;
}

stock SyncFooter()
{
	// Syncs the DM footer textdraw
	BattleField = 0;
	Rocket = 0;
	WarDM = 0;
	Mini = 0;
	TDM = 0;
	CnR = 0;
	GunGame = 0;
	foreach(Player, ii)
	{
 		if(InDM[ii] == 1) BattleField++;
		if(InDM[ii] == 4) Rocket++;
		if(InDM[ii] == 5) WarDM++;
		if(InDM[ii] == 7) Mini++;
		if(InDM[ii] == 10) TDM++;
		if(InDM[ii] == 13) CnR++;
		if(InDM[ii] == 63) GunGame++;
	}
	UpdateDMText();
}

CMD:opengate(playerid)
{

	if(GetPVarInt(playerid, "Robber") != 0)
	{
		MoveObject(Gate[0], 1397.24, 2688.04, 9.91, 3);
		MoveObject(Gate[1], 1397.24, 2701.15, 9.91, 3);
		SetTimer("CloseRobberGate", 2500, false);
	}
	else Error(playerid, "Only the Robbers class can open gates!");
	return true;
}

CMD:opencopgate(playerid)
{
    if(GetPVarInt(playerid, "Cop") != 0)
	{
		MoveObject(Gate[7], 2237.28, 2458.01, 9.88, 5);
		SetTimer("CloseCopGate", 3500, false);
	}
	return true;
}
CMD:open(playerid)
{
	if(IsInHouse{playerid} == 1)
	{
		MoveDynamicObject(Gate[2], 297.6939, 1829.9515, 995.7505, 2);
		SetTimer("CloseHouseGate", 3000, false);
		GameTextForPlayer(playerid,"~g~~h~Opening..", 2000, 5);
	}
	else Error(playerid, "You must be in your house to open the gate!");
	return true;
}

CMD:bet(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(g_DuelInProgress == 0)
		return Error(playerid, "There is no duel in progress, you can't make a bet!");

	if(GetPVarInt(playerid, "betPlayer") != -1)
 		return Error(playerid, "You have already made a bet, wait till the duel is over!");
    if(doingStunt[playerid] != 72)
    	return Error(playerid, "You can only bet while spectating the duel! (/watchduel))");
	if(canBet == 0)
		return Error(playerid, "It's too late to make a bet, you must make a bet in the first 15 seconds!");
	if(InDuel[playerid] != 0)
		return Error(playerid, "You can't place a bet while dueling!");
	new amount;
	if(sscanf(params, "ui", otherid, amount))
	{
	    Usage(playerid, "/bet <ID> <Amount>");
 		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(InDuel[otherid] == 0)
		return Error(playerid, "That player is not in a duel!");
	if(otherid == playerid)
 		return Error(playerid, "You can't bet on yourself!");
	if(!(999 < amount < 50001) && pAdmin[playerid] != 5)
		return Error(playerid, "Bets must be between $1,000 and $50,000!");
	if(amount > pCash[playerid]) return Error(playerid, "You don't have enough money to place this bet!");
	GivePlayerCash(playerid, -amount);
	format(str, sizeof(str), ""RED_E"[BET] "LIME_E"%s(%d) has bet "LG_E"$%s "LIME_E"on %s(%d)!", pName[playerid], playerid, ToCurrency(amount), pName[otherid], otherid);
	foreach(Player, i)
 	{
  		if(doingStunt[i] == 72) SendClientMessage(i, COLOR_WHITEP, str);
	}
 	format(str, sizeof(str), "~w~%s(%d) has bet ~g~~h~$%s ~w~on you!", pName[playerid], playerid, ToCurrency(amount));
	InfoTD_MSG(otherid, 4000, str);

	SetPVarInt(playerid, "betPlayer", otherid);
	SetPVarInt(playerid, "betAmount", amount);
	return 1;
}

CMD:hit(playerid, params[]) return cmd_hitman(playerid, params);
CMD:hitman(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    new moneys;
    if (sscanf(params, "ud", otherid, moneys))
	{
        Usage(playerid, "/hit <ID/Name> <amount>");
        SendClientMessage(playerid, COLOR_WHITEP,""ORANGE_E"FUNCTION: "WHITEP_E"Will place a hit on the player on the amount specified.");
        return 1;
    }

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

    if(otherid == playerid) return Error(playerid, "You cannot put a bounty on Yourself");
    if(moneys > pCash[playerid]) return Error(playerid, "You don't have enough money to put this bounty!");
    if(moneys > 5000000 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't place hits more than $5,000,000!");
	if(moneys < 1000 && pAdmin[playerid] == 0)
		return Error(playerid, "You can't place hits less than $1,000!");
	if(moneys < 1 || moneys > 20000000)
		return Error(playerid, "Staff members can only place hits between 1 and 20m!");

    if(GOD[otherid] == 1) return Error(playerid, "The selected player currently has godmode enabled!");
    if(doingStunt[otherid] != 0) return Error(playerid, "The selected player is currently in a minigame or challenge.");

   	if(GetPVarInt(playerid, "PlacedHit") == 0)
	{
        bounty[otherid]+=moneys;
        GivePlayerCash(playerid, -moneys);
		format(str, sizeof(str), "[HIT] "ORANGE_E"%s(%d) has had a "LG_E"$%s "ORANGE_E"bounty put on his head from %s(%d). (Total: $%s)", pName[otherid], otherid, ToCurrency(moneys), pName[playerid], playerid, ToCurrency(bounty[otherid]));
        SendClientMessageToAll(COLOR_RED, str);
		InfoTD_MSG(otherid, 4500, "~r~Someone has placed a hit on you!");
		SetPlayerAttachedObject(otherid, 7, 1254,2,0.440999,0.000000,0.023000,-1.799999,84.099983,0.000000,1.000000,1.000000,1.000000);
        format(str, sizeof(str), ""RED_E"INFO: "GREY2_E"You have had a "LG_E"$%s "GREY2_E"bounty put on you from %s (ID:%d).", ToCurrency(moneys), pName[playerid], playerid);
        SendClientMessage(otherid, COLOR_GREY, str);
		Info(otherid, "Other players will try to kill you for the bounty, watch out!");
		Info(playerid, "Type /removehit to remove this bounty at anytime.");
		SetPlayerWantedLevel(otherid, 5);
        SetPVarInt(playerid, "PlacedHit", 1);
        SetTimerEx("HitReset", 120000, false, "i", playerid);
        SetPVarInt(otherid, "Hitman", playerid);
        new hits = GetPVarInt(otherid, "hits") + 1;
		SetPVarInt(otherid, "hits", hits);
		//SetPVarInt(playerid, "hitMan", otherid);
		//SetPVarInt(playerid, "hitAmount", moneys);
    }
    else Error(playerid, "You've just recently placed a hit, Please wait before placing another hit!");
	return 1;
}
CMD:removehit(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if (sscanf(params, "u", otherid))
	{
        Usage(playerid, "/removehit <ID/Name>");
        SendClientMessage(playerid, COLOR_WHITEP,""ORANGE_E"FUNCTION: "WHITEP_E"Will remove the hit on the player");
        return 1;
    }
  	if(GetPVarInt(otherid, "Hitman") != playerid) return Error(playerid, "You don't have a hit on this player!");
   	if(GetPVarInt(otherid, "hits") > 1) return Error(playerid, "Player has more than one hit on him, you can't cancel it!");

	format(str, sizeof(str), ""RED_E"[HIT] "ORANGE_E"%s(%d) has removed the hit on %s(%d)", pName[playerid], playerid, pName[otherid], otherid);
    SendClientMessageToAll(COLOR_ORANGE, str);
    format(str, sizeof(str), ""RED_E"INFO: "GREY2_E"%s(%d) has removed the hit on you.", pName[playerid], playerid);
 	SendClientMessage(otherid, COLOR_GREY, str);
 	GivePlayerCash(playerid, bounty[otherid]);
    bounty[otherid] = 0;
    SetPVarInt(otherid, "Hitman", -1);
	//SetPVarInt(playerid, "hitMan", -1);
	//DeletePVar(playerid, "hitAmount");
    return 1;
}
CMD:hits(playerid) return cmd_bounties(playerid);
CMD:bounties(playerid)
{
	new bigStr[1800], count = 0;

	strcat(bigStr, ""RED_E"Current Bounties:\n\n");
	foreach(Player, ii)
	{
		if(bounty[ii] > 0)
	    {
	    	count++;
		    format(str, sizeof(str), ""LB_E"%s(%i) "ORANGE_E"Hit Contract: "LG_E"$"WHITE_E"%s", pName[ii], ii, ToCurrency(bounty[ii]));
			strcat(bigStr, str);
      	}
	}
	if(count == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "No hit contracts at the moment.");
	}
	else ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITE_E"Hit Contracts", bigStr, "OK", "");
	return 1;
}

forward HitReset(playerid);
public HitReset(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		DeletePVar(playerid, "PlacedHit");
  	}
}
function CloseRobberGate()
{
	// Return gate back to Original pos.
	MoveObject(Gate[0], 1397.24, 2694.51, 9.91, 3);
	MoveObject(Gate[1], 1397.24, 2693.86, 9.91, 3);
}

function CloseCopGate()
{
	// Return gate back to Original pos.
	MoveObject(Gate[7], 2237.28, 2448.85, 9.88, 3);
}


function CloseHouseGate()
{
	// Return gate back to Original pos.
	MoveDynamicObject(Gate[2], 297.65, 1829.88, 993.17, 3);
}

function CloseDuelGate()
{
	// Return gate back to Original pos.
	MoveDynamicObject(Gate[3], 2181.28, -2265.28, 924.07, 3);
	MoveDynamicObject(Gate[4], 2180.94, -2224.84, 924.07, 3);
}

function OpenDuelGate()
{
	// Open Duel Gates
	MoveDynamicObject(Gate[3], 2181.2761, -2265.2842, 919.6684, 7.5);
	MoveDynamicObject(Gate[4], 2180.9387, -2224.8384, 919.6684, 7.5);
}

function CloseBets()
{
	// Close duel betting
	canBet = 0;
	betTimer = -1;
}


CMD:arrest(playerid) return cmd_ar(playerid);
CMD:ar(playerid)
{
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 75.0, 1312.5220, 2672.7532, 11.2392) || IsPlayerInRangeOfPoint(playerid, 75.0, 2799.3889, 1313.0559, 10.5244))
		{
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You can't make arrests near the criminal spawn zone!");
	        return 1;
		}
		if(killCamON[playerid] == true || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return Error(playerid, "You can't arrest players with the killcam on!");
		new rangepass;
		new Float:x, Float:y, Float:z;
		foreach(Player, ii)
		{
	    	if(ii == playerid) continue;
      		GetPlayerPos(ii, x, y, z);
   		 	if(IsPlayerInRangeOfPoint(playerid, 3.8, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(ii) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(ii))
    		{
	    		if(IsPlayerInAnyVehicle(playerid))
				{
				    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(ii)) return 1;
				}
				else if(IsPlayerInAnyVehicle(ii)) return 1;
    			if(GetPVarInt(ii, "Robber") != 0 && GetPVarInt(ii, "Cop") == 0 && pJail[ii] == 0 && pSpectating[ii] == -1 && pSpawned[ii] == 1)
				{
				    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return Error(playerid, "You can't arrest players as a passenger!");
				    if(pSpawned[ii] == 0) return Error(playerid, "Player you're trying to arrest is dead!");
				    if(GetPVarInt(ii, "JustEscaped") == 1) return Error(playerid, "Player just escaped from his arrest, please wait before arresting them!");
					rangepass++;
					pArrests[playerid]++;
    				SetPlayerSpecialAction(ii, SPECIAL_ACTION_CUFFED);
				    ApplyAnimation(playerid, "PED", "ARRESTgun", 4.0, 0, 0, 0, 0, 0);
				    switch(GetPVarInt(playerid, "Cop"))
					{
					    case 1: format(str, sizeof(str), ""DARK_E"[CnR] "LIME_E"Suspect %s(%d) has been arrested by Officer %s(%d).", pName[ii], ii, pName[playerid], playerid);
						case 2: format(str, sizeof(str), ""DARK_E"[CnR] "LIME_E"Suspect %s(%d) has been arrested by "LB_E"Swat Captain "LIME_E"%s(%d).", pName[ii], ii, pName[playerid], playerid);
						case 3: format(str, sizeof(str), ""DARK_E"[CnR] "LIME_E"Suspect %s(%d) has been arrested by "PURPLE_E"Army Officer "LIME_E"%s(%d).", pName[ii], ii, pName[playerid], playerid);
					}
					SendCNRMessage(COLOR_GREY2, str);
					format(str, sizeof(str), "4CnR: 2%s(%i) has been arrested by Officer %s(%d)", pName[ii], ii, pName[playerid], playerid);
					IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
					new Float:pHealth;
					GetPlayerHealth(ii, pHealth);
					SetPVarFloat(ii, "pHealth", pHealth);
					SetPlayerHealth(ii, 99999);
					SetTimerEx("ResetCnRHealth", 3500, false, "i", ii);
				    pJail[ii] = 33;
				    pJailTimer[ii] = SetTimerEx("JailPlayer", 3000, false, "i", ii);
				    SendClientMessage(ii, COLOR_BLUE, ""UFF" "RED_E"You have been cuffed and arrested!");
				    SendClientMessage(ii, COLOR_BLUE, ""UFF" "RED_E"You will serve 30 seconds in jail.");
				    GameTextForPlayer(ii, "~r~arrested~w~!~n~Type /breakcuffs (/bc)~n~to escape!", 4000, 5);
				    GameTextForPlayer(playerid, "~r~~h~~h~Suspect Arrested!", 4000, 5);
				    GivePlayerCash(playerid, 6500);
					GivePlayerScore(playerid, 2);
					GivePlayerGB(playerid, 1);
				    SendClientMessage(playerid, COLOR_GREEN, ""RED_E"- CnR -  "GREEN_E"You have received 2 score and $6500 for catching a criminal!");
				    format(query, sizeof(query), "UPDATE players SET arrests=arrests+1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					if(pGroupID[playerid] != -1)
					{
						if(pGroupID[ii] != pGroupID[playerid])
					  	UpdateGroupScore(pGroupID[playerid], 1);
				 	}
				 	pTimesArrested[ii]++;
					format(query, sizeof(query), "UPDATE players SET times_arrested=times_arrested+1 WHERE reg_id=%d", pRegID[ii]);
					MySQL_updateQuery(query);
					SetPVarInt(ii, "Arrester", playerid);
                    if(RobberyCount[playerid] != 0)
                    {
						KillTimer(RobberyTimer[ii]);
						GameTextForPlayer(ii, " ", 1000, 3);
						RemovePlayerAttachedObject(ii, 8);
						SendClientMessage(ii, COLOR_GREY, ""RED_E"Server: "GREY_E"Robbery Failed.");
						RobberyCount[ii] = 0;
					}

					// Check if achievement was completed
				    if(pArrests[playerid] >= 50)
					{
					    if(pAch17[playerid] == 0)
						{
							pAch17[playerid] = 1;
							format(query, sizeof(query), "UPDATE achievements SET a17=1 WHERE reg_id=%d", pRegID[playerid]);
							MySQL_updateQuery(query);
							GivePlayerAchievement(playerid, "Elite Cop", "Congrats you arrested 50 criminals!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
						}
					}
	    		}
    		}
   		}
  		if(rangepass == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"No criminals near your range.");
		}
	}
	else Error(playerid, "You must be a cop while in a /CnR minigame to use this command!");
	return true;
}
CMD:escape(playerid)
{
	if(GetPVarInt(playerid, "Robber") == 0 && pJail[playerid] == 0)
		return Error(playerid, "You must be a robber while in jail to use this command!");

	if(GetPVarInt(playerid, "HasEscaped") == 1)
 		return Error(playerid, "You have already attempted to escape!");

	if(GetPVarInt(playerid, "JailedByAdmin") == 1)
 		return Error(playerid, "You can't attempt to escape as you've been jailed by an admin.");

	if(pJail[playerid] == 0)
		return Error(playerid, "You are not in jail");

	SetPVarInt(playerid, "HasEscaped", 1);
	switch(random(5))
	{
	    case 0..1:
		{
			pJail[playerid] = 0;
			GameTextForPlayer(playerid, "~b~~h~escaped!", 5000, 3);
			SendClientMessage(playerid, COLOR_ORANGE, "*** "RED_E"You have escaped from jail, the cops have been notified!");
			format(str, sizeof(str), "4CNR:3 Suspect %s(%i) has successfully escaped from jail!", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			SetPlayerPosition(playerid, 2290.6777,2423.7139,10.8203,181.2573);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 20);
			format(str, sizeof(str), ""RED_E"*** %s(%d) has escaped from prison!", pName[playerid], playerid);
			SendCNRMessage(COLOR_RED, str);
			DeletePVar(playerid, "HasEscaped");
			if(GetPVarInt(playerid, "Robber") == 1)
			{
				GivePlayerWeapon(playerid, 5, 500); // Bat
				GivePlayerWeapon(playerid, 29, 800); // MP5
				GivePlayerWeapon(playerid, 30, 1000); //AK
				GivePlayerWeapon(playerid, 24, 300); // Deagle
				GivePlayerWeapon(playerid, 27, 200); //Combat
				GivePlayerWeapon(playerid, 16, 1); // 1 Nade
			}
			else
			{
				GivePlayerWeapon(playerid, 4, 500); // Knife
				GivePlayerWeapon(playerid, 29, 1200); // MP5
				GivePlayerWeapon(playerid, 31, 2000); //AK
				GivePlayerWeapon(playerid, 24, 600); // Deagle
				GivePlayerWeapon(playerid, 27, 500); //Combat
				GivePlayerWeapon(playerid, 16, 3); // 3 Nade
				GivePlayerWeapon(playerid, 34, 200); // Sniper Rifle
			}
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPVarInt(playerid, "JustEscaped", 1);
			SetTimerEx("ResetEscape", 10000, false, "i", playerid);
		}
		case 2..4:
		{
			pJail[playerid] += 20;
			GameTextForPlayer(playerid, "~r~escape failed!", 5000, 3);
			SendClientMessage(playerid, COLOR_WHITE, "*** "RED_E"Your escape has failed, 20 seconds added to your jail sentence!");
			format(str, sizeof(str), "4CNR:3 Suspect %s(%i) has failed an escape, 20 seconds added to jail time.", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			format(str, sizeof(str), ""BLUE_E"COP RADIO: "LB2_E"Suspect %s(%d) has failed an attempt escape from jail.", pName[playerid], playerid);
			foreach(Player, ii)
   			{
    			if(GetPVarInt(ii, "Cop") != 0)
				{
					SendClientMessage(ii, COLOR_LB, str);
				}
			}
		}
	}
	return true;
}

CMD:breakcuffs(playerid) return cmd_bc(playerid);
CMD:bc(playerid)
{
	if(GetPVarInt(playerid, "Robber") == 0)
		return Error(playerid, "You must be a robber in CnR to use this command!");
	if(GetPVarInt(playerid, "Arrester") == 0)
		return Error(playerid, "You must be cuffed to use this command!");

	if(GetPVarInt(playerid, "BCAttempted") == 1)
 		return Error(playerid, "You have already attempted to break your cuffs!");

	SetPVarInt(playerid, "BCAttempted", 1);
	switch(random(5))
	{
	    case 0..1:
		{
			// Arrested
			otherid = GetPVarInt(playerid, "Arrester");
   			pJail[playerid] = 0;
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); // UnCuff
		    KillTimer(pJailTimer[playerid]);
		    GameTextForPlayer(playerid, "~g~~h~~h~Broke Cuffs!", 4000, 5);
		    format(str, sizeof(str), ""DARK_E"[CnR] "LRED_E"%s(%d) has evaded his arrest (Broke Handcuffs)", pName[playerid], playerid);
			SendCNRMessage(COLOR_RED, str);
			DeletePVar(playerid, "Arrester");

			format(str, sizeof(str), ""DARK_E"[CnR] "RED_E"%s(%d) has evaded your arrest, you haven't recieved your reward for this arrest!", pName[playerid], playerid);
			SendClientMessage(otherid, COLOR_RED, str);
			GivePlayerCash(otherid, -6500);
			GivePlayerScore(otherid, -2);
			GivePlayerGB(otherid, -1);
			format(query, sizeof(query), "UPDATE players SET arrests=arrests-1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			pArrests[otherid]--;
			pTimesArrested[playerid]--;
			format(query, sizeof(query), "UPDATE players SET times_arrested=times_arrested-1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			SetPVarInt(playerid, "JustEscaped", 1);
			SetTimerEx("ResetEscape", 10000, false, "i", playerid);
			DeletePVar(playerid, "BCAttempted");
		}
		case 2..4:
		{
			GameTextForPlayer(playerid, "~r~escape failed!", 5000, 3);
			SendClientMessage(playerid, COLOR_WHITE, "*** "RED_E"Your attempt to break your cuffs has failed, you will now serve jail time!");
			format(str, sizeof(str), "4CNR:3 Suspect %s(%i) has failed to broke his cuffs.", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		}
	}
	return true;
}
CMD:bk(playerid) return cmd_backup(playerid);
CMD:backup(playerid)
{
    if(InDM[playerid] != 13 ) return Error(playerid, "You must in the CnR minigame to use this command!!");

	if(GetPVarInt(playerid, "CalledBackup") == 2)
	{
		SendClientMessage(playerid, COLOR_RED, "Server: "YELLOW_E"You can only call backup 2 times per minute!");
		return true;
	}
	if(GetPVarInt(playerid, "CalledBackup") == 0) SetTimerEx("ResetBackup", 60000, false, "i", playerid);
	new counts = GetPVarInt(playerid, "CalledBackup") + 1;
	SetPVarInt(playerid, "CalledBackup", counts);

    if(GetPVarInt(playerid, "Cop") != 0)
    {
    	format(str, sizeof(str), ""BLUE_E"COP RADIO: "LB_E"Officer %s(%d) is requesting backup! Location: %s", pName[playerid], playerid, GetPlayerLocation(playerid));
		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "Cop") != 0)
			{
				SendClientMessage(ii, COLOR_LB, str);
			}
		}
	}
	else
	{
		format(str, sizeof(str), ""RED_E"ROBBER RADIO: "ORANGE_E"%s(%d) is requesting backup! Location: %s", pName[playerid], playerid, GetPlayerLocation(playerid));
		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "Robber") != 0)
			{
				SendClientMessage(ii, COLOR_ORANGE, str);
			}
		}
	}
	return true;
}
CMD:robstore(playerid)
{
	if(GetPVarInt(playerid, "InStore") != 0)
	{
 		Error(playerid, "You must be in a store to use this command!");
	}
 	else cmd_rob(playerid);
 	return 1;
}
CMD:rob(playerid)
{
	if(GetPVarInt(playerid, "Robber") != 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return Error(playerid, "You must be on foot to commit robberies.");
	    new count;
		if(GetPVarInt(playerid, "InStore") != 0)
		{
			foreach(Player, ii)
			{
				if(GetPVarInt(ii, "Cop") != 0) count++;
			}
			if(count == 0) return Error(playerid, "You can't perform shop robberies with no cops online!");
			if(GetPVarInt(playerid, "HasRobbed") == 0)
			{
			    SetPVarInt(playerid, "HasRobbed", 1);
			    new wanted = GetPlayerWantedLevel(playerid) + 1;
			    SetPlayerWantedLevel(playerid, wanted);
			    SetTimerEx("ResetRobbery", 120000, false, "i", playerid);
			    RobberyCount[playerid] = 20;
			    RobberyTimer[playerid] = SetTimerEx("StartRobbery", 1000, true, "i", playerid);
				SendClientMessage(playerid, COLOR_BLUE, "Server: "ORANGE_E"You have started a robbery, the cops have been notified!");
				ApplyAnimation(playerid,"SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
				SetPlayerAttachedObject(playerid, 8, 1550, 17, -0.253999, -0.149000, -0.016999, 65.699943, 67.599983, 59.299983, 1.000000, 0.849000, 0.956000);
				foreach(Player, ii)
			   	{
		     		if(GetPVarInt(ii, "Cop") != 0)
					{
						format(str, sizeof(str), ""BLUE_E"COP RADIO: "LB_E"Suspect %s(%d) has started a robbery at the %s. Units respond!", pName[playerid], playerid, GetStoreName(playerid));
						SendClientMessage(ii, COLOR_LB, str);
	  				}
  				}
  				format(tmp, sizeof(tmp), "4CnR:3 Suspect %s(%i) has started a robbery at the %s, police have been notified.", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);

			}
			else Error(playerid, "You have recently robbed a shop, you can only rob a store once every 2 minutes.");
  		}
  		else // Robing players.
  		{
  			new rangepass;
  			new amount = random(30000);
			new Float:x, Float:y, Float:z;
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 1322.4818,2673.4373,11.2392) || IsPlayerInRangeOfPoint(playerid, 100.0, 2802.2422,1292.0732,10.7576))
			{
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You can't rob players near the base!");
		        return 1;
			}
			foreach(Player, ii)
			{
	    		if(ii == playerid) continue;
      			if(IsPlayerInAnyVehicle(ii)) continue;
				GetPlayerPos(ii, x, y, z);
   		 		if(IsPlayerInRangeOfPoint(playerid, 3.2, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(ii) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(ii))
    			{
    				rangepass++;
    				if(InDM[ii] == 13 && pSpectating[ii] == -1) // Make sure the other player is in CnR.
					{
						if(GetPVarInt(playerid, "RobbedID") == ii)
						{
							Error(playerid, "You can't rob the same player twice!");
							return true;
	  					}
	  					if(GetPVarInt(playerid, "RobbedPlayer"))
						{
							Error(playerid, "You must wait before robbing another player!");
							return true;
	  					}
	  					if(pJail[playerid] > 0) return Error(playerid, "You can't rob players in jail!");
	  					if(pCash[ii] < amount)
						{
							Error(playerid, "Player does not have enough money to rob from!");
							return true;
	  					}
	  					if(cAFK[playerid] > 8) return Error(playerid, "You can't rob players that are AFK!");

						format(tmp, sizeof(tmp), "~w~%s has robbed you!~n~~r~-$%d~w~!", pName[playerid], amount);
						GameTextForPlayer(ii, tmp, 4000, 5);
						format(tmp, sizeof(tmp), "~w~Robbed %s~n~+~g~$%d", pName[ii], amount);
				    	GameTextForPlayer(playerid, tmp, 4000, 5);
				    	SetPVarInt(playerid, "RobbedID", ii);
				    	SetPVarInt(playerid, "RobbedPlayer", 1);
				    	GivePlayerCash(playerid, amount);
				    	GivePlayerCash(ii, -amount);
				    	SetTimerEx("ResetPlayerRobbery", 40000, false, "i", playerid);
				    	pPlayerRobberies[playerid]++;
						format(query, sizeof(query), "UPDATE players SET probberies=probberies+1 WHERE reg_id=%d", pRegID[playerid]);
						MySQL_updateQuery(query);
						 // Check if achievement was completed
					    if(pPlayerRobberies[playerid] >= 50)
						{
						    if(pAch25[playerid] == 0)
							{
								pAch25[playerid] = 1;
								format(query, sizeof(query), "UPDATE achievements SET a25=1 WHERE reg_id=%d", pRegID[playerid]);
								MySQL_updateQuery(query);
								GivePlayerAchievement(playerid, "Pickpocketer", "Congrats you robbed 50 players!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
							}
						}
  					}
				}
			}
			if(rangepass == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"No players to rob near you.");
			}
		}
	}
	else Error(playerid, "You must be a robber while in a /CnR minigame to use this command!");
	return true;
}

function StartRobbery(playerid)
{
	if(GetPVarInt(playerid, "InStore") == 0)
	{
		KillTimer(RobberyTimer[playerid]);
		GameTextForPlayer(playerid, " ", 1000, 3);
		RemovePlayerAttachedObject(playerid, 8);
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Robbery Failed.");
		RobberyCount[playerid] = 0;
		return true;
	}
 	RobberyCount[playerid]--;
  	if(RobberyCount[playerid] == 0)
	{
		KillTimer(RobberyTimer[playerid]);
		RemovePlayerAttachedObject(playerid, 8);
		foreach(Player, ii)
 		{
 			if(GetPVarInt(ii, "Cop") != 0)
			{
				PlayCrimeReportForPlayer(ii, playerid, 18);
			}
		}
		switch(random(7))
		{
			case 0:
			{
				format(str, sizeof(str), ""DARK_E"[CnR] "LB2_E"%s(%d) has robbed the %s and got away with "LG_E"$50,000", pName[playerid], playerid, GetStoreName(playerid));
				SendCNRMessage(COLOR_LB, str);
	  			format(tmp, sizeof(tmp), "4Server:3 Suspect %s(%i) has robbed the %s and got away with 2$50,000", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				GameTextForPlayer(playerid, "~w~You have robbed ~g~$50000", 5000, 3);
				SendClientMessage(playerid, COLOR_ORANGE, ""UFF" "ORANGE_E"You have successfully completed the robbery and got away with "LG_E"$50,000");
				GivePlayerCash(playerid, 50000);
				if(pPremium[playerid] >= 1)
	   			{
					GivePlayerCash(playerid, 50000);
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"** "GREY_E"As a premium member you have received double cash for this robbery!");
				}
				pRobberies[playerid]++;
				format(query, sizeof(query), "UPDATE players SET robberies=robberies+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			case 1:
			{
				format(str, sizeof(str), ""DARK_E"[CnR] "LB2_E"%s(%d) has robbed the %s and got away with "LG_E"$30,000", pName[playerid], playerid, GetStoreName(playerid));
				SendCNRMessage(COLOR_LB, str);
  				format(tmp, sizeof(tmp), "4Server:3 Suspect %s(%i) has robbed the %s and got away with 2$30,000", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				GameTextForPlayer(playerid, "~w~You have robbed ~g~$30000", 5000, 3);
				SendClientMessage(playerid, COLOR_WHITE, "- "DARK_E"CnR "RED_E"- "GREEN_E"You have successfully completed the robbery and got away with "LG_E"$30,000");
				GivePlayerCash(playerid, 30000);
				if(pPremium[playerid] >= 1)
	   			{
					GivePlayerCash(playerid, 30000);
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"** "GREY_E"As a premium member you have received double cash for this robbery!");
				}
				pRobberies[playerid]++;
				format(query, sizeof(query), "UPDATE players SET robberies=robberies+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			case 2:
			{
				format(str, sizeof(str), ""DARK_E"[CnR] "LB2_E"%s(%d) has robbed the %s and got away with "LG_E"$15,000", pName[playerid], playerid, GetStoreName(playerid));
				SendCNRMessage(COLOR_LB, str);
  				format(tmp, sizeof(tmp), "4Server:3 Suspect %s(%i) has robbed the %s and got away with 2$15,000", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				GameTextForPlayer(playerid, "~w~You have robbed ~g~$15000", 5000, 3);
				SendClientMessage(playerid, COLOR_ORANGE, ""UFF" "ORANGE_E"You have successfully completed the robbery and got away with "LG_E"$15,000");
				GivePlayerCash(playerid, 15000);
				if(pPremium[playerid] >= 1)
	   			{
					GivePlayerCash(playerid, 15000);
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"** "GREY_E"As a premium member you have received double cash for this robbery!");
				}
				pRobberies[playerid]++;
				format(query, sizeof(query), "UPDATE players SET robberies=robberies+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			case 3:
			{
				format(str, sizeof(str), ""DARK_E"[CnR] "LB2_E"%s(%d) has robbed the %s and got away with "LG_E"$10,000", pName[playerid], playerid, GetStoreName(playerid));
				SendCNRMessage(COLOR_LB, str);
  				format(tmp, sizeof(tmp), "4Server:3 Suspect %s(%i) has robbed the %s and got away with 2$10,000", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				GameTextForPlayer(playerid, "~w~You have robbed ~g~$10000", 5000, 3);
				SendClientMessage(playerid, COLOR_ORANGE, ""UFF" "ORANGE_E"You have successfully completed the robbery and got away with "LG_E"$10,000");
				GivePlayerCash(playerid, 10000);
				if(pPremium[playerid] >= 1)
	   			{
					GivePlayerCash(playerid, 10000);
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"** "GREY_E"As a premium member you have received double cash for this robbery!");
				}
				pRobberies[playerid]++;
				format(query, sizeof(query), "UPDATE players SET robberies=robberies+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			case 4:
			{
				format(str, sizeof(str), ""DARK_E"[CnR] "LB2_E"%s(%d) has robbed the %s and got away with "LG_E"$25,000", pName[playerid], playerid, GetStoreName(playerid));
				SendCNRMessage(COLOR_LB, str);
  				format(tmp, sizeof(tmp), "4Server:3 Suspect %s(%i) has robbed the %s and got away with 2$25,000", pName[playerid], playerid, GetStoreName(playerid));
  				IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
				GameTextForPlayer(playerid, "~w~You have robbed ~g~$25000", 5000, 3);
				SendClientMessage(playerid, COLOR_ORANGE, ""UFF" "ORANGE_E"You have successfully completed the robbery and got away with "LG_E"$25,000");
				GivePlayerCash(playerid, 25000);
				if(pPremium[playerid] >= 1)
	   			{
					GivePlayerCash(playerid, 25000);
					SendClientMessage(playerid, COLOR_GREY, ""RED_E"** "GREY_E"As a premium member you have received double cash for this robbery!");
				}
                pRobberies[playerid]++;
				format(query, sizeof(query), "UPDATE players SET robberies=robberies+1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
			case 5..6:
			{
				GameTextForPlayer(playerid, "~r~Robbery Failed", 4000, 3);
				SendClientMessage(playerid, COLOR_ORANGE, "- "DARK_E"CnR "RED_E"- "ORANGE_E"You have failed the robbery and got away with nothing, the cops have been notified.");
			}
		}
		 // Check if achievement was completed
		if(pRobberies[playerid] >= 50)
		{
  			if(pAch24[playerid] == 0)
			{
				pAch24[playerid] = 1;
				format(query, sizeof(query), "UPDATE achievements SET a24=1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
				GivePlayerAchievement(playerid, "Pro Thief", "Congrats you robbed 50 stores!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
			}
		}
		return 1;
	}
	else
	{
		format(str,sizeof(str),"~w~~b~robbery in progress~n~~w~stay in the store~n~~r~%d ~w~seconds left.", RobberyCount[playerid]);
		GameTextForPlayer(playerid, str, 2000, 3);
	}
	return 1;
}
function ResetRobbery(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "HasRobbed");
	return 1;
}
function ResetEscape(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "JustEscaped");
	return 1;
}
function ResetPlayerRobbery(playerid)
{
	if(IsPlayerConnected(playerid)) DeletePVar(playerid, "RobbedPlayer");
	return 1;
}
function JailPlayer(playerid)
{
	pLastVehicle[playerid] = 0;
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	SetPlayerPosition(playerid, 197.5662, 175.4800, 1004.0, 360.0, 3);
	SetPlayerVirtualWorld(playerid, 92);
	SetPlayerWantedLevel(playerid, 0);
	SetPlayerSpecialAction(otherid, SPECIAL_ACTION_NONE);
	ResetPlayerWeapons(playerid);
	TextDrawShowForPlayer(playerid, JailTD);
	SetTimerEx("hideJailTD", 4000, false, "i", playerid);
	PlayerPlaySound(playerid, 1186, 0, 0, 0);
	DeletePVar(playerid, "Arrester");
	DeletePVar(playerid, "BCAttempted");
	DeletePVar(playerid, "InStore");
	return true;
}
CMD:vw(playerid)
{
    if(RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't check your virtual world during a race!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't check your virtual world during a challenge!");
	    return true;
	}
	format(str, sizeof(str), ""UFF" "YELLOW_E"Your virtual world is %d.", GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, COLOR_YELLOW, str);
	return true;
}

CMD:int(playerid, params[]) return cmd_gotoint(playerid, params);
CMD:gotointerior(playerid, params[]) return cmd_gotoint(playerid, params);
CMD:gotoint(playerid, params[])
{
    if(pPremium[playerid] < 1)
		return Error(playerid, "You are not a premium member to use that command (/premium)!");
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "This command cannot be used in a deathmatch!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "This command can't be used here!");
	    return true;
	}
	if(InEvent[playerid] != 0)
	{
		Error(playerid, "This command can't be used in an event!");
	    return true;
	}

	new interiorID;
	if(sscanf(params, "d", interiorID))
	{
		Usage(playerid, "/gotoint <interior ID>");
		return true;
	}
	SetPlayerInterior(playerid, interiorID);

	format(str, sizeof(str), ""UFF" "GREY_E"You have changed your interior to %d!", interiorID);
	SendClientMessage(playerid, COLOR_GREY, str);
	return true;
}
/*
CMD:world(playerid, params[]) return cmd_myworld(playerid, params);
CMD:myworld(playerid, params[])
{
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "This command cannot be used in a deathmatch!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "This command can't be used here!");
	    return true;
	}
	if(InEvent[playerid] != 0)
	{
		Error(playerid, "This command can't be used in an event!");
	    return true;
	}
	if(InEvent[playerid] != 0)
	{
		Error(playerid, "This command can't be used in an event!");
	    return true;
	}
 	if(RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't pick your virtual world during a race, use /cw instead!");
	    return true;
	}
	if(GetPlayerInterior(playerid) != 0) return Error(playerid, "You can't change your virtual world while in an interior!");
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
 		Error(playerid, "You can't change your virtual world as a passenger.");
	    return true;
	}
	if(bounty[playerid] > 0)
		return Error(playerid, "You currently have a hit on you, you can't change worlds!");
	if(sscanf(params, "i", otherid))
	{
	    Usage(playerid, "/myworld <virtual world>");
	    SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Will set you in a seperate virtual world, you won't be able to see players unless they're in the same world as you.");
	    SendClientMessage(playerid, COLOR_RED, "> "ORANGE_E"Type /myworld 10 for no objects.");
	    return true;
	}
	switch(otherid)
 	{
  		case 5, 6, 9, 12, 13, 18, 20, 21, 92, 82, 5050, 5051:  // DM and CNR | Minigames and Challenges
		{
			Error(playerid, "You can't enter this virtual world!");
		    return true;
  		}
	}
	if(otherid == 10)
	{
	    Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
		SetPVarInt(playerid, "HideObjects", 1);
		Info(playerid, "This world disables your objects, objects will re-appear after you teleport");
	}
	else if(GetPVarInt(playerid, "HideObjects") == 1)
 	{
 		DeletePVar(playerid, "HideObjects");
 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
 	SetPlayerVirtualWorld(playerid, otherid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), otherid);
	}
	format(str, sizeof(str), ""UFF" "YELLOW_E"You have changed your virtual world to %d!", otherid);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	if(otherid != 0)SendClientMessage(playerid, COLOR_ORANGE, "Server: "GREY_E"Type /myworld 0 to return back to the normal world.");
	return true;
}*/
/*
CMD:cw(playerid) return cmd_changeworld(playerid);
CMD:changeworld(playerid)
{

    if(doingStunt[playerid] != 6)
		if(doingStunt[playerid] != 7)
			if(doingStunt[playerid] != 9)
				return Error(playerid, "This command can only be used in races and challenges, use /myworld!");

    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
 		Error(playerid, "You can't change your virtual world as a passenger.");
	    return true;
	}
	new vw = random(1000);
 	if(vw == 10 || vw == 20) vw = 98;
  	SetPlayerVirtualWorld(playerid, vw);
	if(IsPlayerInAnyVehicle(playerid)) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), vw);
	SendClientMessage(playerid, COLOR_ORANGE, "Server: "GREY2_E"Your virtual world has been changed!");
	return true;
}*/

CMD:radio(playerid)
{

	ShowPlayerDialog(playerid, 501, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Radio stations",
	""BLUE_E"UFF Radio "PINK_E"(Official Radio)\nBeat FM\nTop 40\nDance\nHipHop\nPop Music\nClassic Rock\nDubstep\nAnon Plus\nYour Own Stream\n"RED_E"Stop Radio", "Play", "Cancel");
	return true;
}

CMD:trailer(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] < 1)
	return Error(playerid, "You are not a premium member to use that command (/premium)!");
	
    if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't spawn a vehicle while in a DM!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
	    return true;
	}
	ShowPlayerDialog(playerid, 3450, DIALOG_STYLE_LIST,
		"Trailers", "{FFE4C4}Article Trailer\n{FFE4C4}Article Trailer 2\n{FFE4C4}Article Trailer 3\n{FFE4C4}Baggage Trailer A\n{FFE4C4}Baggage Trailer B\n{FFE4C4}Farm Trailer\n{FFE4C4}Freight Flat Trailer (Train)\n{FFE4C4}Freight Box Trailer (Train)\n{FFE4C4}Petrol Trailer\n{FFE4C4}Streak Trailer (Train)\n{FFE4C4}Stairs Trailer\n{FFE4C4}Utility Trailer", "Select", "Back");
	return true;
}

CMD:attach(playerid) return cmd_toys(playerid);
CMD:o(playerid) return cmd_toys(playerid);
CMD:toy(playerid) return cmd_toys(playerid);
CMD:toys(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "This command can only be used on foot, exit your vehicle!");
	if(pLogged[playerid] == false) return Error(playerid, "You must be logged in to attach objects to your character!");
	if(!CanPlayerTeleport(playerid)) return true;
	new string[300];

	if(pToys[playerid][0][toy_model] == 0)
	{
	    strcat(string, "Slot 1\n");
	}
	else strcat(string, "Slot 1 "RED_E"(Used)\n");

	if(pToys[playerid][1][toy_model] == 0)
	{
	    strcat(string, "Slot 2\n");
	}
	else strcat(string, "Slot 2 "RED_E"(Used)\n");

	if(pToys[playerid][2][toy_model] == 0)
	{
	    strcat(string, "Slot 3\n");
	}
	else strcat(string, "Slot 3 "RED_E"(Used)\n");

	if(pToys[playerid][3][toy_model] == 0)
	{
	    strcat(string, "Slot 4\n");
	}
	else strcat(string, "Slot 4 "RED_E"(Used)\n");

	if(pToys[playerid][4][toy_model] == 0)
	{
	    strcat(string, "Slot 5 "YELLOW_E"[VIP]\n");
	}
	else strcat(string, "Slot 5 "YELLOW_E"[VIP] "RED_E"(Used)\n");

	if(pToys[playerid][5][toy_model] == 0)
	{
	    strcat(string, "Slot 6 "YELLOW_E"[VIP]\n");
	}
	else strcat(string, "Slot 6 "YELLOW_E"[VIP] "RED_E"(Used)\n");

	ShowPlayerDialog(playerid, TOY_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Player Toys", string, "Select", "Cancel");
	return 1;
}

CMD:object(playerid) return cmd_holdobject(playerid);
CMD:hold(playerid) return cmd_holdobject(playerid);
CMD:holdobject(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	HoldObjects(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, ""BLUE_E"Server: "YELLOW_E"Use /toys to attach permanent objects to your character!");
	return true;
}
CMD:holdoff(playerid) return cmd_dropobject(playerid);
CMD:dropobject(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
	if(!GetPVarInt(playerid, "toysDisabled")) AttachPlayerToys(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, ""BLUE_E"Server: "YELLOW_E"You have removed holding objects to your character!");
	return true;
}
CMD:togtoys(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPVarInt(playerid, "toysDisabled") == 1)
 	{
		DeletePVar(playerid, "toysDisabled");
		AttachPlayerToys(playerid);
		format(tmp, sizeof(tmp), "~y~~h~Toys: ~n~~g~enabled");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
  	}
   	else
	{
		SetPVarInt(playerid, "toysDisabled", 1);
		RemoveItems(playerid);
		format(tmp, sizeof(tmp), "~y~~h~Toys: ~n~~r~disabled");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
	}
	return 1;
}

CMD:deadman(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
	SetPlayerAttachedObject(playerid, 0, 2908, 2, 0.114999, 0.086000, 0.011999, 176.900054, 7.700001, 95.899955, 1.690000, 1.676000, 1.628000);
	SetPlayerAttachedObject(playerid, 1, 2907, 1, 0.000000, 0.057000, 0.025000, -92.900016, -1.900005, 93.599998, 1.254999, 0.982999, 1.482999);
	SetPlayerAttachedObject(playerid, 2, 2905, 12, 0.000000, 0.033000, -0.032999, -1.599999, 0.000000, -70.300010, 1.444999, 1.319999, 1.146999);
	SetPlayerAttachedObject(playerid, 3, 2905, 11, 0.000000, 0.023000, -0.017999, 0.000000, 0.000000, -75.699981, 1.165001, 1.309999, 1.378000);
	SetPlayerAttachedObject(playerid, 4, 2906, 4, 0.338000, -0.009000, 0.044999, 102.700057, 0.000000, -92.600006, 1.551999, 1.222000, 1.640999);
	SetPlayerAttachedObject(playerid, 5, 2906, 3, 0.309000, -0.043999, -0.017000, -93.299942, 0.000000, -99.700027, 1.655999, 1.245000, 1.429000);
	SetPVarInt(playerid, "SpecialObj", 1);
	return 1;
}
CMD:redflare(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	SetPlayerAttachedObject( playerid, ATTACHOBJECT_SLOT_CUSTOM, 18728, 3, 3.147600, -0.303776, -0.873292, 0.000000, 285.771484, 0.000000, 1.000000, 1.000000, 1.000000);
	return true;
}
CMD:trashcan(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
	SetPlayerAttachedObject(playerid, 0, 1409, 1, -0.920380, 0.088453, 0.000000, 3.824895, 87.493751, 0.000000, 1.399999, 2.000000, 1.600000 ); // CJ_Dump1_LOW - trash
	SetPlayerAttachedObject(playerid, 1, 19006, 1, 0.564621, 0.292698, 0.042863, 357.594757, 88.274528, 95.327667, 7.000000, 8.000000, 7.000000 ); // GlassesType1 - glasses
	SetPlayerAttachedObject(playerid, 2, 19077, 1, 0.383622, 0.210077, 0.052282, 0.000000, 0.000000, 0.000000, 9.000000, 12.000000, 10.000000 ); // Hair3 - bighair
	SetPlayerAttachedObject(playerid, 3, 336, 6, -0.348237, -0.503257, 0.314347, 0.000000, 0.000000, 0.000000, 5.000000, 5.000000, 7.000000 ); // bat - bigbat
	SetPVarInt(playerid, "SpecialObj", 1);
	return 1;
}
CMD:swat(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
 	SetPlayerAttachedObject( playerid, 0, 19140, 2, 0.082782, 0.036745, 0.004386, 88.674697, 78.979743, 0.000000, 1.000000, 1.000000, 1.000000 ); // PoliceGlasses3 - POLICEGLASS
	SetPlayerAttachedObject( playerid, 1, 19141, 2, 0.094478, 0.007213, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.200000 ); // SWATHelmet1 - POLICEHELMENT
	SetPlayerAttachedObject( playerid, 2, 19142, 1, 0.009792, 0.041990, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.200000 ); // SWATArmour1 - POLICE VEST
	SetPlayerAttachedObject( playerid, 3, 355, 1, -0.067703, -0.209309, 0.147603, 0.735208, 52.436073, 4.960443, 1.299999, 1.299999, 1.299999 ); // ak47
	SetPVarInt(playerid, "SpecialObj", 1);
	return 1;
}
CMD:guitar(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
    SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM, 19317, 1, 0.193999, -0.104999, 0.011000, 1.900007, 50.199993, 0.000000, 0.957001, 2.302000, 0.953999);
	SetPlayerAttachedObject(playerid, ATTACHOBJECT_SLOT_CUSTOM2, 19319, 5, 0.059000, 0.014000, -0.023000, 155.900009, -30.199981, -175.599914, 1.000000, 1.000000, 1.000000);
	return 1;
}
CMD:incred(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);
	SetPlayerAttachedObject( playerid, 0, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfire left
	SetPlayerAttachedObject( playerid, 1, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfie right
	SetPlayerAttachedObject( playerid, 2, 18703, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // overheat_car - dust right
	SetPlayerAttachedObject( playerid, 3, 18703, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // overheat_car - dustleft
	SetPlayerAttachedObject( playerid, 4, 18965, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000 ); // SkullyCap2 - skull
	SetPVarInt(playerid, "SpecialObj", 1);
	return 1;
}
CMD:weaponizer(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveItems(playerid);

	SetPlayerAttachedObject( playerid, 0, 369, 2, -0.183602, 0.016535, -0.039228, 1.763265, 356.138977, 355.971618, 3.034477, 3.000000, 3.000000 ); // irgoggles - ON FACE
	SetPlayerAttachedObject( playerid, 1, 356, 6, 0.013610, -0.021393, -0.144862, 2.354303, 354.413848, 0.219168, 3.034477, 3.000000, 3.000000 ); // m4 - M4 HAND
	SetPlayerAttachedObject( playerid, 2, 359, 1, 0.000000, -0.232854, -0.241260, 354.348602, 29.348077, 357.846679, 2.000000, 2.000000, 2.000000 ); // rocketla - ROCKETBACK
	SetPlayerAttachedObject( playerid, 3, 363, 7, 0.176143, 0.281574, -0.120761, 79.200103, 267.183990, 337.320526, 1.200000, 1.200000, 1.200000 ); // satchel - packet
	return 1;
}

CMD:ucp(playerid) return cmd_settings(playerid);
CMD:setting(playerid) return cmd_settings(playerid);
CMD:settings(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pLogged[playerid] == false)
		return Error(playerid, "You must be logged in to change/update your settings!");
	if(InDM[playerid] != 0)
		return Error(playerid, "You can't update your settings in a deathmatch!");
	if(doingStunt[playerid] == 18 || doingStunt[playerid] == 19 || doingStunt[playerid] == 33)
		return Error(playerid, "You can't update your settings in a minigame!");

	new str3[15], str4[15], str5[40], str6[15], str7[15], str8[15], str9[15], str10[40], str11[15], str12[15], str13[25], str14[25], str15[25], str16[15], str17[15], str18[15],str19[15],str20[15];

	if(speedBoost[playerid] == 0.0)
 	{
 		str = RED_E"[OFF]";
	}
	else format(str, sizeof(str), ""GREEN_E"[ON] "WHITE_E"(%0.2f)", speedBoost[playerid]);

	if(pBounce[playerid] == 1)
 	{
		str3 = GREEN_E"[ON]";
	}
	else str3 = RED_E"[OFF]";

	if(pSuperJump[playerid] == 1)
 	{
		str11 = GREEN_E"[ON]";
	}
	else str11 = RED_E"[OFF]";

	if(Speedo[playerid] == 1)
 	{
		str12 = GREEN_E"[ON]";
	}
	else str12 = RED_E"[OFF]";

	if(SavedVehicle[playerid] >= 1)
 	{
 	    format(str13, sizeof(str13), GREEN_E"%s", vehName[SavedVehicle[playerid] - 400]);
	}
	else str13 = RED_E"[OFF]";

	if(pColor[playerid] != 0)
	{
 		format(str4, sizeof(str4), "{%06x}Custom", pColor[playerid]);
	}
 	else str4 = RED_E"[OFF]";

 	if(pWheels[playerid] != 0)
 	{
 		if(pWheels[playerid] == 999)
 		{
			str14 = RED_E"[OFF]";
 		}
		else
		{
   			switch(pWheels[playerid])
			{
				case 1074: str14 = GREEN_E"Mega";
		 		case 1075: str14 = GREEN_E"Rimshine";
		 		case 1077: str14 = GREEN_E"Classic";
		 		case 1078: str14 = GREEN_E"Twist";
		 		case 1079: str14 = GREEN_E"Cutter";
		 		case 1080: str14 = GREEN_E"Switch";
		 		case 1081: str14 = GREEN_E"Grove";
		 		case 1082: str14 = GREEN_E"Import";
		 		case 1083: str14 = GREEN_E"Dollar";
		 		case 1085: str14 = GREEN_E"Atomic";
		 		case 1096: str14 = GREEN_E"Ahab";
		 		case 1097: str14 = GREEN_E"Virtual";
		 		case 1098: str14 = GREEN_E"Access";
			}
		}
	}
	else str14 = GREY2_E"Random";

	if(pInfo[playerid][pSaveSkin] != 999)
 	{
 		format(str6, sizeof(str6), ""GREEN_E"%d", pInfo[playerid][pSaveSkin]);
 	}
 	else str6 = RED_E"[OFF]";

 	if(GetPVarInt(playerid, "TDDisabled") == 0)
 	{
		str7 = GREEN_E"[ON]";
 	}
 	else str7 = RED_E"[OFF]";

  	if(GOD[playerid] == 1)
 	{
 		str8 = GREEN_E"[ON]";
 	}
 	else str8 = RED_E"[OFF]";

	if(GetPVarInt(playerid, "PMsDisabled"))
 	{
 	    str9 = RED_E"[OFF]";
	}
 	else str9 = GREEN_E"[ON]";

 	switch(pWeaponSet[playerid])
	{
 		case 0: str10 = RED_E"Default";
		case 1: str10 = GREEN_E"Weapon Set 1";
		case 2: str10 = GREEN_E"Weapon Set 2";
		case 3: str10 = GREEN_E"Weapon Set 3";
	}

	if(pGoTo[playerid] == 0)
 	{
 		str16 = GREEN_E"[ON]";
 	}
 	else str16 = RED_E"[OFF]";

  	if(pPlate[playerid][15] != 0)
 	{
 		format(str15, sizeof(str15), ""GREEN_E"%s", pPlate[playerid]);
	}
 	else str15 = RED_E"[OFF]";

 	if(autoLogin[playerid] == 1)
 	{
 		str17 = GREEN_E"[ON]";
	}
 	else str17 = RED_E"[OFF]";

 	if(pInfo[playerid][phitsound] == 1)
 	{
 		str18 = GREEN_E"[ON]";
	}
 	else str18 = RED_E"[OFF]";
 	
 	if(pInfo[playerid][pHearSong] == 1)
 	{
 		str19 = GREEN_E"[ON]";
	}
 	else str19 = RED_E"[OFF]";

 	if(pInfo[playerid][pVipLogin] == 1)
 	{
 		str20 = GREEN_E"[ON]";
	}
 	else str20 = RED_E"[OFF]";
    new slist1[900];
 	new line3[500];
 	new line4[500];
 	new line6[500];
 	new line5[1200];
 	strcat(slist1, "{FFFFFF}Player Settings\t\t{FFFFFF}ON/OFF\n");
    format(line, sizeof(line), ""WHITE_E"%s\nSpeedboost:\t\t%s\n"WHITE_E"Vehicle Bounce:\t%s\n"WHITE_E"Super Jump:\t\t%s\n"WHITE_E"Player Teleporting:\t%s\n"WHITE_E"Speedometer:\t\t%s\n"WHITE_E"Nick Color:\t\t"GREY2_E"%s", slist1,str, str3, str11, str16, str12, str4);
	format(line3, sizeof(line3), "\n"WHITE_E"Wheels:\t\t"GREY2_E"%s\n"WHITE_E"Weather:\t\t"LB2_E"%d\n"WHITE_E"Time:\t\t\t"LB2_E"%d:00\n"WHITE_E"Saved Skin:\t\t%s\n"WHITE_E"Textdraws:\t\t%s", str14, pWeather[playerid], pTime[playerid], str6, str7);
	format(line4, sizeof(line4), "\n"WHITE_E"GOD Mode:\t\t%s\n"WHITE_E"Private Messages:\t%s\n"WHITE_E"Weapon Set:\t\t%s\n"WHITE_E"Auto Login:\t\t%s\n"WHITE_E"Hit Sound:\t\t%s", str8, str9, str10, str17, str18);
	format(line6, sizeof(line6), "\n"WHITE_E"Hear Song:\t\t%s\n"WHITE_E"VIP Login Message:\t\t%s\n"GREY2_E"My Stats\n"GREY2_E"Change E-Mail\n"GREY2_E"Change Password", str19, str20);
    strcat(line5, line), strcat(line5, line3), strcat(line5, line4), strcat(line5, line6);

	ShowPlayerDialog(playerid, SETTINGS_DIALOG,  DIALOG_STYLE_TABLIST_HEADERS, ""BLUE_E"UFF: "WHITE_E"Player Settings", line5, "Select", "Exit");
	return true;
}
CMD:removewheels(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1073);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1074);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1075);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1077);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1078);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1079);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1080);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1081);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1082);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1083);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1085);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1096);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1097);
	RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1098);
	SendClientMessage(playerid, COLOR_WHITEP, ""RED_E"Server: "WHITEP_E"You have removed your custom wheels.");
	pWheels[playerid] = 999;
	if(pLogged[playerid] == true)
	{
		format(query, sizeof(query), "UPDATE players SET wheels=999 WHERE reg_id=%d", pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return 1;
}

CMD:removecomponents(playerid) return cmd_removetune(playerid);
CMD:removetunes(playerid) return cmd_removetune(playerid);
CMD:removetune(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	new componentid;
	vID = GetPlayerVehicleID(playerid);
	for (new i; i < 14; i++)
	{
	    componentid = GetVehicleComponentInSlot(vID, i);
	    if (componentid != 0)
	    {
	        RemoveVehicleComponent(vID, componentid);
     	}
	}
	if(vID == PlayerVehicle[playerid])
	{
		SendClientMessage(playerid, COLOR_WHITEP, ""UFF" "WHITEP_E"You have removed all the tune components from your private vehicle.");
		PlayerInfoVeh[playerid][Mod1] = 0;
	 	PlayerInfoVeh[playerid][Mod2] = 0;
	  	PlayerInfoVeh[playerid][Mod3] = 0;
	  	PlayerInfoVeh[playerid][Mod4] = 0;
	  	PlayerInfoVeh[playerid][Mod5] = 0;
	  	PlayerInfoVeh[playerid][Mod6] = 0;
	  	PlayerInfoVeh[playerid][Mod7] = 0;
	  	PlayerInfoVeh[playerid][Mod8] = 0;
	  	PlayerInfoVeh[playerid][Mod9] = 0;
	  	PlayerInfoVeh[playerid][Mod10] = 0;
	   	PlayerInfoVeh[playerid][Mod11] = 0;
	    PlayerInfoVeh[playerid][Mod12] = 0;
	  	PlayerInfoVeh[playerid][Mod13] = 0;
		PlayerInfoVeh[playerid][Mod14] = 0;
	   	PlayerInfoVeh[playerid][Mod15] = 0;
	  	PlayerInfoVeh[playerid][Mod16] = 0;
	  	PlayerInfoVeh[playerid][Mod17] = 0;
	}
 	else SendClientMessage(playerid, COLOR_WHITEP, ""UFF" "WHITEP_E"You have removed all the tuned components from your vehicle.");
	return true;
}
CMD:startreaction(playerid, params[])
{
    
	if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");
	if (sscanf(params, "s[26]", tmp))
	{
		Usage(playerid, "/startreaction <Reaction Characters>");
		return true;
	}
	if(strlen(tmp) > 25) return Error(playerid, "Reaction must be shorter than 24 characters.");
	reactionAward = 0;
	reactionTimeStart = 0;
	format(xChars, sizeof(xChars), "%s", tmp);

	reactionAward = strlen(xChars) * 1000;
	format(str, sizeof(str), ""RED_E"ReactionTest :: "WHITE_E"The first one who types "WHITE_E"'{FF0000}%s"WHITE_E"' wins 2 score and "LG_E"$%d!", tmp, reactionAward);
	SendClientMessageToAll(COLOR_PINK, str);
	format(str, sizeof(str), "3,1[REACTION]4 The first one who types '%s' wins 2 score and $%d!", tmp, reactionAward);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);

	reactionActive = true;
	reactionTimeStart = GetTickCount();
	return true;
}
CMD:stream(playerid, params[])
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
		
	ShowPlayerDialog(playerid, D_MUSIC, DIALOG_STYLE_LIST, ""BLUE_E"UFF :: "WHITE_E"Stream Song", "For all players\nYourself\nSome position\nFor player\nStop everyone\nStop for player", "Select", "Cancel");
	return 1;
}

//This is the image on top of this post (the dialog)
/*CMD:songinfo(playerid,params[])
{
	new info[256];
	if(!IsYoutubeStream()) return Error(playerid, "There isn't any song playing at the moment.");
	format(info,sizeof(info),"Current song info:\n\n%s\nDuration: %d seconds\nLink: %s",GetVideoTitle(),GetVideoDuration(),GetVideoLink());
	ShowPlayerDialog(playerid,DIALOG_SONGINFO,DIALOG_STYLE_MSGBOX,"Song info",info,"OK","");
	return 1;
}
*/

CMD:playsong(playerid, params[])
{
    
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	new songname[40];
	if (sscanf(params, "s[30]", songname))
	{
		Usage(playerid, "/playsong <URL>");
		return true;
	}
	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	format(tmp, sizeof(tmp), "%s", songname);
	foreach(Player, ii)
	{
		if(IsPlayerInRangeOfPoint(ii, 35.0, POS[0], POS[1], POS[2]))
		{
			if(GetPVarType(ii, "MusicDisabled") == 0)
			{
				PlayAudioStreamForPlayer(ii, tmp);
			}
		}
	}
	return true;
}
/*
CMD:streamall(playerid, params[]) return cmd_playsongforall(playerid, params);
CMD:playsongforall(playerid, params[])
{

	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");


	format(str, sizeof(str), "Enter the url of the song");
    ShowPlayerDialog(playerid, MUSIC, DIALOG_STYLE_INPUT, ""BLUE_E"UFF :: "WHITE_E"Stream Song", str, "Stream", "Cancel");
	return true;
}*/
CMD:stopsongforall(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
	foreach(Player, ii)
	{
		StopAudioStreamForPlayer(ii);
	}
	return true;
}
CMD:stopsong(playerid)
{
    
	foreach(Player, ii)
	{
		StopAudioStreamForPlayer(ii);
	}
	return true;
}
CMD:stopsound(playerid) return cmd_stopmusic(playerid);
CMD:stopmusic(playerid)
{

	StopAudioStreamForPlayer(playerid);
	SetPVarInt(playerid, "MusicDisabled", 1);
	return true;
}
CMD:playmusic(playerid)
{

	DeletePVar(playerid, "MusicDisabled");
	return true;
}

CMD:rules(playerid)
{
    
	new longstr[3000];
	strcat(longstr, ""YELLOW_E"\t\t\t\t\tWelcome to Ultimate Funky Freeroam\n\
    "WHITE_E"\tYou must follow these rules in order to play on this server, failure to comply will result in "RED_E"punishments!\n\n\
    "BLUE_E"Rule 1: "WHITE_E"Do not use cheats or any type of mods that interfere in multiplayer gameplay. \n\
    "BLUE_E"Rule 2: "WHITE_E"Do not advertise here, this will result in a permanent ban.\n");
    strcat(longstr, ""BLUE_E"Rule 3: "WHITE_E"Do not scream hacker on chat, use /report!\n\
    "BLUE_E"Rule 4: "WHITE_E"Do not farm your stats or achievements.\n\
    "BLUE_E"Rule 5: "WHITE_E"Do not flame or insult players, this can be taken through /pm.\n");
	strcat(longstr, ""BLUE_E"Rule 6: "WHITE_E"Do not constantly use caps in chat, spamming will result in a kick.\n\
    "BLUE_E"Rule 7: "WHITE_E"Do not abuse any type of glitches\n\
	"BLUE_E"Rule 8: "WHITE_E"Do not register multiple accounts for no reason.(Max - 5)\n");
	strcat(longstr, ""BLUE_E"Rule 9: "WHITE_E"Do not driveby in spawn areas\n\
    "BLUE_E"Rule 10: "WHITE_E"Do not spam the chat or private messages.\n\
    "BLUE_E"Rule 11: "WHITE_E"Do not insult other players or staff members.\n");
    strcat(longstr, ""BLUE_E"Rule 12: "WHITE_E"Cleo is NOT allowed, ENB, Car, Skin, Weapon mods are allowed.\n\
    "BLUE_E"Rule 13: "WHITE_E"Do not annoy admins or constantly ask for free things.\n");
    ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Server Rules", longstr, "Accept", "");
	return true;
}
/*
CMD:grules(playerid)
{
    
    new line3[1500];
	strcat(line3, ""RED_E"Gang and Gwar Rules!"LG_E"\n\n\
	1) "LB2_E"Do not interfere other gang wars (being at gang war zone or shooting at players in the zone while not being tied in the gang war). \n\
	2) "LB2_E"Do not use in gang wars vehicle ID 590, RC vehicles or heavy planes (at-400 & andromada).");

	strcat(line3, ""LG_E"\n3) "LB2_E"Do not use vehicles to block ways to closed areas where are no other entrances."LG_E"\n\
	4) "LB2_E"Do not go under map or to unreachable places (inside objects) while being in gang war."LG_E"\n\
	5) "LB2_E"Do not save/load (/s & /l) position near zone to come back faster."LG_E"\n\
	6) "LB2_E"Do not use animations (/anims) to hide or to avoid death.");

	strcat(line3, "\n"LG_E"7) "LB2_E"Admins are not allowed to get players to ongoing gang war zone."LG_E"\n\
	8) "LB2_E"Admins are not allowed to teleport to other players who are in ongoing gang war zone."LG_E"\n\
	9) "LB2_E"Do not start a Gang war without Leader's permission."LG_E"\n\
	10)"LB2_E"VIPS and Administrators are not allowed to use Hydra during gwar. (Jetpack is allowed)");

	strcat(line3, ""YELLOW_E"\n\nBe sure to follow these rules."LG_E"\n\
	For more information visit our forum at uffserver.com/forum");

	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Gang Rules", line3, "OK", "");
	return true;
}*/
CMD:sync(playerid)
{
    
    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	// Remove player from vehicle
	if (IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);

	// Clear Animations
	ClearAnimations(playerid);

	// Get players position
    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
    GetPlayerFacingAngle(playerid, A);

    // Set at random position
    SetPlayerPosition(playerid, POS[0], POS[1], POS[2], A+180);

	// Set back at old position, update objects, unfreeze player.
	Streamer_UpdateEx(playerid, POS[0], POS[1], POS[2]);
	SetPlayerPosition(playerid, POS[0], POS[1], POS[2], A);
    PlayerPlaySound(playerid, 1058,0,0,0);
    TogglePlayerControllable(playerid, true);

    SendClientMessage(playerid, COLOR_DARK, ""GREEN_E"Server: "DARK_E"You have been sync'd!");
    return 1;
}

CMD:fs(playerid) return cmd_fightstyles(playerid);
CMD:fightstyle(playerid) return cmd_fightstyles(playerid);
CMD:fightstyles(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	ShowPlayerDialog(playerid, 164, DIALOG_STYLE_LIST, ""WHITE_E"Fighting Styles:", "Normal\nBoxing\nKung Fu\nKneehead\nGrabKick\nElbow", "Select", "Cancel");
	return 1;
}

CMD:spawnhere(playerid)
{
    
    if(pPremium[playerid] < 1)
	return Error(playerid, "You are not a premium member to use that command (/premium)!");

    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

	if (IsPlayerInAnyVehicle(playerid))
	{
 		GetVehiclePos(GetPlayerVehicleID(playerid), SpawnPos[playerid][sX], SpawnPos[playerid][sY], SpawnPos[playerid][sZ]);
   		GetVehicleZAngle(GetPlayerVehicleID(playerid), SpawnPos[playerid][sA]);
   	}
    else
	{
 		GetPlayerPos(playerid, SpawnPos[playerid][sX], SpawnPos[playerid][sY], SpawnPos[playerid][sZ]);
   		GetPlayerFacingAngle(playerid, SpawnPos[playerid][sA]);
	}

	SpawnPos[playerid][SpawnSavedPos] = 1;
 	SendClientMessage(playerid, COLOR_LB, ""UFF" "WHITE_E"Your spawn position is now saved, you will spawn here on your next spawn.");
    return 1;
}
CMD:ramps(playerid) return cmd_ramp(playerid);
CMD:ramp(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
	if(!CanPlayerTeleport(playerid)) return true;
	if(pPremium[playerid] < 1)
		return Error(playerid, "You are not a premium member to use that command (/premium)!");
    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPlayerState(playerid)== PLAYER_STATE_DRIVER)
	{
 		if(GetPVarInt(playerid, "Ramped") == 0)
 		{
			SetPVarInt(playerid, "Ramped", 1);
   			SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREEN_E"You have turned ramp spawning on!");
      		Info(playerid, "Press the 'Fire (CTRL by default)' key whilst in a vehicle to spawn a ramp.");
        	Info(playerid, "If you wish to disable ramp spawning, type /ramp again.");
  		}
    	else
		{
  			DeletePVar(playerid, "Ramped");
     		SendClientMessage(playerid, COLOR_RED, ""UFF" "RED_E"You have turned ramp spawning OFF!");
		}
    }
    else Error(playerid, "You must be the driver of a vehicle to enable ramp spawning!");
    return 1;
}

CMD:credits(playerid)
{
    new gStr[900], cstr[900];
 	strcat(gStr,""BLUE_E"Server Owners: "WHITE_E"Reckon, Node, Oblivion\n");
	strcat(gStr,""BLUE_E"Forum Developers: "WHITE_E"Oblivion, Reckon\n");
	strcat(gStr,""BLUE_E"Website Developers: "WHITE_E"Reckon\n");
	strcat(gStr,""BLUE_E"Hosters: "WHITE_E"Node, Reckon\n");
	strcat(gStr,""BLUE_E"Event Managers: "WHITE_E"Shezzy.xD\n");
	strcat(gStr,""BLUE_E"Server Designers: "WHITE_E"Death and LithuxBro\n");
    strcat(gStr,""BLUE_E"Former Owners: "WHITE_E"WindBreaker, FoxZ, Deagle");
    format(cstr, sizeof(cstr), "%s\n"BLUE_E"Other Credits: "WHITE_E"SA-MP, $moke and "BLUE_E" %s "WHITE_E" for playing here at UFF!", gStr, pName[playerid]);
   	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "RED_E"Credits", cstr, "OK", "");
	return true;
}
CMD:flames(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    SetPlayerAttachedObject(playerid, 7, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfie right
    SetPlayerAttachedObject(playerid, 8, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000 ); // Flame99 - handfire left
    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREEN_E"You have enabled flames on your hands!");
	return true;
}
CMD:siren(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
    {
			Error(playerid, "You must be a premium member to use this command, check /premium for more info.");
			return true;
    }
	if(pLogged[playerid] == true)
	{
		ShowPlayerDialog(playerid, 134, DIALOG_STYLE_LIST, ""YELLOW_E"Sirens", ""LB2_E"Police Siren\n"PINK_E"Undercover Siren\n"WHITE_E"Remove Siren", "Select", "Exit");
	}
	else Error(playerid, "You must be logged in to enable sirens!");
	return 1;
}
CMD:spawn(playerid) return cmd_spawnplace(playerid);
CMD:spawnplace(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pLogged[playerid] == false)
	    return Error(playerid, "You must be logged in to choose your spawn place!");

 	new bigStr[800];
	strcat(bigStr, ""IVORY_E"Own House\t"WHITE_E"(/myhouse)\n"IVORY_E"Default\t\t"WHITE_E"(Random Spawnpoint)");
	ShowPlayerDialog(playerid, 993, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Spawn Area", bigStr, "Select", "Cancel");
	return true;
}
CMD:weaponset(playerid)
{
    

	if(pLogged[playerid] == false)
	    return Error(playerid, "You must be logged in to update your weapon set!");

 	if(InDM[playerid] != 0)
 	{
 		Error(playerid, "You can't update your weapon set while in a DM!");
 		return 1;
 	}
 	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't update your weapon set in this area!");
	    return true;
	}
 	if(InDuel[playerid] == 1)
 	{
 		Error(playerid, "You can't update your weapon set while in a duel!");
		return 1;
 	}
 	if(InEvent[playerid] != 0)
 	{
 		Error(playerid, "You can't purchase weapons while in an event!");
		return 1;
 	}
	if(GOD[playerid] == 1 && InDM[playerid] == 0)
		return Error(playerid, "You can't purchase weapons with godmode enabled, type /god to disable it.");
	new wString[1028];
	strcat(wString, "Weapon Set 1 "LG_E"($550,000)  "GREY_E"[Knife/M4/Deagle/MP5/Combat Shotgun]\nWeapon Set 2 "LG_E"($500,000)  "GREY_E"[Katana/AK/Deagle/TEC-9/Sawnoff Shotgun]");
	strcat(wString, "\nWeapon Set 3 "LG_E"($600,000)  "GREY_E"[Chainsaw/M4/cRifle/Silenced 9mm/TEC-9/Shotgun]\nWeapon Set 4 "LG_E"($700,000)  "GREY_E"[Shovel/AK/Sniper/Deagle/Uzi/Sawnoff Shotgun]\nDefault Weapons");
	ShowPlayerDialog(playerid, WEAPON_DIALOG+7, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Weapon Sets (Permanent)", wString, "Select", "Cancel");
	if(pPremium[playerid] == 1) SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"As a VIP you can purchase weaponsets for free.");
	return true;
}
CMD:shop(playerid) return cmd_gbshop(playerid);
CMD:gbshop(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 1047.1968,-1797.6903,13.8227,267.3033);
	TeleMSG(playerid, "GB Shop /gbhop");
	GameTextForPlayer(playerid, "~y~Gold Blocks Shop~n~~w~/gbshop", 4000, 4);
	return true;
}
CMD:UFF(playerid) return cmd_help(playerid);
CMD:menu(playerid) return cmd_help(playerid);
CMD:help(playerid)
{

	SetTimerEx("ResetCMD", 1000, false, "i", playerid);

    new wString[1300];
	strcat(wString, "General Help\t\t\t"GREY2_E"[/ghelp]\nServer Commands\t\t"GREY2_E"[/cmds]\nServer Teleports\t\t"GREY2_E"[/teles]\nVehicle Menu\t\t\t"GREY2_E"[/v]\nPremium Features\t\t"GREY2_E"[/premium]\nServer Credits\t\t"GREY2_E"[/credits]\n");
	strcat(wString, ""PINK_E"My Settings\n"PINK_E"My Statistics\nHow do I earn money/score/gbs?\nWhat can I do on this server?\n"GREY2_E"Server IP: 34.228.165.73:7777");
	ShowPlayerDialog(playerid, 506, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Help", wString, "Select", "Close");
	return true;
}
CMD:ghelp(playerid)
{
    
	new wString[1700];
	strcat(wString, ""LRED_E"Commands and Teleports\n"WHITE_E"You can access commands using /cmds and teleports using /teles.\n\n"LRED_E"Vehicles\n"WHITE_E"You can spawn a vehicle at anytime using /v.\nYou can also purchase your own private vehicle at /vs.\nType /vcmds to access vehicle commands.\n\n");
	strcat(wString, ""LRED_E"Minigames\n"WHITE_E"This server features many minigames such as:\n/CnR /Derby /Fallout /LMS /Race /TDM\n\n"LRED_E"Premium and VIP\n"WHITE_E"You can access premium features through donating\nCommands and features are listed on /premium, visit on website for more info.\n\n");
    strcat(wString, ""LRED_E"Gangss\n"WHITE_E"You can create your own gang on this server, type /gbcmds for more info.\n\n"LRED_E"Houses\n"WHITE_E"You can check available houses using /houses\nType /housemenu to access your house features.\n\n"WHITEP_E"Need more help? Visit our forums at uffserver.com/forum!");
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"General Help", wString, "OK", "");
	return 1;
}
CMD:gbhelp(playerid)
{
    
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Gold Block System", ""LB2_E"gbs are similar to karma!\n\n"YELLOW_E"Commands:\n"WHITE_E"/givegc <playerid> - "LB2_E"Give someone a gc.\n"WHITE_E"/gbs <playerid> - "LB2_E"Check the smount of gbs a player has.\n\
	"WHITE_E"/sellgbs <id> <gbs> <price> - "LB2_E"Sell gbs to another player.\n\n"WHITEP_E"You can purchase special items using your gbs in /gbshop!\n", "OK", "");
	return 1;
}

CMD:grw(playerid, parmas[]) return cmd_giverangeweapon(playerid, parmas);
CMD:giverangeweapon(playerid, params[])
{
    
	SetTimerEx("ResetCMD", 1000, false, "i", playerid);
	if(pAdmin[playerid] < 3)
	return Error(playerid, "Insufficient permissions!");
	new weap, ammo, range, WeapName[32];

	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

	if(pLogged[playerid] == false)
		return Error(playerid, "Player not logged in!");
	if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
    if(sscanf(params, "iii", weap, ammo, range))
	{
	   Usage(playerid, "/grw (weapid) (ammo) (range)");
	   return true;
	}
	if(sscanf(params, "iii", weap, ammo, range)) return SendClientMessage(playerid, COLOR_RED, " Ussage: /giveallweapon (weapid) (ammo) (range)");
	if(weap == 19 || weap == 20 || weap == 21) return SendClientMessage(playerid, COLOR_RED, "Error: There is no weaponid for 19/21!");
	if(weap < 1 || weap > 47) return SendClientMessage(playerid, COLOR_RED, "Weapon Maxium (Left): 1 - Maxium (Right): 47");
	if(ammo < 1 || ammo > 2000) return SendClientMessage(playerid, COLOR_RED, "Ammo Maxium (Left): 0 - Maxium (Right): 2000 ***");
	if(range< 5 || range> 2000) return SendClientMessage(playerid, COLOR_RED, "range Maxium (Left): 5 - Maxium (Right): 2000 ***");
	GetWeaponName(weap, WeapName, 32);
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if (IsPlayerInRangeOfPoint(i,range,x,y,z))
    		{
    			format(str, sizeof(str), "~w~%s ~g~", WeapName, weap);
				GameTextForPlayer(i, str, 4000, 3);
				format(tmp, sizeof(tmp), "~y~~h~Weapon Received");
			    GameTextForPlayer(i, tmp, 3500, 1);
				GivePlayerWeapon(i,weap,ammo);
			}
		}
	}
	format(str, sizeof(str), ""GREY_E"Administrator %s(%d)  has given everyone a %s(%d) with %d ammo in range of %d meters",  pName[playerid], playerid, WeapName, weap, ammo, range);
	SendClientMessageToAll(COLOR_GREY, str);
    return 1;
}

CMD:rf(playerid, parmas[]) return cmd_rangefreeze(playerid, parmas);
CMD:rangefreeze(playerid, params[])
{
    
	if(pAdmin[playerid] < 3)
	return Error(playerid, "Insufficient permissions!");
	new range;

	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

	if(pLogged[playerid] == false)
		return Error(playerid, "Player not logged in!");
	if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
    if(sscanf(params, "i", range))
	{
	   Usage(playerid, "/rangefreeze (range)");
	   return true;
	}
	if(range < 5 || range > 1000) return SendClientMessage(playerid, COLOR_RED, "range Maxium (Left): 5 - Maxium (Right): 1000 meters");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if (IsPlayerInRangeOfPoint(i,range,x,y,z))
    		{
				TogglePlayerControllable(i, false);
			}
		}
	}
	format(str, sizeof(str), ""GREY_E"Administrator %s(%d)  has frozen everyone in range of %d meters",  pName[playerid], playerid, range);
	SendClientMessageToAll(COLOR_GREY, str);
    return 1;
}

CMD:ruf(playerid, parmas[]) return cmd_rangeunfreeze(playerid, parmas);
CMD:rangeunfreeze(playerid, params[])
{
    
	if(pAdmin[playerid] < 3)
	return Error(playerid, "Insufficient permissions!");
	new range;

	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

	if(pLogged[playerid] == false)
		return Error(playerid, "Player not logged in!");
	if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
    if(sscanf(params, "i", range))
	{
	   Usage(playerid, "/rangeunfreeze (range)");
	   return true;
	}
	if(range < 5 || range> 1000) return SendClientMessage(playerid, COLOR_RED, "range Maxium (Left): 5 - Maxium (Right): 1000 meters");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if (IsPlayerInRangeOfPoint(i,range,x,y,z))
    		{
                TogglePlayerControllable(i, true);
			}
		}
	}
	format(str, sizeof(str), ""GREY_E"Administrator %s(%d)  has unfrozen everyone in range of %d meters",  pName[playerid], playerid, range);
	SendClientMessageToAll(COLOR_GREY, str);
    return 1;
}
CMD:rd(playerid, parmas[]) return cmd_rangedisarm(playerid, parmas);
CMD:rangedisarm(playerid, params[])
{
    
	if(pAdmin[playerid] < 3)
	return Error(playerid, "Insufficient permissions!");
	new range;

	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

	if(pLogged[playerid] == false)
		return Error(playerid, "Player not logged in!");
	if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
    if(sscanf(params, "i", range))
	{
	   Usage(playerid, "/rangedisarm (range)");
	   return true;
	}
	if(range< 5 || range> 1000) return SendClientMessage(playerid, COLOR_RED, "range Maxium (Left): 5 - Maxium (Right): 500 meters");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if (IsPlayerInRangeOfPoint(i,range,x,y,z))
    		{
                ResetPlayerWeapons(i);
			}
		}
	}
	format(str, sizeof(str), ""GREY_E"Administrator %s(%d) has disarmed everyone in range of %d meters",  pName[playerid], playerid, range);
	SendClientMessageToAll(COLOR_GREY, str);
    return 1;
}
CMD:givegbs(playerid, params[]) return cmd_givegc(playerid, params);
CMD:givegc(playerid, params[])
{
    
	new gbs;
	if(sscanf(params, "ud", otherid, gbs))
	{
	    Usage(playerid, "/givegc <ID/Name> <amount>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

 	if(otherid == playerid)
		return Error(playerid, "You can't send yourself gbs!");
	if(pGBs[playerid] < gbs)
		return Error(playerid, "You don't have sufficient gbs to make this transaction!");
	if(gbs > 50 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't send more than 50 gbs at once!");
	if(gbs < 1 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't send anyone less than 1 gc.");

 	GivePlayerGB(playerid, -gbs);
 	GivePlayerGB(otherid, gbs);
	if(gbs == 1)
	{
		format(str, 128, ""UFF" "GREEN_E"You have sent %s(%d) 1 gc. (gbs Left: %d)", pName[otherid], otherid, pGBs[playerid]);
	 	SendClientMessage(playerid, COLOR_GREEN, str);
		format(str, 128, ""UFF" "GREEN_E"%s(%d) has sent you 1 gc. (Total gbs: %d)", pName[playerid], playerid, pGBs[otherid]);
		SendClientMessage(otherid, COLOR_GREEN, str);
	}
	else
	{
		format(str, 128, ""UFF" "GREEN_E"You have sent %s(%d) %d gbs. (gbs Left: %d)", pName[otherid], otherid, gbs, pGBs[playerid]);
	 	SendClientMessage(playerid, COLOR_GREEN, str);
		format(str, 128, ""UFF" "GREEN_E"%s(%d) has sent you %d gbs (Total gbs: %d).", pName[playerid], playerid, gbs, pGBs[otherid]);
		SendClientMessage(otherid, COLOR_GREEN, str);
	}
	format(str, sizeof(str), "4Server:3 %s(%i) has sent %s(%i) %d gbs.", pName[playerid], playerid, pName[otherid], otherid, gbs);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return 1;
}
/*
//========= VIP Selling==============
CMD:sellvip(playerid, params[])
{
	if(pPremium[playerid] != 1)
	    return Error(playerid, "You must be a VIP to use this command! (/vip)");
    new  vprice;
    if(sscanf(params, "ud", otherid, vprice))
    {
        Usage(playerid, "/sellvip <ID/Name> <price>");
        return true;
    }
    if(GetPVarInt(playerid, "sellingvip") == 1)
        return Error(playerid, "You are currently selling your vip to someone, type /cancel to remove the offer.");
    if(pLogged[otherid] == false) return Error(playerid, "Player isn't logged in!");
    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
    if(otherid == playerid)
        return Error(playerid, "You can't sell yourself!");

    if(pCash[playerid] < vprice)
        return Error(playerid, "You don't have sufficient money to make this transaction!");
    if(pCash[otherid] < vprice)
        return Error(playerid, "The other player does not have enough money to make this transaction!");
    if(vprice < 2000000)
        return Error(playerid, "You can't sell your vip to anyone less than 2m$");
    if(vprice > 9000000000)
        return Error(playerid, "You can't sell your vip to anyone less than  900m$");

    format(str, sizeof(str), ""UFF" "WHITE_E"%s(%d) has offered you his VIP Status for "LG_E"$%s"WHITE_E"! ", pName[playerid], playerid, ToCurrency(vprice));
    SendClientMessage(otherid, COLOR_WHITE, str);

    SendClientMessage(otherid, COLOR_WHITE, ""UFF" "WHITE_E"Click buy to accept this offer or cancel to decline the offer.");

    format(str, sizeof(str), ""UFF" "WHITE_E"You have offered %s(%d) your VIP Status for $%s. wait for the player to accept your offer. /cancelvip to cancel the offer", pName[otherid], otherid, ToCurrency(vprice));
    SendClientMessage(playerid, COLOR_WHITE, str);

    format(tmp, sizeof(tmp), ""WHITEP_E"Are you sure you want to buy "LB_E"VIP Status "WHITEP_E" for "LG_E"%s?", ToCurrency(vprice));
    ShowPlayerDialog(otherid, 9999, DIALOG_STYLE_MSGBOX, ""IVORY_E"Buy Premium", tmp, "Buy", "Cancel");

    SetPVarInt(playerid, "sellingvip", 1);
    SetPVarInt(otherid, "vipseller", playerid);
    SetPVarInt(otherid, "vipPrice", vprice);
    return 1;
}*/
CMD:cancelvip(playerid)
{
        if(GetPVarInt(playerid, "sellingvip") == 0)
            return Error(playerid, "You have no reason to use this command at the moment..");

    if(GetPVarInt(playerid, "sellingvip") != 0)
    {
        foreach(Player, i)
        {
            if(GetPVarInt(i, "sellingvip") == playerid)
            {
                SetPVarInt(i, "sellingvip", -1);
                DeletePVar(i, "vipPrice");
                format(str, sizeof(str), ""UFF" "GREY_E"%s(%d) has cancelled his offer for the VIP Status",pName[playerid], playerid);
                SendClientMessage(i, COLOR_GREY, str);
            }
        }
        DeletePVar(playerid, "sellingvip");
        SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have cancelled your VIP Status offer, you can now make a new transaction.");
    }
    return 1;
}

//================================================================================================================================================

CMD:sellgbs(playerid, params[]) return cmd_sellgb(playerid, params);
CMD:sellgb(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	new gbs, price;
	if(sscanf(params, "udd", otherid, gbs, price))
	{
	    Usage(playerid, "/sellgbs <ID/Name> <gbs> <price>");
	    return true;
	}
	if(GetPVarInt(playerid, "sellinggbs") == 1)
        return Error(playerid, "You are currently selling gbs to someone, type /cancel to remove the offer.");

    if(pLogged[otherid] == false) return Error(playerid, "Player isn't logged in!");
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't sell yourself gbs!");
	if(pGBs[playerid] < gbs)
		return Error(playerid, "You don't have sufficient gbs to make this transaction!");
 	if(pCash[otherid] < price)
		return Error(playerid, "The other player does not have enough money to make this transaction!");
	if(gbs < 1)
		return Error(playerid, "You can't sell anyone less than 1 gc.");
	if(gbs > 500)
		return Error(playerid, "You can't sell more than 500 gbs at once.");
	if(price > 30000000)
		return Error(playerid, "You can't make a transaction more than 30m!");
	if(price < 1)
		return Error(playerid, "You can't sell your gbs for less than $1.");

	if(gbs == 1)
	{
		format(str, sizeof(str), ""UFF" "WHITE_E"%s(%d) has offered you 1 gc for "LG_E"$%s"WHITE_E"! ", pName[playerid], playerid, ToCurrency(price));
	 	SendClientMessage(otherid, COLOR_WHITE, str);
		SendClientMessage(otherid, COLOR_WHITE, ""UFF" "WHITE_E"Type /buygc to accept this offer or /deny to decline the offer.");
		format(str, sizeof(str), ""UFF" "WHITE_E"You have offered %s(%d) 1 gc for $%s. wait for the player to accept your offer.", pName[otherid], otherid, ToCurrency(price));
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	else
	{
		format(str, sizeof(str), ""UFF" "WHITE_E"%s(%d) has offered you %d gbs for "LG_E"$%s"WHITE_E"! ", pName[playerid], playerid, gbs, ToCurrency(price));
	 	SendClientMessage(otherid, COLOR_WHITE, str);
		SendClientMessage(otherid, COLOR_WHITE, ""UFF" "WHITE_E"Type /buygbs to accept this offer or /deny to decline the offer.");
		format(str, sizeof(str), ""UFF" "WHITE_E"You have offered %s(%d) %d gbs for $%s. wait for the player to accept your offer.", pName[otherid], otherid, gbs, ToCurrency(price));
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	SetPVarInt(playerid, "sellinggbs", 1);
	SetPVarInt(otherid, "gbseller", playerid);
	SetPVarInt(otherid, "gcAmount", gbs);
	SetPVarInt(otherid, "gcPrice", price);
 	return 1;
}

CMD:buygb(playerid, params[]) return cmd_buygbs(playerid, params);
CMD:buygbs(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!GetPVarInt(playerid, "gcAmount"))
		return Error(playerid, "You haven't been offered any gbs..");

	new gbs = GetPVarInt(playerid, "gcAmount");
	new price = GetPVarInt(playerid, "gcPrice");
	otherid = GetPVarInt(playerid, "gbseller");

	if(pCash[playerid] < price)
		return Error(playerid, "You dont have enough money to make this transaction.");

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "The player that offered you gbs is no longer connected!");

	format(tmp, sizeof(tmp), ""WHITEP_E"Are you sure you want to buy "LB_E"%d "WHITEP_E"gc for "LG_E"%s?", gbs, ToCurrency(price));
	ShowPlayerDialog(playerid, GC_DIALOG+3, DIALOG_STYLE_MSGBOX, ""ORANGE_E"Buy gbs", tmp, "Buy", "Cancel");
	return 1;
}
CMD:deny(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!GetPVarInt(playerid, "gcAmount"))
		return Error(playerid, "You haven't been offered any gbs..");

	otherid = GetPVarInt(playerid, "gbseller");

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "The player that offered you gbs is no longer connected!");

	format(str, 128, ""UFF" "RED_E"%s(%d) has denied your offer.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_WHITE, str);

	format(str, 128, ""UFF" "WHITE_E"You have denied %s's offer.", pName[otherid]);
	SendClientMessage(playerid, COLOR_WHITE, str);

	DeletePVar(otherid, "sellinggbs");
	SetPVarInt(playerid, "gbseller", -1);
	DeletePVar(playerid, "gcAmount");
	DeletePVar(playerid, "gcPrice");
 	return 1;
}
CMD:gbs(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if (sscanf(params, "u", otherid))
	{
        Usage(playerid, "/gbs <ID/Name>");
        SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Will show the amount of gbs the selected player has.");
        return 1;
    }
    if(otherid == INVALID_PLAYER_ID) return Error(playerid, "Player not connected!");
	format(str, 128, ""UFF" %s's gbs: %d", pName[otherid], pGBs[otherid]);
    SendClientMessage(playerid, COLOR_YELLOW, str);
    return 1;
}

CMD:giveallgb(playerid)
{
    
	if(pAdmin[playerid] < 4) return Error(playerid, "Insufficient permissions!");
	format(str, sizeof(str), ""RED_E"[Global] "YELLOW_E"%s(%i)"WHITE_E" has given everyone "YELLOW_E"5"WHITE_E" gbs!", pName[playerid], playerid);
    SendClientMessageToAll(COLOR_GREEN, str);
    GameTextForAll("~y~~h~GB for Everyone!", 3200, 3);
    foreach(Player, ii)
	{
		if(pLogged[ii] == true)
		{
			GivePlayerGB(ii, 5);
		}
	}
	return 1;
}

CMD:giveallcash(playerid, params[])
{
    
    if(pAdmin[playerid] < 4) return Error(playerid, "Insufficient permissions!");
    new ecash;
    if(sscanf(params, "d", ecash)) return SendClientMessage(playerid, COLOR_RED, ""YELLOW_E"USAGE: /giveallcash <1-50000>");
    if(ecash > 50000) return Error(playerid, "You can't reward more than $500k money!");
    if(ecash < 1) return Error(playerid, "You can't reward anyone less than 1 money!");
    format(str, sizeof(str), ""RED_E"[Global] "YELLOW_E"%s(%i) "WHITE_E" has given everyone "YELLOW_E"$%d "WHITE_E"money.",pName[playerid], playerid, ecash);
    SendClientMessageToAll(COLOR_WHITE, str);
    foreach(Player, ii)
    {
        if(pLogged[ii] == true)
        {
            GivePlayerCash(ii, ecash);
            GameTextForAll("~y~~h~Cash for Everyone", 3200, 3);
            format(str, sizeof(str), "~g~~h~~h~+$%d", ecash);
	        MSTD_MSG(ii, 3500, str);

            
        }
    }
    return 1;
}

CMD:giveallscore(playerid, params[])
{
    
    if(pAdmin[playerid] < 4)
    return Error(playerid, "Insufficient permissions!");
    new escore;
    if(sscanf(params, "d", escore)) return SendClientMessage(playerid, COLOR_RED, ""YELLOW_E"USAGE: /giveallscore <1-50>");
    if(escore > 50) return Error(playerid, "You can't reward more than 50 score!");
    if(escore < 1)  return Error(playerid, "You can't reward anyone less than 1 score!");
    format(str, sizeof(str), ""RED_E"[Global] "YELLOW_E"%s(%i)"WHITE_E" has given everyone "YELLOW_E"%d "WHITE_E" score.", pName[playerid], playerid, escore);
    SendClientMessageToAll(COLOR_WHITE, str);
    foreach(Player, ii)
    {
        if(pLogged[ii] == true)
        {
            GivePlayerScore(ii, escore);
            GameTextForAll("~y~~h~Score for Everyone", 3200, 3);
            format(str, sizeof(str), "~g~~h~~h~+%d score", escore);
	        MSTD_MSG(ii, 3500, str);

        }
    }
        return 1;
}
CMD:tutorial(playerid) return cmd_tour(playerid);
CMD:tour(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SetPlayerInterior(playerid, 14);
	SetPlayerPos(playerid, -1484.6588,1640.4684,1060.6719);
 	Streamer_UpdateEx(playerid, -1484.6588,1640.4684,1060.6719);
	SetPlayerCameraPos(playerid,-1484.6588,1640.4684,1060.6719);
	SetPlayerCameraLookAt(playerid,-1425.3961,1598.7845,1052.5313);
	TogglePlayerControllable(playerid, 0);
	TextDrawShowForPlayer(playerid, letterbox[0]);
	TextDrawShowForPlayer(playerid, letterbox[1]);
	new newline[450];
	strcat(newline, "Welcome to UFF: Ultimate Funky Freeroam. A unique stunt server, with loads of fun stuff to do.\nThe main goal is to have fun, accomplish the best stunts and earn score.\nYou can earn it by killing people in DM zones, winning events/races and doing stunt challenges.");
    strcat(newline, "\nAll your statistics are saved upon registering, Type /help to see what you can do with your money and score.\n"LB2_E"Type "RED_E"/endtour "LB2_E"to end this tour at anytime.");
	ShowPlayerDialog(playerid, 555, DIALOG_STYLE_MSGBOX, "Part 1: "LB2_E"Introduction", newline, "Next", "");
	return 1;
}
CMD:endtour(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerInterior(playerid, 0);
    TogglePlayerControllable(playerid, 1);
    SetCameraBehindPlayer(playerid);
    TextDrawHideForPlayer(playerid, letterbox[0]);
	TextDrawHideForPlayer(playerid, letterbox[1]);
	LoadPlayerPosition(playerid);
	SendClientMessage(playerid, COLOR_WHITEP, "* You have exited the server tour.");
	return 1;
}
CMD:donate(playerid) return cmd_premium(playerid);
CMD:vip(playerid) return cmd_premium(playerid);
CMD:premium(playerid)
{
    
	new longstr[3000];
	strcat(longstr, ""YELLOW_E"Very Important Player (VIP)\n\n"YELLOW_E"Features:\n\
	"WHITE_E"- "WHITE_E"Special Rank on forums and ability to change your [ID] color in chat.\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"Spectate players (/spec) and access to admin house (/ahouse)\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"Spawn a /jetpack and able to hide your name/health using /nametag!\n\
	"WHITE_E"- "WHITE_E"Heal yourself and other players outside DM zones at anytime (/heal).\n\
	"WHITE_E"- "WHITE_E"Increase your speedboost parameter up to 1.8.\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"No limit on player teleporting and ability to start a vip countdown (/cd).");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"Ability to play as swat and use arrest hotkey (MMB) in CnR.\n\
	"WHITE_E"- "WHITE_E"VIP connect messages when joining the server\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"Access to /vipisland and /vipclub and ability to purchase houses there.\n\
	"WHITE_E"- "WHITE_E"Spawn with 50 percent armour on spawn and in DM zones.");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"Ability to purchase free interiors.\n\
	"WHITE_E"- "WHITE_E"/vtune - Ability to add any compatible vehicle component to your vehicle.\n\
	"WHITE_E"- "WHITE_E"Double cash during robberies and 20 percent extra cash for Gold Blocks pickups.\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"Purchase weapons for free at anytime (/weapons) and toggle armour (/armour)");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"Spawn with 100 percent armour on spawn and DMs including CnR.\n\
	"WHITE_E"- "WHITE_E"Get 50 percent armour on all events and 100 percent armour on godmode.\n\
	"WHITE_E"- "WHITE_E"You can set your spawn point anywhere using /spawnhere\n\
	"WHITE_E"- "WHITE_E"Ability to spawn hydra and hunter (/tank /hydra /hunter)");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"Purchase up 2 private vehicles (/pv).\n\
	"WHITE_E"- "WHITE_E"Ability to request a player to teleport to you using /bring.\n\
	"WHITE_E"- "WHITE_E"Ability to change your weapon set for free (/weaponset)\n\
	"WHITE_E"- "WHITE_E"VIP Rank on our forums + Spawn with 'VIP' 3D Text Label.");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"You are not frozen during event countdowns.\n\
	"WHITE_E"- "WHITE_E"Ability to light special fireworks (/lightfw)\n\
	"WHITE_E"- "WHITE_E"You can access Toys 5th and 6th slots.\n\
	"WHITE_E"- "WHITE_E"Create up to 3 text labels anywhere around the server. (under construction)");
	strcat(longstr, "\n"WHITE_E"- "WHITE_E"Ability to start server events (/event)\n\
	"WHITE_E"- "WHITE_E"Ability to set a custom chat color using RGB codes - /chatcolor\n\
	"WHITE_E"- "WHITE_E"You can spawn /trailer.\n\
	"WHITE_E"- "WHITE_E"$5,000,000 in your bank account.");

	strcat(longstr, "\n\n"YELLOW_E"Get VIP at www.uffserver.com and click on Donate!");
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Very Important Player", longstr, "Close", "");
	return true;
}


CMD:news(playerid)
{
    
	new longstr[3000];
	strcat(longstr, ""YELLOW_E"UFF Release 7.5\n\
    "WHITE_E"- "WHITE_E"Fixed some typos\n\
    "WHITE_E"- "WHITE_E"Fixed a bug in deathmatchs virtual world.\n\
    "WHITE_E"- "WHITE_E"Fixed a bug where your toys slots doesn't save.\n\
    "WHITE_E"- "WHITE_E"Fixed a bug in Rocket DM\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Fixed minor bugs.\n\
    "WHITE_E"- "WHITE_E"Fixed a bug in house interior purchase.\n\
    "WHITE_E"- "WHITE_E"Fixed Hitsound.\n\
    "WHITE_E"- "WHITE_E"Fixed player's Houses and Business owned in stats.\n\
    "WHITE_E"- "WHITE_E"Fixed Map interfering in Challenge 8 and IP challenge.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Fixed a bug where your skin changes after a death in deathmatches\n\
    "WHITE_E"- "WHITE_E"Fixed a bug where it doesn't take off your 30 gbs when you change your gang name.\n\
    "WHITE_E"- "WHITE_E"Fixed /deletecolor and /gcolor\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Fixed a bug in skydive spawn where you freeze for 2 times\n\
    "WHITE_E"- "WHITE_E"Fixed a bug  where you don't receive cash when you finish a race.\n\
    "WHITE_E"- "WHITE_E"Fixed a bug where it was showing wrong player name in reaction test already won message.\n\
    "WHITE_E"- "WHITE_E"Fixed: Automatic antifall in bike challenges and race minigame\n\n");
	strcat(longstr, ""RED_E"\t\t\t\t["WHITE_E"Additions"RED_E"]\n\n\
    "WHITE_E"- "WHITE_E"Disabled Anti-Cheat\n\
    "WHITE_E"- "WHITE_E"Removed second chance in daily rewards.\n\
    "WHITE_E"- "WHITE_E"Registered Players will now receive 5 score and $5000 cash for every 5 minutes.\n\
	"WHITE_E"- "WHITE_E"Business earnings will be directly saved to your bank account every 30 minutes with payday.\n");
	strcat(longstr, ""WHITE_E"- "WHITE_E"You will be rewarded 4 score for reaction test and maths test.\n\
    "WHITE_E"- "WHITE_E"You can now pm a player who is in race.\n\
    "WHITE_E"- "WHITE_E"Removed VIP (one connect) in gold block shop.\n\
    "WHITE_E"- "WHITE_E"You can no longer need to exit a vehice to join a race.\n\
    "WHITE_E"- "WHITE_E"Added Las Venturas Airport as a spawnpoint.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Added Gold in /colors.\n\
    "WHITE_E"- "WHITE_E"Added Santa hat in /hold\n\
    "WHITE_E"- "WHITE_E"Disabled /sellvip.\n");
	ShowPlayerDialog(playerid, 2980, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "GREEN_E"Build 7.5 (1/2)", longstr, "Next", "");
	return true;
}
CMD:news2(playerid)
{
	new longstr[3000];
	strcat(longstr, ""YELLOW_E"UFF Release 7.5\n\n"RED_E"Change Logs Page 2:\n\
    "WHITE_E"- "WHITE_E"Added a permission that the player need 100 score to join a gang.\n\
    "WHITE_E"- "WHITE_E"You can now convert your gold blocks into money in Gold Block shop(minimum 100 gbs and maximun 500gbs).\n\
    "WHITE_E"- "WHITE_E"Added some new gold block locations(157 locations currently).\n\
    "WHITE_E"- "WHITE_E"Players must have 50 score to view online admins list.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Revamped Anti-Advertisement, you can no longer type more than 8 numbers in chat.!\n\
    "WHITE_E"- "WHITE_E"You will no longer receive gold blocks for killstreaks.\n\
    "WHITE_E"- "WHITE_E"Gangs will now earn 5 score for every kill.\n\
    "WHITE_E"- "WHITE_E"Removed /myworld.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Added goto cooldown for unregistered players(1 goto per 3 seconds)\n\
    "WHITE_E"- "WHITE_E"VIP countdown will now effect only players in the range of 100.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"You can now use /camera to recieve a camera anywhere.\n\
    "WHITE_E"- "WHITE_E"Removed /vpara(vehicle parachute)\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"There is now a warning counter that doesn't fade away after you logout. a total of 50 warnings will automatically suspend the account permanently.\n\
    "WHITE_E"- "WHITE_E"Players will have infinite health in parkours.\n\
    "WHITE_E"- "WHITE_E"Added LMS in footer.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Added Gang tag in /gtop.\n\
    "WHITE_E"- "WHITE_E"Changed bank map icon to seperate it from Business map icon.\n\
    "WHITE_E"- "WHITE_E"Re-added /ask\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Modified player settings dialog.\n\
    "WHITE_E"- "WHITE_E"Removed /vpara(vehicle parachute)\n\
    "WHITE_E"- "WHITE_E"Added /trailer for VIP.\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Removed /xslide.\n\
    "WHITE_E"- "WHITE_E"Fixed /spawnplace\n\
    "WHITE_E"- "WHITE_E"Added a multi challenge as Challenge 10(/chal10)\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Added BMX Achievement.(BMX Lord)\n\
    "WHITE_E"- "WHITE_E"If he/she kills his/her fellow gang members, gang score will not be rewarded.\n\
    "WHITE_E"- "WHITE_E"You can now flip your vehciles in challenges\n");
    strcat(longstr, ""WHITE_E"- "WHITE_E"Gangs can now have maximum of 40 members.\n");
    ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "GREEN_E"Build 7.5 (2/2)", longstr, "Close", "");
	return true;
}

CMD:dms(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 13) return Error(playerid, "Leave the CnR minigame before joining a DM! "RED_E"/leave.");
	new line7[1800];
	strcat(line7, ""WHITE_E"Rocket DM\t\t"WHITE_E"[/rocket]\n"WHITE_E"War Zone\t\t"WHITE_E"[/war]\n"WHITE_E"Minigun DM\t\t"WHITE_E"[/mini]");
	strcat(line7, "\n"WHITE_E"Team Deathmatch\t"WHITE_E"[/tdm]\n"WHITE_E"Counter Strike DM\t"WHITE_E"[/csdm]\n"WHITE_E"One-Shot DM\t\t"WHITE_E"[/odm]\n"WHITE_E"Sniper DM\t\t"WHITE_E"[/sniper]\n"WHITE_E"Cops and Robbers\t\t"WHITE_E"[/cnr]\n"WHITE_E"Deathmatch\t\t"WHITE_E"[/dm]\n"WHITE_E"Deathmatch 2\t\t"WHITE_E"[/dm2]");
	strcat(line7, "\n"WHITE_E"Deathmatch 3\t\t"WHITE_E"[/dm3]\n"WHITE_E"Deathmatch 4\t\t"WHITE_E"[/dm4]");
	ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"DM Zones", line7, "Select", "Back");
	return true;
}
CMD:tdm(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 13) return Error(playerid, "Leave the CnR minigame before joining a DM! "RED_E"/leave.");
	if(InDM[playerid] == 10)
    {
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	new line2[200];
	new blues, reds;
	foreach(Player, ii)
	{
		if(GetPVarInt(ii, "BlueTeam") != 0) blues++;
		if(GetPVarInt(ii, "RedTeam") != 0) reds++;
	}
	format(line2, 200, ""RED_E"Red Team\t\t"WHITE_E"(Players: %i)\n"BLUE_E"Blue Team\t\t"WHITE_E"(Players: %i)", reds, blues);
    ShowPlayerDialog(playerid, 133, DIALOG_STYLE_LIST, ""YELLOW_E"Choose your team", line2, "Select", "Exit");
	return true;
}

CMD:csdm(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 13) return Error(playerid, "Leave the CnR minigame before joining a DM! "RED_E"/leave.");
	if(InDM[playerid] == 19)
    {
	    Error(playerid, "You already are in csdm!");
	    return true;
	}
	CheckDM(playerid);
	new line2[200];
	new blues, reds;
	foreach(Player, ii)
	{
		if(GetPVarInt(ii, "BlueTeam2") != 0) blues++;
		if(GetPVarInt(ii, "RedTeam2") != 0) reds++;
	}
 	format(line2, 200, ""RED_E"Terriorst\t\t"WHITE_E"(Players: %i)\n"BLUE_E"Counter terrorist\t\t\t"WHITE_E"(Players: %i)", reds, blues);
    ShowPlayerDialog(playerid, 135, DIALOG_STYLE_LIST, ""YELLOW_E"Choose your team", line2, "Select", "Exit");
	return true;
}

CMD:plant(playerid)
{
         if(InDM[playerid] == 19)
         {
            if(IsPlanted[playerid] == 0)
            {
                    if(GetPlayerTeam(playerid) == terror)
                    {
                                if(IsPlayerInRangeOfPoint(playerid, 7.0, -1149.7280,2390.5259,146.7129))
                                {
                                        IsPlanted[playerid] = 1;
                                        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
                                        BombTimer = SetTimer("Bomb",30000,false);
                                        format(str,sizeof(str),""CSDM"The Bomb has been planted, to defuse it stay on the checkponit!", pName[playerid], playerid);
    		                            SendCSMessage(COLOR_WHITEP, str);
                                        BombC = CreateDynamicCP(-1149.7280, 2390.5259, 146.7129, 5.0, -1, -1, -1, 10.0);
                                        return 1;
                                }
                                else return SendClientMessage(playerid, COLOR_RED, "(ERROR) You must in B site");
                        }
                        else return SendClientMessage(playerid, COLOR_RED, "(ERROR) Only Terrorist can use this command");
                }
                else return SendClientMessage(playerid, COLOR_RED, ""RED_E"(ERROR) Bomb has been planted");
          }
          else return SendClientMessage(playerid, COLOR_RED, ""RED_E"[ERROR] You need to be in csdm to use this command!");
          return true;
}

forward Bomb();
public Bomb()
{
    new playerid;
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    CreateExplosion(-1149.7280,2390.5259,146.7129, 6, 150.0);
    IsPlanted[playerid] = 0;
    format(str,sizeof(str),""CSDM"Bomb exploded. Terrorist win! {E8D04C}Prize: $5,000, 10 score", pName[playerid], playerid);
    SendClientMessageToAll(COLOR_WHITEP, str);
    SetTimer("Spawn",2000,false);
    KillTimer(DefuseTimer);
    if(GetPlayerTeam(playerid) == terror)
    {
      foreach(Player, ii)
	   {
        GivePlayerCash(ii, 5000);
        GivePlayerScore(ii, 10);
        format(str, sizeof(str), "~g~~h~~h~+$5000~w~~n~~y~~h~+10 score");
        MSTD_MSG(ii, 3500, str);
	   }
	}
    DestroyDynamicCP(BombC);
}


forward Defuse();
public Defuse()
{
        new playerid;
        SendClientMessageToAll(playerid, ""CSDM"Bomb has been defuse");
        GameTextForPlayer(playerid,"~b~Counter terrorist Win",3000,5);
        format(str,sizeof(str),""CSDM"Bomb has been defuse. Counter Terrorist win! {E8D04C}Prize: $5,000, 10 score!", pName[playerid], playerid);
        SendClientMessageToAll(COLOR_WHITEP, str);
        TogglePlayerControllable(playerid,0);
        KillTimer(BombTimer);
        IsPlanted[playerid] = 0;
        SetTimer("Spawn",2000,false);
        if(GetPlayerTeam(playerid) == CounterTerrorist)
        {
           foreach(Player, ii)
    	   {
            GivePlayerCash(ii, 5000);
            GivePlayerScore(ii, 10);
            format(str, sizeof(str), "~g~~h~~h~+$5000~w~~n~~y~~h~+10 score");
	        MSTD_MSG(ii, 3500, str);
		   }
        }
        DestroyDynamicCP(BombC);
}
forward Spawn();
public Spawn()
{
        new playerid;
        for(new i = 0; i < MAX_PLAYERS; i++) {
                if(GetPlayerTeam(playerid) == terror)
            {
                cmd_aa(i);
                }
                if(GetPlayerTeam(playerid) == CounterTerrorist)
                {
                    cmd_aa(i);
                }
        }
}


CMD:cnr(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line2[600];
	new cops, robbers;
	foreach(Player, ii)
	{
		if(GetPVarInt(ii, "Cop") != 0) cops++;
		if(GetPVarInt(ii, "Robber") != 0) robbers++;
	}
	format(str, sizeof(str), ""LB_E"Cops\t\t"GREY_E"LVPD\t\t\t"WHITE_E"(Players: %i)\n"ORANGE_E"Robbers\t"GREY_E"LV Mafia\t\t"WHITE_E"(Players: %i)\n", cops, robbers);
	strcat(line2, str);
	strcat(line2, "{FF5000}Pro Robbers\t"GREY_E"Pro Mafia\n"PURPLE_E"Army\t\t"GREY_E"Army Task Force\n"BLUE_E"Swat\t\t"DARK_E"LVPD Commanders\n"RED_E"Elite Robbers\t"DARK_E"Mafia Commanders");
	ShowPlayerDialog(playerid, 507, DIALOG_STYLE_LIST, ""ORANGE_E"Choose your side", line2, "Select", "Exit");
	return true;
}
CMD:cnrhelp(playerid)
{
	new line3[800];
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		strcat(line3, ""LB2_E"You have joined the Las Venturas Police Department!\n\n"BLUE_E"Cop Help:\n"WHITE_E"Your mission is to protect the streets of Las Venturas by eliminating any crime.\nSuspects are shown as "ORANGE_E"orange"WHITE_E" on your map radar. The most wanted suspects are shown in darker orange.");
		strcat(line3, "\nType "RED_E"/ar (MMB) "WHITE_E"to arrest any criminal nearby, you and the suspect must be on foot.\nYou get more score and money by arresting rather than takedowns.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\nType "LB2_E"/bk "WHITE_E"to to request backup at anytime.\n\nType /cnrhelp to open this box up at anytime, Good luck soldiers!");
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"Cop Help", line3, "Close", "");
 	}
 	else if(GetPVarInt(playerid, "Robber") != 0)
	{
		strcat(line3, ""ORANGE_E"You have joined the Las Venturas Mafia!\n\n"BLUE_E"Criminal Help:\n"WHITE_E"Your job is to cause mayhem in the streets of Las Venturas\nYou must do your best to evade any cops while your at it.\nThe cops are marked as "LB_E"blue"WHITE_E" on your map radar.\nThe elite Swat team is marked as "BLUE_E"darkblue "WHITE_E"on your map radar.\n");
		strcat(line3, "\n"WHITE_E"You can enter some shops and "RED_E"/rob "WHITE_E"the store for cash.\nType "PINK_E"/tpm "WHITE_E"to teamchat with your team members.\n\nType /cnrhelp to open this box up at anytime, Good luck boys!");
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"Criminal Help", line3, "Close", "");
	}
	else Error(playerid, "You must be in a /CnR minigame to use this command!");
	return true;
}
CMD:footer(playerid) return cmd_textdraws(playerid);
CMD:textdraw(playerid) return cmd_textdraws(playerid);
CMD:textdraws(playerid)
{
	if(GetPVarInt(playerid, "TDDisabled") == 1)
 	{
		TextDrawShowForPlayer(playerid, msgTD);
		TextDrawShowForPlayer(playerid, SEv2TD);
		PlayerTextDrawShow(playerid, KSTD[playerid]);
		TextDrawShowForPlayer(playerid, SEv2TD2);
		TextDrawShowForPlayer(playerid, SEv2TD3);
		TextDrawShowForPlayer(playerid, SEv2TD4);
		TextDrawShowForPlayer(playerid, TeleTD);
		TextDrawShowForPlayer(playerid, SEv2Box);
		TextDrawShowForPlayer(playerid, DMTextdraw);
	    TextDrawHideForPlayer(playerid, GGBOX);
	    PlayerTextDrawHide(playerid, GGTD[playerid]);
	    TextDrawHideForPlayer(playerid, GGTD2);
		ShowPlayerMSGBox(playerid);
		if(GOD[playerid] == 1)
		{
		TextDrawShowForPlayer(playerid, godTD);
		TextDrawShowForPlayer(playerid, godTDBOX);
		}
		SetPVarInt(playerid, "TDDisabled", 0);
		format(tmp, sizeof(tmp), "~y~~h~Textdraws: ~n~~g~on");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
	}
	else
	{
		TextDrawHideForPlayer(playerid, msgTD);
 	    //TextDrawHideForPlayer(playerid, helpTD);
		TextDrawHideForPlayer(playerid, SEv2TD);//
		PlayerTextDrawHide(playerid, KSTD[playerid]);
		TextDrawHideForPlayer(playerid, SEv2TD2);
		TextDrawHideForPlayer(playerid, SEv2TD3);
		TextDrawHideForPlayer(playerid, SEv2TD4);
		TextDrawHideForPlayer(playerid, TeleTD);
		TextDrawHideForPlayer(playerid, SEv2Box);
		TextDrawHideForPlayer(playerid, DMTextdraw);
        if(GOD[playerid] == 1)
		{
		TextDrawHideForPlayer(playerid, godTD);
		TextDrawHideForPlayer(playerid, godTDBOX);
		}
		HidePlayerMSGBox(playerid);
		SetPVarInt(playerid, "TDDisabled", 1);
		SendClientMessage(playerid, COLOR_RED,""UFF" "RED_E"You have disabled server textdraws.");
	}
	return true;
}

CMD:myskin(playerid, params[]) return cmd_skin(playerid, params);
CMD:changeskin(playerid, params[]) return cmd_skin(playerid, params);
CMD:skins(playerid, params[]) return cmd_skin(playerid, params);
CMD:skin(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
 		Error(playerid, "You must be on foot to change your skin!");
   		return true;
	}
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	new skin;
	if(sscanf(params, "d", skin))
	{
		ShowModelSelectionMenu(playerid, skinlist, "Select Skin", 0x00000099, 0x000000EE, 0xACCBF1FF);
	    return true;
	}
	if(GetPlayerSkin(playerid) == skin)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"You are already using skin ID %d!", skin);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

	if(!IsValidSkin(skin))
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Skin %d is an invalid skin!", skin);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(skin > 311)
		return Error(playerid, "Your skin ID cannot be beyond 311!");
  	if(InDM[playerid] == 13) SetPVarInt(playerid, "CnRSkin", skin);
	SetPlayerSkin(playerid, skin);
	pInfo[playerid][pSaveSkin] = skin;
	format(str, sizeof(str), ""WHITE_E"["YELLOW_E"UFF"WHITE_E"] You have changed your skin to %d", skin);
	SendClientMessage(playerid, COLOR_WHITE, str);
	return true;
}
stock ShowVehicleMenu(playerid)
{
	line = "";
	strcat(line, ""YELLOW_E"• "RED_E"Special Vehicles\nAirplanes\nHelicopters\nBikes\nConvertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles");
	strcat(line, "\nSaloons\nSport Vehicles\nStation Wagons\nBoats\nRC Vehicles\nUnique Vehicles");
	ShowPlayerDialog(playerid, 3434, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Vehicle List", line, "Select", "Exit");
}
stock ShowVehicleMenu2(playerid)
{
	new cars[95];
	// 1st Page First Row
	cars[0] = 411;
	cars[1] = 541;
	cars[2] = 429;
	cars[3] = 415;
	cars[4] = 559;
	cars[5] = 451;
	cars[6] = 602;

	// 2nd Row Bikes
	cars[7] = 522;
	cars[8] = 461;
	cars[9] = 521;
	cars[10] = 463;
	cars[11] = 523;
	cars[12] = 481;
	cars[13] = 471;

	// 3rd Row Helis
	cars[14] = 506;
	cars[15] = 487;
	cars[16] = 497;
	cars[17] = 513;
	cars[18] = 519;
	cars[19] = 579;
	cars[20] = 560;

	// 2nd Page 1st Row
	cars[21] = 424;
	cars[22] = 556;
	cars[23] = 557;
	cars[24] = 495;
	cars[25] = 568;
	cars[26] = 480;
	cars[27] = 533;

	// 2nd Row
	cars[28] = 439;
	cars[29] = 555;
	cars[30] = 400;
	cars[31] = 470;
	cars[32] = 468;
	cars[33] = 535;
	cars[34] = 434;

	// 3rd Row
	cars[35] = 571;
	cars[36] = 409;
	cars[37] = 539;
	cars[38] = 402;
	cars[39] = 562;
	cars[40] = 492;
	cars[41] = 550;

	// 3rd Page 1st row
	cars[42] = 416;
	cars[43] = 490;
	cars[44] = 407;
	cars[45] = 597;
	cars[46] = 598;
	cars[47] = 420;
	cars[48] = 431;

	// 3rd Page 2nd row
	cars[49] = 460;
	cars[50] = 512;
	cars[51] = 553;
	cars[52] = 577;
	cars[53] = 592;
	cars[54] = 469;
	cars[55] = 593;

	// 3rd Page 3rd row Boats
	cars[56] = 561;
	cars[57] = 493;
	cars[58] = 452;
	cars[59] = 446;
	cars[60] = 473;
  	cars[61] = 453;
  	cars[62] = 484;

	// 4th Page 1st row
	cars[63] = 403;
	cars[64] = 406;
	cars[65] = 408;
	cars[66] = 421;
	cars[67] = 422;
	cars[68] = 427;
	cars[69] = 443;

	// 4th Page 2nd row
	cars[70] = 462;
	cars[71] = 477;
	cars[72] = 494;
	cars[73] = 500;
	cars[74] = 505;
	cars[75] = 515;
	cars[76] = 536;

	// 4th Page 3rd row
	cars[77] = 542;
	cars[78] = 561;
	cars[79] = 573;
	cars[80] = 575;
	cars[81] = 580;
	cars[82] = 581;
	cars[83] = 589;

	// 5th Page 1st row
	cars[84] = 599;
	cars[85] = 601;
	cars[86] = 602;
	cars[87] = 603;
	cars[88] = 423;
	cars[89] = 457;
	cars[90] = 502;

	// 5th Page 2nd row
	cars[91] = 508;
	cars[92] = 525;
	cars[93] = 545;

	ShowModelSelectionMenuEx(playerid, cars, 94, "Select Vehicle", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowAirplanes(playerid)
{
	new cars[10];
	cars[0] = 460;
	cars[1] = 476;
	cars[2] = 511;
	cars[3] = 512;
	cars[4] = 513;
	cars[5] = 519;
	cars[6] = 553;
	cars[7] = 577;
	cars[8] = 592;
	cars[9] = 593;
	ShowModelSelectionMenuEx(playerid, cars, 10, "Airplanes", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowHelicopters(playerid)
{
	new cars[7];
	cars[0] = 548;
	cars[1] = 417;
	cars[2] = 487;
	cars[3] = 488;
	cars[4] = 497;
	cars[5] = 563;
	cars[6] = 469;
	ShowModelSelectionMenuEx(playerid, cars, 7, "Helicopters", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowBikes(playerid)
{
	new cars[13];
	cars[0] = 581;
	cars[1] = 509;
 	cars[2] = 481;
 	cars[3] = 462;
 	cars[4] = 521;
 	cars[5] = 463;
 	cars[6] = 510;
 	cars[7] = 522;
 	cars[8] = 461;
 	cars[9] = 448;
 	cars[10] = 471;
 	cars[11] = 468;
 	cars[12] = 586;
	ShowModelSelectionMenuEx(playerid, cars, 13, "Bikes", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowConvert(playerid)
{
	new cars[4];
	cars[0] = 480;
	cars[1] = 533;
	cars[2] = 439;
	cars[3] = 555;
	ShowModelSelectionMenuEx(playerid, cars, 4, "Convertibles", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowIndustrial(playerid)
{
	new cars[24];
	cars[0] = 499;
	cars[1] = 422;
	cars[2] = 482;
	cars[3] = 498;
	cars[4] = 609;
	cars[5] = 524;
	cars[6] = 578;
	cars[7] = 455;
	cars[8] = 403;
	cars[9] = 414;
	cars[10] = 582;
	cars[11] = 443;
	cars[12] = 514;
	cars[13] = 515;
	cars[14] = 440;
	cars[15] = 543;
	cars[16] = 605;
	cars[17] = 459;
	cars[18] = 531;
 	cars[19] = 408;
 	cars[20] = 552;
 	cars[21] = 478;
 	cars[22] = 456;
 	cars[23] = 554;
	ShowModelSelectionMenuEx(playerid, cars, 24, "Industrial", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowLowriders(playerid)
{
	new cars[8];
	cars[0] = 536;
	cars[1] = 575;
	cars[2] = 534;
	cars[3] = 567;
	cars[4] = 535;
	cars[5] = 566;
	cars[6] = 576;
	cars[7] = 412;
	ShowModelSelectionMenuEx(playerid, cars, 8, "Lowriders", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowOffRoad(playerid)
{
	new cars[12];
	cars[0] = 568;
 	cars[1] = 424;
  	cars[2] = 573;
  	cars[3] = 579;
  	cars[4] = 400;
  	cars[5] = 500;
  	cars[6] = 444;
  	cars[7] = 556;
  	cars[8] = 557;
  	cars[9] = 470;
 	cars[10] = 505;
  	cars[11] = 495;
	ShowModelSelectionMenuEx(playerid, cars, 12, "Off Road", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowPublicVehicles(playerid)
{
	new cars[16];
	cars[0] = 416;
	cars[1] = 433;
 	cars[2] = 431;
 	cars[3] = 438;
 	cars[4] = 437;
 	cars[5] = 523;
 	cars[6] = 490;
 	cars[7] = 528;
 	cars[8] = 407;
 	cars[9] = 544;
 	cars[10] = 596;
 	cars[11] = 598;
 	cars[12] = 597;
 	cars[13] = 599;
 	cars[14] = 601;
 	cars[15] = 420;
	ShowModelSelectionMenuEx(playerid, cars, 16, "Service Vehicles", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowSaloons(playerid)
{
	new cars[33];
	cars[0] = 445;
	cars[1] = 504;
 	cars[2] = 401;
 	cars[3] = 518;
 	cars[4] = 527;
 	cars[5] = 542;
 	cars[6] = 507;
 	cars[7] = 585;
 	cars[8] = 419;
 	cars[9] = 526;
 	cars[10] = 604;
 	cars[11] = 466;
 	cars[12] = 492;
 	cars[13] = 474;
 	cars[14] = 546;
 	cars[15] = 517;
 	cars[16] = 410;
 	cars[17] = 551;
 	cars[18] = 516;
 	cars[19] = 467;
 	cars[20] = 600;
 	cars[21] = 426;
 	cars[22] = 436;
 	cars[23] = 547;
 	cars[24] = 405;
 	cars[25] = 580;
 	cars[26] = 560;
 	cars[27] = 550;
 	cars[28] = 549;
 	cars[29] = 540;
 	cars[30] = 491;
 	cars[31] = 529;
 	cars[32] = 421;
	ShowModelSelectionMenuEx(playerid, cars, 33, "Saloons", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowSportVehicles(playerid)
{
	new cars[21];
	cars[0] = 602;
 	cars[1] = 429;
 	cars[2] = 496;
 	cars[3] = 402;
 	cars[4] = 541;
 	cars[5] = 415;
 	cars[6] = 589;
 	cars[7] = 587;
 	cars[8] = 565;
 	cars[9] = 494;
 	cars[10] = 502;
 	cars[11] = 503;
 	cars[12] = 411;
 	cars[13] = 559;
 	cars[14] = 603;
 	cars[15] = 475;
 	cars[16] = 506;
 	cars[17] = 451;
 	cars[18] = 558;
 	cars[19] = 477;
 	cars[20] = 562;
	ShowModelSelectionMenuEx(playerid, cars, 21, "Sport Vehicles", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowStationWagons(playerid)
{
	new cars[5];
	cars[0] = 418;
	cars[1] = 404;
	cars[2] = 479;
	cars[3] = 458;
	cars[4] = 561;
	ShowModelSelectionMenuEx(playerid, cars, 5, "Station Wagons", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowBoats(playerid)
{
	new cars[10];
	cars[0] = 472;
	cars[1] = 473;
	cars[2] = 493;
	cars[3] = 595;
	cars[4] = 484;
	cars[5] = 430;
	cars[6] = 453;
	cars[7] = 452;
	cars[8] = 446;
	cars[9] = 454;
	ShowModelSelectionMenuEx(playerid, cars, 10, "Boats", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowRCVehicles(playerid)
{
	new cars[5];
	cars[0] = 441;
	cars[1] = 465;
	cars[2] = 501;
	cars[3] = 564;
	cars[4] = 594;
	ShowModelSelectionMenuEx(playerid, cars, 5, "RC Vehicles", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}
stock ShowUniqueVehicles(playerid)
{
	new cars[21];
	cars[0] = 485;
 	cars[1] = 457;
 	cars[2] = 483;
 	cars[3] = 508;
 	cars[4] = 532;
 	cars[5] = 486;
 	cars[6] = 406;
 	cars[7] = 530;
 	cars[8] = 434;
 	cars[9] = 545;
 	cars[10] = 588;
 	cars[11] = 571;
 	cars[12] = 572;
 	cars[13] = 423;
 	cars[14] = 442;
 	cars[15] = 428;
 	cars[16] = 409;
 	cars[17] = 574;
 	cars[18] = 525;
 	cars[19] = 583;
	cars[20] = 539;
	ShowModelSelectionMenuEx(playerid, cars, 21, "Unique Vehicles", VEHICLE_MENU, -16.0, 0.0, -55.0, 0.877, 0x00000099, 0x000000EE, 0xACCBF1FF);
}

stock ShowWeaponMenu(playerid)
{
	ShowPlayerDialog(playerid, WEAPON_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Weapons", "Rifles\t\t\t"LG_E"\nSubmachine Guns\t"LG_E"\nShot Guns\t\t"LG_E"\nHand Guns\t\t"LG_E"\nMelee Weapons\t"LG_E"\nSpecial Weapons\t"LG_E"\n"GREY_E"Custom Weapon Set", "Select", "Cancel");
}

stock ShowTeleportMenu(playerid)
{
	new tStr[450];
	strcat(tStr, ""YELLOW_E"Stunt Zones\t\t"GREY_E"[/stunt]\n"RED_E"Cities\t\t\t"GREY_E"[/cities]\n"BLUE_E"Jumps\t\t\t"GREY_E"[/jumps]\n"LB2_E"Fun Maps\t\t"GREY_E"[/funmaps]\n"GREEN_E"Challenges\t\t"GREY_E"[/challenge]\n"PURPLE_E"Tune Shops\t\t"GREY_E"[/tunes]");
	strcat(tStr, "\n"BLUE_E"Drifts\t\t\t"GREY_E"[/drift]\n"ORANGE_E"Miscellaneous\t\t"GREY_E"[/misc]\n"RED_E"Races\t\t\t"GREY_E"[/races]\n"IVORY_E"DM Zones\t\t"GREY_E"[/dm]\n"LRED_E"New Maps\t\t"GREY_E"[/newmaps]\n"LB_E"Minigames\t\t"GREY_E"[/minigames]");
	ShowPlayerDialog(playerid, TELE_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Teleports", tStr, "Select", "Exit");
	return 1;
}

stock ShowCarBuyMenu(playerid)
{
	ShowPlayerDialog(playerid, CARBUY_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Private Vehicle Shop", "Sport Vehicles\nBikes\nConvertibles\nLowriders\nCasual Vehicles\nOff Road\nUnique Vehicles\n"WHITEP_E"VIP Vehicles", "Select", "Cancel");
	return 1;
}

stock ShowDerbyVotingDialog(playerid)
{
	ShowPlayerDialog(playerid, DERBY_VOTING_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Derby Map Voting", ""GREY_E"None\nCar Madness\nRoad to Sky\nRoad Rush\nGolden Gorund\nRockFord\nDesert\nHangout\nParadise", "Vote", "");
}

stock ShowShooterVotingDialog(playerid)
{
	ShowPlayerDialog(playerid, SHOOTER_VOTING_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Shooter Map Voting", ""GREY_E"None\nBright Ground\nLight Sky", "Vote", "");
}
stock ShowTdmVotingDialog(playerid)
{
	ShowPlayerDialog(playerid, TDM_VOTING_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"TDM Map Voting", ""GREY_E"None\nTrain\nDuel", "Vote", "");
}


stock ShowTuneMenu(playerid)
{
	ShowPlayerDialog(playerid, TUNE_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Car Tuning Menu", "Car Colors\nPaint Jobs\nWheels\nHydraulics\nAdd Nitro\nRepair Car\n"WHITE_E"-> "PINK_E"Extra Modifications", "Select", "Close");
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skinlist)
	{
		if(response)
		{
			if(GetPlayerSkin(playerid) == modelid)
			{
   				format(str, sizeof(str), "ERROR: "GREY2_E"You are already using skin ID %d!", modelid);
		    	SendClientMessage(playerid, COLOR_RED, str);
			    return true;
			}
			if(InDM[playerid] == 13)
			{
				if(GetPVarInt(playerid, "Cop") != 0) return Error(playerid, "You can't change your skin as a cop!");
			    if(modelid == 265 || modelid == 266 || modelid == 267 || modelid == 280 || modelid == 281 || modelid == 282 || modelid == 283 || modelid == 284 || modelid == 285 || modelid == 286 || modelid == 287 || modelid == 288)
			        return Error(playerid, "You can't choose a cop skin as a robber!");
		  	}
		  	if(InDM[playerid] == 13) SetPVarInt(playerid, "CnRSkin", modelid);
			SetPlayerSkin(playerid, modelid);
			pInfo[playerid][pSaveSkin] = modelid;
			format(str, sizeof(str),  ""WHITE_E"["YELLOW_E"UFF"WHITE_E"] You have changed your skin to %d", modelid);
			SendClientMessage(playerid, COLOR_GREY, str);
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Use /saveskin to save your selected skin!");
		}
 	}
 	if(listid == toyslist)
	{
	    if(response)
	    {
	    	if(pCash[playerid] < 20000)
		    {
				Error(playerid, "You don't have enough money to purchase this, each toy costs $20,000!");
				return 1;
    		}
	    	GivePlayerCash(playerid, -20000);
		    if(!PurchasedToy[playerid]) MySQL_CreatePlayerToy(playerid);

			SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREEN_E"Purchased toy for $20,000!");
			pToys[playerid][toySelected[playerid]][toy_model] = modelid;
			new finstring[750];
			strcat(finstring, "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight tigh\nLeft foot\nRight foot");
			strcat(finstring, "\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw");
			ShowPlayerDialog(playerid, TOY_DIALOG + 3, DIALOG_STYLE_LIST, ""WHITE_E"Select Bone", finstring, "Select", "Cancel");
		}
	}
 	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(extraid == VEHICLE_MENU)
    {
        if(response)
        {
         	switch(modelid)
			{
				case 592, 577, 493, 452, 446, 519, 453, 484, 553: // Models not allowed near spawn.
				{
        			if(IsPlayerInRangeOfPoint(playerid, 85.0, 376.6497, 2506.7773, 16.6647)
					|| IsPlayerInRangeOfPoint(playerid, 85.0, -2629.5991, 1357.5739, 7.1000)
					|| IsPlayerInRangeOfPoint(playerid, 85.0, -1208.9193, 26.1246, 13.9543)
					|| IsPlayerInRangeOfPoint(playerid, 85.0, 2155.2126, 1677.7125, 10.2580)) // AA, SF, SFAIR, LV
					{
						SendClientMessage(playerid, COLOR_GREY2, ""RED_E"Server: "GREY2_E"You can't spawn this vehicle near the spawnzone!");
						ShowVehicleMenu(playerid);
						return true;
					}
				}
			}
	        format(str, sizeof(str), ""YELLOW_E"Vehicle Spawned");
 			GameTextForPlayer(playerid,str, 3500, 3);
        	SpawnPlayerVehicle(playerid, modelid);
        }
        else ShowVehicleMenu(playerid);
    }
    return 1;
}
/*
CMD:einvite(playerid)
{
    if(pAdmin[playerid] < 2)
    		return Error(playerid, "Insufficient permissions!");
    ShowPlayerDialog(playerid, EINVITEMENU, DIALOG_STYLE_LIST, "Select Event Invitation:", ""LG_E"Cage Fight\n"LB_E"Field Fight\n"PINK_E"Derby\n"BLUE_E"Dodge the Shamal", "Invite", "Cancel");
	return 1;
}
*/
// Event System
CMD:event(playerid)
{
    if(pAdmin[playerid] < 3)
    		return Error(playerid, "Insufficient permissions!");
	if(EventGoingOn == 1) return Error(playerid, "There is an event going on now, if you want to force end it, use: /endevent.");
  	if(EventGoingOn == 2) return Error(playerid, "There is a derby going on now, if you want to force end it, use: /endderby.");
  	ShowPlayerDialog(playerid, EVENTMENU, DIALOG_STYLE_LIST, "Select Event Type:", ""LG_E"Cage Fight\n"LB_E"Field Fight\n"PINK_E"Derby\n"BLUE_E"Dodge the Shamal", "Select", "Cancel");
	return 1;
}

CMD:je(playerid)
{
	if(EventGoingOn == 0) return Error(playerid, "There is no event active!");
	if(EventStarted == 1) return Error(playerid, "The event has already started, wait for the next one!");
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't join an event while in a DM! Type /leave to exit.");
 		return true;
	}
	if(RaceParticipant[playerid] == true)
	{
 		Error(playerid, "You can't join an event while in a race! Type /leave to exit.");
 		return true;
	}
	if(doingStunt[playerid] != 0) return Error(playerid, "Teleport out of the stunt area to join the event!");
	if(InEvent[playerid] != 0) return Error(playerid, "You are already in the event!");

	if(InDerby[playerid] == 1) return Error(playerid, "You are already in the derby!");
	{
		if(DerbyEvent == 1)
		{
			if(PlayersJoined >= 30)
			{
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the derby, it has reached its max players!");
				return 1;
			}
			DerbyPlayers ++;
			PlayersJoined ++;
			SavePlayerPosition(playerid);
			InDM[playerid] = 0;
  			InEvent[playerid] = 1;
  			InDerby[playerid] = 1;
  			canUseKey[playerid] = false;
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 0);
			if(pPremium[playerid] == 1)
			{
				SetPlayerArmour(playerid, 50.0);
			}
			doingStunt[playerid] = 10;
			canUseKey[playerid] = false;
			ResetPlayerWeapons(playerid); //Reset player weps for preset weps
			SetPlayerVirtualWorld(playerid, 11);
 			SetPlayerInterior(playerid, 15);
 			SpawnPlayerVehicle(playerid, 504, false);
			switch(PlayersJoined)
			{
                case 1: SetPlayerVehiclePosition(playerid, -3320.7000000,-3527.3000000,17.1000000,183.5000000);
				case 2: SetPlayerVehiclePosition(playerid, -3299.1001000,-3502.7000000,17.1000000,273.4990000);
				case 3: SetPlayerVehiclePosition(playerid, -3359.2000000,-3538.8000000,17.1000000,188.2490000);
				case 4: SetPlayerVehiclePosition(playerid, -3300.7000000,-3571.1001000,17.1000000,230.2450000);
				case 5: SetPlayerVehiclePosition(playerid, -3271.5000000,-3544.1001000,17.1000000,47.4900000);
				case 6: SetPlayerVehiclePosition(playerid, -3239.8000000,-3541.3999000,7.5000000,2.4880000);
				case 7: SetPlayerVehiclePosition(playerid, -3268.8999000,-3623.7000000,7.5000000,93.4830000);
				case 8: SetPlayerVehiclePosition(playerid, -3381.3000000,-3629.5000000,7.5000000,93.4830000);
				case 9: SetPlayerVehiclePosition(playerid, -3400.6001000,-3560.3000000,7.5000000,3.483000);
				case 10: SetPlayerVehiclePosition(playerid, -3404.8000000,-3477.1001000,7.5000000,3.4830000);
				case 11: SetPlayerVehiclePosition(playerid, -3351.3000000,-3466.3999000,7.5000000,273.4830000);
				case 12: SetPlayerVehiclePosition(playerid, -3258.7000000,-3461.5000000,7.5000000,273.4830000);
				case 13: SetPlayerVehiclePosition(playerid, -3338.3999000,-3504.5000000,7.5000000,217.4830000);
				case 14: SetPlayerVehiclePosition(playerid, -3363.1001000,-3530.5000000,7.5000000,249.4800000);
				case 15: SetPlayerVehiclePosition(playerid, -3346.5000000,-3592.0000000,7.5000000,322.9800000);
				case 16: SetPlayerVehiclePosition(playerid, -3293.5000000,-3600.3999000,7.5000000,254.9760000);
				case 17: SetPlayerVehiclePosition(playerid, -3256.0000000,-3575.0000000,7.5000000,218.9710000);
				case 18: SetPlayerVehiclePosition(playerid, -3310.3000000,-3486.6001000,7.5000000,140.9680000);
				case 19: SetPlayerVehiclePosition(playerid, -3282.6001000,-3566.5000000,7.5000000,53.7280000);
				case 20: SetPlayerVehiclePosition(playerid, -3371.2000000,-3584.3000000,7.5000000,27.7230000);
			}
			vID = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vID, 11);
			SetPVarInt(playerid, "DerbyVeh", 1);
			GivePlayerWeapon(playerid, 29, 6000); //MP5
			SendClientMessage(playerid, COLOR_GREY, "{F42626}[DERBY]"GREY_E" You have joined the Derby event, you must eliminate all players till your in the last vehicle standing.");
			SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
			format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the event, type /je ingame to join.", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
			if(pAdmin[playerid] == 0) TogglePlayerControllable(playerid, false);
			GodModeLabel(playerid, false);
			if(GetPVarInt(playerid, "HideObjects"))
			{
				DeletePVar(playerid, "HideObjects");
				Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
		 	}
			return 1;
		}
	}
	//------------------------- Cage Fight----------------------------------
	if(CageFight == 1)
	{
			if(NumEventPlayers >= 20)
			{
				SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the event, it has reached its max players (20)!");
				return 1;
			}
			SavePlayerPosition(playerid);
			InDM[playerid] = 22;
        	SetPlayerVirtualWorld(playerid, 13);
			SetPlayerInterior(playerid, 0);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 0);
			canUseKey[playerid] = false;
			if(pPremium[playerid] == 1)
			{
				SetPlayerArmour(playerid, 50.0);
			}
 			NumEventPlayers ++;//counter
     		ResetPlayerWeapons(playerid); //Reset player weps for preset weps
      		GiveEventWeapons(playerid);
			SetCameraBehindPlayer(playerid);
			InEvent[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREY2, ""EVENT""GREY_E" You have joined the cage fight event, you must eliminate all players till your the last man standing.");
			SendClientMessage(playerid, COLOR_GREY2, ""UFF" "GREY_E"You will be frozen until the event starts.");
			format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the event, type /je ingame to join.", pName[playerid], playerid);
 			IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
			switch(random(4))
			{
				case 0: SetPlayerPosition(playerid, 2747.1348 + (random(3) - random(3)), -1767.6613 + (random(3) - random(3)), 79.1520, 90.0783);
				case 1: SetPlayerPosition(playerid, 2734.7717 + (random(3) - random(3)), -1780.1125 + (random(3) - random(3)), 79.1520, 0.4746);
				case 2: SetPlayerPosition(playerid, 2723.0344 + (random(3) - random(3)), -1764.4871 + (random(3) - random(3)), 79.1520, 268.8864);
				case 3: SetPlayerPosition(playerid, 2735.1377 + (random(3) - random(3)), -1754.1909 + (random(3) - random(3)), 79.1520, 177.7672);
			}
		 	SetPlayerWorldBounds(playerid, 2828.125,2632.8125,-1664.0625,-1855.46875);
			if(pAdmin[playerid] == 0) TogglePlayerControllable(playerid, false);
			GodModeLabel(playerid, false);
			return 1;
	}
	else if(CageFight == 2)
	{
		if(NumEventPlayers >= 30)
		{
			SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the event, it has reached its max players! Watch the event using /watchevent.");
			return 1;
		}
		NumEventPlayers++;
		SavePlayerPosition(playerid);
		switch(random(4))
		{
			case 0: SetPlayerPosition(playerid, 1306.2388 + (random(3) - random(3)), 2192.3354 + (random(3) - random(3)), 11.0234, 224.4649);
			case 1: SetPlayerPosition(playerid, 1307.7892 + (random(3) - random(3)), 2111.2991 + (random(3) - random(3)), 11.0156, 317.0949);
			case 2: SetPlayerPosition(playerid, 1387.0259 + (random(3) - random(3)), 2109.4526 + (random(3) - random(3)), 11.0156, 49.8795);
			case 3: SetPlayerPosition(playerid, 1383.7898 + (random(3) - random(3)), 2185.4229 + (random(3) - random(3)), 11.0234, 139.9720);
		}
		InDM[playerid] = 22;
 		SetPlayerVirtualWorld(playerid, 13);
		SetPlayerInterior(playerid, 0);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		canUseKey[playerid] = false;
		if(pPremium[playerid] == 1)
		{
			SetPlayerArmour(playerid, 50.0);
		}
		SetPlayerWorldBounds(playerid, 1427.634, 1244.106, 2227.527, 2065.068);
		ResetPlayerWeapons(playerid);
		GiveEventWeapons(playerid);
		SetPlayerCameraPos(playerid, 1396.226684, 2097.452636, 24.608520);
		SetPlayerCameraLookAt(playerid, 1393.114746, 2100.938476, 22.829599);
		InEvent[playerid] = 2;
		SendClientMessage(playerid, COLOR_GREY, ""EVENT""GREY_E" You have joined the field fight event, you must eliminate all players till your the last man standing.");
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
		format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the field fight, type /je ingame to join.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
		if(pAdmin[playerid] == 0) TogglePlayerControllable(playerid, false);
		GodModeLabel(playerid, false);
		if(GetPVarInt(playerid, "HideObjects"))
		{
			DeletePVar(playerid, "HideObjects");
			Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	 	}
	}
	////////////////////////////// Shamal///////////////////////////////////
    if(Shamal == 3)
	{
		if(PlayersJoined >= 30)
		{
			SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "GREY_E"Sorry you can no longer join the derby, it has reached its max players!");
			return 1;
		}
		NumEventPlayers++;
		SavePlayerPosition(playerid);
		switch(random(2))
		{
			case 0: SetPlayerPosition(playerid, 6246.7095,-318.1765,34.1277,268.5333);
			case 1: SetPlayerPosition(playerid, 6260.7432,-312.3053,34.1277,93.0650);
		}
        InDM[playerid] = 22;
    	SetPlayerVirtualWorld(playerid, 13);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		if(pPremium[playerid] == 1)
		{
			SetPlayerArmour(playerid, 50.0);
		}
		ResetPlayerWeapons(playerid);
  		GiveEventWeapons(playerid);
		InEvent[playerid] = 4;
		canUseKey[playerid] = false;
		SendClientMessage(playerid, COLOR_GREY, ""EVENT""GREY_E" You have joined the Dodge the Shamal event, you must be the last man stading in the shamal.");
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You will be frozen until the event starts.");
		format(tmp, sizeof(tmp), "2,9EVENT3 %s(%i) has entered the Dodge the Shamal, type /je ingame to join.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp);
		if(pPremium[playerid] != 1) TogglePlayerControllable(playerid, false);
		GodModeLabel(playerid, false);
		if(GetPVarInt(playerid, "HideObjects"))
		{
			DeletePVar(playerid, "HideObjects");
			Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	 	}
    }
    else SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no events at the moment.");
    return 1;
}
CMD:eventplayers(playerid)
{
	if(EventGoingOn == 0)
		return Error(playerid, "There is no event going on right now!");
	new eParticipants = 0;
	foreach(Player, ii)
	{
		if(InEvent[ii] == 0) continue;
		eParticipants = eParticipants + 1;
	}

	format(str, sizeof(str), ""RED_E"- "WHITE_E"Showing a list of total %d participants in the event:", eParticipants);
	SendClientMessage(playerid, COLOR_WHITE, str);

	eParticipants = 0;
	foreach(Player, ii)
	{
		if(InEvent[ii] == 0) continue;
		eParticipants = eParticipants + 1;
		format(str, sizeof(str), "%d. %s(%i)", eParticipants, pName[ii], ii);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
	SetTimer("EndEventCheck", 1000, 0);
	SetTimer("EndDerbyCheck", 2000, 0);
	return true;
}
CMD:derbyplayers(playerid)
{


	if(EventGoingOn == 0)
		return Error(playerid, "There is no derby going on right now!");
	new dParticipants = 0;
	foreach(Player, ii)
	{
		if(InDerby[ii] == 0) continue;
		dParticipants = dParticipants + 1;
	}

	format(str, sizeof(str), ""UFF" Showing a list of total %d participants in the DERBY:", dParticipants);
	SendClientMessage(playerid, COLOR_WHITE, str);

	dParticipants = 0;
	foreach(Player, ii)
	{
		if(InEvent[ii] == 0) continue;
		dParticipants = dParticipants + 1;
		format(str, sizeof(str), "%d. %s(%i)", dParticipants, pName[ii], ii);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
	SetTimer("EndEventCheck", 1000, 0);
	SetTimer("EndDerbyCheck", 2000, 0);
	return true;
}
CMD:endevent(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
	if(EventGoingOn == 0)
		return Error(playerid, "There is no event going on right now!");

	end_Event();

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has ended the event.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"The event has been ended by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);
	return 1;
}
CMD:endderby(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
	if(EventGoingOn != 2)
		return Error(playerid, "There is no derby going on right now!");

	end_Event();

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has ended the derby.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"The derby has been ended by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);
	return 1;
}/*
forward Change_TD_colour();
public Change_TD_colour()
{
	static const Colour_Array[12][]=
	{
		"~w~","~r~","~y~","~b~","~g~","~p~","~h~~w~","~h~~r~","~h~~y~","~h~~b~","~h~~g~","~h~~p~"
	};
	new New_String[32];
	static const www[]="www.",uffserver[]="uffserver",com[]=".com";
	format(New_String,sizeof(New_String),"%s%s%s%s%s%s",Colour_Array[random(6)],www,Colour_Array[random(6)],uffserver,Colour_Array[random(6)],com);
	TextDrawSetString(SiteTD, New_String);
	return 1;
}*/


CMD:cd(playerid)
{

	if(pAdmin[playerid] == 0)
	if(pPremium[playerid] == 0)
			return Error(playerid, "Insufficient permissions!");
    if(RaceParticipant[playerid] == true)
    {
    Error(playerid, "You can't start a countdown while in a race, please wait for the race to start.");
    return true;
    }
	if(Count != -1) return Error(playerid, "There is already a countdown in progress, wait for it to end!");

	Count = 6;
	countTimer = SetTimer("pCountDown", 1000, 1);
	
	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    
	foreach(Player, ii)
	{
	    if(IsPlayerInRangeOfPoint(ii,100,x,y,z))
    	{
		  if(RaceParticipant[ii] == false && InDM[ii] == 0 && doingStunt[ii] == 0 && InEvent[ii] == 0) showCD[ii] = 1;
		}
	}

	format(str, sizeof(str), ""BLUE_E"UFF "WHITE_E"{%06x}%s(%i) "WHITE_E"has started a countdown!", pColor[playerid], pName[playerid], playerid);
	SendClientMessageToAll(COLOR_LB, str);
	format(tmp, sizeof(tmp), "4Server:3VIP %s(%i) has started a countdown.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return 1;
}

CMD:stopcount(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

 	Count = -1;
	KillTimer(countTimer);
 	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has stopped the current countdown!", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_RED, str);
	return true;
}
/*stock SendAdminWhisper(p1, params[])
{
    new i = -1;
    format(str, sizeof(str), ""GREY_E"(Whisper) {%06x}%s(%i): "WHITEP_E"%s", pColor[p1], pName[p1], p1, params);
	foreach(Player, ii)
	{
	    if(ii == p1) continue;
		if(pAdmin[ii] >= 1 && pInfo[ii][pSeeWhisper] == 1 && pAdmin[p1] != 5)
		{
		    SendClientMessage(ii, COLOR_WHITEP, str);
		    if(i != -1) SendClientMessage(ii, COLOR_WHITEP, line);
		}
	}
	return 1;
}*/
CMD:wh(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
    
    if(isnull(params))
    {
        Usage(playerid, "/wh <text>");
        SendClientMessage(playerid, COLOR_YELLOW2, "FUNCTION: Will send a message to the players closest to you.");
        return true;
    }
    if(pMute[playerid] > 0)
    {
        format(str, sizeof(str), "* You can't whisper while muted, mute will be lifted in %d seconds.", pMute[playerid]);
        SendClientMessage(playerid, COLOR_ORANGE, str);
        GameTextForPlayer(playerid, "~r~You are muted~y~!", 3000, 5);
        return true;
    }
    // Anti-Advertisement
    new numCount;
    for(new ii = 0; ii < strlen(params); ii++)
    {
        if(params[ii] >= '0' && params[ii] <= '9')
        {
            numCount++;
        }
    }
    if(numCount >= 8)
    {
        if(strfind(params, "34.228.165.73:7777") == -1)
        {
            format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (msg: %s)", pName[playerid], playerid, params);
            SendAdminMessage(COLOR_RED, str);
            SendClientMessage(playerid, COLOR_RED, ""RED_E"Failed to send the message");
            format(str, sizeof(str), "4Server:2 %s(%d) has attempted to advertise! (msg: %s)", pName[playerid], playerid, params);
            IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
            return 1;
        }
    }
    if(strfind(params, "/q", true) != -1)
    {
        Error(playerid, "You are not allowed to type /q in chat!");
        return false;
    }
    GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
    // Decide about multi-line msgs
    new i = -1;
    if(strlen(params) > 70)
    {
        i = strfind(params, " ", false, 60);
        if(i > 80 || i == -1) i = 70;

        // store the second line text
        line = " ";
        strcat(line, params[i]);

        // delete the rest from msg
        params[i] = EOS;
    }
    //Users Whisper
    format(str, sizeof(str), ""GREY_E"(Whisper) {%06x}%s(%i) "WHITEP_E"%s", pColor[playerid], pName[playerid], playerid, params);
    foreach(Player, ii)
    {
        if(IsPlayerInRangeOfPoint(ii, 20.0, POS[0], POS[1], POS[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(ii))
        {
            SendClientMessage(ii, COLOR_WHITEP, str);
            if(i != -1) SendClientMessage(ii, COLOR_WHITEP, line);
        }
    }
    format(str, sizeof(str), "Whisper: "WHITE_E"%s", params);
    SetPlayerChatBubble(playerid, str, COLOR_YELLOW, 20.0, 4000);
    format(str, sizeof(str), "3%s2[%i]: 7(Whisper)1 %s", pName[playerid], playerid, params);
    IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
//    format(str, sizeof(str), ""GREY_E"(Whisper-Spy)%s(%i): %s", pName[playerid], playerid, params);
//	SendAdminMessage(COLOR_GREY, str);
    return true;
}
CMD:bugs(playerid, params[])
{
	Error(playerid, "This command is disabled, please report bugs on our forums!");
	return 1;
}


CMD:suggest(playerid, params[])
{
   	Error(playerid, "This command is disabled, please post suggestions on our forums!");
	return 1;
}
CMD:pc(playerid) return cmd_parachute(playerid);
CMD:para(playerid) return cmd_parachute(playerid);
CMD:parachute(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	GivePlayerWeapon(playerid, 46, 1);
    format(tmp, sizeof(tmp), "~y~~h~parachute received");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return true;
}
CMD:camera(playerid)
{
	GivePlayerWeapon(playerid, 43, 1000);
    format(tmp, sizeof(tmp), "~y~~h~camera received");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return true;
}
CMD:jetpack(playerid)
{
    
	if(pAdmin[playerid] == 0)
	{
		if(pPremium[playerid] == 0)
		{
			Error(playerid, "You must be a premium member to use this command, check /premium for more info.");
			return true;
   		}
	}
	if(pAdmin[playerid] != 5)
	{
		if(InDM[playerid] != 0)
		{
		    Error(playerid, "You can't spawn a jetpack in a deathmatch!");
		    return true;
		}
		if(doingStunt[playerid] != 0)
		{
		    Error(playerid, "You can't spawn a jetpack in this area!");
		    return true;
		}
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	format(tmp, sizeof(tmp), "~y~~h~JETPACK received");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return true;
}

CMD:beer(playerid) return cmd_drinkbeer(playerid);
CMD:drinkbeer(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't drink and drive!");
	    return true;
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	SendClientMessage(playerid, COLOR_GREEN, "You're now drinking beer. I would like to just drink my bud light...");
	return true;
}

CMD:wine(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't drink and drive!");
	    return true;
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	SendClientMessage(playerid, COLOR_GREEN, "You're now drinking wine.");
	return true;
}

CMD:rainbow(playerid)
{

    
    if(pPremium[playerid] < 1)
		return Error(playerid, "You are not a premium member to use that command (/premium)!");

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be a driver in a vehicle to use the rainbow feature!");
		return true;
	}

	if(pInfo[playerid][pRainbow] == 0)
	{
		RainbowTimer[playerid] = SetTimerEx("ChangeColors", 400, true, "i", playerid);
		pInfo[playerid][pRainbow] = 1;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" The Rainbow Effect has been turned on.");
		InfoTD_MSG(playerid, 3000, "~r~T~y~h~b~e ~g~R~r~A~y~I~y~N~b~B~r~~h~O~b~~h~W ~y~~h~E~g~~h~F~r~~h~F~b~~h~E~y~~h~C~r~~h~~h~T ~w~has been turned ~g~~h~on~w~.");
	}
	else
	{
		KillTimer(RainbowTimer[playerid]);
		pInfo[playerid][pRainbow] = 0;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" The Rainbow Effect has been turned off.");
		InfoTD_MSG(playerid, 3000, "~r~T~y~h~b~e ~g~R~r~A~y~I~y~N~b~B~r~~h~O~b~~h~W ~y~~h~E~g~~h~F~r~~h~F~b~~h~E~y~~h~C~r~~h~~h~T ~w~has been turned ~r~~h~off~w~.");
	}
	return true;
}/*
CMD:kill(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

	SendClientMessage(playerid, COLOR_LB, "Enjoy!");
    SendClientMessage(playerid, COLOR_GREY, ""YELLOW_E"Server: "GREY_E"Type /killme for instant death.");
    SetPlayerPosition(playerid, -1951.1355,658.5293,115.8878,32.3417);
    SetPlayerVirtualWorld(playerid, 8);
   	GivePlayerWeapon(playerid, 5, 1);
    GivePlayerWeapon(playerid, 16, 5);
    TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
    InDM[playerid] = 200;
    SetPlayerHealth(playerid, 20.0);
    return 1;
}
*/


/*
CMD:killme(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPVarType(playerid, "commitSuicide"))
	{
	    Error(playerid, "Please wait before committing suicide again.");
	    return true;
	}
    format(str, sizeof(str), "* {%06x}%s(%i) "PINK_E"has committed suicide.", pColor[playerid], pName[playerid], playerid);
 	SendClientMessageToAll(COLOR_RED, str);
	SetPlayerHealth(playerid, 0.0);
	SetPVarInt(playerid, "commitSuicide", 1);
	SetTimerEx("resetKill", 20000, false, "i", playerid);
	InfoTD_MSG(playerid, 4000, "~r~~h~~h~You have committed suicide.");
    return 1;
}
*/
CMD:reclass(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
		return Error(playerid, "You must be on foot to respawn yourself!");

	SetPlayerHealth(playerid, 0.0);
	ForceClassSelection(playerid);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have reclassed yourself!");
	return true;
}
CMD:sp(playerid) return cmd_spos(playerid);
CMD:s(playerid) return cmd_spos(playerid);
CMD:spos(playerid)
{
    
	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't use /spos here!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't save your position while in a DM!");
   		return true;
	}
	if(RaceParticipant[playerid] == true) return Error(playerid, "You can't save your position while racing!");
	if(pSpectating[playerid] != -1) return Error(playerid, "You can't save your position while spectating!");
	if(pSpawned[playerid] == 0) return Error(playerid, "You must be spawned to use this commmand!");
	SavePlayerPositionEx(playerid);
	SendClientMessage(playerid, COLOR_GREEN, ""LG_E"Load position with /l");
    format(tmp, sizeof(tmp), "~y~~h~Position Saved");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	PlayerPlaySound(playerid, 1132, 0, 0, 0);
	return true;
}
CMD:l(playerid) return cmd_lpos(playerid);
CMD:lp(playerid) return cmd_lpos(playerid);
CMD:lpos(playerid)
{
    
	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't use /lpos here!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't load your position while in a DM!");
   		return true;
	}
	if(sPOS2_X[playerid] == 0)
	{
	    GameTextForPlayer(playerid, "~y~Use /s first!", 3000, 3);
	    return true;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    Error(playerid, "You can't load your position while in the passenger seat!");
	    return true;
	}
	if(RaceParticipant[playerid] == true) return Error(playerid, "You can't load your position while racing!");
	if(pSpectating[playerid] != -1) return Error(playerid, "You can't load your position while spectating!");
	if(pSpawned[playerid] == 0) return Error(playerid, "You must be spawned to use this commmand!");
	LoadPlayerPositionEx(playerid);
    format(tmp, sizeof(tmp), "~y~~h~Loaded Position");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}

CMD:tune(playerid)
{
    
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be in a vehicle in order to use /tune!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't tune your vehicle while in a DM!");
   		return true;
	}
	if(InEvent[playerid] != 0 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This command cannot be used while in a derby!");
	    return true;
	}
	if(doingStunt[playerid] == 19 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This command cannot be used while in a derby!");
	    return true;
	}
	ShowTuneMenu(playerid);
	return true;
}

CMD:vtune(playerid)
{
    
	if((vID = GetPlayerVehicleID(playerid)) == 0)
	{
  		Error(playerid, "You must be in a vehicle to apply mods!");
		return true;
	}
	/*if(pPremium[playerid] == 0)
	{
		Error(playerid, "You must be a premium member to use this command, check /premium for more info.");
		return true;
	}*/
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't tune your vehicle while in a DM!");
   		return true;
	}
	if(InEvent[playerid] != 0 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This command cannot be used while in a derby!");
	    return true;
	}
	if(doingStunt[playerid] == 19 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This command cannot be used while in a derby!");
	    return true;
	}
	new v = GetVehicleModel(vID);
	iTemp = 0;
	str = "";
	line = "";
	foreach(new xx : ValidComponents(v))
	{
		// Exclude NOS, wheels and stereo
		if(GetVehicleComponentInSlot(vID, GetVehicleComponentType(xx)) != xx)
		{
			format(str, sizeof(str), ""RED_E"%d: %s\n", xx, componentName[xx - 1000]);
		}
		else
		{
			format(str, sizeof(str), ""GREEN_E"%d: %s\n", xx, componentName[xx - 1000]);
		}

		// TO-DO: optimize concatenation?
		strcat(line, str);

		iTemp ++;
	}

	if(iTemp == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "No components suit this vehicle!");
		return true;
	}

	ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Available components", line, "Apply", "Close"); // TO-DO: memory optimization
	return true;
}


CMD:wheels(playerid, params[])
{
    
 	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in in order to tune your vehicle!");
	    return true;
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be in a vehicle in order to use /wheels!");
	    return true;
	}
	if(!IsNosVehicleModel(GetVehicleModel(GetPlayerVehicleID(playerid))))
	{
	    Error(playerid, "You can't add wheels to this vehicle!");
		return true;
	}
	ShowPlayerDialog(playerid, 504, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Wheels", ""RED_E"Random\nOffroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n"RED_E"Remove Wheels", "Apply", "Back");
	return true;
}

CMD:reaction(playerid, params[])
{
    

    format(str, sizeof(str), ""RED_E"ReactionTest :: "WHITE_E"The reaction test is '%s'!", xChars);
	SendClientMessage(playerid, COLOR_GREEN, str);
	return true;
}

CMD:math(playerid, params[])
{
    

    format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"The math test is '%s'!", mathsCurrent);
	SendClientMessage(playerid, COLOR_GREEN, str);
	return true;
}
CMD:answer(playerid, params[]) return cmd_ans(playerid, params);
CMD:ans(playerid, params[])
{
    
	new answer;
	if(sscanf(params, "d", answer))
	{
	    Usage(playerid, "/ans <answer>");
	    return true;
	}

	if(mathsAnswered == -1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, ""RED_E"[MATHS] "LB2_E"Sorry, not maths is in progress!");
	    return true;
	}

	if(mathsAnswered == 1 && answer == mathsAnswer)
	{
	    if(answer == mathsAnswer)
	    {
	    	format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"Sorry, you're too late, although your answer(%d) would have been right!", answer);
 		}
		else
		{
		    format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"Sorry, you're too late, even though your answer(%d) would have been wrong!", answer);
		}
		SendClientMessage(playerid, COLOR_GREEN, str);
	    return true;
	}

	if(answer > mathsAnswer || answer < mathsAnswer)
	{
	    format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"Sorry, your answer(%d) to %s is wrong!", answer, mathsCurrent);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	// Calculate seconds and milliseconds from tickcount
	datez = GetTickCount() - mathTimeStart;
	hour = datez;
	second = datez / 1000;
	datez = datez - second * 1000;

	format(str, sizeof(str), ""IVORY_E"Mathematics :: "WHITE_E"{%06x}%s(%i) "WHITE_E"has correctly answered %s (answer: %d) in %2d.%03d seconds!", pColor[playerid], pName[playerid], playerid, mathsCurrent, answer, second, datez);
	SendClientMessageToAll(COLOR_WHITE, str);
	format(str, sizeof(str), "~g~~h~~h~+$%d~w~~n~~y~~h~+4 score", mathsAward);
	MSTD_MSG(playerid, 3500, str);
	format(str, sizeof(str), "3,1MATHS:2,0 4%s(%i) has correctly answered %s (answer: %d) winning 2 points and $%d!", pName[playerid], playerid, mathsCurrent, answer, mathsAward);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);

	mathsWon[playerid]++;
	GivePlayerScore(playerid, 4);
	GivePlayerCash(playerid, mathsAward);
	format(query, sizeof(query), "UPDATE players SET maths=maths+1 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	if(mathsWon[playerid] >= 80)
	{
		if(pAch21[playerid] == 0)
		{
			pAch21[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a21=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "Human Calculator", "Congrats you have answered 80 math questions!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
	}

	mathsAnswered = 1;

	SetPlayerChatBubble(playerid, "Won a math challenge!", COLOR_GREEN, 40.0, 5000);

	return true;
}
CMD:time(playerid, params[]) return cmd_mytime(playerid, params);
CMD:mytime(playerid, params[])
{
    
	new hourz;
	if(sscanf(params, "d", hourz))
	{
	    Usage(playerid, "/mytime <hour>");
	    return true;
	}
	if(hourz > 24 || hourz < 0)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"%d is invalid hour! Please keep it within range of 0 - 24!", hourz);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	SetPlayerTime(playerid, hourz, 0);
	pTime[playerid] = hourz;
	format(str, sizeof(str), ""UFF" Your time has been set to %d:00", hourz);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server:3 %s(%i)2 has changed their time to %d:00", pName[playerid], playerid, hourz);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	if(pLogged[playerid] == true)
	{
		format(query, sizeof(query), "UPDATE players SET time=%d WHERE reg_id=%d", hourz, pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:weather(playerid, params[]) return cmd_myweather(playerid, params);
CMD:myw(playerid, params[]) return cmd_myweather(playerid, params);
CMD:myweather(playerid, params[])
{
    
	new weatherz;
	if(sscanf(params, "d", weatherz))
	{
	    Usage(playerid, "/myweather <weather ID>");
	    return true;
	}
	if(weatherz < 0 || weatherz > 50)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"%d is invalid weather ID! Please keep it within the range of 0 - 50!", weatherz);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	SetPlayerWeather(playerid, weatherz);
	pWeather[playerid] = weatherz;
	format(str, sizeof(str), ""UFF" Your weather has been set to %d", weatherz);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server:3 %s(%i)2 has changed their weather to %d", pName[playerid], playerid, weatherz);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	if(pLogged[playerid] == true)
	{
		format(query, sizeof(query), "UPDATE players SET weather=%d WHERE reg_id=%d", weatherz, pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:colors(playerid, params[]) return cmd_color(playerid, params);
CMD:color(playerid, params[])
{
    
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be registered to change your player color!");
	    return true;
	}
	if(InDM[playerid] != 0)
	    return Error(playerid, "You can't use this command while in a DM!");

	if(sscanf(params, "iii", hour, minute, second) || !(0 <= hour <= 255) || !(0 <= minute <= 255) || !(0 <= second <= 255))
	{
		SendClientMessage(playerid, COLOR_YELLOW, ""RED_E"Server: "YELLOW_E"You can also set your own player color using RGB values. /color <0-255> <0-255> <0-255>");
		SendClientMessage(playerid, COLOR_YELLOW, ""RED_E"Server: "YELLOW_E"Use /cc to change your vehicle color.");
		ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Colors", ""RED_E"Red\n"BLUE_E"Blue\n"WHITE_E"White\n{FFFF82}Ivory\n"PINK_E"Pink\n"YELLOW_E"Yellow\n"GREEN_E"Green\n"LB_E"Lightblue\n"GREY_E"Grey\n"ORANGE_E"Orange\n{800080}Purple\n"LG_E"Light Green\n{B0C4DE}Steelblue\n"GOLD_E"Gold", "Select", "Exit");
	}
	else
	{
		if(hour < 10 && minute < 10 && second < 10)
		{
			Error(playerid, "RGB values under 10 are not allowed!");
			return true;
		}

		datez = COLOR_RGB(hour, minute, second, 99);
		SetPlayerColor(playerid, datez);

		format(str, sizeof(str), "Server: Your nickname color has been changed to %d-%d-%d in RGB (also the color of this message)", hour, minute, second);
		SendClientMessage(playerid, datez, str);
		SendClientMessage(playerid, COLOR_GREY, "Server: "GREY2_E"Your nick color has been saved, you will spawn with this color on every connect");
		pColor[playerid] = StripAlpha(GetPlayerColor(playerid));
		format(query, sizeof(query), "UPDATE players SET color=%d WHERE reg_id=%d", datez, pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:rgb(playerid) return cmd_mycolor(playerid);
CMD:mycolor(playerid)
{
    
	HexToRGBA(GetPlayerColor(playerid), hour, minute, second);
	format(str, sizeof(str), ""UFF" "WHITEP_E"Your nick color RGB is %d %d %d", hour, minute, second);
	SendClientMessage(playerid, COLOR_WHITEP, str);
	return true;
}

stock HexToRGBA(colour, &r, &g, &b) // Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
}
CMD:chatcolor(playerid, params[])
{
    
	if(pPremium[playerid] != 1)
	    return Error(playerid, "You must be a VIP to use this command! (/vip)");
	if(GetPVarInt(playerid, "tempPremium") == 1)
		return Error(playerid, "You can't change your color with temporary VIP!");
	if(sscanf(params, "iii", hour, minute, second) || !(0 <= hour <= 255) || !(0 <= minute <= 255) || !(0 <= second <= 255))
	{
		Usage(playerid, "/chatcolor <R> <G> <B>");
	}
	else
	{
		if(hour < 30 && minute < 30 && second < 30)
		{
			Error(playerid, "Color too dark! RGB values under 30 are not allowed!");
			return true;
		}
		datez = COLOR_RGB(hour, minute, second, 99);
		format(str, sizeof(str), "Server: Your chat color has been changed to %d-%d-%d in RGB (also the color of this message)", hour, minute, second);
		SendClientMessage(playerid, datez, str);

		pChatColor[playerid] = StripAlpha(datez);
		format(query, sizeof(query), "UPDATE players SET chat_color=%d WHERE reg_id=%d", datez, pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:crgb(playerid, params[])
{
    
	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/ccrgb <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	HexToRGBA(GetPlayerColor(otherid), hour, minute, second);
	format(str, sizeof(str), ""UFF" "WHITEP_E"His color RGB is %d %d %d", hour, minute, second);
	SendClientMessage(playerid, COLOR_WHITEP, str);
	return true;
}
CMD:idcolor(playerid, params[])
{
    
	if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to use this command! (/premium)");

	if(sscanf(params, "iii", hour, minute, second) || !(0 <= hour <= 255) || !(0 <= minute <= 255) || !(0 <= second <= 255))
	{
		Usage(playerid, "/idcolor <R> <G> <B>");
	}
	else
	{
		if(hour < 30 && minute < 30 && second < 30)
		{
			Error(playerid, "Color too dark! RGB values under 30 are not allowed!");
			return true;
		}
		datez = COLOR_RGB(hour, minute, second, 99);
		format(str, sizeof(str), "Server: Your ID color has been changed to %d-%d-%d in RGB (also the color of this message)", hour, minute, second);
		SendClientMessage(playerid, datez, str);

		pIDColor[playerid] = StripAlpha(datez);
		format(query, sizeof(query), "UPDATE players SET id_color=%d WHERE reg_id=%d", datez, pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:removechatcolor(playerid, params[])
{
    
	if(pChatColor[playerid] == 0) return Error(playerid, "You don't have a custom chat color set!");
	pChatColor[playerid] = 0;
	format(query, sizeof(query), "UPDATE players SET chat_color=0 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have removed your custom chat color.");
	return true;
}

CMD:removeidcolor(playerid, params[])
{
	if(pIDColor[playerid] == 0) return Error(playerid, "You don't have a custom id color set!");
	pIDColor[playerid] = 0;
	format(query, sizeof(query), "UPDATE players SET id_color=0 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have removed your custom ID color.");
	return true;
}
CMD:v2(playerid)
{
    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(RaceParticipant[playerid] == true)
	{
		if(raceVehicles == true)
		{
			SpawnPlayerVehicle(playerid, raceVehicleName);
			format(str, sizeof(str), "ERROR: "GREY_E"You can't spawn vehicles for a custom vehicle race! You have auto-spawned a %s.", vehName[raceVehicleName - 400]);
			SendClientMessage(playerid, COLOR_RED, str);
	    	return true;
		}
	}
	ShowVehicleMenu2(playerid);
	return 1;
}
CMD:carspawn(playerid, params[]) return cmd_v(playerid, params);
CMD:v(playerid, params[])
{
    
    if(InEvent[playerid] != 0)
    {
	     Error(playerid, "You can't spawn vehicles in an event!");
		 return true;
    }
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't spawn a vehicle while in a DM!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
	    return true;
	}
	if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
	if(GetPlayerVehicleID(playerid) == PlayerVehicle[playerid]) return Error(playerid, "Exit your private vehicle to spawn a new one!");
 	if(RaceParticipant[playerid] == true)
        return Error(playerid, "You can't spawn vehicles in race!");
	if(sscanf(params, "s[32]", tmp))
	{
		if(RaceParticipant[playerid] == true)
		{
			ShowPlayerDialog(playerid, 3131, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Vehicle List", ""RED_E"Special Vehicles\n"LG_E"Bikes\n"WHITE_E"Convertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles\nSaloons\n"LG_E"Sport Vehicles\n"WHITE_E"Station Wagons\nUnique Vehicles", "Next", "Exit");
		}
	 	else
	 	{
			ShowVehicleMenu(playerid);
		}
	}
 	else cmd_veh(playerid, tmp);
	return true;
}
CMD:sv(playerid, params[])
{
    
    if(pPremium[playerid] < 1)
		return Error(playerid, "You are not a premium member to spawn special vehicles! (/premium)!");
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't spawn special vehicles while in a DM!");
   		return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
	    return true;
	}
	if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
	if(RaceParticipant[playerid] == true)
	{
		if(raceVehicles == true)
		{
			SpawnPlayerVehicle(playerid, raceVehicleName);
			format(str, sizeof(str), "ERROR: "GREY2_E"You can't spawn vehicles for a custom vehicle race! You have auto-spawned a %s.", vehName[raceVehicleName - 400]);
			SendClientMessage(playerid, COLOR_RED, str);
	    	return true;
		}
	}
	ShowPlayerDialog(playerid, 3449, DIALOG_STYLE_LIST, ""YELLOW_E"Special Vehicles", ""RED_E"Custom Cheetah\n"DARK_E"Custom Infernus\n"LB_E"Police Infernus\n"YELLOW_E"Custom NRG\n"GREEN_E"Custom Bullet\n"WHITE_E"Custom Huntley", "Select", "Back");
	return 1;
}
CMD:w(playerid) return cmd_weapons(playerid);
CMD:gun(playerid) return cmd_weapons(playerid);
CMD:guns(playerid) return cmd_weapons(playerid);
CMD:weaps(playerid) return cmd_weapons(playerid);
CMD:weapon(playerid) return cmd_weapons(playerid);
CMD:weapons(playerid)
{
    
	if(GOD[playerid] == 1 && InDM[playerid] == 0)
		return Error(playerid, "You can't purchase weapons with godmode enabled, type /god to disable it.");
 	if(InDM[playerid] != 0)
 	{
 		Error(playerid, "You can't purchase weapons in this area!");
		return 1;
 	}
 	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't purchase weapons in this area!");
	    return true;
	}
 	if(InDuel[playerid] == 1)
 	{
 		Error(playerid, "You can't purchase weapons while in a duel!");
		return 1;
 	}
	if(InEvent[playerid] != 0)
 	{
 		Error(playerid, "You can't purchase weapons while in an event!");
		return 1;
 	}

	TogglePlayerControllable(playerid, false);
	ShowWeaponMenu(playerid);
	return true;
}
CMD:cv(playerid, params[]) return cmd_createvehicle(playerid, params);
CMD:createvehicle(playerid, params[])
{
    
	if(pAdmin[playerid] != 5) return false;

	new sVehicle[32], spawnModel;
	if(sscanf(params, "s[32]", sVehicle))
	{
	    Usage(playerid, "/cv <vehicle name/ID>");
	    return 1;
	}
	if(!IsNumeric(sVehicle))
	{
	 	spawnModel = GetVehicleModelIDFromName(sVehicle);
	}
	else spawnModel = strval(sVehicle);

	if(spawnModel < 400 || spawnModel > 611)
	{
		return Error(playerid, "You entered an invalid vehicle name!");
	}

	SpawnPlayerVehicle(playerid, spawnModel, false);
	return true;
}

CMD:v70(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	SpawnPlayerVehicle(playerid, 415);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);
	// Cheetah
	sObjects[0][playerid] = CreateObject(2985,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[0][playerid], vID, -0.450000,0.824999,-0.599999,-27.000003,-0.000000,-269.999877);
	sObjects[1][playerid] = CreateObject(2985,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[1][playerid], vID, 0.524999,0.824999,-0.674999,21.599998,-0.000000,-269.999877);
	sObjects[2][playerid] =  CreateObject(18647,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[2][playerid], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[3][playerid] = CreateObject(18647,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[3][playerid], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[4][playerid] = CreateObject(1254,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -0.000000,2.100000,0.000000,67.500007,0.000000,0.000000);
	sObjects[5][playerid] = CreateObject(19314,0,0,-1000,0,0,0,100);
	AttachObjectToVehicle(sObjects[5][playerid], vID, -0.000000,0.000000,0.599999,70.200004,89.099983,0.000000);
	ChangeVehicleColor(vID, 0, 0);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a custom Cheetah!");
    format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:v71(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
	SpawnPlayerVehicle(playerid, 411);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);
	// Infernus
	sObjects[0][playerid] = CreateObject(19419,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[0][playerid], vID, 0.000000,-2.100000,0.300000,0.000000,0.000000,0.000000);
	sObjects[1][playerid] = CreateObject(19419,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[1][playerid], vID, 0.000000,-1.725000,0.300000,0.000000,0.000000,0.000000);
	sObjects[2][playerid] =  CreateObject(18647,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[2][playerid], vID, -1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[3][playerid] = CreateObject(18647,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[3][playerid], vID, 1.049999,-0.150000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[4][playerid] = CreateObject(18646,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -0.449999,0.000000,0.749999,0.000000,0.000000,0.000000);
	sObjects[5][playerid] = CreateObject(1247,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[5][playerid], vID, -0.000000,2.175000,0.075000,70.200004,-0.000001,-0.000001);
	ChangeVehicleColor(vID, 0, 0);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a Police Infernus!");
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}

CMD:v75(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
	SpawnPlayerVehicle(playerid, 411);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);

	sObjects[0][playerid] = CreateObject(19314,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[0][playerid], vID, -0.000000,2.625000,0.000000,89.099983,0.000000,-89.099983);

	sObjects[1][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[1][playerid], vID, -0.525000,0.150000,0.599999,0.000000,0.000000,89.099983);

	sObjects[2][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[2][playerid], vID, 0.524999,0.150000,0.599999,0.000000,0.000000,89.099983);

	sObjects[3][playerid] = CreateObject(18749,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[3][playerid], vID, -0.000000,-2.550000,0.075000,0.000000,0.000000,0.000000);

	sObjects[4][playerid] = CreateObject(19280,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -0.000000,2.850001,-0.375000,0.000000,0.000000,0.000000);

	sObjects[5][playerid] = CreateObject(1003,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[5][playerid], vID, -0.000000,-2.325000,0.225000,0.000000,0.000000,0.000000);

	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a Custom Infernus!");
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:v72(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
 	SpawnPlayerVehicle(playerid, 579);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);
	// Huntley
	sObjects[0][playerid] = CreateObject(2985,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[0][playerid], vID, -0.000000,1.725000,-0.225000,0.000001,0.000000,91.799980);
	sObjects[1][playerid] = CreateObject(19314,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[1][playerid], vID, 0.000000,0.225000,1.200000,91.799980,-89.099983,0.000000);
	sObjects[2][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[2][playerid], vID, -0.600000,-1.049999,1.200000,-0.000001,-0.000001,89.099983);
	sObjects[3][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[3][playerid], vID, 0.674999,-1.049999,1.200000,-0.000001,-0.000001,89.099983);
	sObjects[4][playerid] = CreateObject(18652,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[5][playerid] = CreateObject(18652,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[5][playerid], vID, 1.049999,0.000000,-0.524999,0.000000,0.000000,0.000000);
	sObjects[6][playerid] = CreateObject(1247,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[6][playerid], vID, -1.125000,0.899999,0.150000,-5.399999,0.000000,89.099983);
	sObjects[7][playerid] = CreateObject(1247,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[7][playerid], vID, 1.124999,0.899999,0.150000,-5.399999,0.000000,89.099983);
	sObjects[8][playerid] = CreateObject(1318,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[8][playerid], vID, 0.000000,-0.899999,1.350000,-264.599853,-359.100280,-359.100280);
	sObjects[9][playerid] = CreateObject(954,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[9][playerid], vID, -0.000000,-2.700001,0.749999,-21.600002,-0.000000,-0.000000);
	sObjects[10][playerid] = CreateObject(1254,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[10][playerid], vID, 0.000000,2.400000,0.225000,0.000000,0.000000,0.000000);
	sObjects[11][playerid] = CreateObject(19419,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[11][playerid], vID, -0.000000,-2.250000,1.125000,0.000000,0.000000,0.000000);
	sObjects[12][playerid] = CreateObject(1248,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[12][playerid], vID, -0.000000,-2.775001,0.000000,0.000000,0.000000,0.000000);
	ChangeVehicleColor(vID, 0, 0);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a custom Huntley!");
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:v73(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
	SpawnPlayerVehicle(playerid, 541);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);
	// Bullet
	sObjects[0][playerid] = CreateObject(1254,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[0][playerid], vID, -0.000000,1.950000,0.075000,72.900001,0.000000,0.000000);
	sObjects[1][playerid] = CreateObject(18647,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[1][playerid], vID, -0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);
	sObjects[2][playerid] = CreateObject(18647,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[2][playerid], vID, 0.974999,0.000000,-0.375000,0.000000,0.000000,0.000000);
	sObjects[3][playerid] = CreateObject(18749,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[3][playerid], vID, -0.000000,-1.800000,0.375000,-78.299995,-0.000001,0.000000);
	sObjects[4][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -0.300000,0.000000,0.599999,-0.000002,0.000000,89.099960);
	sObjects[5][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[5][playerid], vID, 0.374999,0.000000,0.599999,-0.000002,0.000000,89.099960);
	sObjects[6][playerid] = CreateObject(18646,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[6][playerid], vID, -0.000000,0.000000,0.674999,0.000000,0.000000,0.000000);
	sObjects[7][playerid] = CreateObject(355,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[7][playerid], vID, -0.149999,-2.324999,0.000000,5.399998,-16.200000,5.400000);

	ChangeVehicleColor(vID, 0, 3);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a custom Bullet!");
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:v74(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pPremium[playerid] == 0)
	    return Error(playerid, "You must be a Premium Member to spawn this vehicle. (/premium)");
	SpawnPlayerVehicle(playerid, 522);
	SetPVarInt(playerid, "CustomCar", 1);
	vID = GetPlayerVehicleID(playerid);
	// NRG
	sObjects[0][playerid] = CreateObject(18650,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[0][playerid], vID, 0.000000,0.000000,-0.674999,0.000000,0.000000,0.000000);
	sObjects[1][playerid] = CreateObject(362,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[1][playerid], vID, 0.075000,0.600000,0.675000,5.399998,24.300001,99.899971);
	sObjects[2][playerid] = CreateObject(1254,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[2][playerid], vID, -0.150000,1.800000,0.524999,0.000000,0.000000,0.000000);
	sObjects[3][playerid] = CreateObject(18646,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[3][playerid], vID, 0.000000,-0.899999,0.599999,0.000000,0.000000,0.000000);
	sObjects[4][playerid] = CreateObject(19130,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[4][playerid], vID, -0.675000,0.000000,0.824999,40.500003,0.000002,-80.999992);
	sObjects[5][playerid] = CreateObject(19130,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[5][playerid], vID, 0.824999,0.000000,0.824999,40.500003,0.000002,-269.999877);
	sObjects[6][playerid] = CreateObject(18749,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[6][playerid], vID, 0.000000,-1.125000,0.300000,0.000000,0.000000,0.000000);
	sObjects[7][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[7][playerid], vID, -0.375000,0.000000,0.000000,0.000000,0.000000,89.099983);
	sObjects[8][playerid] = CreateObject(359,0,0,-1000,0,0,0);
	AttachObjectToVehicle(sObjects[8][playerid], vID, 0.449999,0.000000,0.000000,0.000000,0.000000,89.099983);

	ChangeVehicleColor(vID, 0, 6);
	SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have spawned a custom NRG!");
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:evehicle(playerid, params[]) return cmd_eveh(playerid, params);
CMD:eveh(playerid, params[])
{
    if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");
	    
    if(EventGoingOn == 0) return Error(playerid, "There is no event active!");

	new sVehicle[32], spawnModel;
	if(sscanf(params, "s[32]", sVehicle))
	{
	    Usage(playerid, "/eveh <vehicle name/ID>");
	    return 1;
	}
	if(!IsNumeric(sVehicle))
	{
	 	spawnModel = GetVehicleModelIDFromName(sVehicle);
	}
	else spawnModel = strval(sVehicle);

	if(spawnModel < 400 || spawnModel > 611)
	{
		return Error(playerid, "You entered an invalid vehicle name!");
	}
  	SpawnPlayerVehicle(playerid, spawnModel);
	return 1;
}


CMD:car(playerid, params[]) return cmd_veh(playerid, params);
CMD:vehicle(playerid, params[]) return cmd_veh(playerid, params);
CMD:veh(playerid, params[])
{
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't spawn a vehicle while in a DM!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
	    return true;
	}

	new sVehicle[32], spawnModel;
	if(sscanf(params, "s[32]", sVehicle))
	{
	    Usage(playerid, "/v <vehicle name/ID>");
	    return 1;
	}
	if(!IsNumeric(sVehicle))
	{
	 	spawnModel = GetVehicleModelIDFromName(sVehicle);
	}
	else spawnModel = strval(sVehicle);

	if(spawnModel < 400 || spawnModel > 611)
	{
		return Error(playerid, "You entered an invalid vehicle name!");
	}
	switch(spawnModel)
	{
		case 425, 432, 447, 430, 435, 449, 450, 453, 464, 520, 569, 570, 584, 590, 591, 594, 606, 607, 608, 610, 611, 537, 538:
		{
 			return Error(playerid, "You are not able to spawn this vehicle, choose another.");
		}
   	}
   	if(RaceParticipant[playerid] == true)
	{
		if(raceVehicles == true)
		{
			SpawnPlayerVehicle(playerid, raceVehicleName);
			format(str, sizeof(str), "ERROR: "GREY2_E"You can't spawn vehicles for a custom vehicle race! You have auto-spawned a %s.", vehName[raceVehicleName - 400]);
			SendClientMessage(playerid, COLOR_RED, str);
	    	return true;
		}
		else
		{
			switch(spawnModel)
			{
				case 469, 487, 488, 497, 511, 512, 519, 532, 548, 553, 563, 592, 593:
				{
		 			return Error(playerid, "You are not able to spawn this vehicle during a race!");
				}
		   	}
		}
	}
    if(IsPlayerInArea(playerid, 370.922729, 2528.936523, 391.916717, 2550.296142)
	|| IsPlayerInArea(playerid, 410.901855, -1865.048950, 441.800323, -1833.564453)
	|| IsPlayerInArea(playerid, -189.839828, 1872.175292, -173.387283, 1903.181030)
	|| IsPlayerInArea(playerid, -1366.380981, -270.557952, -1364.495483, -229.168777)) // AA, BEACH,Party,sfaair
	{
		format(str, sizeof(str), "~y~You can't spawn vehicle here!");
	    GameTextForPlayer(playerid, str, 3000, 3);
		return true;
	}
  	SpawnPlayerVehicle(playerid, spawnModel);
	return 1;
}

IsNumeric(const string[])
{
	for(new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}
stock GetVehicleModelIDFromName(vname[])
{
	for(new ii = 0; ii < 211; ii++)
	{
		if(strfind(vehName[ii], vname, true) != -1 )
			return ii + 400;
	}
	return -1;
}

CMD:autotune(playerid, params[])
{
	if(pAutoTune[playerid] == 0)
	{
		pAutoTune[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"Automatic tuning has been enabled");

		InfoTD_MSG(playerid, 3500, "~g~~h~You have turned automatic tuning ~g~on~g~~h~.");
		format(str, sizeof(str), "4Server:3 %s(%i)2 has turned automatic tuning on.", pName[playerid], playerid);
	}
	else
	{
		pAutoTune[playerid] = 0;
		SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"Automatic tuning has been disabled");
		InfoTD_MSG(playerid, 3500, "~p~~h~You have turned automatic tuning ~p~off~p~~h~.");
		format(str, sizeof(str), "4Server:3 %s(%i)2 has turned automatic tuning off.", pName[playerid], playerid);
	}
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(pLogged[playerid] == true)
	{
	    format(query, sizeof(query), "UPDATE players SET autotune=%d WHERE reg_id=%d", pAutoTune[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
  	}
	return true;
}
CMD:gcar(playerid) return cmd_gangcar(playerid);
CMD:gangcar(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

    if(pGroupID[playerid] == -1) return Error(playerid, "You are not in a gang!");
    if(pLogged[playerid] == false) return Error(playerid, "You must be registered to spawn your own vehicle!");
    if(InDM[playerid] != 0) return Error(playerid, "You can't spawn a vehicle while in a DM!");
    if(doingStunt[playerid] != 0) return Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
    if(RaceParticipant[playerid] == true) return Error(playerid, "You can't use this command while in a race!");
    if(pGroupCar[playerid] == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, ""RED_E"[Info] There is no gang vehicle, /setgcar to set you gang veh");
	    return true;
	}
    SpawnPlayerVehicle(playerid, pGroupCar[playerid]);
	format(tmp, sizeof(tmp), "~y~VEHICLE SPAWNED");
    GameTextForPlayer(playerid,tmp, 4000, 4);
	return true;
}
CMD:setgcar(playerid, params[]) return cmd_setgangcar(playerid, params);
CMD:setgangcar(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

    if(pGroupID[playerid] == -1) return Error(playerid, "You are not in a gang!");
    if(pGroupRank[playerid] < 5) return Error(playerid, "You must be at least the co-founder of the gang to set gang vehcile!");
    if(pLogged[playerid] == false) return Error(playerid, "You must be registered to spawn your own vehicle!");
    if(InDM[playerid] != 0) return Error(playerid, "You can't spawn a vehicle while in a DM!");
    if(doingStunt[playerid] != 0) return Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
    if(RaceParticipant[playerid] == true) return Error(playerid, "You can't use this command while in a race!");

    new vname[32];
    if(sscanf(params, "s[32]", vname)) return Usage(playerid, "/gcar [vehid/vehname]");

	if(!IsNumeric(vname))
	{
	 	pGroupCar[playerid] = GetVehicleModelIDFromName(vname);
	}
	else pGroupCar[playerid] = strval(vname);
	
	
    if(pGroupCar[playerid] < 400) return Error(playerid, "You entered an invalid vehicleid/vehiclename! (400-611)");
    if(pGroupCar[playerid] > 611) return Error(playerid, "You entered an invalid vehicleid/vehiclename! (400-611)");
    switch(pGroupCar[playerid])
    {
        case 425, 432, 447, 430, 435, 449, 450, 453, 464, 476, 520, 569, 570, 584, 590, 591, 594, 606..608, 610, 611: return Error(playerid, "You are not able to set this as gang vehicle, choose another.");
    }
    format(query, sizeof(query), "SELECT gCar=%d FROM groups WHERE gID", pGroupCar[playerid]);
    MySQL_query(query, true, "UpdateGCar", "ii", playerid, pGroupCar[playerid]);
	return true;
}

CMD:saveskin(playerid, params[])
{
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be registered to save your skin!");
	    return true;
	}
	if(GetPVarInt(playerid, "Cop") != 0)
	{
	    Error(playerid, "You can't change your skin as a cop!");
	    return true;
	}
	//if(pTotalHours[playerid] < 1) return ShowPlayerDialog(playerid, 223, DIALOG_STYLE_MSGBOX, ""RED_E"ERROR:", "{F6F6F6}You must have at least a total of 1 hours of online time to enable skin saving! (/stats)", "Exit", "");
 	new skin;
	if(sscanf(params, "I(-1)", skin))
	{
	    Usage(playerid, "/saveskin (OPTIONAL: <skin id>)");
	    return true;
	}

	if(skin == -1)
	{
	    skin = GetPlayerSkin(playerid);
	}
	else
	{
	    if(!IsValidSkin(skin))
	    {
   	 		format(str, sizeof(str), "ERROR: "GREY2_E"%d is an invalid skin!", skin);
	    	SendClientMessage(playerid, COLOR_RED, str);
	    	return true;
		}
	}
	if(skin > 311)
		return Error(playerid, "Your skin ID cannot be beyond 311!");

	if(pInfo[playerid][pSaveSkin] != 999)
	{
		format(str, sizeof(str), ""UFF" "GREY2_E"Your saved skin has been changed from %d to %d.", pInfo[playerid][pSaveSkin], skin);
		format(tmp, sizeof(tmp), "4Server:3 %s(%i)2 has changed their saved skin from %d to %d.", pName[playerid], playerid, pInfo[playerid][pSaveSkin], skin);
	}
	else
	{
	    format(str, sizeof(str), ""UFF" "GREY2_E"Your saved skin has been set to %d.", skin);
	 	format(tmp, sizeof(tmp), "4Server:3 %s(%i)2 has set their saved skin to %d.", pName[playerid], playerid, skin);
 	}
	SendClientMessage(playerid, COLOR_YELLOW, str);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	SetPlayerSkin(playerid, skin);
	pInfo[playerid][pSaveSkin] = skin;
	format(query, sizeof(query), "UPDATE players SET saveskin=%d WHERE reg_id=%d", pInfo[playerid][pSaveSkin], pRegID[playerid]);
	MySQL_updateQuery(query);
	format(tmp, sizeof(tmp), "~p~~h~Your saved skin now is ~p~%d~p~~h~.", skin);
	InfoTD_MSG(playerid, 4000, tmp);
	Info(playerid, "Use /unsaveskin to disable the saveskin function");
	return true;
}
CMD:unsaveskin(playerid, params[])
{
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be registered to unsave your skin!");
	    return true;
	}
	if(pInfo[playerid][pSaveSkin] == 999)
		return Error(playerid, "Your saveSkin function isn't enabled!");

	format(str, sizeof(str), ""UFF" Your saveSkin function has been disabled. %d is no longer your skin on spawn.", pInfo[playerid][pSaveSkin]);
	SendClientMessage(playerid, COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled their saveSkin function.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	pInfo[playerid][pSaveSkin] = 999;
	format(query, sizeof(query), "UPDATE players SET saveskin=999 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	InfoTD_MSG(playerid, 2000, "~p~~h~Your saveSkin now is disabled.");
	return true;
}
CMD:deletecolor(playerid, params[])
{
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be registered to delete your color!");
	    return true;
	}
	if(pColor[playerid] == 0)
		return Error(playerid, "You have no saved color");

	format(str, sizeof(str), ""UFF" "GREY2_E"Saved color has been removed", pInfo[playerid][pSaveSkin]);
	SendClientMessage(playerid, COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled their saveSkin function.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    SetPlayerColor(playerid, PlayerColors[playerid]);
	pColor[playerid] = StripAlpha(GetPlayerColor(playerid));

	format(query, sizeof(query), "UPDATE players SET color=0 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	return true;
}
CMD:paintjob(playerid, params[])
{
	new pj;
	if(sscanf(params, "d", pj))
	{
	    Usage(playerid, "/paintjob <paintjob ID>");
	    return true;
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be the driver in a vehicle to change the paintjob!");
	    return true;
	}

	vID = GetPlayerVehicleID(playerid);
	vv = GetVehicleModel(vID);

	format(str, sizeof(str), ""UFF" Your %s's paintjob has been changed to %d.", vehName[vv - 400], pj);
	SendClientMessage(playerid, COLOR_YELLOW, str);

	format(tmp, sizeof(tmp), "~y~~h~Your ~y~%s~y~~h~'s paintjob has been changed to ~r~%d~y~~h~.", vehName[vv - 400], pj);
	InfoTD_MSG(playerid, 3000, tmp);

	ChangeVehiclePaintjob(vID, pj);
	return true;
}

CMD:cc(playerid, params[]) return cmd_carcolor(playerid, params);
CMD:carcolor(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be the driver in a vehicle to change the car color!");
	    return true;
	}
	new color[2];
	if(sscanf(params, "dd", color[0], color[1]))
	{
		ShowPlayerDialog(playerid, DIALOG_TYPE_COLORS, DIALOG_STYLE_LIST, ""WHITE_E"Car Colors", "Black\nWhite\nRed\nBlue\nGreen\nYellow\nPink\nBrown\nGrey\nGold\nDark Blue\nLight Blue\nCold Green\nLight Grey\nDark Red\nDark Brown", "Apply", "Close");
     	SendClientMessage(playerid, COLOR_RED, "* "YELLOW_E"You can also use /cc <color 1> <color 2>");
	    return true;
	}

	vID = GetPlayerVehicleID(playerid);
	vv = GetVehicleModel(vID);

	ChangeVehicleColor(vID, color[0], color[1]);
    GameTextForPlayer(playerid, "~y~~h~color repainted" , 3500, 3);
	if(vID == PlayerVehicle[playerid])
    {
        PlayerInfoVeh[playerid][Color1] = color[0];
        PlayerInfoVeh[playerid][Color2] = color[1];
    }
	return true;
}


CMD:repair(playerid) return cmd_fix(playerid);
CMD:bodyfix(playerid) return cmd_fix(playerid);
CMD:fix(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You must be in a vehicle to repair it!");
	    return true;
	}
	if(InEvent[playerid] != 0 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This can't fix your vehicle while in a derby!");
	    return true;
	}
	if(doingStunt[playerid] == 19 && pAdmin[playerid] != 5)
	{
	 	Error(playerid, "This can't fix your vehicle while in a derby!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "This command cannot be used in a deathmatch!");
	    return true;
	}
	vID = GetPlayerVehicleID(playerid);
	RepairVehicle(vID);

	format(str, sizeof(str), "~r~~h~~h~Your ~y~~h~%s~r~~h~~h~ has been fixed.", vehName[GetVehicleModel(vID) - 400]);
	InfoTD_MSG(playerid, 4000, str);

	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	return true;
}

CMD:eject(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be the driver in a vehicle to eject passengers!");
	    return true;
	}
	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/eject <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

    if(otherid == playerid) return Error(playerid, "You can't eject yourself from your own vehicle!");
 	vID = GetPlayerVehicleID(playerid);
	if(!IsPlayerInVehicle(otherid, vID)) return Error(playerid, "This player is not in your vehicle!");

	vv = GetVehicleModel(vID);
	format(str, sizeof(str), ""UFF" "GREY_E"You have successfully ejected %s(%i) from your %s.", pName[otherid], otherid, vehName[vv - 400]);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has ejected you from his %s.", pName[playerid], playerid, vehName[vv - 400]);
	SendClientMessage(otherid, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has ejected %s(%i) from his %s", pName[playerid], playerid, pName[otherid], otherid,  vehName[vv - 400]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);

    GetVehiclePos(vID, POS[0], POS[1], POS[2]);
	OnPlayerExitVehicle(otherid, GetPlayerVehicleID(otherid));
	SetPlayerPos(otherid, POS[0]+4, POS[1], POS[2]+1);
	return true;
}
CMD:pv(playerid)
{
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to access your private vehicle menu!");
	    return true;
	}
	if(pAdmin[playerid] != 5)
	{
		if(InDM[playerid] != 0)
		{
		    Error(playerid, "You can't access your private vehicle menu while in a deathmatch!");
		    return true;
		}
		if(doingStunt[playerid] != 0)
		{
			Error(playerid, "You can't access your private vehicle menu in this area!");
		    return true;
		}
		if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
		if(pSpectating[playerid] != -1) return Error(playerid, "You can't spawn a vehicle while spectating!");

	}
	if(RaceParticipant[playerid] == true)
	{
		if(raceVehicles == true)
		{
			format(str, sizeof(str), "ERROR: "GREY2_E"You can't spawn your PV for a custom vehicle race!");
			SendClientMessage(playerid, COLOR_RED, str);
	    	return true;
		}
	}
	
	new list1[1096],list2[1096];
	if(BoughtVehicle[playerid] == false)
	{
	       strcat(list2, "{FFFFFF}Solt\t{FFFFFF}Vehicle\t{FFFFFF}Plate\n");
           format(list2, sizeof(list2), ""WHITE_E"%s\n--\tEmpty\t--", list2);
           ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, ""BLUE_E"UFF: "WHITE_E"Private Vehicle Menu", list2, "Close", "");
	       return true;
	}
	//vehName[GetVehicleModel(PlayerVehicle[playerid])-400]
	strcat(list1, "{FFFFFF}Solt\t{FFFFFF}Vehicle\t{FFFFFF}Plate\n");
	format(list1, sizeof(list1), ""WHITE_E"%s\n#1\t%s\t%s", list1, g_arrVehicleNames[PlayerInfoVeh[playerid][Model] - 400], PlayerInfoVeh[playerid][Plate] );
    ShowPlayerDialog(playerid, 8989, DIALOG_STYLE_TABLIST_HEADERS, ""BLUE_E"UFF: "WHITE_E"Private Vehicle Menu", list1, "Select", "Close");
	return 1;
}

CMD:plate(playerid, params[])
{
    if(BoughtVehicle[playerid] == false) return Error(playerid, "You don't have a private vehicle! Purchase one at /vs!");

	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to change your plate!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't change your plate while in a DM!");
	    return true;
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be the driver of a vehicle to change your plate!");
	    return true;
	}
	if(BoughtVehicle[playerid] == false) return Error(playerid, "You have to be in a private vehicle to change your plater!");
	if(!CanPlayerTeleport(playerid)) return true;
	new plateTXT[15];
	if(sscanf(params, "s[15]", plateTXT))
	{
	    Usage(playerid, "/plate <plate text (use - instead of space)>");
	    return true;
	}
	if(strlen(plateTXT) > 13)
	{
		Error(playerid, "Plate has to be shorter than 13 characters!");
		return true;
	}
	if(!IsValidPassword(plateTXT))
	{
		Error(playerid, "Plates can contain only A-Z, a-z, 0-9, _, [ ], ( )");
		return true;
	}

	vID = GetPlayerVehicleID(playerid);
	GetVehiclePos(vID, POS[0], POS[1], POS[2]);
	GetVehicleZAngle(vID, A);

	SetVehicleNumberPlate(vID, plateTXT);
	SetVehicleToRespawn(vID);
	SetVehiclePos(vID, POS[0], POS[1], POS[2]);

	PutPlayerInVehicle(playerid, vID, 0);
	SetVehicleZAngle(vID, A);

    GameTextForPlayer(playerid,"~y~~h~Plate Changed",3000,3);
	if(vID == PlayerVehicle[playerid])
    {
        format(PlayerInfoVeh[playerid][Plate], 13, "%s", plateTXT);
    }
    new escaped_plate[15];
	mysql_real_escape_string(plateTXT, escaped_plate);
	format(query, sizeof(query), "UPDATE vehicles SET Plate='%s' WHERE Owner=%d", escaped_plate, pName[playerid]);
	MySQL_updateQuery(query);
	return true;
}

CMD:hydro(playerid) return cmd_hyd(playerid);
CMD:hydraulics(playerid) return cmd_hyd(playerid);
CMD:hyd(playerid)
{
	vID = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    Error(playerid, "You must be the driver of a vehicle to add hydraulics!");
	    return true;
	}
	vv = GetVehicleModel(vID);
	if(!IsNosVehicleModel(vv))
	{
	    Error(playerid, "You can't add hydraulics to this vehicle!");
		return true;
	}
	AddVehicleComponent(vID, 1087);

	format(str, sizeof(str), ""UFF" "GREY_E"Your %s now has hydraulics.", vehName[vv - 400]);
	SendClientMessage(playerid, COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server:3 %s(%i)2 has added hydraulics to their %s.", pName[playerid], playerid, vehName[vv - 400]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "~r~~h~~h~Hydraulics added to your ~r~~h~%s~r~~h~~h~.", vehName[vv - 400]);
	InfoTD_MSG(playerid, 3000, str);
	return true;
}
CMD:lights(playerid)
{
	vID = GetPlayerVehicleID(playerid);
	if(!vID)
	{
	    Error(playerid, "You aren't in a vehicle!");
	    return true;
	}
	ShowPlayerDialog(playerid, VEHICLE_CONTROL_DIALOG+2, DIALOG_STYLE_MSGBOX, ""LB_E"Toggle lighs", "Do you want to enable or disable your lights?\n\nNOTE: Lights are only visible at night.", "Enable", "Disable");
	return true;
}
CMD:nitro(playerid) return cmd_nos(playerid);
CMD:nos(playerid)
{
    vID = GetPlayerVehicleID(playerid);
	if(!vID)
	{
	    Error(playerid, "You aren't in a vehicle!");
	    return true;
	}
	if(InDM[playerid] == 13)
	{
	    Error(playerid, "This command cannot be used while playing CnR, visit a fuel station for nitro!");
	    return true;
	}
	if(!IsNosVehicleModel(GetVehicleModel(vID)))
	{
	    Error(playerid, "This vehicle is not compatible with nitro!");
		return true;
	}

	AddVehicleComponent(vID, 1010);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return true;
}

CMD:sb(playerid, params[]) return cmd_speedboost(playerid, params);
CMD:speedboost(playerid, params[])
{
    
    if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to toggle speedboosting!");
	    return true;
	}
	if(!CanPlayerTeleport(playerid)) return true;
	vID = GetPlayerVehicleID(playerid);
	vv = GetVehicleModel(vID);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		Error(playerid, "You must be the driver of vehicle to toggle speedboost!");
		return 1;
	}

	if(isnull(params))
	{
		if(speedBoost[playerid] == 0.0)
		{
            GameTextForPlayer(playerid,"~y~Speed Boost: ~n~~g~ON~y~",3000,3);
		    speedBoost[playerid] = 1.3;
		    format(str, sizeof(str), "4Server:3 %s(%i)2 has enabled speedboosting on their %s.", pName[playerid], playerid, vehName[vv - 400]);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		}
		else
	 	{
	 		speedBoost[playerid] = 0.0;
	 		GameTextForPlayer(playerid,"~y~Speed Boost: ~n~~r~OFF~y~",3000,3);
		    format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled speedboosting on their %s.", pName[playerid], playerid, vehName[vv - 400]);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		}
 	}
 	else
 	{
 		A = floatstr(params);
 		if(A < 1.0) return Error(playerid, "The lowest you can go is 1.0, please specify a higher number!");
		if(!(1.0 <= A <= 1.4) && pPremium[playerid] == 0)
		{
			Error(playerid, "Invalid speedboost range! You can only use 1.0 - 1.4 (premium members can use up to 1.8)");
			return true;
		}
		if(!(A <= 1.8))
		{
			Error(playerid, "Premium members can only go up to 1.8!");
			return true;
		}
		speedBoost[playerid] = A;
		format(str, sizeof(str), ""UFF" "GREY2_E"You have set your speedboost multiplier to "LB2_E"%0.2f", A);
		SendClientMessage(playerid, COLOR_GREY2, str);
 	}
 	format(query, sizeof(query), "UPDATE players SET speedboost=%f WHERE reg_id=%d", speedBoost[playerid], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
CMD:speedometer(playerid) return cmd_speedo(playerid);
CMD:speedo(playerid)
{
    
	if(!IsPlayerInAnyVehicle(playerid))
	{
		Error(playerid, "You must be in a vehicle to enable the speedometer!");
		return 1;
	}
	vID = GetPlayerVehicleID(playerid);
	vv = GetVehicleModel(vID);
	if(Speedo[playerid] == 0)
	{
		format(str, sizeof(str), "4Server:3 %s(%i)2 has enabled the speedometer on their %s.", pName[playerid], playerid, vehName[vv - 400]);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
		SendClientMessage(playerid, COLOR_GREY, "* Type /speedo again to disable it.");
		GameTextForPlayer(playerid,"~y~Speedometer ~n~~g~ON~y~",3000,3);
		Speedo[playerid] = 1;
	   	PlayerTextDrawShow(playerid, vSpeed[playerid]);
		PlayerTextDrawShow(playerid, vSpeedBox[playerid]);
		PlayerTextDrawShow(playerid, vSpeedModel[playerid]);
        TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
 	}
	else
 	{
 		Speedo[playerid] = 0;
 		GameTextForPlayer(playerid,"~y~Speedometer ~n~~r~OFF~y~",3000,3);
 		format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled the speedometer.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
		PlayerTextDrawHide(playerid, vSpeed[playerid]);
		PlayerTextDrawHide(playerid, vSpeedBox[playerid]);
		PlayerTextDrawHide(playerid, vSpeedModel[playerid]);
		TextDrawHideForPlayer(playerid, GGBOX);
		PlayerTextDrawHide(playerid, GGTD[playerid]);
	}
	if(pLogged[playerid] == true)
	{
	    format(query, sizeof(query), "UPDATE players SET speedo=%d WHERE reg_id=%d", Speedo[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
  	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return true;
}
/*
CMD:mytpm(playerid) return cmd_tpmsgs(playerid);
CMD:tpm(playerid)
{
    if(pAdmin[playerid] < 1)
        return Error(playerid, "Insufficient permissions!");
	if(hideMSG[playerid] == 1)
	{
	    GameTextForPlayer(playerid,"~y~Teleport Mesages: ~n~~g~ON",3000,3);
		hideMSG[playerid] = 0;
		ShowPlayerMSGBox(playerid);
 	}
	else
 	{
        GameTextForPlayer(playerid,"~y~Teleport Mesages: ~n~~r~OFF",3000,3);
		hideMSG[playerid] = 1;
		HidePlayerMSGBox(playerid);
	}
	if(pLogged[playerid] == true)
	{
	    format(query, sizeof(query), "UPDATE players SET hideMSGs=%d WHERE reg_id=%d", hideMSG[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
  	}
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return true;
}*/
CMD:togflip(playerid) return cmd_keyflip(playerid);
CMD:keyflip(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    SendClientMessage(playerid, COLOR_WHITEP, ""UFF" "WHITEP_E"Press NUM 2 on your keyboard to flip your vehicle.");
	return true;
}


CMD:togduel(playerid)
{
	if(duelsOFF[playerid] == 1)
 	{
		duelsOFF[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY,""DUEL" "GREY_E"You will now receive duel invitations!");
  	}
   	else
	{
		duelsOFF[playerid] = 1;
		SendClientMessage(playerid, COLOR_GREY,""DUEL" "GREY_E"You have turned off invitations for duel requests!");
	}
	if(pLogged[playerid] == true)
	{
 		format(query, sizeof(query), "UPDATE players SET duels_off=%d WHERE reg_id=%d", duelsOFF[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:horn(playerid) return cmd_bounce(playerid);
CMD:bounce(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pBounce[playerid] == 0)
	{
	    GameTextForPlayer(playerid,"~y~Bounce: ~n~~g~ON~y~",3000,3);
	    pBounce[playerid] = 1;
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has enabled the 'Bounce' feature.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
 	{
 		GameTextForPlayer(playerid,"~y~Bounce: ~n~~r~OFF~y~",3000,3);
	    pBounce[playerid] = 0;
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled the 'Bounce' feature", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	if(pLogged[playerid] == true)
	{
	    format(query, sizeof(query), "UPDATE players SET bounce=%d WHERE reg_id=%d", pBounce[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
  	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}

CMD:togautologin(playerid) return cmd_autologin(playerid);
CMD:autologin(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pLogged[playerid] == false) return Error(playerid, "You must be logged in to use this command!");
	if(autoLogin[playerid] == 0)
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, ""UFF" "GREY2_E"You will now be autologged on your next connect!");
	    format(tmp, sizeof(tmp), "~y~~h~Autologin: ~n~~g~on");
	    GameTextForPlayer(playerid, tmp, 3500, 4);

		autoLogin[playerid] = 1;
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has enabled auto login.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
 	{
	    autoLogin[playerid] = 0;
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled auto login", pName[playerid], playerid);
	    GameTextForPlayer(playerid,"~y~Auto Login: ~n~~r~OFF~y~",3000,3);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	format(query, sizeof(query), "UPDATE players SET autoLogin=%d WHERE reg_id=%d", autoLogin[playerid], pRegID[playerid]);
	MySQL_updateQuery(query);
	return true;
}
CMD:superjump(playerid) return cmd_superman(playerid);
CMD:sj(playerid) return cmd_superman(playerid);
CMD:superman(playerid)
{
    

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(InDM[playerid]!=0)
	{
	  Error(playerid, "You can't enable superman while in a dm!");
	  return 1;
	}
	if(pSuperJump[playerid] == 0)
	{
	    GameTextForPlayer(playerid,"~y~Super Jump: ~n~~g~ON~y~",3000,3);
		pSuperJump[playerid] = 1;
 		format(str, sizeof(str), "4Server:3 %s(%i) has enabled the superman effect.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	}
	else
 	{
	    pSuperJump[playerid] = 0;
	    GameTextForPlayer(playerid,"~y~Super Jump: ~n~~r~OFF~y~",3000,3);
	    format(str, sizeof(str), "4Server:3 %s(%i) has disabled the superman effect.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	}
	if(pLogged[playerid] == true)
	{
		format(query, sizeof(query), "UPDATE players SET superman=%d WHERE reg_id=%d", pSuperJump[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}

CMD:achievements(playerid, params[]) return cmd_ach(playerid, params);
CMD:ach(playerid, params[])
{
	if(sscanf(params, "u", otherid))
	{
	    DisplayAch(playerid, playerid);
	    SendClientMessage(playerid, COLOR_PINK, ""WHITE_E"* "RED_E"Type /ach <ID> to view another players achievement.");
 	}
	else
	{
	    if(otherid == INVALID_PLAYER_ID)
	    {
			Error(playerid, "Player not connected!");
			return true;
		}

	    DisplayAch(playerid, otherid);
	}
	return true;
}

CMD:mystats(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to check your stats!");
	    return true;
	}
	DisplayStats(playerid, playerid);
 	return true;
}
CMD:statistics(playerid, params[]) return cmd_stats(playerid, params);
CMD:stats(playerid, params[])
{
    
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to check statistics!");
	    return true;
	}

	if(sscanf(params, "u", otherid))
	{
	    DisplayStats(playerid, playerid);
 	}
	else
	{
	    if(otherid == INVALID_PLAYER_ID)
	    {
			Error(playerid, "Player not connected!");
			return true;
		}

	    DisplayStats(playerid, otherid);
	}
	return true;
}
CMD:statistics2(playerid, params[]) return cmd_stats2(playerid, params);
CMD:stats2(playerid, params[])
{
    
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to check statistics!");
	    return true;
	}

	if(sscanf(params, "u", otherid))
	{
	    DisplayStats(playerid, playerid);
 	}
	else
	{
	    if(otherid == INVALID_PLAYER_ID)
	    {
			Error(playerid, "Player not connected!");
			return true;
		}

	    DisplayStats(playerid, otherid);
	}
	return true;
}


CMD:cnrstatistics(playerid, params[]) return cmd_cnrstats(playerid, params);
CMD:cnrstats(playerid, params[])
{
    
	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to check statistics!");
	    return true;
	}
	if(sscanf(params, "u", otherid))
	{
	   DisplayCnRStats(playerid, playerid);
 	}
	else
	{
	    if(otherid == INVALID_PLAYER_ID)
	    {
			Error(playerid, "Player not connected!");
			return true;
		}

	    DisplayCnRStats(playerid, otherid);
	}
	return true;
}
/*
CMD:offlinestats(playerid, params[]) return cmd_ostats(playerid, params);
CMD:ostats(playerid, params[])
{
    

	if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to check statistics!");
	    return true;
	}

	if(sscanf(params, "s[24]", tmp))
	{
	    Usage(playerid, "/ostats <player name>");
 		return true;
 	}

 	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

		if(!strcmp(PlayerName, tmp, true))
		{
			Error(playerid, "Player is online, you can use /stats on them.");
	  		return true;
	  	}
	}
	// Load User Data
    new cVar[500];
    new cQuery[600];

	strcat(cVar, "adminlevel,hours,minutes,seconds,kills,deaths,money,score,premium,saveskin,gbs,events_won,races_won,MB_found,reg_time,last_time,");
	strcat(cVar, "bmoney,rtests,arrests,killstreak,description,duels_won,fallouts,group_id,group_rank,derby_wins,goldblocks,spawnplace,maths,report_points");

	new escaped_name[24];
	mysql_real_escape_string(tmp, escaped_name);
	format(cQuery, sizeof(cQuery), "SELECT %s FROM players WHERE name='%s' LIMIT 1", cVar, escaped_name);
	MySQL_query(cQuery, true, "LoadStats", "is", playerid, escaped_name);
	return true;
}
*/

CMD:getid(playerid, params[])
{
    
	if(sscanf(params, "s[16]", tmp))
	{
		Usage(playerid, "/getid <PART OF NAME>");
		return true;
	}

	if(strlen(tmp) < 2 || strlen(tmp) > 10)
	{
	    Error(playerid, "Part of name length invalid! The length must stay between 2-15 characters!");
	    return true;
	}

	format(str, sizeof(str), "Searching for '%s' in names...", tmp);
	SendClientMessage(playerid, COLOR_WHITE, str);
	new found;
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);
		new namelen = strlen(PlayerName);
		new bool:searched=false;
 		for(new pos=0; pos <= namelen; pos++)
		{
			if(searched != true)
			{
				if(strfind(PlayerName, params,true) == pos)
				{
					found++;
					format(str,sizeof(str),"%d. %s (ID: %d)", found, PlayerName, ii);
					SendClientMessage(playerid, COLOR_GREEN , str);
					searched = true;
				}
			}
		}
	}
	if(found == 0) SendClientMessage(playerid, COLOR_LB, "No Players found!");
	return true;
}
CMD:block(playerid, params[]) return cmd_ignore(playerid, params);
CMD:ignore(playerid, params[])
{
    
	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/ignore <ID/Name>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(ignore[playerid][otherid] == 1)
  		return cmd_unignore(playerid, params);

	ignore[playerid][otherid] = 1;

	format(str, sizeof(str), ""UFF" "DARK_E"%s(%i) is now ignored by you. They wont be able to teleport to you or PM you.", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_DARK, str);
	SendClientMessage(playerid, COLOR_DARK, ""UFF" "GREY_E"Type /unignore to un-ignore this player.");
	return true;
}

CMD:unblock(playerid, params[]) return cmd_unignore(playerid, params);
CMD:unignore(playerid, params[])
{
    
   	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/unignore <ID/Name>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

    if(ignore[playerid][otherid] == 0)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"You aren't ignoring %s(%i)! Use /ignore to ignore.", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	ignore[playerid][otherid] = 0;

	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is no longer blocked by you. They will now be able to tele to you and pm you..", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	return true;
}

CMD:ignorelist(playerid, params[])
{
    
    if(sscanf(params, "i", otherid))
	{
		new ignoreds;
		foreach(Player, ii)
		{
		    if(ignore[playerid][ii] == 0)
				continue;

			ignoreds = ignoreds + 1;
		}

		if(ignoreds == 0)
			return SendClientMessage(playerid, COLOR_PINK, "[IGNORE] You aren't ignoring anybody.");

		format(str, sizeof(str), "[IGNORE] You are ignoring %d player(s):", ignoreds);
		SendClientMessage(playerid, COLOR_PINK, str);
		foreach(Player, ii)
		{
		    if(ignore[playerid][ii] == 0)
				continue;

			ignoreds = ignoreds + 1;

			GetPlayerName(ii, giveplayer, sizeof(giveplayer));

			format(str, sizeof(str), "    %d. %s(%i)", ignoreds, giveplayer, ii);
			SendClientMessage(playerid, COLOR_PINK, str);
		}
	}
	else
	{
	    if(pAdmin[playerid] == 0)
	    	return Error(playerid, "Viewing other peoples' ignore list is for junior admins only. Use /ignorelist without parameters!");

		new ignoreds;
		foreach(Player, ii)
		{
		    if(ignore[otherid][ii] == 0)
				continue;

			ignoreds = ignoreds + 1;
		}

        GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

		if(ignoreds == 0)
		{
		    format(str, sizeof(str), "[IGNORE] %s(%i) isn't ignoring anybody.", giveplayer, otherid);
		    SendClientMessage(playerid, COLOR_PINK, str);
		    return true;
		}

		format(str, sizeof(str), "[IGNORE] %s(%i) is ignoring %d player(s):", giveplayer, otherid, ignoreds);
		SendClientMessage(playerid, COLOR_PINK, str);

		foreach(Player, ii)
		{
		    if(ignore[otherid][ii] == 0)
				continue;

			ignoreds = ignoreds + 1;

			GetPlayerName(ii, giveplayer, sizeof(giveplayer));

			format(str, sizeof(str), "    %d. %s(%i)", ignoreds, giveplayer, ii);
			SendClientMessage(playerid, COLOR_PINK, str);
		}
	}
	return true;
}

stock GetAFKElements(string_to_fill[],page=1,&left=0,&inserted=0,amount=30,maxSFrsize=sizeof(string_to_fill))
{
    string_to_fill[0] = 0;
	string_to_fill[1] = 0;

	new afks = 0;
	new curr = 0;
	new from = (page-1)*amount;
	new to = from+amount;

	left = 0;
	inserted = 0;

	foreach(Player, ii)
	{
 		if(AFK[ii] == 1 || cAFK[ii] > 30) afks++;
	}


	if(afks == 1)
	{
		format(str, sizeof(str), "There is 1 AFK player:\n\n");
  		strcat(string_to_fill, str, maxSFrsize);
	}
	else
	{
		format(str, sizeof(str), "There are %d AFK players:\n\n", afks);
        strcat(string_to_fill, str, maxSFrsize);
  	}


	//loop all houses
	afks = 0;
	foreach(Player, ii)
	{
 		if(AFK[ii] == 1 || cAFK[ii] > 30)
 		{
		    //check if we want to list this house
		    afks++;
		    if(curr >= from && curr < to)
			{
			    GetPlayerName(ii, giveplayer, sizeof(giveplayer));
				if(cAFK[ii] > 120)
				{
					new zpe = cAFK[ii] / 60;
					format(str, sizeof(str), ""WHITE_E"%d) "WHITEP_E"%s(%i) "GREY_E"[AFK for %d minutes]\n", afks, giveplayer, ii, zpe);
				}
				else format(str, sizeof(str), ""WHITE_E"%d) "WHITEP_E"%s(%i) "GREY_E"[AFK for %d seconds]\n", afks, giveplayer, ii, cAFK[ii]);
                strcat(string_to_fill,str,maxSFrsize);
				++inserted;
    		}
			else if(curr >= to)
			{
			    //if not make sure we know there are houses left to list
			    ++left;
   			}
			//and skip unneeded houses but make sure to keep track
			++curr;
		}
	}
	return 1;
}

CMD:cnrlist(playerid)
{
	new cnrs, finstring[2048];
	foreach(Player, ii)
	{
 		if(InDM[ii] == 13) cnrs++;
	}

	if(cnrs == 0) return SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no players playing CnR.");

	if(cnrs == 1)
	{
		format(tmp, sizeof(tmp), "There is one player playing CnR:\n\n");
  		strcat(finstring, tmp);
	}
	else
	{
		format(tmp, sizeof(tmp), "There are %d players in CnR:\n\n", cnrs);
  		strcat(finstring, tmp);
  	}
	cnrs = 0;
	foreach(Player, ii)
	{
   		if(InDM[ii] == 13)
 		{
            GetPlayerName(ii, giveplayer, sizeof(giveplayer));

			if(GetPVarInt(ii, "Robber") != 0)
			{
				str = ""RED_E"Robber";
			}
			else
			{
			    switch(GetPVarInt(ii, "Cop"))
			    {
					case 1: str = ""LB_E"Cop";
					case 2: str = ""BLUE_E"Swat";
					case 3: str = ""PURPLE_E"Army";
			    }
			}
			if(cnrs <= 40)
	        {
       			format(tmp, sizeof(tmp), ""WHITE_E"%d) "WHITEP_E"%s(%i) "WHITE_E"(%s"WHITE_E")\n", cnrs, giveplayer, ii, str);
				strcat(finstring, tmp);
			}
			else
			{
			    format(tmp, sizeof(tmp), "\n[... too many online]");
			    strcat(finstring, tmp);
			    break;
			}
			cnrs++;
		}
	}

	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"CnR List", finstring, "Close", "");
	return true;
}

stock GetHouseElements(string_to_fill[],page=1,&left=0,&inserted=0,amount=30,&invalid_owner=0,maxSFrsize=sizeof(string_to_fill))
{
    string_to_fill[0] = 0;
	string_to_fill[1] = 0;

	new houses = 0;
	new curr = 0;
	new from = (page-1)*amount;
	new to = from+amount;

	left = 0;
	inserted = 0;
	invalid_owner = 0;

	foreach(Houses, h)
	{
		if(!strcmp(hInfo[h][HouseOwner], INVALID_HOWNER_NAME, CASE_SENSETIVE) && h != 0)
	    {
			houses++;
		}
	}


	if(houses == 1)
	{
		format(str, sizeof(str), "There is 1 house available:\n\n");
  		strcat(string_to_fill, str, maxSFrsize);
	}
	else
	{
		format(str, sizeof(str), "There are %d houses available:\n\n", houses);
        strcat(string_to_fill, str, maxSFrsize);
  	}


	//loop all houses
	houses = 0;
	foreach(Houses, i)
	{
		if(!strcmp(hInfo[i][HouseOwner], INVALID_HOWNER_NAME, CASE_SENSETIVE) && i != 0)
		{
		    //check if we want to list this house
		    houses++;
		    if(curr >= from && curr < to)
			{
				format(str, sizeof(str), " "WHITE_E"%d) "WHITEP_E"House ID: %d "GREY_E"(Location: %s) (Price: "GREEN_E"$%s"GREY_E")\n", houses, i, GetHouseLocation(i), ToCurrency(hInfo[i][HouseValue]));
                strcat(string_to_fill,str,maxSFrsize);
				++inserted;
    		}
			else if(curr >= to)
			{
			    //if not make sure we know there are houses left to list
			    ++left;
   			}
			//and skip unneeded houses but make sure to keep track
			++curr;
		}
		else
		{
		   ++invalid_owner;
	    }
	}
	return 1;
}

CMD:houses(playerid,params[])
{
	new page = 1;
   	new inserted;
    new left;

    //for users, pages begin at 1
    if(page < 1)
    {
    	page = 1;
    }

    GetHouseElements(housestring,page,left,inserted);

    if(inserted == 0)
	{
	    return ShowInfoBoxEx(playerid, COLOR_WHITEP, "No houses currently available..");
	}
	else if(inserted == 1)
    {
        strins(housestring, "There is 1 house available on this page:\n\n", 0);
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
    }
    else
    {
        if(left)
		{
  			ShowPlayerDialog(playerid, HOUSEMENU+43, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Next Page", "Close");
    	}
	    else
	    {
	    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House List", housestring, "Close", "");
      	}
    }

    Info(playerid, "Type /gohouse <ID> to teleport to a house ID.");
   	return true;
}
stock GetHouseElements2(string_to_fill[],page=1,&left=0,&inserted=0,amount=30,&invalid_owner=0,maxSFrsize=sizeof(string_to_fill))
{
    string_to_fill[0] = 0;
	string_to_fill[1] = 0;

	new houses = 0;
	new curr = 0;
	new from = (page-1)*amount;
	new to = from+amount;

	left = 0;
	inserted = 0;
	invalid_owner = 0;

	foreach(Houses, h)
	{
		if(hInfo[h][HouseForSale] != 0 && h != 0)
	    {
			houses++;
		}
	}


	if(houses == 1)
	{
		format(str, sizeof(str), "There is 1 house available:\n\n");
  		strcat(string_to_fill, str, maxSFrsize);
	}
	else
	{
		format(str, sizeof(str), "There are %d houses available:\n\n", houses);
        strcat(string_to_fill, str, maxSFrsize);
  	}


	//loop all houses
	houses = 0;
	foreach(Houses, i)
	{
		if(hInfo[i][HouseForSale] != 0 && i != 0)
		{
		    //check if we want to list this house
		    houses++;
		    if(curr >= from && curr < to)
			{
				format(str, sizeof(str), " "WHITE_E"%d) "WHITE_E"House ID: %d "GREY_E"(Location: %s) "WHITEP_E"(Owner: %s) "GREEN_E"(Price: $%s)\n", houses, i, GetHouseLocation(i), hInfo[i][HouseOwner], ToCurrency(hInfo[i][HouseForSale]));
                strcat(string_to_fill,str,maxSFrsize);
				++inserted;
    		}
			else if(curr >= to)
			{
			    //if not make sure we know there are houses left to list
			    ++left;
   			}
			//and skip unneeded houses but make sure to keep track
			++curr;
		}
		else
		{
		   ++invalid_owner;
	    }
	}
	return 1;
}

CMD:market(playerid,params[])
{
	new page = 1;
   	new inserted;
    new left;

    //for users, pages begin at 1
    if(page < 1)
    {
    	page = 1;
    }

    GetHouseElements2(housestring,page,left,inserted);

    if(inserted == 0)
	{
	    return ShowInfoBoxEx(playerid, COLOR_WHITEP, "No houses currently on the market!");
	}
	else if(inserted == 1)
    {
        strins(housestring, "There is 1 house available on this page:\n\n", 0);
        ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
    }
    else
    {
        if(left)
		{
  			ShowPlayerDialog(playerid, HOUSEMENU+55, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Next Page", "Close");
    	}
	    else
	    {
	    	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITEP_E"House Market", housestring, "Close", "");
      	}
    }
   	return true;
}
CMD:pm(playerid, params[])
{
    
	if(pMute[playerid] > 0)
	{
	    format(str, sizeof(str), ""UFF" "GREY_E"You are muted and can't PM! Mute will be lifted in %d seconds.", pMute[playerid]);
	    SendClientMessage(playerid, COLOR_GREY, str);
	    return true;
	}

	if(sscanf(params, "us[140]", otherid, tmp))
	{
	    Usage(playerid, "/pm <ID> <Message>");
		return true;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
		Error(playerid, "Player not connected!");
		return true;
	}
	if(otherid == playerid) return Error(playerid, "You can't PM yourself!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(ignore[otherid][playerid] == 1)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) has chosen not to receive PMs from you!", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_RED, str);

	    format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has tried to send you a pm!", pName[playerid], playerid);
	    SendClientMessage(otherid, COLOR_GREY, str);
	    return true;
	}
	if(GetPVarInt(otherid, "PMsDisabled") == 1)
	{
		format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has disabled their private messages!", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_GREY, str);

	    format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has tried to send you a pm!", pName[playerid], playerid);
	    SendClientMessage(otherid, COLOR_GREY, str);
	    return true;
	}

	SendPlayerPM(playerid, otherid, tmp);
	return true;
}
CMD:apm(playerid, params[])
{
    
    if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

    if(sscanf(params, "us[140]", otherid, tmp))
	{
	    Usage(playerid, "/apm <ID> <Message>");
		return true;
	}
	// Decide about multi-line PMs
	new i = -1;
	if(strlen(tmp) > 70)
	{
		i = strfind(tmp, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, tmp[i]);

		// delete the rest from tmp
		tmp[i] = EOS;
	}

	format(str, sizeof(str), "* "RED_E"PM from an Administrator: "YELLOW_E"%s", tmp);
	SendClientMessage(otherid, COLOR_YELLOW, str);
	if(i != -1) SendClientMessage(otherid, COLOR_YELLOW, line);

	format(str, sizeof(str), "* "RED_E"Admin PM to %s(%i): "YELLOW_E"%s", pName[otherid], otherid, tmp);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	if(i != -1) SendClientMessage(playerid, COLOR_YELLOW, line);
	return true;
}
CMD:pms(playerid) return cmd_checkpms(playerid);
CMD:lastpms(playerid) return cmd_checkpms(playerid);
CMD:checkpms(playerid)
{
  	new bigStr[500], PMCount;
  	strcat(bigStr, ""WHITE_E"Recent PM's:\n\n"WHITE_E"");
  	for(new i = 1; i < MAX_PMS; i++)
	{
  		if(strcmp(PMs[playerid][i], "none", false) != 0)
		{
			PMCount++;
			format(str, sizeof(str), "%s\n", PMs[playerid][i]);
			strcat(bigStr, str);
		}
	}
	if(PMCount == 0)
	{
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"Recent PMs", ""WHITE_E"You haven't recieved any private messages!", "Close", "");
	}
	else  ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Recent PMs", bigStr, "OK", "");
    return 1;
}
CMD:tpm(playerid, params[])
{
    
	if(InDM[playerid] != 13)
	{
		Error(playerid, "You must be in a CnR minigame to use this command!");
		return true;
	}
	if(pMute[playerid] > 0)
	{
	    format(str, sizeof(str), ""UFF" "GREY_E"You are muted and can't TPM! Mute will be lifted in %d seconds.", pMute[playerid]);
	    SendClientMessage(playerid, COLOR_GREY, str);
	    return true;
	}
	if(isnull(params))
    {
	    Usage(playerid, "/tpm <message>");
	    return true;
	}
	if(GetPVarInt(playerid, "Cop") != 0)
	{
		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "Cop") != 0)
			{
				format(str, sizeof(str), ""RED_E"[TPM] "LB_E"%s(%d): %s", pName[playerid], playerid, params);
				SendClientMessage(ii, COLOR_LB, str);
			}
		}
 	}
 	else if(GetPVarInt(playerid, "Robber") != 0)
 	{
 		foreach(Player, ii)
		{
			if(GetPVarInt(ii, "Robber") != 0)
			{
				format(str, sizeof(str), ""RED_E"[TPM] "YELLOW_E"%s(%d): %s", pName[playerid], playerid, params);
				SendClientMessage(ii, COLOR_YELLOW, str);

			}
		}
 	}
 	format(str, sizeof(str), "3%s2[%i]: 7[TPM]2 %s",  pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
 	return true;
}


CMD:r(playerid, params[])
{
    
	if(isnull(params))
    {
	    Usage(playerid, "/r <message>");
	    SendClientMessage(playerid, COLOR_WHITEP,""RED_E"FUNCTION: "WHITEP_E"Reply to a private message.");
	    return true;
	}
	switch(GetPVarInt(playerid, "lastPMer"))
 	{
  		case -1:
		{
  			SendClientMessage(playerid, COLOR_YELLOW, ""UFF" The person who last PMed you is not online anymore!");
	    	return true;
		}
		case -2:
		{
  			SendClientMessage(playerid, COLOR_YELLOW, ""UFF" You haven't received any PMs during your online time!");
	    	return true;
		}
		default:
		{
			if(tmp[1] == ' ')
			{
 				format(str, sizeof(str), "%i %s", GetPVarInt(playerid, "lastPMer"), params);
			}
			else
			{
   				format(str, sizeof(str), "%i %s", GetPVarInt(playerid, "lastPMer"), params);
			}
			cmd_pm(playerid, str);
			return true;
		}
	}
	return true;
}

CMD:lock(playerid)
{
    if(InDM[playerid] == 13) return Error(playerid, "You can't lock your vehicle while playing CnR!");

	vID = GetPlayerVehicleID(playerid);
	vv = GetVehicleModel(vID);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        format(str, sizeof(str), ""RED_E"ERROR: You must be a driver in this %s to be able to /lock it!", vehName[vv - 400]);
		}
		else
		{
		    format(str, sizeof(str), ""RED_E"ERROR: You must be a driver in a vehicle!");
		}
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(vID == PlayerVehicle[playerid])
	{
		if(PlayerInfoVeh[playerid][Locked] == 1)
		{
			cmd_unlock(playerid);
	    	return true;
  		}
	}
	else if(CarLocked[vID] == true)
	{
		cmd_unlock(playerid);
	    return true;
	}

	CarLocked[vID] = true;
    foreach(Player, ii)
	{
 		if(ii != playerid)
		{
  			SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), ii, 0, 1);
     	}
 	}
    GameTextForPlayer(playerid,"~y~~h~Vehicle Doors: ~n~~g~~h~Locked",3000,3);
	format(str, sizeof(str), "4Server: 2%s(%i)3 has locked their %s.", pName[playerid], playerid, vehName[vv - 400]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:unlock(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        format(str, sizeof(str), "ERROR: "GREY2_E"You must be a driver in this %s to be able to /unlock it!", vehName[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
		}
		else
		{
		    format(str, sizeof(str), "ERROR: "GREY2_E"You must be a driver in a vehicle!");
		}
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

    vID = GetPlayerVehicleID(playerid);
    vv = GetVehicleModel(vID);
    if(vID == PlayerVehicle[playerid])
	{
		if(PlayerInfoVeh[playerid][Locked] == 0)
		{
			cmd_lock(playerid);
	    	return true;
		}
	}
	else if(CarLocked[vID] == false)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"This %s isn't locked!", vehName[vv - 400]);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

	CarLocked[vID] = false;
	foreach(Player, ii)
 	{
  		SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), ii, 0, 0);
    }
	
	format(str, sizeof(str), "4Server: 2%s(%i)3 has unlocked their %s.", pName[playerid], playerid, vehName[vv - 400]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(vID == PlayerVehicle[playerid])
	{
		PlayerInfoVeh[playerid][Locked] = 0;
	}
	GameTextForPlayer(playerid,"~y~Vehicle Doors: ~n~~r~~h~Unlocked",3000,3);
	return true;
}

CMD:dive(playerid, params[])
{

	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	new height;
	if(sscanf(params, "d", height))
	{
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		SetPlayerPosition(playerid, POS[0], POS[1], POS[2] + 500.0, 0);
	}
	else
	{
		if(height < 1)
		{
			return Error(playerid, "Height must be at least 1!");
		}
		if(height > 1000)
		{
			Error(playerid, "Height maximum is 1000!");
			height = 1000;
		}

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
			SetPlayerPos(playerid, POS[0], POS[1], POS[2] + height);
		}
		else
		{
			vID = GetPlayerVehicleID(playerid);
			GetVehiclePos(vID, POS[0], POS[1], POS[2]);
			SetVehiclePos(vID, POS[0], POS[1], POS[2] + height);
		}
	}
	GivePlayerWeapon(playerid, 46, 1);

    format(tmp, sizeof(tmp), "~y~~h~dive");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return true;
}

CMD:ame(playerid, params[])
{
    if(pMute[playerid] > 0)
	{
	    format(str, sizeof(str), ""UFF" "GREY_E"You are muted and can't use /me! Mute will be lifted in %d seconds.", pMute[playerid]);
	    SendClientMessage(playerid, COLOR_GREY, str);
	    return false;
	}
	if(isnull(params))
    {
	    Usage(playerid, ""GREY2_E"/me <action>");
	    return true;
	}
	if(GetPVarInt(playerid, "UsedMe") == 3)
	{
		SendClientMessage(playerid, COLOR_RED, "Server: "YELLOW_E"You can only use '/me' 3 times per minute due to spam, sorry!");
		return true;
	}
	new numCount;
	for(new i = 0; i < strlen(params); i++)
	{
		if(params[i] >= '0' && params[i] <= '9')
    	{
			numCount++;
   		}
	}

	if(numCount > 8)
	{
		if(strfind(params, "34.228.165.73:7777") == -1)
		{
			format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (Text: %s)", pName[playerid], playerid, params);
			SendAdminMessage(COLOR_RED, str);
			SendClientMessage(playerid, COLOR_RED, ""RED_E"Failed to send the message");
			format(str, sizeof(str), "4Server:2 %s(%d) has attempted to advertise! (Text: %s)", pName[playerid], playerid, params);
			IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			return true;
		}
	}
	if(strfind(params, "/q", true) != -1)
	{
		Error(playerid, "You are not allowed to type /q in chat!");
  		return true;
  	}
	if(GetPVarInt(playerid, "UsedMe") == 0) SetTimerEx("ResetMe", 60000, false, "i", playerid);
	new counts = GetPVarInt(playerid, "UsedMe") + 1;
	SetPVarInt(playerid, "UsedMe", counts);
	// Anti-Caps
	if(GetPVarType(playerid, "Caps")) UpperToLower(params);
	format(str, sizeof(str), ""LB_E"*** "WHITEP_E"%s(%i) %s", pName[playerid], playerid, params);
	SendClientMessageToAll(COLOR_WHITEP, str);
	return true;
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=================================Animations=================================
=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CMD:anims(playerid) return cmd_animlist(playerid);
CMD:animlist(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
	new line3[800];
	line3 = "\
	{BB0000}/drunk /bomb /parrest /lay /cover /kiss /cell /piss /sit /fu /carry\n\
	{EE7700}/deal /death /slapass /circle /medic /chat /wave /coplook /eat\n\
	{DDDD00}/vomit /arob /laugh /glitched /fakefire /lookout /smoke /fsmoke\n\
	{00BB00}/slapped /coparrest /caract /scratch /face /arrested /wank /handstand\n\
	{5500EE}/injured /strip /crack /run /walk /basket /cop /stance /dance /swim\n";
	strcat(line3, "\
	{BB0000}/bug /cam /chat /rap /follow /greet /injured /gsign /gang\n\
	{EE7700}/cry /gwalk \n");
	strcat(line3, "\
	{BB0000}/dance /animbar /animball /handsup /animknife /kickass /taichi /beer /wine\n\
	{EE7700}/beachsit /rocky /slapa /rofl /animgetin /funnywalk /animshout /look\n\n\
	"WHITE_E"- Type /stopanim to stop your current animation.");


	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: {0FF5CF}Animiations", line3, "Close", "");
	return true;
}
CMD:handstand(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	ApplyAnimation(playerid, "DAM_JUMP", "DAM_Dive_Loop", 3.00, 0, 0, 0, 0, -1);// /handstand
 	return 1;
}
CMD:carry(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerSpecialAction(playerid, 25);
	SetPVarInt(playerid, "UsingAnim", 1);
	InfoTD_MSG(playerid, 4000, "~y~~h~~h~Press ~k~~VEHICLE_ENTER_EXIT~ to stop the animation.");
 	return 1;
}
CMD:swim(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
    ApplyAnimation(playerid,"SWIM","Swim_Breast",4.1,1,1,1,1,1);
    SetPVarInt(playerid, "UsingAnim", 1);
    SendClientMessage(playerid, COLOR_YELLOW, "* Also try /swim2!");
    InfoTD_MSG(playerid, 4000, "~y~~h~~h~Press ~k~~VEHICLE_ENTER_EXIT~ to stop the animation.");
   	return 1;
}
CMD:swim2(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
    ApplyAnimation(playerid,"SWIM","SWIM_crawl",4.1,1,1,1,1,1);
    SetPVarInt(playerid, "UsingAnim", 1);
    return 1;
}
CMD:piss(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Server: You can't pee in your vehicle O.o o.O");
	    return true;
	}
	foreach(Player, ii)
	{
		if(pAdmin[ii] == 5 && ii != playerid)
  		{
  			GetPlayerPos(ii, POS[0], POS[1], POS[2]);
			if(IsPlayerInRangeOfPoint(playerid, 8.5, POS[0], POS[1], POS[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You can't piss near Executive Administrator.");
				return 1;
			}
		}
	}
	SetPlayerSpecialAction(playerid, 68);
	SetPVarInt(playerid, "UsingAnim", 1);
	SendClientMessage(playerid, COLOR_BLUE, "Server: Peeing...");
	SendClientMessage(playerid, COLOR_YELLOW, "Server: Press the \"Fire Key\" to stop.");
	return true;
}
CMD:spiss(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Server: You can't pee in your vehicle O.o o.O");
	    return true;
	}
	if(GetPVarInt(playerid, "UsingAnim") == 10)
	{
		RemovePlayerAttachedObject(playerid, 9);
		ClearAnimations(playerid);
	}
	else
	{
		SetPlayerSpecialAction(playerid, 68);
		SetPVarInt(playerid, "UsingAnim", 10);
		SetPlayerAttachedObject(playerid,9,18676,1,-1.900000,0.300000,0.000000,148.199584,90.099914,-55.199981,1.000000,-9.899993,1.000000);
		SendClientMessage(playerid, COLOR_BLUE, "Server: Peeing...");
		SendClientMessage(playerid, COLOR_YELLOW, "Server: Type /spiss again to stop the special animation.");
	}
	return true;
}

CMD:wank(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Server: Masturbating in your vehicle would be awkward.");
	    return true;
	}

 	ApplyAnimation(playerid,"PAULNMAC", "wank_out", 4.1, 1, 0, 0, 0, -1);
 	SetPVarInt(playerid, "UsingAnim", 1);
	SendClientMessage(playerid, COLOR_BLUE, "Server: Wanking... *fap* *fap* *fap*");
	SendClientMessage(playerid, COLOR_YELLOW, "Server: Press the \"Fire Key\" to stop.");
	return true;
}
CMD:chat(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "You can't perform animations in your vehicle.");
	    return true;
	}
 	ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
 	SetPVarInt(playerid, "UsingAnim", 1);
	return true;
}

CMD:animbar(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/animbar <1-12>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BAR","Barcustom_order",4.1,1,1,1,1,1,1);
	    case 4: ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,1,1,1,1,1,1);
	    case 5: ApplyAnimation(playerid,"BAR","Barserve_give",4.1,1,1,1,1,1,1);
	    case 6: ApplyAnimation(playerid,"BAR","Barserve_glass",4.1,1,1,1,1,1,1);
	    case 7: ApplyAnimation(playerid,"BAR","Barserve_in",4.1,1,1,1,1,1,1);
	    case 8: ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,1,1,1,1,1,1);
	    case 9: ApplyAnimation(playerid,"BAR","Barserve_order",4.1,1,1,1,1,1,1);
	    case 10: ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.1,1,1,1,1,1,1);
	    case 11: ApplyAnimation(playerid,"BAR","dnk_stndM_loop",4.1,1,1,1,1,1,1);
	    case 12: ApplyAnimation(playerid,"BAR","BARman_idle",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/animbar <1-12>");
	}
	return true;
}

CMD:animball(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/animball <1-10>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"BASEBALL","Bat_1",4.1,1,1,1,1,1,1);
	    case 2: ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,1,1,1,1,1,1);
	    case 3: ApplyAnimation(playerid,"BASEBALL","Bat_3",4.1,1,1,1,1,1,1);
	    case 4: ApplyAnimation(playerid,"BASEBALL","Bat_block",4.1,1,1,1,1,1,1);
	    case 5: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_1",4.1,1,1,1,1,1,1);
	    case 6: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_2",4.1,1,1,1,1,1,1);
	    case 7: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_3",4.1,1,1,1,1,1,1);
	    case 8: ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1,1,1,1,1,1,1);
	    case 9: ApplyAnimation(playerid,"BASEBALL","Bat_M",4.1,1,1,1,1,1,1);
	    case 10: ApplyAnimation(playerid,"BASEBALL","Bat_PART",4.1,1,1,1,1,1,1);
	    default: Usage(playerid, "{BBFF00}/animball <1-10>");
	}
	return true;
}

CMD:gsign(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/gsign <1-5>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"GHANDS","gsign1",4.0,0,1,1,1,1);
	    case 2: ApplyAnimation(playerid,"GHANDS","gsign2",4.0,0,1,1,1,1);
	    case 3: ApplyAnimation(playerid,"GHANDS","gsign3",4.0,0,1,1,1,1);
	    case 4: ApplyAnimation(playerid,"GHANDS","gsign4",4.0,0,1,1,1,1);
	    default: Usage(playerid, "{BBFF00}/gsign <1-4>");
	}
	return true;
}
CMD:gang(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/gang <1-7>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0);
	    case 2: ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
	    case 3: ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0);
	    case 4: ApplyAnimation(playerid,"GANGS","hndshkcb",4.0,0,0,0,0,0);
	    case 5: ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
	    case 6: ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0);
	    case 7: ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
	    default: Usage(playerid, "{BBFF00}/gang <1-4>");
	}
	return true;
}
CMD:cry(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/cry <1-2>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop", 4.0, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop", 4.0, 1, 0, 0, 0, 0);
	    default: Usage(playerid, "{BBFF00}/cry <1-2>");
	}
	return true;
}
CMD:gwalk(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/gwalk <1-2>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
	    case 2: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
	    default: Usage(playerid, "{BBFF00}/gwalk <1-2>");
	}
	return true;
}
CMD:rap(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/rap <1-3>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
	    case 2: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
	    case 3: ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	    default: Usage(playerid, "{BBFF00}/rap <1-3>");
	}
	return true;
}
CMD:follow(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	return true;
}
CMD:greet(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return true;
}
CMD:injured(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/injured <1-2>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid,"SWAT","gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
	    default: Usage(playerid, "{BBFF00}/injured <1-2>");
	}
	return true;
}
CMD:dance(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/dance <1-4>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
	    case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
	    case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
	    case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	    default: Usage(playerid, "{BBFF00}/dance <1-4>");
	}
	return true;
}
CMD:sit(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/sit <1-2>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
	    case 1: ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop",4.1,1,1,1,1,1,1);
	    case 2: ApplyAnimation(playerid,"PED","SEAT_down", 4.1, 0, 1, 1, 1, 1);
	 	default: Usage(playerid, "{BBFF00}/sit <1-2>");
	}
	return true;
}

CMD:handsup(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return true;
}

CMD:animknife(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/animknife <1-14>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"KNIFE","knife_2",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"KNIFE","knife_3",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"KNIFE","knife_4",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"KNIFE","Knife_G",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"KNIFE","knife_hit_1",4.1,1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"KNIFE","knife_hit_2",4.1,1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"KNIFE","knife_IDLE",4.1,1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.1,1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"KNIFE","knife_part",4.1,1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"KNIFE","WEAPON_knifeidle",4.1,1,1,1,1,1,1);
    	default: Usage(playerid, "{BBFF00}/animknife <1-14>");

	}
	return true;
}

CMD:drunk(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/drunk <1-3>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PAULNMAC", "pnm_loop_a",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PAULNMAC", "pnm_loop_b",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/drunk <1-3>");
	}
	return true;
}
CMD:drunklevel(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new drunklevel;
	if(sscanf(params, "d", drunklevel))
	{
	    Usage(playerid, "/drunk <0 - 50000> (above 2000 makes you drunk)");
	    return true;
	}

	SetPlayerDrunkLevel(playerid, drunklevel);

	if(drunklevel < 2000)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "You're now perfectly sober!");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREEN, "You're now drunk, yeah... you are! Feeling dizzy already?");
	}
	return true;
}

CMD:vodka(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	SetPlayerDrunkLevel(playerid, 4000000000);

	return true;
}
CMD:bomb(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,1,1,1);
	return true;
}

CMD:parrest(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED", "ARRESTgun", 4.1,1,1,1,1,1,1);
	return true;
}

CMD:laugh(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"RAPPING", "Laugh_01",4.1,1,1,1,1,1,1);
	return true;
}

CMD:lookout(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SHOP", "ROB_Shifty",4.1,1,1,1,1,1,1);
	return true;
}

CMD:arob(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SHOP", "ROB_Loop_Threat",4.1,1,1,1,1,1,1);
	return true;
}

CMD:coparrest(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"POLICE", "plc_drgbst_01",4.1,1,1,1,1,1,1);
	return true;
}

CMD:arrested(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"POLICE", "crm_drgbst_01",4.1,1,1,1,1,1,1);
	return true;
}


CMD:slapped(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SWEET", "ho_ass_slapped",4.1,1,1,1,1,1,1);
	return true;
}

CMD:fsmoke(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SMOKING", "F_smklean_loop",4.1,1,1,1,1,1,1);
	return true;
}

CMD:coplook(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"COP_AMBIENT", "Coplook_loop",4.1,1,1,1,1,1,1);
	return true;
}

CMD:lay(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/lay <1-9>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"BEACH", "bather",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BEACH", "parksit_w_loop",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BEACH","parksit_m_loop",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BEACH","lay_bac_loop",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BEACH","sitnwait_loop_w",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"SUNBATHE","parksit_m_in",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"CAR", "Fixn_Car_Loop",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/lay <1-9>");
	}
	return true;
}

CMD:cover(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED", "cower",4.1,1,1,1,1,1,1);
	return true;
}

CMD:vomit(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"FOOD", "EAT_Vomit_P",4.1,1,1,1,1,1,1);
	return true;
}

CMD:eat(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"FOOD", "EAT_Burger",4.1,1,1,1,1,1,1);
	return true;
}

CMD:wave(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return true;
}
CMD:slapass(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED","FALL_collapse",4.1,1,0,0,0,0,1);
	return true;
}
CMD:bug(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
    ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,0,0,1,0);
	return true;
}

CMD:cam(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
    ApplyAnimation(playerid,"CAMERA","camcrch_cmon",4.1,0,0,0,1,0);
	return true;
}

CMD:death(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"WUZI", "CS_Dead_Guy",4.1,1,1,1,1,1,1);

	return true;
}

CMD:deal(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"DEALER", "DEALER_DEAL",4.1,1,1,1,1,1,1);
	return true;
}

CMD:kiss(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Playa_Kiss_02",4.1,1,1,1,1,1,1);
	return true;
}
CMD:animkiss(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Playa_Kiss_01",4.1,1,1,1,1,1,1);
	return true;
}
CMD:animkiss1(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Playa_Kiss_03",4.1,1,1,1,1,1,1);
	return true;
}
CMD:animkiss2(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_01",4.1,1,1,1,1,1,1);
	return true;
}
CMD:animkiss3(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_02",4.1,1,1,1,1,1,1);
	return true;
}
CMD:forceanimkiss3(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");


	new player1;
	if(sscanf(params, "u", player1))
	{
	    Usage(playerid, "/forceanimkiss3 <ID>");
	    return true;
	}

	if(player1 == INVALID_PLAYER_ID)
        return Error(playerid, "Player 1 not connected!");

    ApplyAnimation(player1,"KISSING", "Grlfrd_Kiss_02",4.1,1,1,1,1,1,1);

	return true;
}
CMD:animkiss4(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_03",4.1,1,1,1,1,1,1);
	return true;
}

CMD:crack(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"CRACK", "crckdeth2",4.1,1,1,1,1,1,1);
	return true;
}

CMD:smoke(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop",4.1,1,1,1,1,1,1);
	return true;
}

CMD:fu(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED", "fucku",4.1,1,1,1,1,1,1);
	return true;
}

CMD:strip(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/strip <1-7>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"STRIP","strip_A",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"STRIP","strip_B",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"STRIP","strip_C",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"STRIP","strip_D",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"STRIP","strip_E",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"STRIP","strip_F",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"STRIP","strip_G",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/strip <1-7>");
	}
	return true;
}

CMD:carjack(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,1,1,1,1,1,1);
	return true;
}

CMD:cell(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return true;
}
CMD:kickall(playerid)
{
        if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
		if(pAdmin[playerid] < 4)
        return Error(playerid, "Insufficient permissions!");
		SendClientMessageToAll(-1, ""RED_E"ADMIN KICKING EVERYONE FROM SERVER! GoodBye!!");
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		Kick(i);
		}
		return 1;
}
CMD:kickass(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,1,1,1,1,1,1);
	return true;
}

CMD:funnywalk(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"WUZI","Wuzi_Walk",4.1,1,1,1,1,1,1);
	return true;
}

CMD:animgetin(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"NEVADA","NEVADA_getin",4.1,1,1,1,1,1,1);
	return true;
}

CMD:fakefire(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"SILENCED","SilenceCrouchfire",4.1,1,1,1,1,1,1);
	return true;
}

CMD:glitched(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_O",4.1,1,1,1,1,1,1);
	return true;
}

CMD:rofl(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,1,1,1,1,1,1);
	return true;
}

CMD:slapa(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,1,1,1,1,1,1);
	return true;
}



CMD:medic(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,1,1,1,1,1,1);
	return true;
}

CMD:circle(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_2",4.1,1,1,1,1,1,1);
	return true;
}

CMD:rocky(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"GYMNASIUM", "GYMshadowbox",4.1,1,1,1,1,1,1);
	return true;
}

CMD:beachsit(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,1,1,1,1,1,1);
	return true;
}

CMD:taichi(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.1,1,1,1,1,1,1);
	return true;
}

CMD:stopanim(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	DeletePVar(playerid, "UsingAnim");
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return true;
}

CMD:caract(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/caract <1-7>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"PED","TAP_HAND",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"CAR", "sit_relaxed",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"CAR", "tap_hand",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"CAR_CHAT", "carfone_in",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopa",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopb",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/caract <1-7>");
	}
	return true;
}

CMD:scratch(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1,1);
	return true;
}

CMD:face(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/face <1-6>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"PED","facanger",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","facgum",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","facsurp",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","facsurpm",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","factalk",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","facurios",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/face <1-6>");
	}
	return true;
}

CMD:animshout(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/animshout <1-3>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/animshout <1-3>");

	}
	return true;
}

CMD:look(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/look <1-3>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/look <1-3>");
	}
	return true;
}

CMD:run(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/run <1-11>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"FAT","FatRun",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","run_player",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","jog_femaleA",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","jog_maleA",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","run_old",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","run_left",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","run_fatold",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","run_gang1",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","run_fat",4.1,1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","run_right",4.1,1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","run_wuzi",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/run <1-11>");
	}
	return true;
}

CMD:walk(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	//if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/walk <1-14>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"FAT","FatWalk",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"WUZI","Wuzi_walk",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"POOL","Pool_walk",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","Walk_player",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","Walk_old",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","Walk_fatold",4.1,1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","woman_walkfatold",4.1,1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","woman_walknorm",4.1,1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","woman_walkold",4.1,1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","woman_walkpro",4.1,1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","woman_walkshop",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/walk <1-14>");
	}
	return true;
}

CMD:basket(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/basket <1-4>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/basket <1-4>");
	}
	return true;
}

CMD:stance(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/stance <1-13>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WOMAN_IDLESTANCE",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","CAR_HOOKERTALK",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"FAT","FatIdle",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"WUZI","Wuzi_Stand_Loop",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"GRAVEYARD","mrnf_loop",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"GRAVEYARD","mrnm_loop",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","idlestance_fat",4.1,1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","idlestance_old",4.1,1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","turn_l",4.1,1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,1,1,1,1,1,1);
		default: Usage(playerid, "{BBFF00}/stance <1-13>");
	}
	return true;
}

CMD:cop(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    Error(playerid, "You can't perform animations in your vehicle.");
	    return true;
	}

	if(sscanf(params, "i", datez))
	{
	    Usage(playerid, "{BBFF00}/cop <1-7>");
		return true;
	}
	SetPVarInt(playerid, "UsingAnim", 1);
	switch(datez)
	{
		case 1: ApplyAnimation(playerid,"SWORD","sword_block",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"POLICE","CopTraf_away",4.1,1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"POLICE","CopTraf_come",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"POLICE","CopTraf_left",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"POLICE","CopTraf_stop",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"POLICE","Cop_move_fwd",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED", "ARRESTgun",4.1,0,1,1,0,1,1);
		default: Usage(playerid, "{BBFF00}/cop <1-7>");
	}
	return true;
}

CMD:mail(playerid) return cmd_email(playerid);
CMD:email(playerid)
{

	if(!CanPlayerTeleport(playerid)) return true;
    if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to change your email address!");
	    return true;
	}

	ShowPlayerDialog(playerid, EMAIL_DIALOG, DIALOG_STYLE_INPUT, ""WHITE_E"Set your email address", ""WHITE_E"Enter your email address below.\nThis will be used to reset your password incase you lose it.\n\n"RED_E"* "WHITE_E"Your e-mail is confidential and will not be displayed publicly\n"RED_E"* "WHITE_E"Emails will only be sent for a password reset or important news\n\
	"RED_E"* "WHITE_E"Be sure to double-check and enter a valid email address!", "Enter", "Exit");
	InfoTD_MSG(playerid, 3000, "~g~~h~Enter your new email address!");
	return true;
}
CMD:status(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to change your email address!");
	    return true;
	}
	ShowPlayerDialog(playerid, DESCRIPTION_DIALOG+1, DIALOG_STYLE_INPUT, ""GREEN_E"Set your status", ""WHITE_E"Enter your preferred status below.\nThis will be displayed on /stats and your user control panel.\n\n"RED_E"* "WHITE_E"Limit is 40 characters.\n"RED_E"* "WHITE_E"Keep it short and simple, a basic status of yourself\n\
	"RED_E"* "WHITE_E"You can change your status at anytime, via stats or UCP.", "Enter", "Exit");
	return true;
}

CMD:mycountry(playerid, params[]) return cmd_country(playerid, params);
CMD:country(playerid, params[])
{
	if(sscanf(params, "s[30]", tmp))
	{
	    Usage(playerid, "/country <your country>");
		return true;
	}
	if(GetPVarInt(playerid, "tempPremium") == 1)
		return Error(playerid, "You can't change your country with temporary premium!");
	if(!(2 < strlen(tmp) < 30))
		return Error(playerid, "Please insert a valid country! Must be between 3-30 characters.");
	if(strfind(tmp, "%", true) != -1) return Error(playerid, "Invalid characters in country!");

	new escaped_count[30];
	mysql_real_escape_string(tmp, escaped_count);
	format(query, sizeof(query), "UPDATE players SET country='%s' WHERE reg_id=%d", escaped_count, pRegID[playerid]);
	MySQL_updateQuery(query);
	pCountry[playerid] = escaped_count;
	format(str, sizeof(str), ""UFF" "YELLOW_E"Your country has been set to '"LB2_E"%s"YELLOW_E"'!", escaped_count);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	format(str, sizeof(str), "~w~Country changed to ~b~~h~%s", escaped_count);
	InfoTD_MSG(playerid, 4000, str);
	format(str, sizeof(str), "4Server:3 %s(%i) has changed his country to %s.", pName[playerid], playerid, escaped_count);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
	return true;
}


CMD:changepassword(playerid) return cmd_changepass(playerid);
CMD:changepw(playerid) return cmd_changepass(playerid);
CMD:changepass(playerid)
{
    if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to change your password!");
	    return true;
	}

	ShowPlayerDialog(playerid, 198, DIALOG_STYLE_INPUT, ""WHITE_E"Change your password", "Insert your current password...", "Continue", "Exit");
	InfoTD_MSG(playerid, 3000, "~g~~h~Insert your current password!");
	return true;
}


/*CMD:changepass(playerid)
{
    if(pLogged[playerid] == false)
	{
	    Error(playerid, "You must be logged in to change your password!");
	    return true;
	}

	ShowPlayerDialog(playerid, 198, DIALOG_STYLE_INPUT, ""WHITE_E"Change your password", "Enter your preferred password.\n\nAll passwords are hashed.\nAll passwords are case-sensitive.\nRemember your password, you will need it for your next login.\n", "Enter", "Exit");
	InfoTD_MSG(playerid, 3000, "~w~Insert your preferred password!");
	return true;
}*/


CMD:label(playerid, params[]) return cmd_tag(playerid, params);
CMD:tag(playerid, params[])
{
	if(pPremium[playerid] != 1)
	    return Error(playerid, "You must be a VIP to use this command! (/vip)");

	if(sscanf(params, "s[12]", tmp))
	{
	    Usage(playerid, "/label <your personal label>");
		return true;
	}
	if(strlen(tmp) > 10) return Error(playerid, "Labels can't be longer than 10 characters!");
	if(!IsValidPassword(tmp)) return Error(playerid, "Your label contains invalid characters!");
	if(strfind(tmp, "admin", true) != -1 || strfind(tmp, "moderator", true) != -1 || strfind(tmp, "owner", true) != -1 || strfind(tmp, "administrator", true) != -1 || strfind(tmp, "vip", true) != -1)
		return Error(playerid, "Label can't contain the words admin, moderator or anything of that sort!");

	if(GetPVarInt(playerid, "tagCreated") == 0)
	{
		clan3D[playerid] = CreateDynamic3DTextLabel(tmp, 0xFFE4C488, 0, 0, 0.65, 25.0, playerid, _, 1);
		SetPVarInt(playerid, "tagCreated", 1);

		format(str, sizeof(str), ""UFF" You have set your label to %s "RED_E"|| "YELLOW_E"It will be displayed as a 3D Text label above your name.", tmp);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /remove to remove your label at anytime.");
	}
	else
	{
		format(str, sizeof(str), ""UFF" "RED_E"You have updated your tag to %s", tmp);
		SendClientMessage(playerid, COLOR_ORANGE, str);
		format(str, sizeof(str), "%s", tmp);
		UpdateDynamic3DTextLabelText(clan3D[playerid], 0xFFE4C488, str);
    }
	return true;
}
CMD:remove(playerid)
{
	if(GetPVarInt(playerid, "tagCreated"))
	{
		DestroyDynamic3DTextLabel(clan3D[playerid]);
		DeletePVar(playerid, "tagCreated");
		SendClientMessage(playerid, COLOR_RED, ""UFF" "RED_E"You have removed your tag.");
   	}
    else Error(playerid, "You do not have a label attached to you! (/label)");
	return true;
}
CMD:sfa(playerid) return cmd_sfair(playerid);
CMD:sfair(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		SetPlayerVehiclePosition(playerid, -1336.7538,-242.8128,14.1484,316.2072);
	}
	else
	{
 		SetPlayerPosition(playerid, -1367.8977,-251.4580,16.5441,313.0739);
	}
	TeleMSG(playerid, "San Fierro Airport /sfa");
	GameTextForPlayer(playerid, "~y~San Fierro Airport~n~~w~/sfa", 4000, 4);

	return true;
}
//========================================================[TELEPORTS]=====================================================================]
CMD:teleports(playerid) return cmd_teles(playerid);
CMD:t(playerid) return cmd_teles(playerid);
CMD:teleport(playerid) return cmd_teles(playerid);
CMD:tele(playerid) return cmd_teles(playerid);
CMD:teles(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	ShowTeleportMenu(playerid);
	return true;
}

CMD:stunt(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line6[2600];
	strcat(line6, ""WHITE_E"San Fierro\t\t"WHITE_E"[/SF]\n"WHITE_E"Abandoned Airport\t"WHITE_E"[/aa]\n"WHITE_E"Las Venturas\t\t"WHITE_E"[/lv]\n"WHITE_E"Los Santos\t\t"WHITE_E"[/ls]\n"WHITE_E"Chilliad \t\t"WHITE_E"[/chilliad]\n"WHITE_E"SF Airport\t\t"WHITE_E"[/sfair]\n"WHITE_E"LS Airport\t\t"WHITE_E"[/lsair]\n"WHITE_E"LV Airport\t\t"WHITE_E"[/lvair]\n"WHITE_E"Sherman Dam\t\t"WHITE_E"[/dam]");
	strcat(line6, "\n"WHITE_E"Beach Stunt\t\t"WHITE_E"[/beach]\n"WHITE_E"Huge Bowl\t\t"WHITE_E"[/bowl]\n"WHITE_E"Wallride\t\t"WHITE_E"[/wallride]\n"WHITE_E"Skate Park\t\t"WHITE_E"[/skatepark]");
    strcat(line6, "\n"WHITE_E"Bordel\t\t\t"WHITE_E"[/bordel]\n"WHITE_E"Docks\t\t\t"WHITE_E"[/docks]\n"WHITE_E"Maze\t\t\t"WHITE_E"[/maze]\n"WHITE_E"Maze 2\t\t\t"WHITE_E"[/maze2]\n"WHITE_E"Maze 3\t\t\t"WHITE_E"[/maze3]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 23, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Stunt Zones", line6, "Select", "Back");
	return true;
}
CMD:aweaps(playerid)
{

    if(pAdmin[playerid] < 1)
     return Error(playerid, "Insufficient permissions!");
	if(!CanPlayerTeleport(playerid)) return true;
	new line6[2600];
	strcat(line6, ""WHITE_E"Roket Launcher\t"WHITE_E"[/rpg]\n"WHITE_E"Minigun\t"WHITE_E"[/aminigun]");
	ShowPlayerDialog(playerid, 1003, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Admin Weapons", line6, "Select", "Back");
	return true;
}
CMD:cities(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line2[2600];
	strcat(line2, ""WHITE_E"SF Police Department\t\t"WHITE_E"[/sfpd]\n"WHITE_E"LV Police Department\t\t"WHITE_E"[/lvpd]\n"WHITE_E"LS Police Department\t\t"WHITE_E"[/lspd]\n"WHITE_E"SF Station\t\t\t"WHITE_E"[/sfs]\n"WHITE_E"LV Station\t\t\t"WHITE_E"[/lvs]\n"WHITE_E"LS Station\t\t\t"WHITE_E"[/lss]\n"WHITE_E"Burger Shot\t\t\t"WHITE_E"[/bs]\n"WHITE_E"Burger Shot 2\t\t\t"WHITE_E"[/bs2]\n"WHITE_E"Quarry\t\t\t\t"WHITE_E"[/quarry]");
	strcat(line2, "\n"WHITE_E"Market Station\t\t\t"WHITE_E"[/ms]\n"WHITE_E"Film\t\t\t\t"WHITE_E"[/film]");
	strcat(line2, "\n"WHITE_E"Node's house\t\t\t"WHITE_E"[/nhouse]\n"WHITE_E"Reckon's House\t\t"WHITE_E"[/rhouse]\n"WHITE_E"Oblivion's House\t\t"WHITE_E"[/ohouse]\n"WHITE_E"Administrator's Headquarters\t"WHITE_E"[/adminhq]");
	strcat(line2, "\n"WHITE_E"Angel Pine\t\t\t"WHITE_E"[/ap]\n"WHITE_E"Easter Egg\t\t\t"WHITE_E"[/ee]\n"WHITE_E"Easter Egg Jump\t\t"WHITE_E"[/eej]\n"WHITE_E"Ghost town\t\t\t"WHITE_E"[/ghosttown]");
    strcat(line2, "\n"WHITE_E"LS Hospital\t\t\t"WHITE_E"[/lsh]\n"WHITE_E"LV Hospital\t\t\t"WHITE_E"[/lvh]\n"WHITE_E"SF Hospital\t\t\t"WHITE_E"[/sfh]\n"WHITE_E"Jump\t\t\t\t"WHITE_E"[/jump]");
    strcat(line2, "\n"WHITE_E"SF Tunnel Jump\t\t"WHITE_E"[/sftj]\n"WHITE_E"Golf Park\t\t\t"WHITE_E"[/golfpark]\n"WHITE_E"Motel \t\t\t\t"WHITE_E"[/motel]\n"WHITE_E"Farm\t\t\t\t"WHITE_E"[/farm]");
    strcat(line2, "\n"WHITE_E"Fleisch Berg\t\t\t"WHITE_E"[/FB]\n"WHITE_E"Forest\t\t\t\t"WHITE_E"[/forst]\n"WHITE_E"Area 51\t\t\t\t"WHITE_E"[/a51]\n"WHITE_E"Villa\t\t\t\t"WHITE_E"[/villa]");
    strcat(line2, "\n"WHITE_E"Motel 2\t\t\t\t"WHITE_E"[/motel2]\n"WHITE_E"JunkYard\t\t\t"WHITE_E"[/Junkyard]\n"WHITE_E"Trans 3\t\t\t\t"WHITE_E"[/trans3]\n"WHITE_E"Palomino Creek\t\t"WHITE_E"[/palominocreek]\n"WHITE_E"Skyscraper\t\t"WHITE_E"[/sky]\n\n"WHITE_E"LV Station2\t\t\t"WHITE_E"[/lvs2]"WHITE_E"Back");
	ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Cities", line2, "Select", "Back");
	return true;
}
CMD:jumps(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line3[600];
	strcat(line3, ""WHITE_E"Sky Road\t\t"WHITE_E"[/skr]\n"WHITE_E"Huge Jump\t\t"WHITE_E"[/hugejump]\n"WHITE_E"Glass Jump\t\t"WHITE_E"[/glassjump]\n"WHITE_E"Bike Jump\t\t"WHITE_E"[/bikejump]\n"WHITE_E"Water Jump\t\t"WHITE_E"[/waterjump]\n"WHITE_E"Tunnel Jump\t\t"WHITE_E"[/tunneljump]");
	strcat(line3, "\n"WHITE_E"Quarry Jump\t\t"WHITE_E"[/qjump]\n"WHITE_E"Big Jump\t\t"WHITE_E"[/bigjump]\n"WHITE_E"Loop Jump\t\t"WHITE_E"[/loopjump]\n"WHITE_E"Death Jump\t\t"WHITE_E"[/dj]\n"WHITE_E"City Jump\t\t"WHITE_E"[/cityjump]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Jumps", line3, "Select", "Back");
 	return true;
}
CMD:funmaps(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line4[700];
	strcat(line4, ""WHITE_E"Loop\t\t\t"WHITE_E"[/loop]\n"WHITE_E"Drop!\t\t\t"WHITE_E"[/drop]\n"WHITE_E"GoingDown\t\t"WHITE_E"[/gd]\n"WHITE_E"Loop Fun\t\t"WHITE_E"[/lf]\n"WHITE_E"Tug Fun\t\t"WHITE_E"[/tugfun]\n"WHITE_E"SkyRoad\t\t"WHITE_E"[/SKC]\n"WHITE_E"Trampoline\t\t"WHITE_E"[/tr]");
	strcat(line4, "\n"WHITE_E"Pipe\t\t\t"WHITE_E"[/pipe]\n"WHITE_E"Car Sumo\t\t"WHITE_E"[/carsumo]\n"WHITE_E"HalfPipe\t\t"WHITE_E"[/hp]\n"WHITE_E"Slide\t\t\t"WHITE_E"[/slide]\n"WHITE_E"Fun Road\t\t"WHITE_E"[/funroad]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 26, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Fun Maps", line4, "Select", "Back");
	return true;
}
CMD:tunes(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	ShowPlayerDialog(playerid, 27, DIALOG_STYLE_LIST,
		""BLUE_E"UFF: "WHITE_E"Tune Shops", ""WHITE_E"Loco\t\t\t"WHITE_E"[/loco]\n"WHITE_E"Arch Angels\t\t"WHITE_E"[/arch]\n"WHITE_E"Transfender\t\t"WHITE_E"[/trans]\n"WHITE_E"Pay'n'Spray\t\t"WHITE_E"[/ps]\n"WHITE_E"Back", "Select", "Back");
	return true;
}
CMD:challenge(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line9[2600];
	strcat(line9, "\n"WHITE_E"Hay Climb\t\t"WHITE_E"[/hayclimb]\n"WHITE_E"Bike Challenge\t\t"WHITE_E"[/bikec]\n"WHITE_E"Parkour 1\t\t"WHITE_E"[/parkour1]\n"WHITE_E"Parkour 2\t\t"WHITE_E"[/parkour2]\n"WHITE_E"Parkour 3\t\t"WHITE_E"[/parkour3]\n"WHITE_E"BMX Parkour\t\t"WHITE_E"[/bmx]");
	strcat(line9, "\n"WHITE_E"Quad Parkour\t\t"WHITE_E"[/quadparkour]\n"WHITE_E"SkyDive\t\t"WHITE_E"[/skydive]\n"WHITE_E"SkyDive 2\t\t"WHITE_E"[/skydive2]\n"WHITE_E"SkyDive 3\t\t"WHITE_E"[/skydive3]");
	strcat(line9, "\n"WHITE_E"Hay Climb 2\t\t"WHITE_E"[/hayclimb2]");
    strcat(line9, "\n"WHITE_E"Bike Challenge 3\t"WHITE_E"[/bc3]\n"WHITE_E"Parkour4\t\t"WHITE_E"[/parkour4]\n"WHITE_E"Parkour5\t\t"WHITE_E"[/parkour5]");
    strcat(line9, "\n"WHITE_E""WHITE_E"offroad\t\t\t"WHITE_E"[/offroad]\n"WHITE_E"Challenge 1\t\t"WHITE_E"[/chal1]\n"WHITE_E"Challenge 2\t\t"WHITE_E"[/chal2]");
    strcat(line9, "\n"WHITE_E"Challenge 3\t\t"WHITE_E"[/chal3]\n"WHITE_E"Challenge 4\t\t"WHITE_E"[/chal4]\n"WHITE_E"Challenge 5\t\t"WHITE_E"[/chal5]\n"WHITE_E"Challenge 6\t\t"WHITE_E"[/chal6]\n"WHITE_E"Challenge 7\t\t"WHITE_E"[/chal7]\n"WHITE_E"Challenge 8\t\t"WHITE_E"[/chal8]");
    strcat(line9, "\n"WHITE_E"Skydive 4\t\t"WHITE_E"[/skydive4]\n"WHITE_E"Skydive5\t\t"WHITE_E"[/skydive5]\n"WHITE_E"Bike Challenge 4\t"WHITE_E"[/bikec4]\n"WHITE_E"Challenge 9\t\t"WHITE_E"[/chal9]\n"WHITE_E"Challenge 10\t\t"WHITE_E"[/chal10]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 33, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Challenges", line9, "Select", "Back");
	return true;
}
CMD:misc(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line5[800];
	strcat(line5, ""WHITE_E"Interiors\t\t"WHITE_E"[/interiors]\n"WHITE_E"UFF Club\t\t"WHITE_E"[/club]\n"WHITE_E"UFF Bar\t\t"WHITE_E"[/bar]\n"WHITE_E"Wangs\t\t\t"WHITE_E"[/wang]\n"WHITE_E"Ottos\t\t\t"WHITE_E"[/otto]\n"WHITE_E"Hippy\t\t\t"WHITE_E"[/hippy]\n"WHITE_E"Truck Stop\t\t"WHITE_E"[/truckstop]\n"WHITE_E"LS Dive\t\t"WHITE_E"[/LSdive]\n"WHITE_E"Andromeda\t\t"WHITE_E"[/andro]");
	strcat(line5, "\n"WHITE_E"Stadium\t\t"WHITE_E"[/stadium]\n"WHITE_E"Underwater\t\t"WHITE_E"[/under]\n"WHITE_E"Node's island\t\t"WHITE_E"[/npalace]\n"WHITE_E"Tree House\t\t"WHITE_E"[/treehouse]\n"WHITE_E"Underground Club\t"WHITE_E"[/uclub]\n"WHITE_E"Bank\t\t\t"WHITE_E"[/bank]\n"WHITE_E"Hover\t\t\t"WHITE_E"[/hover]\n"WHITE_E"Party\t\t\t"WHITE_E"[/party]");
    strcat(line5, "\n"WHITE_E"Restaurant\t\t"WHITE_E"[/restaurant]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Misc", line5, "Select", "Back");
	return true;
}

CMD:interiors(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	ShowPlayerDialog(playerid, INTERIORMENU, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Interiors","24/7's\nAirports\nAmmunations\nHouses\nHouses 2\nMissions\nStadiums\nCasinos\nShops\nGarages\nGirlfriends\nClothing/Barber Store\nResturants/Clubs\nNo Category\nBurglary\nBurglary 2\nGym\nDepartment\nWorld Locations", "Select", "Back");
	return true;
}

CMD:races(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line5[600];
	strcat(line5, ""WHITE_E"Race Map\t\t"WHITE_E"[/racemap]\n"WHITE_E"RaceMap 2\t\t"WHITE_E"[/racemap2]\n"WHITE_E"RaceMap 3\t\t"WHITE_E"[/racemap3]\n"WHITE_E"Race Track\t\t"WHITE_E"[/racetrack]\n"WHITE_E"Quad Race\t\t"WHITE_E"[/quadrace]\n"WHITE_E"RC Track\t\t"WHITE_E"[/rctrack]\n");
	strcat(line5, ""WHITE_E"RC Track 2\t\t"WHITE_E"[/rctrack2]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Races", line5, "Select", "Back");
	return true;
}
CMD:newmaps(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	new line8[800];
	strcat(line8, ""WHITE_E"Disney Stunt\t\t"WHITE_E"[/disney]\n"WHITE_E"RaceMap 2\t\t"WHITE_E"[/racemap2]\n"WHITE_E"Tube\t\t\t"WHITE_E"[/tube]\n"WHITE_E"SkyRoad\t\t"WHITE_E"[/skr]");
	strcat(line8, "\n"WHITE_E"Sherman Dam\t\t"WHITE_E"(/dam)\n"WHITE_E"Concert\t\t"WHITE_E"[/concert]\n"WHITE_E"egypt\t\t"WHITE_E"[/egypt]\n"WHITE_E"Prison\t\t"WHITE_E"[/prison]");
    strcat(line8, "\n"WHITE_E"Maze 4\t"WHITE_E"[/maze4]\n"WHITE_E"Back");
	ShowPlayerDialog(playerid, 32, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"New Maps", line8, "Select", "Back");
	return true;
}
CMD:minigame(playerid) return cmd_minigames(playerid);
CMD:mg(playerid) return cmd_minigames(playerid);
CMD:minigames(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
    new line7[400], line3[800];
	new pderby, pshooters, pfallout,  pcnr, ptdm, pcsdm, plms, prace, pgungame;
	foreach(Player, ii)
	{
		if(doingStunt[ii] == 19) pderby++;
		if(doingStunt[ii] == 18) pfallout++;
		if(InDM[ii] == 13) pcnr++;
		if(InDM[ii] == 10) ptdm++;
		if(InDM[ii] == 19) pcsdm++;
		if(doingStunt[ii] == 33) plms++;
		if(doingStunt[ii] == 97) pshooters++;
		if(RaceParticipant[ii] == true) prace++;
		if(InDM[ii] == 63) pgungame++;
	}
	format(line7, 500, ""WHITE_E"Derby\t\t\t"WHITE_E"[/derby]\t\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Fallout\t\t\t"WHITE_E"[/fallout]\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Cops and Robbers\t"WHITE_E"[/cnr]\t\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Team Deathmatch\t"WHITE_E"[/tdm]\t\t\t"WHITE_E"(Players: %i)", pderby, pfallout, pcnr, ptdm);
	strcat(line3, line7);
    format(line7, 500, "\n"WHITE_E"Counter Strike Dm\t"WHITE_E"[/csdm]\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Last Man Standing\t"WHITE_E"[/lms]\t\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Shooter\t\t"WHITE_E"[/shooter]\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Race\t\t\t"WHITE_E"[/race]\t\t\t"WHITE_E"(Players: %i)\n"WHITE_E"GunGame\t\t"WHITE_E"[/gg]\t\t"WHITE_E"(Players: %i)\n"WHITE_E"Back", pcsdm, plms, pshooters, prace ,pgungame);
	strcat(line3, line7);


	ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Minigames", line3, "Select", "Back");
	return true;
}

// Recent Maps!
CMD:jhouse(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	SetPlayerPosition(playerid, 998.4199,-2166.8000,13.1711,51.9518);
	TeleMSG(playerid, "Jarvis's House /jhouse");
	GameTextForPlayer(playerid, "~y~Jarvi's House~n~~w~/jhouse", 4000, 4);
	return true;
}
CMD:nodehouse(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	TelePlayer(playerid, 1354.0022,775.3280,10.6797,274.2816);
	TeleMSG(playerid, "Node's House /nodehouse");
	GameTextForPlayer(playerid, "~y~Node's House~n~~w~/nodehouse", 4000, 4);
	return true;
}

CMD:lounge(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	TelePlayer(playerid, -2211.8704,63.7226,-76.7872,274.9536);
	TeleMSG(playerid, "UFF Lounge /lounge");
	GameTextForPlayer(playerid, "~y~UFF Lounge~n~~w~/lounge", 4000, 4);
	return true;
}
CMD:bar(playerid) return cmd_club2(playerid);
CMD:club2(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	SetPlayerPosition(playerid, 628.3946,-1503.7072,14.7474,115.4453);
	TeleMSG(playerid, "Club /club2");
	GameTextForPlayer(playerid, "~y~Club 2~n~~w~/club2", 4000, 4);
	return true;
}
CMD:waterpark(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	SetPlayerPosition(playerid, -2109.4500,-2819.4067,3.0000,178.2854);
	TeleMSG(playerid, "Water Park /waterpark");
	GameTextForPlayer(playerid, "~y~Water Park~n~~w~/waterpark", 4000, 4);
	return true;
}
CMD:skr(playerid) return cmd_skyroad(playerid);
CMD:skyroad(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2954.5017, -1441.2960, 1245.5, 100.9987);
	}
	else
	{
	    SetPlayerPosition(playerid, 2999.2258, -1433.3010, 1244.1365, 101.9770);
	}
	TeleMSG(playerid, "SkyRoad /skyroad");
	GameTextForPlayer(playerid, "~y~Skyroad~n~~w~/Skyroad", 4000, 4);
	return true;
}
CMD:lc(playerid) return cmd_liberty(playerid);
CMD:liberty(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -747.8565,470.6289,1370.1052,11.1097, 1);
	TeleMSG(playerid, "Liberty City /liberty");
	GameTextForPlayer(playerid, "~y~Liberty City~n~~w~/LC", 4000, 4);
	return true;
}
CMD:watchevent(playerid)
{

	if(!CanPlayerTeleport(playerid)) return true;
	if(EventGoingOn != 1) return Error(playerid, "There is no event going on right now.");
	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't spectate the event here!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't use this command while in a DM!");
   		return true;
	}
	TogglePlayerSpectating(playerid, 1);
	SetPlayerInterior(playerid, 0);
	if(CageFight == 1)
	{
		InterpolateCameraPos(playerid, 2736.0034, -1763.6633, 81.5506, 2736.0034, -1763.6633, 81.5506, 1000, CAMERA_CUT);
		SetPlayerVirtualWorld(playerid, 13);
 	}
  	else
  	{
  		InterpolateCameraPos(playerid, 1396.226684, 2097.452636, 24.608520, 1396.226684, 2097.452636, 24.608520, 1000, CAMERA_CUT);
  		SetPlayerVirtualWorld(playerid, 13);
	}

	doingStunt[playerid] = 70;

	PlayerTextDrawSetString(playerid, InfoTD[playerid], "Type /stopwatch to stop spectating the event.");
    PlayerTextDrawShow(playerid, InfoTD[playerid]);
	SendClientMessage(playerid, COLOR_RED, "HELP: "SBLUE_E"Move your NUMPAD around to change camera views, type /stopwatch to end spectating.");
	return true;
}
CMD:watchderby(playerid)
{

	if(!CanPlayerTeleport(playerid)) return true;
	if(EventGoingOn != 2) return Error(playerid, "There is no derby going on right now.");
	if(doingStunt[playerid] != 0)
	{
	    Error(playerid, "You can't spectate the event here!");
	    return true;
	}
	if(InDM[playerid] != 0)
	{
 		Error(playerid, "You can't use this command while in a DM!");
   		return true;
	}
    if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	}
	doingStunt[playerid] = 71;
	//GameTextForPlayer(playerid, "~w~Objects~n~Loading~r~..", 3000, 4);
	SetPlayerPosition(playerid, -1455.9955,936.1641,1041.5313,335.8908, 15);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2200, false, "i", playerid);
	SetPlayerVirtualWorld(playerid, 11);
	return true;
}


CMD:club(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -2628.8223,1399.8284,7.1016,336.7075);
	TeleMSG(playerid, "Regular Players Club /club");
	GameTextForPlayer(playerid, "~y~Regular Players Club~n~~w~/club", 4000, 4);
	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "PINK_E"Enter the checkpoint to join the club! Use "RED_E"/anims "PINK_E"to perform animations.");
	return true;
}
CMD:challenge3(playerid) return cmd_chal3(playerid);
CMD:chal3(playerid)
{
    
    if(RaceParticipant[playerid] == true && InDM[playerid] != 0 && doingStunt[playerid] != 0 && InEvent[playerid] != 0 && IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePosition(playerid, 1297.3998, -5626.5122, 81.7, 149.0596);
	GameTextForPlayer(playerid, "~y~Challenge 3~n~~w~/chal3", 4000, 4);
	TeleMSG(playerid, "Challenge 3 /chal3");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}

CMD:challenge6(playerid) return cmd_chal6(playerid);
CMD:chal6(playerid)
{

   if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePositionEx(playerid, -2881.4773, -139.5330, 834.7387, 91.0000);
	GameTextForPlayer(playerid, "~y~Challenge 6~n~~w~/chal6", 4000, 4);
	TeleMSG(playerid, "Challenge 6 /chal6");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);

	return true;
}
CMD:challenge7(playerid) return cmd_chal7(playerid);
CMD:chal7(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePosition(playerid, -1713.5878, -2840.1958, 658.7973, 269.0000);
	GameTextForPlayer(playerid, "~y~Challenge 7~n~~w~/chal7", 4000, 4);
	TeleMSG(playerid, "Challenge 7 /chal7");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}
CMD:challenge8(playerid) return cmd_chal8(playerid);
CMD:chal8(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePosition(playerid, 2760.2363, 3142.4570, 317.5373, 135.0000);
	GameTextForPlayer(playerid, "~y~Challenge 8~n~~w~/chal8", 4000, 4);
	TeleMSG(playerid, "Challenge 8 /chal8");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}
CMD:challenge9(playerid) return cmd_chal9(playerid);
CMD:chal9(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePosition(playerid, 2996.3474, 745.4448, 1000.9217, 0.0000);
	GameTextForPlayer(playerid, "~y~Challenge 9~n~~w~/chal9", 4000, 4);
	TeleMSG(playerid, "Challenge 9 /chal9");
	doingStunt[playerid] = 9;
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}

CMD:challenge10(playerid) return cmd_chal10(playerid);
CMD:chal10(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePosition(playerid, 1992.0107, 3845.4626, 58.6304, 0.0000);
	GameTextForPlayer(playerid, "~y~Challenge 10~n~~w~/chal10", 4000, 4);
	TeleMSG(playerid, "Challenge 10 /chal10");
	doingStunt[playerid] = 42;
	SetPlayerVirtualWorld(playerid, 75);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 75);
	return true;
}
CMD:offroad1(playerid) return cmd_offroad(playerid);
CMD:offroad(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 495, false);
	SetPlayerVehiclePosition(playerid, 2627.2502,-904.1603,76.4852,16.3663);
	GameTextForPlayer(playerid, "~y~Offroad~n~~w~/Offroad", 4000, 4);
	TeleMSG(playerid, "Offroad /offroad");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}
CMD:challenge4(playerid) return cmd_chal4(playerid);
CMD:chal4(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 411, false);
	SavePlayerPosition(playerid);
	SetPlayerVehiclePosition(playerid, -1929.1312, 6627.0327, 12.0, 180.0);
	TeleMSG(playerid, "Challenge 4 /chal4");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~y~Challenge 4~n~~w~/chal4", 4000, 4);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	SetPVarInt(playerid, "TimeChanged", 1);
	return true;
}
CMD:challenge5(playerid) return cmd_chal5(playerid);
CMD:chal5(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePosition(playerid, -5697.0776,2790.4976,5.5507,359.4344);
	TeleMSG(playerid, "Challenge 5 /chal5");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	GameTextForPlayer(playerid, "~y~Challenge 5~n~~w~/chal5", 4000, 4);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	return true;
}
CMD:challenge1(playerid) return cmd_chal1(playerid);
CMD:chal1(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePositionEx(playerid, -297.6044, 3682.8264, 24.0, 0.0);
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);
	TeleMSG(playerid, "Challenge 1 /chal1");
	GameTextForPlayer(playerid, "~y~Challenge 1~n~~w~/chal1", 4000, 4);
	return true;
}
CMD:challenge2(playerid) return cmd_chal2(playerid);
CMD:chal2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 411, false);
	SetPlayerVehiclePositionEx(playerid, -5051.7461, -2237.2556, 10.9, 359.8096);
	GameTextForPlayer(playerid, "~y~Challenge 2~n~~w~/chal2", 4000, 4);
	TeleMSG(playerid, "Challenge 2 /chal2");
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 18);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 18);

	return true;
}

CMD:disney(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 400.2232,636.9904,16.8194,136.9245);
	}
	else
	{
	    SetPlayerPosition(playerid, 400.2232,636.9904,16.8194,136.9245);
	}
	TeleMSG(playerid, "Disney StuntPark /disney");
	GameTextForPlayer(playerid, "~y~Disney~n~~w~/disney", 4000, 4);
	return true;
}
CMD:cityjump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetPlayerVehiclePosition(playerid, 1026.4652,-716.0980,860.1219,221.3184);
	else SetPlayerPosition(playerid, 1018.2846,-719.9208,860.3576,2.3197);
	TeleMSG(playerid, "City Jump /cityjump");
	GameTextForPlayer(playerid, "~y~City Jump~n~~w~/cityjump", 4000, 4);
	return true;
}
CMD:quadrace(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 471, false);
	SetPlayerVehiclePosition(playerid, 1988.9644,-814.6315,130.2246,352.9534);
	TeleMSG(playerid, "Quad Race /quadrace");
	GameTextForPlayer(playerid, "~y~Quad Race~n~~w~/quadrace", 4000, 4);
	return true;
}
CMD:racemap2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2739.9221,1904.8870,5269.4741,180.1579);
	}
	else
	{
	    SetPlayerPosition(playerid, 2741.1375,1969.4594,5269.7466,178.2995);
	}
	TeleMSG(playerid, "Race Map 2 /racemap2");
	GameTextForPlayer(playerid, "~y~Racemap 2~n~~w~/racemap2", 4000, 4);
	return true;
}
CMD:racemap3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -6018.9053,364.8622,8.5404,178.9425);
	}
	else
	{
	    SetPlayerPosition(playerid, -6018.9053,364.8622,8.5404,178.9425);
	}
	TeleMSG(playerid, "Race Map 3 /racemap3");
	GameTextForPlayer(playerid, "~y~Racemap 3~n~~w~/racemap3", 4000, 4);
	return true;
}
CMD:rctrack(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 441, false);
	SetPlayerVehiclePosition(playerid, -581.0287,-473.4356,24.6422,270.4918);
	TeleMSG(playerid, "RC Track /rcTrack");
	GameTextForPlayer(playerid, "~y~RC Track~n~~w~/rctrack", 4000, 4);
	return true;
}
CMD:rctrack2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 594, false);
	SetPlayerVehiclePosition(playerid, -977.5964,-636.3691,31.1266,181.2495);
	TeleMSG(playerid, "RC Track 2 /rcTrack2");
	GameTextForPlayer(playerid, "~y~RC Track 2~n~~w~/rctrack2", 4000, 4);
	return true;
}
CMD:tube(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		SetPlayerVehiclePositionEx(playerid, 1254.5294,-2285.2883,1084.8463,333.6016);
	}
	else
	{
	    SpawnPlayerVehicle(playerid, 415);
	 	SetPlayerVehiclePositionEx(playerid, 1254.5294,-2285.2883,1084.8463,333.6016);
	}
	TeleMSG(playerid, "Tube /tube");
	GameTextForPlayer(playerid, "~y~Tube~n~~w~/tube", 4000, 4);
	return true;
}
CMD:di(playerid) return cmd_driftisland(playerid);
CMD:driftisland(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePositionEx(playerid, 3075.9263,-3153.9749,49.1486,3.6277);
	}
	else
	{
	    SetPlayerPosition(playerid, 3075.9263,-3153.9749,49.1486,3.6277);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	}
	TeleMSG(playerid, "Drift Island /driftisland");
	GameTextForPlayer(playerid, "~y~Drift Island~n~~w~/di", 4000, 4);
	return true;
}
CMD:dc(playerid) return cmd_driftcity(playerid);
CMD:driftcity(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePositionEx(playerid, 3437.3269,488.8339,1787.9915,359.6775);
	}
	else
	{
	    SetPlayerVehiclePositionEx(playerid, 3437.3269,488.8339,1787.9915,359.6775);
	}
	TeleMSG(playerid, "Drift City /dc");
	GameTextForPlayer(playerid, "~y~Drift City~n~~w~/dc", 4000, 4);
	return true;
}

stock CheckBCCompleted(playerid)
{
	if(GetPVarInt(playerid, "CompletedBC1") == 1 && GetPVarInt(playerid, "CompletedBC2") == 1 && GetPVarInt(playerid, "CompletedBC3") == 1)
	{
		if(pAch20[playerid] == 0)
		{
  			DeletePVar(playerid, "CompletedBC1");
	    	DeletePVar(playerid, "CompletedBC2");
	    	DeletePVar(playerid, "CompletedBC3");
			pAch19[playerid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a19=1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerAchievement(playerid, "Pro Biker", "Congrats you completed 3 bike challenges!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
		}
	}
}

CMD:bikec(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePosition(playerid,  923.1620, -2182.9507, 184.2531, 88.0000);
	TeleMSG(playerid, "Bike Challenge /bikec");
	GameTextForPlayer(playerid, "~y~Bike Challenge~n~~w~/bikec", 4000, 4);
	doingStunt[playerid] = 9;
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 100);
	SetPlayerVirtualWorld(playerid, 12);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	return true;
}

CMD:bc2(playerid) return cmd_bikec2(playerid);
CMD:bikec2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePositionEx(playerid, 348.8365,3113.9822,102.8512,180.6123);
	GameTextForPlayer(playerid, "~y~Bike Challenge 2~n~~w~/bikec2", 4000, 4);
	TeleMSG(playerid, "Bike Challenge 2 /bikec2");
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 100);
	ResetPlayerWeapons(playerid);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 9;
	return true;
}
CMD:bc3(playerid) return cmd_bikec3(playerid);
CMD:bikec3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePositionEx(playerid, -2091.8909,-107.3381,34.8897,188.0293);
	GameTextForPlayer(playerid, "~y~Bike Challenge 3~n~~w~/bikec3", 4000, 4);
	TeleMSG(playerid, "Bike Challenge 3 /bikec3");
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 100);
	ResetPlayerWeapons(playerid);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 9;
	return true;
}
CMD:bc4(playerid) return cmd_bikec4(playerid);
CMD:bikec4(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePositionEx(playerid, 2267.3738, 1582.6492, 101.3537, 0.0000);
	GameTextForPlayer(playerid, "~y~Bike Challenge 4~n~~w~/bikec4", 4000, 4);
	TeleMSG(playerid, "Bike Challenge 4 /bikec4");
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 100);
	ResetPlayerWeapons(playerid);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 9;
	return true;
}
CMD:bayside(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2262.9331,2322.9844,4.2939,3.4363);
	}
	else
	{
	    SetPlayerPosition(playerid, -2226.9187,2328.7654,7.5469,86.2824);
	}
	TeleMSG(playerid, "Bayside /bayside");
	GameTextForPlayer(playerid, "~y~Bayside~n~~w~/bayside", 4000, 4);
	return true;
}

CMD:dj(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2629.9734,-1029.7679,882.9141,240.2882);
	}
	else
	{
	    SetPlayerPosition(playerid, 2629.9734,-1029.7679,882.9141,240.2882);
	}
	TeleMSG(playerid, "Death Jump /dj");
	GameTextForPlayer(playerid, "~y~Death Jump~n~~w~/dj", 4000, 4);
	return true;
}
CMD:skydive(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid,13.4397,7467.0752,3184.3162,1.0143);
	SavePlayerPosition(playerid);
	TeleMSG(playerid, "Sky Dive /skydive");
	SetPlayerVirtualWorld(playerid, 12);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 46, 1);

	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
	GameTextForPlayer(playerid, "~y~SkyDive~n~~w~/skydive", 4000, 4);
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	
	//disaable
	SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	return true;
}
CMD:skydive2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SetPlayerPositionEx(playerid,1436.8721,-848.7169,2511.2512,269.8101);
	TeleMSG(playerid, "Sky Dive 2 /skydive2");
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	GivePlayerWeapon(playerid, 46, 1);
	GameTextForPlayer(playerid, "~y~SkyDive 2~n~~w~/skydive2", 4000, 4);
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	
	//disaable
    SetPlayerHealth(playerid, 100);
    doingStunt[playerid] = 9;
	return true;
}
CMD:skydive3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SetPlayerPositionEx(playerid,-113.0264,-1169.6085,2237.7954,89.6650);
	GameTextForPlayer(playerid, "~y~SkyDive 3~n~~w~/skydive3", 4000, 4);
	TeleMSG(playerid, "Sky Dive 3 /skydive3");
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	GivePlayerWeapon(playerid, 46, 1);
	
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	
	//disaable
    SetPlayerHealth(playerid, 100);
    doingStunt[playerid] = 9;
	return true;
}
CMD:skydive4(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SetPlayerPositionEx(playerid,1541.5452, -1363.4098, 3945.7163, -91.0000);
	GameTextForPlayer(playerid, "~y~SkyDive 4~n~~w~/skydive4", 4000, 4);
	TeleMSG(playerid, "Sky Dive 4 /skydive4");
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	GivePlayerWeapon(playerid, 46, 1);

	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}

	//disaable
    SetPlayerHealth(playerid, 100);
    doingStunt[playerid] = 9;
	return true;
}
CMD:skydive5(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SetPlayerPositionEx(playerid, 3617.8762, -2455.4170, 1536.6774, 91.0000);
	GameTextForPlayer(playerid, "~y~SkyDive 5~n~~w~/skydive5", 4000, 4);
	TeleMSG(playerid, "Sky Dive 5 /skydive5");
	ResetPlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	GivePlayerWeapon(playerid, 46, 1);
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	//disaable
    SetPlayerHealth(playerid, 100);
	doingStunt[playerid] = 9;
	return true;
}

CMD:ahouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pAdmin[playerid] < 1)
	 return Error(playerid, "Insufficient permissions!");
   	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -720.2568,1947.2202,1.5159,2.5575);
	TeleMSG(playerid, "Administrator's House /ahouse");
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}
CMD:nhouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -2472.2991,2242.8821,4.8545,179.9468);
	TeleMSG(playerid, "Node's house /nhouse");
	GameTextForPlayer(playerid, "~y~Node's House~n~~w~/nhouse", 4000, 4);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}

CMD:247(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
    switch(random(4))
	{
	case 0: SetPlayerPosition(playerid,2180.6294,1990.8992,10.8203,269.8955);
	case 1: SetPlayerPosition(playerid,2097.7559,2213.6255,10.8203,359.5878);
	case 3: SetPlayerPosition(playerid,1924.6415,2307.8894,10.6719,267.8550);
	case 4: SetPlayerPosition(playerid,2889.9067,2440.6946,10.8203,24.5120);
	}
	TeleMSG(playerid, "24/7 Store /247");
	GameTextForPlayer(playerid, "~y~24/7 Store~n~~w~/247", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}

CMD:eifletower (playerid) return (playerid);
CMD:et(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 953.5107,2441.4834,213.4688,232.7661);
	TeleMSG(playerid, "Eifle Tower /et");
	GameTextForPlayer(playerid, "~y~Eifle Tower~n~~w~/et", 4000, 4);
	return true;
}
CMD:dillimoreairport (playerid) return (playerid);
CMD:da(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 804.2752,-465.8355,20.7913,90.5583);
	TeleMSG(playerid, "Dillimore Airport /da");
	GameTextForPlayer(playerid, "~y~Dillimore Airport~n~~w~/da", 4000, 4);
	TogglePlayerControllable(playerid, false);
	return true;
}
CMD:kristykrab(playerid) return (playerid);
CMD:kk(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2521.2275,-1516.6002,24.0157,5.6909);
	TeleMSG(playerid, "kristy krab /kk");
	GameTextForPlayer(playerid, "~y~Krristy Krab~n~~w~/kk", 4000, 4);
	return true;
}
CMD:rhouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -2014.0759,409.3484,35.1719,90.9292);
	TeleMSG(playerid, "Reckon's House /rhouse");
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}

CMD:ohouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    //if(pAdmin[playerid] < 1)
	//	return Error(playerid, "Insufficient permissions!");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 1857.4556,-1708.5945,1720.0699,259.1566);
	TeleMSG(playerid, "Oblivion's House /ohouse");
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}


CMD:jj(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid,-1785.6797,1952.9940,886.9358,120.3076);
	}
	else
	{
	    SetPlayerPositionEx(playerid, -1783.7129,1948.0781,887.2795,120.32636);
	}
	TeleMSG(playerid, "Jizzy Jump /jj");
	GameTextForPlayer(playerid, "~y~Jizzy Jump~n~~w~/jj", 4000, 4);
	return true;
}


CMD:party(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPos(playerid, -178.8026, 1896.8542, 115.1442);
	TeleMSG(playerid, "Party /party");
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~y~Party~n~~w~/party", 4000, 4);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}
CMD:oisland(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 993.6609,-2164.8252,13.1636,58.8819);
	TeleMSG(playerid, "Oblivion's Island /oisland");
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}

CMD:risland(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -4624.2349,2207.1050,6.5413,34.8129);
	TeleMSG(playerid, "Reckon's Island /risland");
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}
CMD:disco(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, 913.8759,-1663.5565,10003.9453,91.2083);
	TeleMSG(playerid, "Disco /disco");
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~y~~h~Disco~n~~w~/disco", 4000, 3);
	SetTimerEx("unfreezePlayer", 3000, false, "i", playerid);
	return true;
}
CMD:nisland(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -3801.8572, 498.8828, 16.5183, 121.5722);
	TeleMSG(playerid, "Node's island /nisland");
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "* Welcome to Node's Palace!'");
	return true;
}
CMD:lsbr(playerid) return (playerid);
CMD:restaurant(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 370.7622,-1706.8873,17.0337,5.0643);
	TeleMSG(playerid, "Restaurant /restauran");
	GameTextForPlayer(playerid, "~y~Restaurant~n~~w~/Restaurant", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	return true;
}

CMD:sky(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 1544.1859,-1352.7539,329.4753,359.8319);
	TeleMSG(playerid, "SkyScraper /sky");
    GameTextForPlayer(playerid, "~y~SkyScraper~n~~w~/Sky", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	return true;
}
CMD:prison(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, 5370.9912,-51.7397,8.3547,276.3198);
	TeleMSG(playerid, "Prison /prison");
    GameTextForPlayer(playerid, "~y~Prison~n~~w~/prison", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	return true;
}

CMD:parkour(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2442.7419,-1442.4756,156.9503,269.8485);
	ResetPlayerWeapons(playerid);
    SavePlayerPosition(playerid);
    doingStunt[playerid] = 7;
	TeleMSG(playerid, "Parkour /parkour");
	GameTextForPlayer(playerid, "~y~parkour~n~~w~/parkour", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}
CMD:parkour2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2896.8303,-790.8215,10.8643,269.9266);
	GameTextForPlayer(playerid, "~y~parkour 2~n~~w~/parkour2", 4000, 4);
	ResetPlayerWeapons(playerid);
	SavePlayerPosition(playerid);
	TeleMSG(playerid, "Parkour 2 /parkour2");
	doingStunt[playerid] = 7;
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}
CMD:parkour3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2264.8516,1648.2788,107.8200,273.3638);
	GameTextForPlayer(playerid, "~y~parkour 3~n~~w~/parkour3", 4000, 4);
	ResetPlayerWeapons(playerid);
	SavePlayerPosition(playerid);
	TeleMSG(playerid, "Parkour 3 /parkour3");
	doingStunt[playerid] = 7;
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}
CMD:parkour4(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2330.4365,1056.0087,10.8203,91.9627);
	GameTextForPlayer(playerid, "~y~parkour 4~n~~w~/parkour4", 4000, 4);
	ResetPlayerWeapons(playerid);
	TeleMSG(playerid, "Parkour 4 /parkour4");
	doingStunt[playerid] = 7;
	SavePlayerPosition(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}
CMD:parkour5(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -2747.4697,-2089.6350,2.5285,148.8805);
	GameTextForPlayer(playerid, "~y~parkour 5~n~~w~/parkour5", 4000, 4);
	ResetPlayerWeapons(playerid);
	TeleMSG(playerid, "Parkour 5 /parkour5");
	doingStunt[playerid] = 7;
	SavePlayerPosition(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}
CMD:parkour6(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||   InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, 1442.9529,-1703.5264,913.3972,5.9809);
	GameTextForPlayer(playerid, "~y~parkour 6~n~~w~/parkour6", 4000, 4);
	ResetPlayerWeapons(playerid);
	TeleMSG(playerid, "Parkour 6 /parkour6");
	doingStunt[playerid] = 7;
	SavePlayerPosition(playerid);
	SetPlayerVirtualWorld(playerid, 12);
	SetPlayerHealth(playerid, 10000);
	return true;
}

CMD:loopjump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2682.3909, 385.2379, 924.8377, 269.6873);
	}
	else
	{
	    SetPlayerPosition(playerid, -2682.3909, 385.2379, 924.8377, 269.6873);
	}
	TeleMSG(playerid, "Loop Jump /loopjump");
	GameTextForPlayer(playerid, "~y~Loop Jump~n~~w~/loopjump", 4000, 4);
	return true;
}
CMD:rc(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2046.3824,-478.8456,1520.4766,359.9533);
	}
	else
	{
	    SetPlayerPosition(playerid, 2046.3824,-478.8456,1520.4766,359.9533);
	}
	TeleMSG(playerid, "RollerCoaster /rc");
	GameTextForPlayer(playerid, "~y~RollerCoaster~n~~w~/rc", 4000, 4);
	return true;
}
CMD:rc2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 33.1928,-894.7829,1761.7410,181.4726);
	}
	else
	{
	    SetPlayerPosition(playerid, 33.1928,-894.7829,1761.7410,181.4726);
	}
	TeleMSG(playerid, "RollerCoaster 2 /rc2");
	GameTextForPlayer(playerid, "~y~RollerCoaster 2~n~~w~/rc2", 4000, 4);
	return true;
}
CMD:funroad(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2675.3396,-4252.8721,12.4385,0.0095);
	}
	else
	{
	    SetPlayerPosition(playerid, 2674.2607,-4347.6655,12.6633,0.4421);
	}
	SetPlayerWeather(playerid, 17);
	SetPlayerTime(playerid, 0, 0);
	TeleMSG(playerid, "Fun Road /funroad");
	GameTextForPlayer(playerid, "~y~Funroad~n~~w~/funroad", 4000, 4);
	return true;
}

CMD:treehouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -804.6822, -2075.3076, 47.1331, 320.1583);
	TeleMSG(playerid, "Treehouse /treehouse");
	GameTextForPlayer(playerid, "~y~Treehouse~n~~w~/treehouse", 4000, 4);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	return true;
}
CMD:uclub(playerid)
{
    
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -446.4298, 1441.5510, 21.1906, 266.2164);
	TeleMSG(playerid, "Underground Club /uclub");
	GameTextForPlayer(playerid, "~y~Underground Club~n~~w~/club", 4000, 4);
	return true;
}
CMD:bank(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
    SetPlayerPosition(playerid, 1877.0278,-1742.3063,13.5474,359.0287);
	TeleMSG(playerid,"Bank /bank");
	GameTextForPlayer(playerid, "~y~Bank~n~~w~/bank", 4000, 4);
	return true;
}
CMD:lshouse(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
    SetPlayerPosition(playerid, 1134.4999,-2036.4935,69.0803,267.6465);
	TeleMSG(playerid, "Los Santos House /lshouse");
	GameTextForPlayer(playerid, "~y~Los Santos House~n~~w~/lshouse", 4000, 4);
	return true;
}

CMD:relog(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    isRelogging[playerid] = true;
    GetPlayerIp(playerid, relogPlayerIP[playerid], 17);
    format(str, sizeof(str), "banip %s", relogPlayerIP[playerid]);
    SendRconCommand(str);
    GameTextForPlayer(playerid, "~b~~h~Reconnecting~w~!", 9000, 3);
    SendClientMessage(playerid, COLOR_LB, ""RED_E"*** "LB2_E"Please re-join the server if you get a ban message upon reconnection!");
    return true;
}

//new added cmds
CMD:glen(playerid)
{

	
	if(RaceParticipant[playerid] == true || InDM[playerid] != 0  ||  InAMEvent[playerid] ||  doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1886.0433,-1156.2567,23.8963,258.5806);
	}
	else
	{
		SetPlayerPosition(playerid, 1892.9528,-1166.0863,24.0361,226.6521);
	}
	TeleMSG(playerid, "Glen /glen");
	GameTextForPlayer(playerid, "~y~Glen~n~~w~/glen", 4000, 4);
	return true;
}

CMD:adminhq(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1803.8483,-1286.0374,13.6410,129.5649);
	}
	else
	{
		SetPlayerPosition(playerid, 1786.9150,-1298.1913,27.6719,186.4748);
	}
	TeleMSG(playerid, "Admin headquarters /adminhq");
	GameTextForPlayer(playerid, "~y~Admin Hq~n~~w~/adminhq", 4000, 4);
	format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: "YELLOW_E" %s(%i) "WHITE_E" has teleported to Administator's Headquarters(/adminhq)", pName[playerid], playerid);
    SendClientMessageToAll(playerid,str);
	return true;
}
CMD:uffhq(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2834.8164,-1047.6646,23.1963,270.7873);
	}
	else
	{
		SetPlayerPosition(playerid, 2844.5085,-1046.3148,23.4364,270.4144);
	}
	TeleMSG(playerid, "UFF Headquarters /uffhq");
	GameTextForPlayer(playerid, "~y~UFF HQ~n~~w~/uffhq", 4000, 4);
	format(str,sizeof(str),""BLUE_E"UFF "YELLOW_E":: "YELLOW_E" %s(%i) "WHITE_E" has teleported to UFF Headquarters (/uffhq)", pName[playerid], playerid);
    SendClientMessageToAll(playerid,str);
	return true;
}
CMD:lspd(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1544.0552,-1675.9553,13.5577,89.0644);
	}
	else
	{
		SetPlayerPosition(playerid, 1536.1853,-1671.6768,13.1804,178.0546);
	}
	TeleMSG(playerid, "LSPD /lspd");
	GameTextForPlayer(playerid, "~y~Los Santos Police Department~n~~w~/lspd", 4000, 4);
	return true;
}
CMD:lvpd(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2284.9829,2413.7065,10.8303,268.8578);
	}
	else
	{
		SetPlayerPosition(playerid, 2291.2131,2426.4822,10.8203,181.4370);
	}
	TeleMSG(playerid, "LVPD /lvpd");
	GameTextForPlayer(playerid, "~y~Las Venturas Police Department~n~~w~/lvpd", 4000, 4);
	return true;
}
CMD:sfpd(playerid)
{
    
    if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -1620.9243,668.2408,6.9872,249.9972);
	}
	else
	{
		SetPlayerPosition(playerid, -1627.0214,679.1722,7.1901,224.3314);
	}
	TeleMSG(playerid, "SFPD /sfpd");
	GameTextForPlayer(playerid, "~y~San Fierro Police Department~n~~w~/sfpd", 4000, 4);
	return true;
}

CMD:sfs(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -1951.7888,137.8192,26.0763,269.4247);
	}
	else
	{
		SetPlayerPosition(playerid, -1964.3641,137.4357,27.6875,274.1721);
	}
	TeleMSG(playerid, "San Fierro Station /sfs");
	GameTextForPlayer(playerid, "~y~San Fierro Station~n~~w~/sfs", 4000, 4);
	return true;
}
CMD:lvs(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1433.8153,2606.3877,10.4753,90.1627);
	}
	else
	{
		SetPlayerPosition(playerid, 1433.4941,2620.2773,11.3926,182.7732);
	}
	TeleMSG(playerid, "Las Venturas Station /lvs");
	GameTextForPlayer(playerid, "~y~Las Venturas Station~n~~w~/lvs", 4000, 4);
	return true;
}
CMD:lvs2(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2859.7373,1290.5717,11.3906,272.3561);
	}
	else
	{
		SetPlayerPosition(playerid, 2859.7373,1290.5717,11.3906,272.3561);
	}
	TeleMSG(playerid, "Las Venturas Station /lvs");
	GameTextForPlayer(playerid, "~y~Las Venturas Station 2~n~~w~/lvs2", 4000, 4);
	return true;
}
CMD:lss(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1706.4504,-1943.0326,13.3756,269.1508);
	}
	else
	{
		SetPlayerPosition(playerid, 1707.9177,-1938.9253,13.5747,182.1388);
	}
	TeleMSG(playerid, "Los Santos Station /lss");
    GameTextForPlayer(playerid, "~y~Los Santos Station~n~~w~/lss", 4000, 4);
	return true;
}

CMD:bs(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1215.8195,-937.2810,42.4729,97.1121);
	}
	else
	{
		SetPlayerPosition(playerid, 1214.2946,-919.7642,42.9251,191.1199);
	}
	TeleMSG(playerid, "Burger shot /bs");
	GameTextForPlayer(playerid, "~y~Burger Shot~n~~w~/bs", 4000, 4);
	return true;
}
CMD:bs2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 810.2433,-1632.6443,13.1903,247.2855);
	}
	else
	{
		SetPlayerPosition(playerid, 816.3478,-1616.1917,13.8682,225.5900);
	}
	TeleMSG(playerid, "Burger shot 2 /bs2");
	GameTextForPlayer(playerid, "~y~Burger Shot 2~n~~w~/bs2", 4000, 4);
	return true;
}
CMD:bs3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2447.1101,2024.7626,10.6254,5.7175);
	}
	else
	{
		SetPlayerPosition(playerid, 2457.5583,2016.5981,11.0625,92.9986);
	}
	TeleMSG(playerid, "Burger shot 3 /bs3");
	GameTextForPlayer(playerid, "~y~Burger Shot 3~n~~w~/bs3", 4000, 4);
	return true;
}
CMD:bs4(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2314.1343,-143.7951,35.1254,178.6911);
	}
	else
	{
		SetPlayerPosition(playerid, -2320.7905,-152.5983,35.5547,269.2297);
	}
	TeleMSG(playerid, "Burger shot 4 /bs4");
	GameTextForPlayer(playerid, "~y~Burger Shot 4~n~~w~/bs4", 4000, 4);
	return true;
}
CMD:quarry(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 832.8372,851.7177,11.7713,109.1869);
	}
	else
	{
		SetPlayerPosition(playerid, 820.5833,844.2854,10.7252,109.5247);
	}
	TeleMSG(playerid, "Quarry /quarry");
	GameTextForPlayer(playerid, "~y~Quarry~n~~w~/quarry", 4000, 4);
	return true;
}
CMD:trans2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2394.0354,1030.1570,10.3948,272.9655);
	}
	else
	{
		SetPlayerPosition(playerid, 2394.0354,1030.1570,10.3948,272.9655);
	}
	TeleMSG(playerid, "Transfender 2 /trans2");
	GameTextForPlayer(playerid, "~y~Transfender 2~n~~w~/trans2", 4000, 4);
	return true;
}

CMD:ms(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 800.3611,-1327.6981,12.9573,268.0549);
	}
	else
	{
		SetPlayerPosition(playerid, 815.8210,-1344.5643,13.5297,6.9625);
	}
	TeleMSG(playerid, "Market Station /ms");
	GameTextForPlayer(playerid, "~y~Market Station~n~~w~/ms", 4000, 4);
	return true;
}
CMD:film(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 910.0486,-1221.2225,16.5445,271.1224);
	}
	else
	{
		SetPlayerPosition(playerid, 902.8856,-1222.3805,16.9766,273.4410);
	}
	TeleMSG(playerid, "FIlm /film");
	GameTextForPlayer(playerid, "~y~Film~n~~w~/film", 4000, 4);
	return true;
}
CMD:ap(playerid)
{

    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2108.6292,-2420.0344,30.6250,138.6982);
	}
	else
	{
		SetPlayerPosition(playerid, -2108.6292,-2420.0344,30.6250,138.6982);
	}
	TeleMSG(playerid, "Angel Pine /ap");
	GameTextForPlayer(playerid, "~y~Angel Pine~n~~w~/ap", 4000, 4);
	return true;
}
CMD:ee(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, -2668.5190,1594.9980,217.2739,93.7271);
	TeleMSG(playerid, "Easter Egg /ee");
	GameTextForPlayer(playerid, "~y~Easter Egg~n~~w~/ee", 4000, 4);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2500, false, "i", playerid);
	return true;
}
CMD:eej(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, -2662.7100,1594.9298,225.7578,269.1224);
	TeleMSG(playerid, "Easter Egg jump  /eej");
	GameTextForPlayer(playerid, "~y~Easter Egg~n~~w~/eej", 4000, 4);
	GivePlayerWeapon(playerid, 46, 1);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2500, false, "i", playerid);
	return true;
}
CMD:ghosttown(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -375.1327,2201.6697,42.0938,16.15552);
	}
	else
	{
		SetPlayerPosition(playerid, -375.1327,2201.6697,42.0938,16.1555);
	}
	TeleMSG(playerid, "Ghost Town /ghostotwn");
	GameTextForPlayer(playerid, "~y~Ghost town~n~~w~/ghosttown", 4000, 4);
	return true;
}
CMD:lsh(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2031.6591,-1415.4594,16.9922,136.5410);
	}
	else
	{
		SetPlayerPosition(playerid, 2031.6591,-1415.4594,16.9922,136.5410);
	}
	TeleMSG(playerid, "LS Hospital /lsh");
	GameTextForPlayer(playerid, "~y~LS Hospital~n~~w~/lsh", 4000, 4);
	return true;
}
CMD:lvh(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1606.7942,1817.6559,10.8203,356.1248);
	}
	else
	{
		SetPlayerPosition(playerid, 1606.7942,1817.6559,10.8203,356.1248);
	}
	TeleMSG(playerid, "LV Hospital /lvh");
	GameTextForPlayer(playerid, "~y~LV Hospital~n~~w~/lvh", 4000, 4);
	return true;
}
CMD:sfh(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2663.7432,593.5697,14.2507,181.0684);
	}
	else
	{
		SetPlayerPosition(playerid, -2663.7432,593.5697,14.2507,181.0684);
	}
	TeleMSG(playerid, "SF Hospital /sfh");
	GameTextForPlayer(playerid, "~y~SF Hospital~n~~w~/sfh", 4000, 4);
	return true;
}
CMD:jump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -676.8105,2304.9836,133.9152,87.9358);
	}
	else
	{
		SetPlayerPosition(playerid, -676.8105,2304.9836,133.9152,87.9358);
	}
	TeleMSG(playerid, "Jump /jump");
	GameTextForPlayer(playerid, "~y~Jump~n~~w~/jump", 4000, 4);
	return true;
}
CMD:bj(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 296.9438,-1609.1888,494.6685,88.4116);
	}
	else
	{
		SetPlayerPosition(playerid, 296.9438,-1609.1888,494.6685,88.4116);
	}
	TeleMSG(playerid, "Base Jump /bj");
	GameTextForPlayer(playerid, "~y~Base Jump~n~~w~/bj", 4000, 4);
	return true;
}
CMD:egypt(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 6646.2241,-1705.8269,16.4280,277.6668);
	}
	else
	{
		SetPlayerPosition(playerid, 6646.2241,-1705.8269,16.4280,277.6668);
	}
	TeleMSG(playerid, "Egypt /egypt");
	GameTextForPlayer(playerid, "~y~Egypt~n~~w~/egypt", 4000, 4);
	return true;
}
CMD:sftj(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPositionEx(playerid, -1753.5540,885.6595,295.8750,173.3623);
	TeleMSG(playerid, "SF Tunnel Jump /sftj");
	GameTextForPlayer(playerid, "~y~SF Tunnel Jump~n~~w~/sftj", 4000, 4);
	GivePlayerWeapon(playerid, 46, 1);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2500, false, "i", playerid);
	return true;
}
CMD:golfpark(playerid)
{
    
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2398.3789,-249.2502,39.9121,165.5354);
	}
	else
	{
		SetPlayerPosition(playerid, -2398.3789,-249.2502,39.9121,165.5354);
	}
	TeleMSG(playerid, "golfpark /golfpark");
	GameTextForPlayer(playerid, "~y~Golf Pick~n~~w~/golfpick", 4000, 4);
	return true;
}
CMD:motel(playerid)
{
    
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -28.1667,-2511.9443,36.6555,121.3100);
	}
	else
	{
		SetPlayerPosition(playerid, -28.1667,-2511.9443,36.6555,121.3100);
	}
	TeleMSG(playerid, "Motel /motel");
	GameTextForPlayer(playerid, "~y~Motel~n~~w~/motel1", 4000, 4);
	return true;
}
CMD:farm(playerid)
{
    
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -1204.1365,-1024.6387,128.6906,279.5448);
	}
	else
	{
		SetPlayerPosition(playerid, -1204.1365,-1024.6387,128.6906,279.5448);
	}
	TeleMSG(playerid, "Farm /farm");
	GameTextForPlayer(playerid, "~y~Farm~n~~w~/farm", 4000, 4);
	return true;
}
CMD:fb(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -50.2161,-423.5979,2.2003,150.2305);
	}
	else
	{
		SetPlayerPosition(playerid, -50.2161,-423.5979,2.2003,150.2305);
	}
	TeleMSG(playerid, "Fleisch Berg /fb");
	GameTextForPlayer(playerid, "~y~Fiesch Berg~n~~w~/fb", 4000, 4);
	return true;
}
CMD:forest(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -548.3801,-191.2100,78.4063,271.3918);
	}
	else
	{
		SetPlayerPosition(playerid, -548.3801,-191.2100,78.4063,271.3918);
	}
	TeleMSG(playerid, "Forest /forest");
	GameTextForPlayer(playerid, "~y~forest~n~~w~/forest", 4000, 4);
	return true;
}
CMD:a51(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 218.2246,1911.6061,17.6406,175.3338);
	}
	else
	{
		SetPlayerPosition(playerid, 218.2246,1911.6061,17.6406,175.3338);
	}
	TeleMSG(playerid, "Area 51 /a51");
	GameTextForPlayer(playerid, "~y~Area 51~n~~w~/a51", 4000, 4);
	return true;
}
CMD:villa(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2011.7075,2432.8311,34.8780,259.5114);
	}
	else
	{
		SetPlayerPosition(playerid, -2011.7075,2432.8311,34.8780,259.5114);
	}
	TeleMSG(playerid, "Villa /villa");
	GameTextForPlayer(playerid, "~y~VILLA~n~~w~/VILLA", 4000, 4);
	return true;
}
CMD:motel2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -837.7318,2751.3228,45.6619,181.7906);
	}
	else
	{
		SetPlayerPosition(playerid, -837.7318,2751.3228,45.6619,181.7906);
	}
	TeleMSG(playerid, "Motel 2 /motel2");
	GameTextForPlayer(playerid, "~y~Motel 2~n~~w~/motel2", 4000, 4);
	return true;
}
CMD:junkyard(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -1878.5913,-1686.3582,21.7538,18.0926);
	}
	else
	{
		SetPlayerPosition(playerid, -1878.5913,-1686.3582,21.7538,18.0926);
	}
	TeleMSG(playerid, "JunkYard /junkyard");
	GameTextForPlayer(playerid, "~y~Junkyard~n~~w~/junkyard", 4000, 4);
	return true;
}
CMD:trans3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1036.8824,-1038.8718,31.6917,269.4404);
	}
	else
	{
		SetPlayerPosition(playerid, 1036.8824,-1038.8718,31.6917,269.4404);
	}
	TeleMSG(playerid, "Trans 3 /trans3");
	GameTextForPlayer(playerid, "~y~Transfender 3~n~~w~/trans3", 4000, 4);
	return true;
}
////finsih of new cmds
CMD:hayclimb(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -1788.4408, 575.2750, 35.1641, 145.6224);
	TeleMSG(playerid, "Hay Climb /hayclimb");
	GameTextForPlayer(playerid, "~y~~h~HayClimb~n~~w~/HayClimb", 4000, 3);
	ResetPlayerWeapons(playerid);
	doingStunt[playerid] = 6;
	SetPlayerVirtualWorld(playerid, 12);
	return true;
}
CMD:hayclimb2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 2019.9073,1842.4590,27.4609,30.8980);
	TeleMSG(playerid, "Hay Climb 2 /hayclimb2");
	GameTextForPlayer(playerid, "~y~~h~HayClimb 2~n~~w~/HayClimb2", 4000, 3);
	ResetPlayerWeapons(playerid);
	doingStunt[playerid] = 6;
	SetPlayerVirtualWorld(playerid, 12);
	return true;
}
CMD:stadium(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -1410.72 , 1591.16, 1052.53 , 56.0, 14);
	}
	else
	{
	    SetPlayerPosition(playerid, -1410.72 , 1591.16, 1052.53 , 56.0, 14);
	}

	TeleMSG(playerid, "KickStart Stadium /stadium");
	GameTextForPlayer(playerid, "~y~Kickstart Stadium~n~~w~/stadium", 4000, 4);
	return true;
}
CMD:quad(playerid) return cmd_quadparkour(playerid);
CMD:quadparkour(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SavePlayerPosition(playerid);
	SpawnPlayerVehicle(playerid, 471, false);
	SetPlayerVehiclePosition(playerid, -2904.806, 880.312, 5.354, 56.0);
	TeleMSG(playerid, "Quadparkour /quad");
	GameTextForPlayer(playerid, "~y~Quad Parkour~n~~w~/quad", 4000, 4);
	SetPlayerVirtualWorld(playerid, 12);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 9;
	return true;
}

CMD:hover(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 539, false);
	SetPlayerVehiclePosition(playerid, 1264.5585,224.2818,814.3280,184.8569);
	TeleMSG(playerid, "Hover /hover");
	GameTextForPlayer(playerid, "~y~Hover~n~~w~/hover", 4000, 4);
	return true;
}

CMD:spiral(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    SpawnPlayerVehicle(playerid, 411, false);
	}
	SetPlayerVehiclePosition(playerid, 24.8275, 278.3997, 1199.8948, 233.0000);
	TeleMSG(playerid, "Spiral /spiral");
	GameTextForPlayer(playerid, "~y~Spiral~n~~w~/spiral", 4000, 4);
	return true;
}

CMD:andro(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -2184.5669, 1171.0330, 1700.4305, 0.0000);
	TeleMSG(playerid, "Andro /andro");
	GameTextForPlayer(playerid, "~y~Andro~n~~w~/Andro", 4000, 4);
	GivePlayerWeapon(playerid, 46, 1);
	return true;
}


CMD:drift(playerid) return cmd_drifts(playerid);
CMD:drifts(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST,
		""BLUE_E"UFF: "WHITE_E"Drifts", ""WHITE_E"LV Drift\t\t\t"WHITE_E"[/lvdrift]\n"WHITE_E"San Fierro Drift\t\t"WHITE_E"[/sfdrift]\n"WHITE_E"Drift Island\t\t"WHITE_E"[/driftisland)\n"WHITE_E"Drift City\t\t"WHITE_E"[/dc]\n"WHITE_E"Back", "Select", "Back");
	return true;
}

CMD:sfdrift(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		SetPlayerVehiclePosition(playerid, -2410.9963, -600.7848, 132.3277, 127.1357);
	}
	else
	{
		SetPlayerPosition(playerid, -2410.9963, -600.7848, 132.3277, 127.1357);
	}
	TeleMSG(playerid, "SFDrift /sfdrift");
	GameTextForPlayer(playerid, "~y~Sf Drift~n~~w~/sfdrift", 4000, 4);
	return true;
}

CMD:lvdrift(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		SetPlayerVehiclePosition(playerid, -344.308, 1528.474, 75.159, 256.0);
	}
	else
	{
		SetPlayerPosition(playerid, -344.308, 1528.474, 75.159, 256.0);
	}
	TeleMSG(playerid, "LVDrift /lvdrift");
	GameTextForPlayer(playerid, "~y~LV Drift~n~~w~/LV Drift", 4000, 4);
	return true;
}

CMD:lsdive(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, 1544.5403, -1348.7823, 329.4739, 166.8684);
	TeleMSG(playerid, "LSDive /lsdive");
	GameTextForPlayer(playerid, "~y~LS Dive~n~~w~/Lsdive", 4000, 4);
	GivePlayerWeapon(playerid, 46, 1);
	return true;
}
CMD:tunnel(playerid) return cmd_tunneljump(playerid);
CMD:tunneljump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SpawnPlayerVehicle(playerid, 411, false);
	}

	SetPlayerVehiclePosition(playerid, -494.527, 1600.167, 844.297, 271.0);
	TeleMSG(playerid, "Tunnel Jump /tunneljump");
	GameTextForPlayer(playerid, "~y~Tunnel Jump~n~~w~/tunneljump", 4000, 4);

	SetPlayerPosition(playerid, -494.527, 1600.167, 846.297, 271.0);
	SetPlayerCameraPos(playerid, -509.1927, 1594.2455, 846.9556);
	SetPlayerCameraLookAt(playerid, -494.527, 1600.167, 846.297);
	
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePutInVehicle", 2000, false, "idffff", playerid, GetPlayerVehicleID(playerid), -494.527, 1600.167, 844.297, 271.0);
	return true;
}

CMD:skatepark(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	switch(random(2))
	{
	    case 0: SetPlayerPosition(playerid, 1907.542, -1354.829, 13.103, 182.0);
	    case 1: SetPlayerPosition(playerid, 1917.501, -1404.901, 13.179, 182.0);
	}

	TeleMSG(playerid, "the SkatePark /skatepark");
	GameTextForPlayer(playerid, "~y~Skate Park~n~~w~/skatepark", 4000, 4);

	return true;
}
CMD:lva(playerid) return cmd_lvair(playerid);
CMD:lvair(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
  		SetPlayerVehiclePosition(playerid, 1591.1958,1474.8613,10.8672,89.7325);
	}
	else
	{
		SetPlayerPosition(playerid, 1584.9973,1450.9233,13.3351,92.5993);
	}
  	TeleMSG(playerid, "Las Venturas Airport /lva");
  	GameTextForPlayer(playerid, "~y~LV Airport~n~~w~/LVA", 4000, 4);
	return true;
}
CMD:underwater(playerid) return cmd_under(playerid);
CMD:under(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -653.8839,2192.7200,-33.3598,144.9901);
	}
	else
	{
		SetPlayerPosition(playerid, -653.8839,2192.7200,-33.3598,144.9901);
	}

	TeleMSG(playerid, "UnderWater /under");
    GameTextForPlayer(playerid, "~y~Underwater~n~~w~/under", 4000, 4);

	return true;
}

CMD:aa(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 364.1760,2542.6189,17.7123,181.5505);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 383.3226,2542.7385,19.0481,180.3489);
	}
	TeleMSG(playerid, "Abandoned Airport /aa");
	GameTextForPlayer(playerid, "~y~Abondoned Airport~n~~w~/aa", 4000, 4);
	return true;
}

CMD:docks(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 2752.0359,-2742.5938,2.4976,2.7566);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 2751.4578,-2797.1592,7.2700,359.1279);
	}
	TeleMSG(playerid, "Docks /docks");
	GameTextForPlayer(playerid, "~y~Docks~n~~w~/docks", 4000, 4);

	return true;
}
CMD:maze(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 2321.0117,610.3709,10.8203,180.1451);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 2321.0117,610.3709,10.8203,180.1451);
	}
	TeleMSG(playerid, "Maze /maze");
	GameTextForPlayer(playerid, "~y~Maze~n~~w~/Maze", 4000, 4);


	return true;
}
CMD:maze4(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 835.9614,-2050.6680,12.8672,184.5793);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 835.9614,-2050.6680,12.8672,184.57931);
	}
	TeleMSG(playerid, "Maze 4 /maze4");
	GameTextForPlayer(playerid, "~y~Maze 4~n~~w~/maze4", 4000, 4);


	return true;
}
CMD:mazejump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, -262.8652,3441.0527,487.2331,236.6551);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, -262.8652,3441.0527,487.2331,236.6551);
	}
	TeleMSG(playerid, "Maze Jump /mazejump");
	GameTextForPlayer(playerid, "~y~Maze Jump 2~n~~w~/mazejump2", 4000, 4);

	return true;
}
CMD:waterjump2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 341.3993,2000.9769,571.1588,179.6861);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 341.3993,2000.9769,571.1588,179.6861);
	}
	TeleMSG(playerid, "Water Jump 2 /waterjump2");
	GameTextForPlayer(playerid, "~y~waterjump 2~n~~w~/waterjump 2", 4000, 4);
	return true;
}

CMD:maze2(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 990.5150,2677.6472,10.8544,233.0635);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 990.5150,2677.6472,10.8544,233.0635);
	}
	TeleMSG(playerid, "Maze 2 /maze2");
	GameTextForPlayer(playerid, "~y~maze 2~n~~w~/maze 2", 4000, 4);
	return true;
}
CMD:maze3(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, -1372.0712,912.7447,1.4559,190.5593);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, -1372.0712,912.7447,1.4559,190.5593);
	}
	TeleMSG(playerid, "Maze 3 /maze3");
	GameTextForPlayer(playerid, "~y~Maze 3~n~~w~/maze3", 4000, 4);
	return true;
}
CMD:aaup(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
 		SetPlayerVehiclePosition(playerid, 79.6392, 2220.2239, 213.5882, 75.187);
   	}
   	else
   	{
   		SetPlayerPosition(playerid, 79.6392, 2220.2239, 213.5882, 75.187);
	}
	SetTimerEx("unfreezePutInVehicle", 5000, false, "idffff", playerid, GetPlayerVehicleID(playerid), 79.6392, 2220.2239, 213.5882, 75.187);
	TogglePlayerControllable(playerid, false);
	TeleMSG(playerid, "/aaup");
	SetPlayerCameraPos(playerid, 40.0158, 2244.0298, 219.4720);
	SetPlayerCameraLookAt(playerid, 79.6392, 2220.2239, 213.5882);
	return true;
}
CMD:lsa(playerid) return cmd_lsair(playerid);
CMD:lsair(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    //SetPlayerVehiclePosition(playerid, 2115.5562,-2619.2427,13.3188,47.2698);
	    //SetPlayerVehiclePosition(playerid, 2033.3281,-2645.0396,16.0246,358.4203);
	    SetPlayerVehiclePosition(playerid, 1908.1592,-2308.7405,13.1085,265.9427);
	}
	else
	{
		//SetPlayerPosition(playerid, 2044.5983,-2633.0313,13.5903,359.4063);
		SetPlayerPosition(playerid, 1874.8475,-2287.9719,15.6110,272.2728);
	}
	TeleMSG(playerid, "Los Santos Airport /lsa");
	GameTextForPlayer(playerid, "~y~LS Airport~n~~w~/LSA", 4000, 4);

	return true;
}
CMD:creek(playerid) return cmd_palominocreek(playerid);
CMD:palominocreek(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2408.2373,92.0688,26.4736,91.4350);
	}
	else
	{
		SetPlayerPosition(playerid, 2408.2373,92.0688,26.4736,91.4350);
	}
	TeleMSG(playerid, "Palomino Creek /creek");
	GameTextForPlayer(playerid, "~y~Palomino Creek~n~~w~/creek", 4000, 4);

	return true;
}
CMD:concert(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    //SetPlayerVehiclePosition(playerid, 2115.5562,-2619.2427,13.3188,47.2698);
	    //SetPlayerVehiclePosition(playerid, 2033.3281,-2645.0396,16.0246,358.4203);
	    SetPlayerVehiclePosition(playerid, 1478.3044,-1734.0792,13.3828,2.8708);
	}
	else
	{
		//SetPlayerPosition(playerid, 2044.5983,-2633.0313,13.5903,359.4063);
		SetPlayerPosition(playerid, 1478.3044,-1734.0792,13.3828,2.8708);
	}
	TeleMSG(playerid, "The Concert /concert");
	GameTextForPlayer(playerid, "~y~The Concert~n~~w~/Concert", 4000, 4);

	return true;
}

CMD:mc(playerid) return cmd_chilliad(playerid);
CMD:chilliad(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -2334.9836,-1624.1429,483.9283,180.5323);
	}
	else
	{
	    SetPlayerPosition(playerid, -2311.0715,-1594.7805,486.5644,177.2409);
	}

	TeleMSG(playerid, "Mount Chilliad /mc");
	GameTextForPlayer(playerid, "~y~Mount Chilliad~n~~w~/mc", 4000, 4);
	return true;
}


CMD:tr(playerid)
{
    
	if(RaceParticipant[playerid] == true || InDM[playerid] != 0  ||  InAMEvent[playerid] ||  doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	//SpawnPlayerVehicle(playerid, 573, false);
	//SetPlayerPosition(playerid, -11.701, 1637.869, 300.097, 178.0);
	TeleMSG(playerid, "Trampoline /tr");
	GameTextForPlayer(playerid, "~y~Trampoline~n~~w~/tr", 4000, 4);
	return true;
}
CMD:hj(playerid) return cmd_hugejump(playerid);
CMD:hugejump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 899.6528, 2502.3611, 694.5513, 91.7515);
	}
	else
	{
	    SetPlayerPosition(playerid, 863.2654, 2490.4468, 694.3790, 296.0000);
	}
	TeleMSG(playerid, "Huge Jump /hugejump");
	GameTextForPlayer(playerid, "~y~Huge Jump~n~~w~/hugejump", 4000, 4);
	return true;
}




CMD:lsb(playerid) return cmd_beach(playerid);
CMD:beach(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 481.5558,-1844.5867,3.9891,181.4508);
	}
	else
	{
		SetPlayerPosition(playerid, 426.1482,-1843.4329,6.1496,182.3893);
	}
	TeleMSG(playerid, "Beach /lsb");
	GameTextForPlayer(playerid, "~y~Beach~n~~w~/lsb", 4000, 4);
	return true;
}
CMD:grove(playerid) return cmd_ls(playerid);
CMD:ls(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2503.4971,-1661.2905,13.1608,90.00);
	}
	else
	{
		SetPlayerPosition(playerid, 2511.1853,-1670.5634,13.2147,93.9984);
	}
	TeleMSG(playerid, "Los Santos /ls");
	GameTextForPlayer(playerid, "~y~Los Santos~n~~w~/ls", 4000, 4);
	return true;
}

CMD:hippy(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -773.136, 2422.691, 157.192, 280.0);
	TeleMSG(playerid, "Hippy /hippy");
	GameTextForPlayer(playerid, "~y~hIPPY~n~~w~/hiPPY", 4000, 4);
	return true;
}



CMD:truckstop(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SetPlayerPosition(playerid, -552.5577, 2593.7136, 53.9348, 272.0414);
	TeleMSG(playerid, "Trucker Stop /truckstop");
	GameTextForPlayer(playerid, "~y~truck Stop~n~~w~/truckstop", 4000, 4);
	return true;
}

CMD:sf(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2027.8456,174.6791,28.6335,269.5137);
	}
	else
	{
		SetPlayerPosition(playerid, -2027.3507,145.1084,28.8359,273.7815);
	}
	TeleMSG(playerid, "San Fierro /sf");
	GameTextForPlayer(playerid, "~y~San Fierro~n~~w~/sf", 4000, 4);
	return true;
}

CMD:bordel(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2632.7644,1363.1956,6.9107,268.4741);
	}
	else
	{
		SetPlayerPositionEx(playerid, -2682.6252,1342.3229,19.5723,274.5035);
	}
	TeleMSG(playerid, "Bordel /bordel");
	GameTextForPlayer(playerid, "~y~Bordel~n~~w~/Bordel", 4000, 4);
	return true;
}
CMD:dam(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -789.7336,2194.9150,43.3971,182.0993);
	}
	else
	{
		SetPlayerPosition(playerid, -792.8638,2222.7407,45.1242,183.6659);
	}
	TeleMSG(playerid, "Sherman Dam /dam");
	GameTextForPlayer(playerid, "~y~Sherman Dam~n~~w~/Dam", 4000, 4);
	return true;
}

CMD:slide(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 1572.9949, -1238.7869, 277.7445, 358.2480);
	}
	else
	{
		SetPlayerPosition(playerid, 1572.9949, -1238.7869, 277.7445, 358.2480);
	}
	TeleMSG(playerid, "the Awesome Slide /slide");
	GameTextForPlayer(playerid, "~y~slide~n~~w~/slide", 4000, 4);
	return true;
}

CMD:vipisland(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(pAdmin[playerid] == 0)
		if(pPremium[playerid] < 1)
 			return Error(playerid, "You must be a premium member to use this command, check /premium for more info.");

	SetPlayerPosition(playerid, -2805.3130,-69.4258,7.0313,89.6650);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	TeleMSG(playerid, "VIP Island /vipisland");
	GameTextForPlayer(playerid, "~y~VIP island~n~~w~/vipisland", 4000, 4);
	return true;
}
CMD:viproom(playerid) return cmd_vipclub(playerid);
CMD:vipclub(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(pAdmin[playerid] == 0)
		if(pPremium[playerid] < 1)
 			return Error(playerid, "You must be a premium member to use this command, check /premium for more info.");

	SetPlayerPosition(playerid, 5750.2388,-715.6213,12.1059,262.1510);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("unfreezePlayer", 2000, false, "i", playerid);
	TeleMSG(playerid, "VIP Club /vipclub");
	GameTextForPlayer(playerid, "~y~vipclub~n~~w~/vipclub", 4000, 4);
	return true;
}


CMD:wallride(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsBikeModel(GetVehicleModel(GetPlayerVehicleID(playerid))))
	{
	    SetPlayerVehiclePosition(playerid, -817.0252, 1811.9648, 7.0000, 280.4746);
	}
	else
	{
	    SetPlayerPosition(playerid, -817.0252, 1811.9648, 7.0000, 280.4746);
	}

	TeleMSG(playerid, "/wallride");
	GameTextForPlayer(playerid, "~y~wallride~n~~w~/wallride", 4000, 4);
	return true;
}

CMD:bigjump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -668.480, 2304.642, 135.582, 176.0);
	}
	else
	{
	    SetPlayerPosition(playerid, -668.480, 2304.642, 135.582, 176.0);
	}
	TeleMSG(playerid, "/bigjump");
	GameTextForPlayer(playerid, "~y~Big Jump~n~~w~/BigJump", 4000, 4);
	return true;
}

CMD:bikejump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 522, false);
	SetPlayerVehiclePosition(playerid, 570.6624,2233.2024,940.3131,90.9763);
	TeleMSG(playerid, "Bike Jump /bikejump");
	GameTextForPlayer(playerid, "~y~Bike Jumnp~n~~w~/BIKEJUMP", 4000, 4);
	return true;
}

CMD:glassjump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
   	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2121.4280, 2560.6331, 514.7283, random(360));
	}
	else
	{
	    SetPlayerPosition(playerid, 2121.4280, 2560.6331, 514.7283, random(360));
	}
	TeleMSG(playerid, "Glass Jump /glassjump");
	GameTextForPlayer(playerid, "~y~glass Jump~n~~w~/glassjump", 4000, 4);
	return true;
}

CMD:waterjump(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2349.177, -76.180, 366.698, 329.0);
	}
	else
	{
	    SetPlayerPosition(playerid, 2349.177, -76.180, 366.698, 329.0);
	}
	TeleMSG(playerid, "Water Jump /waterjump");
	GameTextForPlayer(playerid, "~y~Water Jump~n~~w~/waterjump", 4000, 4);
	return true;
}

CMD:coaster(playerid) return cmd_skc(playerid);
CMD:skycoaster(playerid) return cmd_skc(playerid);
CMD:skc(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2491.7136, -1697.5417, 714.4252, 89.3090);
	}
	else
 	{
		SetPlayerPosition(playerid, 2491.7136, -1697.5417, 714.4252, 89.3090);
	}
	TeleMSG(playerid, "Sky Coaster /skc");
	GameTextForPlayer(playerid, "~y~skcoaster~n~~w~/skc", 4000, 4);
	return true;
}



CMD:drop(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
   	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 309.7934, 5461.4546, 3426.6863, 180.0);
	}
	else
	{
	    SetPlayerPosition(playerid, 309.7934, 5461.4546, 3426.6863, 180.0);
	}
	TeleMSG(playerid, "the Amazing Drop /drop");
	GameTextForPlayer(playerid, "~y~Drop~n~~w~/drop", 4000, 4);
	return true;
}

CMD:gd(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePositionEx(playerid, 551.1603,860.3625,7113.0366,268.0655);
	}
	else
	{
	    SetPlayerPosition(playerid, 551.1603,860.3625,7113.0366,268.0655);
	}
	TeleMSG(playerid, "GoingDown Jump /gd");
	GameTextForPlayer(playerid, "~y~Going Down~n~~w~/gd", 4000, 4);
	return true;
}

CMD:lf(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
   	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 4200.100, 1887.775, 2836.750, 180.0);
	}
	else
	{
	    SetPlayerPosition(playerid, 4200.100, 1887.775, 2836.750, 180.0);
	}
	TeleMSG(playerid, "Loop Fun /lf");
	GameTextForPlayer(playerid, "~y~Loop Fun~n~~w~/lf", 4000, 4);
	return true;
}

CMD:tugfun(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	TeleMSG(playerid, "/tugfun");
	GameTextForPlayer(playerid, "~y~TugFun~n~~w~/tugfun", 4000, 4);
	SetPlayerPosition(playerid, 2774.316, -1309.180, 4316.250, 0.0);
	return true;
}


CMD:bowl(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -434.4713,-2630.8640,153.7345,171.7475);
	}
	else
	{
	    SetPlayerPosition(playerid, -434.4713,-2630.8640,153.7345,171.7475);
	}
	TeleMSG(playerid, "Server Bowl /bowl");
    GameTextForPlayer(playerid, "~y~Bowl~n~~w~/bowl", 4000, 4);
	return true;
}

CMD:bmx(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 481, false);
	SetPlayerVehiclePosition(playerid, 3362.586, -1939.724, 43.027, 37.0);
	TeleMSG(playerid, "BMX Park /bmx");
	GameTextForPlayer(playerid, "~y~BMX Parkour~n~~w~/bmx", 4000, 4);
	SetPlayerVirtualWorld(playerid, 12);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 5;
	return true;
}
CMD:bmx2(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 481, false);
	SetPlayerVehiclePosition(playerid, -3163.9106,1371.8523,10.5007,2.2442);
	GameTextForPlayer(playerid, "~y~BMX Parkour 2~n~~w~/bmx2", 4000, 4);
	TeleMSG(playerid, "BMX Park 2 /bmx2");
	SetPlayerVirtualWorld(playerid, 12);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	doingStunt[playerid] = 5;
	return true;
}
CMD:bmx3(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 481, false);
	SetPlayerVehiclePositionEx(playerid, 946.8004,-1053.1334,37.3226,359.9603);
	TeleMSG(playerid, "BMX Park 3 /bmx3");
	SetPlayerVirtualWorld(playerid, 12);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 12);
	GameTextForPlayer(playerid, "~y~BMX Parkour 3~n~~w~/bmx3", 4000, 4);
	doingStunt[playerid] = 5;
	return true;
}
CMD:trans(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	TeleMSG(playerid, "TransFender /trans");
	GameTextForPlayer(playerid, "~y~Transfender~n~~w~/Trans", 4000, 4);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -1935.7021, 232.8606, 33.7328, 3.5124);
	}
	else
	{
	    SetPlayerPosition(playerid, -1935.7021, 232.8606, 33.7328, 3.5124);
	}
	return true;
}

CMD:arch(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;

	TeleMSG(playerid, "/arch");
	GameTextForPlayer(playerid, "~y~Arch~n~~w~/arch", 4000, 4);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -2708.9497, 217.5596, 3.7477, 89.849);
	}
	else
	{
	    SetPlayerPosition(playerid, -2708.9497, 217.5596, 3.7477, 89.849);
	}
	return true;
}

CMD:ps(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;


	TeleMSG(playerid, "Pay'n'Spray /PS");
	GameTextForPlayer(playerid, "~y~pay'n'spray~n~~w~/ps", 4000, 4);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -1905.2317, 268.9448, 40.8727, 359.2122);
	}
	else
	{
	    SetPlayerPosition(playerid, -1905.2317, 268.9448, 40.8727, 359.2122);
	}
	return true;
}

CMD:loco(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, 2654.5273,-2005.3416,13.1597,100.0000);
	}
	else
	{
	    SetPlayerPosition(playerid, 2645.9221,-2013.1575,13.5547,330.3261);
	}
	TeleMSG(playerid, "/loco");
	GameTextForPlayer(playerid, "~y~loco~n~~w~/loco", 4000, 4);
	return true;
}
CMD:vs(playerid) return cmd_vshop(playerid);
CMD:pvshop(playerid) return cmd_vshop(playerid);
CMD:vshop(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	switch (random(2))
	{
	 case 0: SetPlayerPosition(playerid, -1954.2668,276.2099,35.4688,20.6767);
	 case 1: SetPlayerPosition(playerid, -1626.0443,1202.7482,7.0391,86.3876);
	}
	TeleMSG(playerid, "Vehicle Shop /vshop");
	GameTextForPlayer(playerid, "~y~Vehicle Shop~n~~w~/vs", 4000, 4);
	return true;
}
CMD:wangs(playerid) return cmd_wang(playerid);
CMD:wang(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -1981.8992,244.6364,34.9428,2.2293);
	}
	else switch(random(2))
	{
	    case 0: SetPlayerPosition(playerid, -1972.6334,277.9128,35.1719,89.8026);
	    case 1: SetPlayerPosition(playerid, -1636.9144,1201.6851,7.2052,69.7807);
	}
	TeleMSG(playerid, "Wang Cars /wang");
	GameTextForPlayer(playerid, "~y~Wang Cars~n~~w~/wang", 4000, 4);
	return true;
}
CMD:ottos(playerid) return cmd_otto(playerid);
CMD:otto(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, -1623.2306,1207.2336,6.6639,88.4897);
	}
	else switch(random(3))
	{
	    case 0: SetPlayerPosition(playerid, -1636.9144,1201.6851,7.2052,69.7807);
	    case 1: SetPlayerPosition(playerid, -1663.4058,1204.1277,13.6719,5.2335);
	    case 2: SetPlayerPosition(playerid, -1679.8956,1211.0206,21.1563,285.9828);
	}
	TeleMSG(playerid, "Otto's /otto");
	GameTextForPlayer(playerid, "~y~otto's~n~~w~/otto", 4000, 4);
	return true;
}

CMD:qjump(playerid)
{

    
	if(RaceParticipant[playerid] == true || InDM[playerid] != 0  ||  InAMEvent[playerid] ||  doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 868.278,245.432,587.522,0.0);
	}
	else
	{
	    SetPlayerPosition(playerid, 868.278,245.432,587.522,0.0);
	}
	TeleMSG(playerid, "Quarry Jump /qjump");
	GameTextForPlayer(playerid, "~y~Quarry Jump~n~~w~/qjump", 4000, 4);
	return true;
}

CMD:racemap(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, -2904.3860, -415.5923, 4.6274, 0.3237);
	}
	else
	{
	    SetPlayerPosition(playerid, -2904.3860, -415.5923, 4.6274, 0.3237);
	}
	TeleMSG(playerid, "Race Map /racemap");
	GameTextForPlayer(playerid, "~y~Racemap~n~~w~/racemap", 4000, 4);
	return true;
}


CMD:lv(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(playerid, 2119.7778,1918.2504,10.4695,179.0306);
	}
	else
	{
		SetPlayerPosition(playerid, 2025.7063,1916.8048,12.3382,267.3026);
	}
	TeleMSG(playerid, "Las Venturas /lv");
	GameTextForPlayer(playerid, "~y~Las Venturas~n~~w~/lv", 4000, 4);

	return true;
}


CMD:loop(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 490.5120,-30.7806,680.7545,90.4747);
	}
	else
	{
	    SetPlayerPosition(playerid, 490.5120,-30.7806,680.7545,90.4747);
	}
	TeleMSG(playerid, "Huge Loop /loop");
	GameTextForPlayer(playerid, "~y~Huge Jump~n~~w~/loop", 4000, 4);
	return true;
}

CMD:pipejump(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 937.2642,-1387.2911,654.5662,267.6459);
	}
	else
	{
	    SetPlayerPosition(playerid, 937.2642,-1387.2911,654.5662,267.6459);
	}
	TeleMSG(playerid, "Pipe Jump /pipejump");
	GameTextForPlayer(playerid, "~y~Pipe Jump~n~~w~/pipejump", 4000, 4);
	return true;
}
CMD:halfpipe(playerid) return cmd_hp(playerid);
CMD:hp(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetPlayerVehiclePosition(playerid, 2848.1548,-1977.4320,10.6646,271.6942);
	}
	else
	{
	    SpawnPlayerVehicle(playerid, 411, false);
	    SetPlayerVehiclePosition(playerid, 2848.1548,-1977.4320,10.6646,271.6942);
	}
	TeleMSG(playerid, "HalfPipe /hp");
	GameTextForPlayer(playerid, "~y~halfPipe~n~~w~/hp", 4000, 4);
	return true;
}
CMD:dunefun(playerid) return cmd_carsumo(playerid);
CMD:carsumo(playerid)
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	SpawnPlayerVehicle(playerid, 573, false);
	SetPlayerVehiclePosition(playerid, 3638.867, 1179.233, 10.214, 0.0);
	TeleMSG(playerid, "/carsumo");
	GameTextForPlayer(playerid, "~y~Carsumo~n~~w~/carsumo", 4000, 4);
	return true;
}

// DMS.

CMD:deathmatch(playerid) return cmd_dm(playerid);
CMD:dm(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 99)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	switch(random(4))
	{
		case 0: SetPlayerPos(playerid, 1415.3765, -43.8384, 1000.7816);
		case 1: SetPlayerPos(playerid, 1361.1677, -44.7685, 1000.7816);
		case 2: SetPlayerPos(playerid, 1360.8433, 2.3635, 1000.7816);
		case 3: SetPlayerPos(playerid, 1413.4000, 4.1110, 1000.7816);
	}
	GivePlayerWeapon(playerid, 24, 99999);
	SetPlayerInterior(playerid, 1);
	InDM[playerid] = 99;
	TextDrawHideForPlayer(playerid, TeleTD);
 	dm1++;
 	GodModeLabel(playerid, false);
 	TeleMSGDM(playerid, "Deathmatch (/dm)");
 	UpdateMinigameBox(playerid, 1, "Deathmatcth [/dm]");
	return true;
}
CMD:dm3(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 103)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	switch(random(7))
	{
		case 0: SetPlayerPos(playerid, 356.5909,173.9361,1008.3875);
		case 1: SetPlayerPos(playerid, 358.1115,206.9171,1008.3828);
		case 2: SetPlayerPos(playerid, 387.0937,173.6971,1008.3828);
		case 3: SetPlayerPos(playerid, 367.0653,160.5571,1008.3828);
		case 4: SetPlayerPos(playerid, 345.8421,193.7736,1014.1875);
		case 5: SetPlayerPos(playerid, 327.9168,152.7613,1014.1875);
		case 6: SetPlayerPos(playerid, 346.4809,161.6494,1025.7964);
     }
	GivePlayerWeapon(playerid, 31, 99999);
	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 16, 99999);
	GivePlayerWeapon(playerid, 25, 99999);
	GivePlayerWeapon(playerid, 26, 99999);
	SetPlayerInterior(playerid, 3);
	InDM[playerid] = 103;
	GodModeLabel(playerid, false);
	TextDrawHideForPlayer(playerid, TeleTD);
 	TeleMSGDM(playerid, "Deathmatch 3 (/dm3)");
 	UpdateMinigameBox(playerid, 1, "Deathmatcth 3 [/dm3]");
	return true;
}
CMD:gg(playerid) return cmd_gungame(playerid);
CMD:gungame(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	CheckDM(playerid);
	if(InDM[playerid] == 63)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	SavePlayerPosition(playerid);
	GGLevel[playerid] = 0;
    InGGMap[playerid] = 1;
   	JoinToGG(playerid);
    InDM[playerid] = 63;
    GunGame++;
    UpdateDMText();
    TextDrawHideForPlayer(playerid, TeleTD);
    TextDrawShowForPlayer(playerid, GGBOX);
    PlayerTextDrawShow(playerid, GGTD[playerid]);
    TextDrawShowForPlayer(playerid, GGTD2);
    TeleMSGDM(playerid, "GunGame [/gg]");
 	UpdateMinigameBox(playerid, 1, "GunGame [/gg]");
	return 1;
}
GGMap(Mapid)
{
	new Map[13];
	switch(Mapid)
	{
	    case 1: Map = "Death Square";
	    case 2: Map = "Skull Rules";
		default: Map = "Error";
	}
	return Map;
}
JoinToGG(playerid)
{
	switch(InGGMap[playerid])
	{
	    case 1:
	    {
			switch(random(6))
		    {
		        case 0: SetPlayerPositionEx(playerid, 3389.9924,3139.9988,7.7807,87.471);
		        case 1: SetPlayerPositionEx(playerid, 3346.2983,3134.9080,7.7807,177.085);
				case 2: SetPlayerPositionEx(playerid, 3319.9434,3123.6299,13.9994,270.7736);
				case 3: SetPlayerPositionEx(playerid, 3323.2244,3083.5317,7.7807,269.5206);
				case 4: SetPlayerPositionEx(playerid, 3321.1750,3050.6650,13.9994,251.636);
				case 5: SetPlayerPositionEx(playerid, 3355.4968,3037.9863,7.7807,0.6544);
			}
		}
		case 2:
		{
		    switch(random(5))
		    {
		        case 0: SetPlayerPositionEx(playerid, -1791.0879,-3566.2766,5.6916,272.0032);
		        case 1: SetPlayerPositionEx(playerid, -1762.8555,-3522.3726,5.6916,89.6649);
		        case 2: SetPlayerPositionEx(playerid, -1765.3228,-3469.5479,5.5916,93.7149);
		        case 3: SetPlayerPositionEx(playerid, -1796.0240,-3493.8047,5.5916,271.0633);
			}
		}
	}
    ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 4, 1);
	GivePlayerWeapon(playerid, ggWeapons[GGLevel[playerid]], 99999);
	SetPlayerHealth(playerid, 100.0);
	InDM[playerid] = 63;
}

GGRank(Rankid)
{
	new Rank[13];
	switch(Rankid)
	{
	    case 0: Rank = "Apprentice";
	    case 1: Rank = "Noob";
	    case 2: Rank = "Professional";
	    case 3: Rank = "Killer";
	    case 4: Rank = "Pro-Killer";
	    case 5: Rank = "Boss";
	    case 6: Rank = "God";
	    case 7: Rank = "Suicide";
	    case 8: Rank = "Cape";
	    case 9: Rank = "Lieutenant";
	    case 10: Rank = "Roller";
	    case 11: Rank = "Machine";
	    case 12: Rank = "Skull";
	    case 13: Rank = "Lunatic";
	    case 14: Rank = "Ultra Killer";
		default: Rank = "error";
	}
	return Rank;
}
CMD:dm2(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 101)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	switch(random(3))
	{
		case 0: SetPlayerPosition(playerid, 250.0246,195.5269,1008.1719,274.2503);
		case 1: SetPlayerPosition(playerid, 255.1550,175.3655,1003.0234,274.2503);
		case 2: SetPlayerPosition(playerid, 190.7430,158.1582,1003.0234,270.4668);
	}
	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 25, 99999);
	GivePlayerWeapon(playerid, 34, 99999);
	SetPlayerInterior(playerid, 3);
	InDM[playerid] = 101;
 	dm2++;
 	GodModeLabel(playerid, false);
    TextDrawHideForPlayer(playerid, TeleTD);
 	TeleMSGDM(playerid, "Deathmatch 2 (/dm2)");
 	UpdateMinigameBox(playerid, 1, "Deathmatcth 2 [/dm2]");
	return true;
}



CMD:dm4(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(!CanPlayerTeleport(playerid)) return true;
	if(InDM[playerid] == 102)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);

	switch(random(2))
	{
		case 0: SetPlayerPosition(playerid, 1827.9011,-1283.8387,109.3594,122.2704);
		case 1: SetPlayerPosition(playerid, 1785.1157,-1310.7410,109.3594,291.7854);
	}
	GivePlayerWeapon(playerid, 24, 99999);
	GivePlayerWeapon(playerid, 25, 99999);
	GivePlayerWeapon(playerid, 31, 99999);
	SetPlayerVirtualWorld(playerid, 18);
	InDM[playerid] = 908;
	GodModeLabel(playerid, false);
	TextDrawHideForPlayer(playerid, TeleTD);
 	TeleMSGDM(playerid, "Deathmatch 4 (/dm4)");
 	UpdateMinigameBox(playerid, 1, "Deathmatcth 4 [/dm4]");
	return true;
}
CMD:rocket(playerid)
{

	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 4)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	if(InDM[playerid] == 7)
	{
	    Error(playerid, "Please leave the minigun DM using "YELLOW_E"/leave "RED_E"before joining the Rocket DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
    GodModeLabel(playerid, false);
	InDM[playerid] = 4;
	switch(random(6))
	{
		case 0: SetPlayerPosition(playerid, -1039.3151,-700.0047,64.5321,8.7347);
	    case 1: SetPlayerPosition(playerid, -1110.8236,-656.6070,59.6141,258.1738);
	    case 2: SetPlayerPosition(playerid, -1098.3698,-733.9731,59.4140,301.0774);
	    case 3: SetPlayerPosition(playerid, -1077.9307,-613.7368,50.5078,187.67310);
	    case 4: SetPlayerPosition(playerid, -1039.3147,-700.0067,64.5321,8.7347);
	    case 5: SetPlayerPosition(playerid, -1056.9666,-739.1432,59.3372,40.7064);
	}

	GivePlayerWeapon(playerid, 35, 999999);
	Rocket++;
	SetPlayerVirtualWorld(playerid, 59);
	TextDrawHideForPlayer(playerid, TeleTD);
	TeleMSGDM(playerid, "Rocket DM (/rocket)");
	UpdateMinigameBox(playerid, 1, "Rocket DM [/Rocket]");
	return true;
}
CMD:sdm(playerid) return cmd_sawndm(playerid);
CMD:sawndm(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 102)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	if(InDM[playerid] == 7)
	{
	    Error(playerid, "Please leave the minigun DM using "YELLOW_E"/leave "RED_E"before joining the SAWN DM!");
	    return true;
	}
	CheckDM(playerid);
	GodModeLabel(playerid, false);
	SavePlayerPosition(playerid);

	ResetPlayerWeapons(playerid);
	InDM[playerid] = 102;
	switch(random(5))
	{
	    case 0: SetPlayerPosition(playerid, 1381.5352,2182.9851,11.0234,136.8470);
	    case 1: SetPlayerPosition(playerid, 1316.4130,2182.5486,11.0234,227.2073);
     	case 2: SetPlayerPosition(playerid, 1314.9568,2114.6616,11.0156,314.8883);
     	case 3: SetPlayerPosition(playerid, 1383.3922,2114.1865,11.0156,40.4900);
     	case 4: SetPlayerPosition(playerid, 1345.8572,2157.4746,11.0156,224.4315);
	}


	GivePlayerWeapon(playerid, 26, 9999999);
	//SetPlayerWorldBounds(playerid, 1443.253, 1080.102, 2869.626, 2699.431);
	SawnDM++;
	TextDrawHideForPlayer(playerid, TeleTD);
	TeleMSGDM(playerid, "Sawn DM (/sawndm)");
	UpdateMinigameBox(playerid, 1, "Sawn Dm [/SawnDM]");
	return true;
}
CMD:mini(playerid) return cmd_minigun(playerid);
CMD:minigun(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");

	if(InDM[playerid] == 7)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	if(InDM[playerid] == 4)
	{
	    Error(playerid, "Please leave the Rocket DM using "GREY_E"/leave "GREY2_E"before joining the minigun DM!");
	    return true;
	}
	CheckDM(playerid);
	GodModeLabel(playerid, false);
	SavePlayerPosition(playerid);

	ResetPlayerWeapons(playerid);
	InDM[playerid] = 7;
	switch(random(6))
	{
		case 0: SetPlayerPosition(playerid, 817.2140,1718.3855,21.2277,170.7724);
	    case 1: SetPlayerPosition(playerid, 798.2598,1726.5173,5.7693,176.1226);
	    case 2: SetPlayerPosition(playerid, 773.2479,1713.7971,5.2813,206.2031);
	    case 3: SetPlayerPosition(playerid, 762.0003,1632.0261,5.4628,297.3372);
	    case 4: SetPlayerPosition(playerid, 777.0068,1622.3917,12.3045,19.7446);
	    case 5: SetPlayerPosition(playerid, 799.2064,1595.1538,21.1677,6.5612);
	}

//	SetPlayerWorldBounds(playerid, 2794.921875,2490.234375,2888.671875,2589.84375);
	GivePlayerWeapon(playerid, 38, 999999);
	Mini++;
	TextDrawHideForPlayer(playerid, TeleTD);
	TeleMSGDM(playerid, "Minigun DM (/mini)");
	SetPlayerVirtualWorld(playerid, 54);
	UpdateMinigameBox(playerid, 1, "Minigun [/Mini]");
	return true;
}

CMD:war(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 5)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
	SavePlayerPosition(playerid);
	GodModeLabel(playerid, false);
	ResetPlayerWeapons(playerid);

	switch(random(6))
	{
	    case 0: SetPlayerPosition(playerid, 353.952, 2030.409, 23.538, 0.0);
	    case 1: SetPlayerPosition(playerid, 188.534, 2079.781, 23.576, 282.0);
	    case 2: SetPlayerPosition(playerid, 211.569, 1811.228, 21.495, 282.0);
	    case 3: SetPlayerPosition(playerid, 211.569, 1811.228, 21.495, 282.0);
	    case 4: SetPlayerPosition(playerid, 121.277, 1934.025, 22.421, 282.0);
	    case 5: SetPlayerPosition(playerid, 213.260, 1888.249, 14.772, 7.0);
	}
	InDM[playerid] = 5;
	GivePlayerWeapon(playerid, 3, 1);
	GivePlayerWeapon(playerid, 24, 9999999);
	GivePlayerWeapon(playerid, 25, 9999999);
	GivePlayerWeapon(playerid, 28, 9999999);
	GivePlayerWeapon(playerid, 30, 9999999);
	GivePlayerWeapon(playerid, 33, 9999999);
	GivePlayerWeapon(playerid, 39, 2);
	GivePlayerWeapon(playerid, 17, 10);
	GivePlayerWeapon(playerid, 10, 1);
	GivePlayerWeapon(playerid, 35, 5);
	SetPlayerWorldBounds(playerid, 432.0814, -81.74512, 2125.373, 1646.58);
	WarDM++;
	TextDrawHideForPlayer(playerid, TeleTD);
	TeleMSGDM(playerid, "WAR (/war)");
	UpdateMinigameBox(playerid, 1, "WAR DM [/War]");
	return true;
}
CMD:sniper(playerid) return cmd_sniperdm(playerid);
CMD:sniperdm(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 17)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}

	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	GodModeLabel(playerid, false);
	RemoveItems(playerid);
	switch(random(9))
	{
	    case 0: SetPlayerPositionEx(playerid, -1526.2155,-444.1110,269.4490,5.7962);
	    case 1: SetPlayerPositionEx(playerid, -1607.9478,-392.2644,270.6663,74.1264);
	    case 2: SetPlayerPositionEx(playerid, -1496.8945,-396.1531,269.4578,15.2601);
	    case 3: SetPlayerPositionEx(playerid, -1545.0111,-405.7469,269.4578,270.0850);
	    case 4: SetPlayerPositionEx(playerid, -1644.1897,-394.3685,276.9054,269.7141);
	    case 5: SetPlayerPositionEx(playerid, -1614.1342,-379.5268,273.4054,3.3222);
	    case 6: SetPlayerPositionEx(playerid, -1616.9463,-397.5317,273.4254,272.8892);
	    case 7: SetPlayerPositionEx(playerid, -1503.6364,-340.5645,271.4578,205.9406);
	    case 8: SetPlayerPositionEx(playerid, -1550.1138,-307.6401,276.0767,52.7860);
	}
	InDM[playerid] = 17;
	GivePlayerWeapon(playerid, 34, 9999999);
	canUseKey[playerid] = false;
	SetPlayerHealth(playerid, 100);
	IsInHouse{playerid} = 0;
	doingStunt[playerid] = 0;
	SetPlayerVirtualWorld(playerid, 18);
	TextDrawHideForPlayer(playerid, TeleTD);
	GodModeLabel(playerid, false);
	SetPlayerVirtualWorld(playerid, 57);
 	UpdateMinigameBox(playerid, 1, "Sniper Dm [/Sniper]");
	return true;
}
CMD:odm(playerid) return cmd_oneshot(playerid);
CMD:onehit(playerid) return cmd_oneshot(playerid);
CMD:oneshot(playerid)
{
	if(!CanPlayerTeleport(playerid)) return true;
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InDM[playerid] == 16)
	{
	    Error(playerid, "You already are in this DM!");
	    return true;
	}
	CheckDM(playerid);
 	SavePlayerPosition(playerid);
	ResetPlayerWeapons(playerid);
	GodModeLabel(playerid, false);
	TextDrawHideForPlayer(playerid, TeleTD);
	switch(random(6))
	{
	    case 0: SetPlayerPosition(playerid, -1294.8566,2492.8191,87.0213,337.2820);
	    case 1: SetPlayerPosition(playerid, -1257.8141,2528.0540,91.0575,153.6593);
     	case 2: SetPlayerPosition(playerid, -1290.0471,2555.1465,85.7115,196.4285);
     	case 3: SetPlayerPosition(playerid, -1314.5081,2564.6431,86.5863,221.0024);
     	case 4: SetPlayerPosition(playerid, -1333.3208,2500.5798,87.0469,291.6472);
     	case 5: SetPlayerPosition(playerid, -1307.2798,2530.7917,87.7202,288.8469);
	}

	canUseKey[playerid] = false;
	GivePlayerWeapon(playerid, 23, 9999999);
	SetPlayerHealth(playerid, 2.0);
	SetPlayerArmour(playerid, 0.0);

	InDM[playerid] = 16;
	IsInHouse{playerid} = 0;
	doingStunt[playerid] = 0;
	SetPlayerVirtualWorld(playerid, 21);
	GodModeLabel(playerid, false);
	UpdateDMText();
	TextDrawHideForPlayer(playerid, TeleTD);
	UpdateMinigameBox(playerid, 1, "One Shot Dm [/oDM]");
	if(GetPVarInt(playerid, "HideObjects"))
	{
		DeletePVar(playerid, "HideObjects");
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
 	SetTimerEx("ResetHealthODM", 1000, false, "i", playerid);
	return true;
}

CMD:acmds(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "You are not authorized to use this command!");

	new line3[2200];
	strcat(line3, ""BLUE_E"Junior Admin Commands:"WHITE_E"\n\
	/aweaps /ahouse  /check  /locate  /goto /gethere /check /slap /peject /jetpack /pinfo\n\
	/pweaps /kick /warn /getip /jail /omute /ojail\n\
	/asay /(un)freeze /(un)mute /announce /hydra /cnrAnn /pAnn /force\n\
	/disarm /getin  /timeout /togspec /stream");
	strcat(line3, "\n/spec /spectators /caps /explode /forcerules /forcerespawn\n\
    /hide /clearchat  /reports /togglegc(/tgc) /(un)blockcmds  /akill /apm");

	strcat(line3, "\n\n"BLUE_E"General Administrator Commands:"WHITE_E"\n\
 	/dragplayer /setskin /giveweapon /telep  /ban /fakemsg /fakeme /endduel\n\
    /throw /cuff /uncuff /healall  /respawnvehicles (/rv)  /givecar\n\
    /reward  /(un)banip /respawnpvs /syncfooter");

	strcat(line3, "\n\n"BLUE_E"Lead Admin Commands:"WHITE_E"\n\
	/seepms  /gotoxyz  /rconsay /minvite /day /dawn /night /eventkick\n\
	/rangefreeze(/rf) /rangeunfreeze(/ruf) /event /evehicle(/eveh) /eventann(/eann) /eventreward /rangedisarm(/rd)\n\
	/giverangeweapon(/grw)  /silent(kick/ban) /fakeban /fakepm  /aminigun /rpg\n\
    /offlineban(/oban) /sethealth /aka /akaip /forceduel");

	strcat(line3, ""BLUE_E"\n\nHead Admin Commands:"WHITE_E"\n\
	/vehiclex /resetchatcolor /giveallweapon /disarmall /giveallgb /giveallcash /giveallscore\n\
	/agod /settime /setweather /kickall /sellhouse /startgb /changehname /changeprice /changeowner /givejetpack /startreaction /settempname\n\
	/clearrewardtimer /resetach\n\
    /togspec /gotomb /gotogb /createhouse /unban /tempban /oban");


		
	strcat(line3, "\n\n"BLUE_E"Executive Administrator Commands:"WHITE_E"\n\
	/makeadmin /makevip /gmx /settempname /connectbots /saveallstats /setgangscore /createvehicle\n\
    /muteall /setpassword /setname /setscore /setcash /movehouse /setbcash /setgbs /racepanel /createrace\n\
	/setdeaths /sethours /takemoney /makemapper /setkills /settempname\n");
	strcat(line3, ""BLUE_E"Server "WHITE_E"- Type /check to perform an anti-cheat check on the server.\n\
	"PINK_E"Click on any player on the tab menu to open up the admin panel.");
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF: "WHITE_E"Staff Commands", line3, "OK","");
	return true;
}
//====================================================[ADMIN COMMANDS]==============================================================================

CMD:timeout(playerid, params[])
{
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/timeout <ID>");
	    SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Will disconnect selected player from the server.");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

		
	format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Administrator %s(%i) has disconnected %s(%i) from the game.", pName[playerid], playerid, pName[otherid], otherid);
	SendAdminMessage(COLOR_RED, str);
	SetPVarInt(otherid, "pBugged", 1);
    new IP[24];
    GetPlayerIp(otherid, IP,sizeof(IP));
    format(IP,sizeof(IP), "banip %s", IP);
    SendRconCommand(IP);
	return true;
}
CMD:timeoutme(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	format(str, sizeof(str), "* ADMIN-MSG: "GREY_E"Administrator %s(%i) has disconnected himself from the game.", pName[playerid], playerid);
	SendAdminMessage(COLOR_RED, str);
	SetPVarInt(playerid, "pBugged", 1);
    new IP[24];
    GetPlayerIp(playerid, IP,sizeof(IP));
    format(IP,sizeof(IP), "banip %s", IP);
    SendRconCommand(IP);
	return true;
}

CMD:resetchatcolor(playerid, params[])
{

    if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/resetechatcolor <ID>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(pChatColor[otherid] == 0) return Error(playerid, "Player doesn't have a custom chat color set!");

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has removed %s(%i)'s custom chat color.", pName[playerid], playerid, pName[otherid], otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i)'s chat color has been removed by an Administrator.", pName[otherid], otherid);
	SendClientMessageToAll(COLOR_RED, str);

	pChatColor[otherid] = 0;
	format(query, sizeof(query), "UPDATE players SET chat_color=0 WHERE reg_id=%d", pRegID[otherid]);
	MySQL_updateQuery(query);
	format(str, sizeof(str), ""UFF" "RED_E"%s(%i) has removed your custom chat color.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_RED, str);
	return true;
}
CMD:resetach(playerid, params[])
{
    if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");

	new achID, achName[80];
	if(sscanf(params, "ui", otherid, achID))
	{
	    Usage(playerid, "/resetach <ID> <Achivement ID>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

	switch(achID)
	{
	    case 1:
	    {
	        pAch1[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a1=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Grim Reaper";
	    }
	    case 2:
	    {
	        pAch2[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a2=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Mass Killer";
	    }
		case 3:
	    {
	        pAch3[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a3=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "You're Rich";
	    }
		case 4:
	    {
	        pAch4[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a4=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Official Player";
	    }
		case 5:
	    {
	        pAch5[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a5=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "No Lifer";
	    }
		case 6:
	    {
	        pAch6[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a6=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Elite Racer";
	    }
		case 7:
	    {
	        pAch7[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a7=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Score Whore";
	    }
    	case 8:
	    {
	        pAch8[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a8=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Event Champion";
	    }
    	case 9:
	    {
	        pAch9[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a9=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Too Fast";
	    }
    	case 10:
	    {
	        pAch10[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a10=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Filthy Rich";
	    }
    	case 11:
	    {
	        pAch11[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a11=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Skydiver";
	    }
    	case 12:
	    {
	        pAch12[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a12=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Rest in Peace";
	    }
    	case 13:
	    {
	        pAch13[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a13=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "GC Monster";
  		}
   		case 14:
	    {
	        pAch14[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a14=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Silent Killer";
	    }
    	case 15:
	    {
	        pAch15[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a15=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Hitman";
	    }
    	case 16:
	    {
	        pAch16[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a16=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Racer";
	    }
    	case 17:
	    {
	        pAch17[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a17=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Elite Cop";
	    }
    	case 18:
	    {
	        pAch18[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a18=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Duelist";
	    }
    	case 19:
	    {
	        pAch19[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a19=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Biker";
	    }
    	case 20:
	    {
	        pAch20[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a20=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Fallout King";
	    }
	    case 21:
	    {
	        pAch21[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a21=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Human Calculator";
	    }
	    case 22:
	    {
	        pAch22[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a22=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Derby Pro";
	    }
	    case 23:
	    {
	        pAch23[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a23=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Cop";
	    }
	    case 24:
	    {
	        pAch24[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a24=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Thief";
	    }
	    case 25:
	    {
	        pAch25[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a25=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pickpocketer";
	    }
	    case 26:
	    {
	        pAch26[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a26=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Ruthless";
	    }
	    case 27:
	    {
	        pAch27[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a27=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "GoldBlock Hunter";
	    }
	    case 28:
	    {
	        pAch28[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a28=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Shooter Master";
	    }
	    case 29:
	    {
	        pAch29[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a29=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "BusinessMan";
	    }
	    case 30:
	    {
	        pAch30[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a30=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Settled";
	    }
	    case 31:
	    {
	        pAch31[otherid] = 0;
			format(query, sizeof(query), "UPDATE achievements SET a31=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "One Show Two Kills";
	    }
	}

	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has reset your "GREY_E"'%s' "RED_E"achievement!", pName[playerid], playerid, achName);
	SendClientMessage(otherid, COLOR_RED, str);
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"You have removed %s(%i)'s "GREY_E"'%s' "RED_E"achievement.", pName[otherid], otherid, achName);
	SendClientMessage(playerid, COLOR_RED, str);
	return true;
}/*
CMD:giveach(playerid, params[])
{
    if(pAdmin[playerid] < 5)
		return Error(playerid, "Insufficient permissions!");

	new achID, achName[80];
	if(sscanf(params, "ui", otherid, achID))
	{
	    Usage(playerid, "/giveeach <ID> <Achivement ID>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");


	switch(achID)
	{
	    case 1:
	    {
	        pAch1[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a1=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Grim Reaper";
	    }
	    case 2:
	    {
	        pAch2[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a2=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Mass Killer";
	    }
		case 3:
	    {
	        pAch3[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a3=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "You're Rich";
	    }
		case 4:
	    {
	        pAch4[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a4=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Official Player";
	    }
		case 5:
	    {
	        pAch5[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a5=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "No Lifer";
	    }
		case 6:
	    {
	        pAch6[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a6=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Elite Racer";
	    }
		case 7:
	    {
	        pAch7[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a7=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Score Whore";
	    }
    	case 8:
	    {
	        pAch8[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a8=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Event Champion";
	    }
    	case 9:
	    {
	        pAch9[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a9=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Too Fast";
	    }
    	case 10:
	    {
	        pAch10[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a10=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Filthy Rich";
	    }
    	case 11:
	    {
	        pAch11[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a11=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Skydiver";
	    }
    	case 12:
	    {
	        pAch12[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a12=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Rest in Peace";
	    }
    	case 13:
	    {
	        pAch13[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a13=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "GC Monster";
  		}
   		case 14:
	    {
	        pAch14[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a14=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Silent Killer";
	    }
    	case 15:
	    {
	        pAch15[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a15=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Hitman";
	    }
    	case 16:
	    {
	        pAch16[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a16=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Racer";
	    }
    	case 17:
	    {
	        pAch17[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a17=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Elite Cop";
	    }
    	case 18:
	    {
	        pAch18[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a18=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Duelist";
	    }
    	case 19:
	    {
	        pAch19[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a19=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Biker";
	    }
    	case 20:
	    {
	        pAch20[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a20=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Fallout King";
	    }
	    case 21:
	    {
	        pAch21[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a21=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Human Calculator";
	    }
	    case 22:
	    {
	        pAch22[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a22=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Derby Pro";
	    }
	    case 23:
	    {
	        pAch23[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a23=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Cop";
	    }
	    case 24:
	    {
	        pAch24[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a24=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pro Thief";
	    }
	    case 25:
	    {
	        pAch25[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a25=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Pickpocketer";
	    }
	    case 26:
	    {
	        pAch26[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a26=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Ruthless";
	    }
	    case 27:
	    {
	        pAch27[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a27=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "GoldBlock Hunter";
	    }
	    case 28:
	    {
	        pAch28[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a28=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Shooter Master";
	    }
	    case 29:
	    {
	        pAch29[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a29=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "BusinessMan";
	    }
	    case 30:
	    {
	        pAch30[otherid] = 1;
			format(query, sizeof(query), "UPDATE achievements SET a30=1 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			achName = "Settled";
	    }
	}
	
    format(str, sizeof(str), "Congrats you have unlocked %s!~n~~w~Type /ach to view your achievements.", achName);
	GivePlayerAchievement(otherid, achName, str);
	format(str, sizeof(str), ""IVORY_E"** %s(%i) has given you the '%s' achievement!", pName[playerid], playerid, achName);
	SendClientMessage(otherid, COLOR_GREEN, str);
	format(str, sizeof(str), ""IVORY_E"** You have give %s(%i) the '%s' achievement.", pName[otherid], otherid, achName);
	SendClientMessage(playerid, COLOR_GREEN, str);
	format(tmp, sizeof(tmp), "~y~~h~Achievement received");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return true;
}*/
CMD:healall(playerid)
{
	if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
	{
		if(InDM[ii] == 0 && InEvent[ii] == 0 && doingStunt[ii] == 0)
		{
			SetPlayerHealth(ii, 98.0);
		}
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "GREEN_E"%s(%i) has healed all players outside DM zones!", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"All players outside DM zones have been healed by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);
	format(tmp, sizeof(tmp), "~y~~h~Health Refilled");
    GameTextForPlayer(playerid, tmp, 3500, 4);
	return 1;
}
CMD:ha(playerid, params[])
{
  	if(pAdmin[playerid] < 4)
     		return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/ha <text>");
	    return true;
	}

    // Decide about multi-line msgs
	new i = -1;
	if(strlen(params) > 70)
	{
		i = strfind(params, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, params[i]);

		// delete the rest from msg
		params[i] = EOS;
	}
	format(str, sizeof(str), ""LRED_E"[H-Admin CHAT] "WHITEP_E"%s(%i): {00FFB4}%s", pName[playerid], playerid, params);
	foreach(Player, ii) if(pAdmin[ii] > 3) SendClientMessage(ii, COLOR_LB, str);
	if(i != -1) foreach(Player, ii) if(pAdmin[ii] > 3) SendClientMessage(ii, COLOR_LB, line);
	return true;
}

CMD:airbreak(playerid)
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");
	/*if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't use the airbreak feature in a DM.");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't use the airbreak feature in this area.");
	    return true;
	}
	if(InEvent[playerid] != 0) return Error(playerid, "You use the airbreak feature in an event.");
	if(pAirbreak[playerid])
	{
		TogglePlayerControllable(playerid, true);
		pAirbreak[playerid] = false;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"You have "RED_E"disabled "GREY2_E"the airbreak effect.");
	}
	else
	{
		TogglePlayerControllable(playerid, false);
		pAirbreak[playerid] = true;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"You have "GREEN_E"enabled "GREY2_E"the airbreak effect!");
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"Use UP, DOWN, LEFT and RIGHT keys to fly.");
	}*/
	Error(playerid, "This feature is currently disabled.");
	return true;
}

CMD:invincible(playerid)
{
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't use this feature in a DM.");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't use this feature in this area.");
	    return true;
	}
	if(InEvent[playerid] != 0) return Error(playerid, "You can't use this feature in an event.");
	if(pInvincible[playerid])
	{
		DisableRemoteVehicleCollisions(playerid, 0);
		pInvincible[playerid] = false;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"You have "RED_E"disabled "GREY2_E"the invincible effect.");
	}
	else
	{
		DisableRemoteVehicleCollisions(playerid, 1);
		pInvincible[playerid] = true;
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"You have "GREEN_E"enabled "GREY2_E"the invincible effect!");
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY2_E"You can now go through cars without them ramming you!");
	}
	return true;
}

CMD:banip(playerid, params[])
{
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/banip <IP Address>");
		return true;
	}
	if(strfind(params, "*", true) != -1 && pAdmin[playerid] != 5)
	{
		Error(playerid, "You are not authorized to ban ranges.");
  		return true;
  	}

	format(str, sizeof(str), "4Server:3 %s(%d) has IP banned address %s.", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "** "GREY2_E"%s(%d) IP banned address %s.", pName[playerid], playerid, params);
	SendClientMessageToAll(COLOR_YELLOW, str);

	format(str, sizeof(str), "banip %s", params);
	SendRconCommand(str);
	return 1;
}

/*CMD:getisp(playerid, params[])
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/getisp <ID>");
 		return true;
	}
	GetPlayerISP(otherid, tmp, sizeof(tmp));
	format(str, sizeof(str), ""YELLOW_E"** "GREY2_E"%s(%d)'s ISP: "GREY_E"%s.", pName[otherid], otherid, tmp);
	SendClientMessage(playerid, COLOR_GREY, str);
	return 1;
}*/
CMD:unbanip(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/unbanip <IP Address>");
		return true;
	}

	format(str, sizeof(str), "4Server:3 %s(%d) has IP un-banned address %s", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "unbanip %s", params);
	SendRconCommand(str);
	format(str, sizeof(str), "reloadbans");
	SendRconCommand(str);
	format(str, sizeof(str), "** "RED_E"You have unbanned IP address %s.", params);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	return 1;
}
CMD:hide(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
	if(pHidden[playerid] == 0)
	{
		pHidden[playerid] = 1;
		format(str, sizeof(str), ""RED_E"* ADMIN-MSG: "GREY_E"%s(%i) has hidden himself from the admin list.", pName[playerid], playerid);
		SendAdminMessage(COLOR_GREY, str);
		SendClientMessage(playerid, COLOR_YELLOW, "** "RED_E"You have hidden yourself from the admin list!");
		SendClientMessage(playerid, COLOR_YELLOW, "** "RED_E"Type /hide again to display yourself on the list.");
		DestroyDynamic3DTextLabel(admin3D[playerid]);
		//admin3D[playerid] = Text3D:-1;
	}
	else
	{
		pHidden[playerid] = 0;
		SendClientMessage(playerid, COLOR_YELLOW, "** "RED_E"You will now be displayed on the admin list!");
		//format(str, sizeof(str), ""BLUE_E"UFF "YELLOW_E":: {00FFB4} Administrator %s(%i) is now onduty!", pName[playerid], playerid);
    	//SendClientMessageToAll(COLOR_YELLOW, str);
    	new tmp3[25];
		switch(pAdmin[playerid])
	 	{
			case 1: tmp3 = "Junior Administrator";
	  		case 2: tmp3 = "General Administrator";
	    	case 3: tmp3 = "Lead Administrator";
	    	case 4: tmp3 = "Head Administrator";
	     	case 5: tmp3 = "Executive Administrator";
		}
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s %s "RED_E"is now onduty", tmp3,  pName[playerid]);
		SendClientMessageToAll(COLOR_WHITEP, str);
	}
	if(pLogged[playerid] == true)
	{
	    format(query, sizeof(query), "UPDATE players SET hidden=%d WHERE reg_id=%d", pHidden[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
  	}
	return true;
}


CMD:saveallstats(playerid)
{
	if(pAdmin[playerid] != 5)
		return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
 	{
		SavePlayerStats(ii);
	}
	format(tmp, sizeof(tmp), ""UFF" %s(%d) has manually saved your stats.", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_YELLOW, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL,  "4* 3All server player stats have been saved!");
	GameTextForAll("~b~~h~Server Restarting~w~!", 8000, 3);
	for(new l; l < 4; l++) SendClientMessageToAll(COLOR_GREY2, "\n");
	SendClientMessageToAll(COLOR_LB, ""RED_E"*** "LB2_E"Server Is Restarting, reconnect if you get disconnected!");
	SendClientMessageToAll(COLOR_LB, ""RED_E"*** "LB2_E"Please re-join the server if you get a ban message upon connection!");
	return true;
}
CMD:check(playerid)
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
    new count = 0;
    SendClientMessage(playerid, COLOR_WHITE, ""ORANGE_E"Possible Hacker ID's");
    foreach(Player, ii)
	{
		if(pAdmin[ii] == 0 && pPremium[ii] == 0 && InDM[ii] == 0 && InEvent[ii] == 0 && pSpawned[ii] == 1 && GetPVarInt(ii, "PurchasedWeapons") == 0)
		{
 			new w = GetPlayerWeapon(ii);
    		new Float:armour;
      		GetPlayerArmour(ii, armour);
        	if (armour > 98 || w==16 || w==18 || w==35 || w==36 || w==37 || w==38 || w==39 || w==44 || w==45)
			{
   				format(str, sizeof(str), "Name: "WHITE_E"%s"RED_E", ID: "WHITE_E"%d", pName[ii], ii);
       			SendClientMessage(playerid, COLOR_RED, str);
          		count++;
			}
    	}
    }
    if (count == 0) SendClientMessage(playerid, COLOR_ORANGE, ""RED_E"HCv4 "ORANGE_E"has found no armour or weapon hackers on the server.");
    return 1;
}

/*CMD:report(playerid, params[])
{
	if(pAdmin[playerid] > 0)
	    return Error(playerid, "This command is not designed for admins to use!");

	if(sscanf(params, "U(-1)s[75]", otherid, tmp))
	{
	    if(otherid != -1)
		{
	    	Usage(playerid, "/report <ID> <REASON>");
			return true;
		}
	}

    if(otherid == INVALID_PLAYER_ID && otherid != -1)
		return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't report yourself!");
	if(pAdmin[otherid] > 0 && pHidden[otherid] == 0)
	    return Error(playerid, "You can't report an administrator!");
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	if(GetPVarInt(playerid, "ReportedPlayer") == otherid)
 	{
 		Error(playerid, "You have already reported that player, please wait for the admins to handle it!");
	    return true;
	}
	if(GetPVarInt(playerid, "ReportedPlayer")) SetTimerEx("ResetReport", 30000, false, "i", playerid);
	if(otherid != -1) GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	new count = 0;
	if(otherid != -1)
	{
		format(str, sizeof(str), ""GREY2_E"REPORT: "RED_E"%s(%i) reported %s(%i) for: "GREY_E"%s", pName[playerid], playerid, giveplayer, otherid, tmp);
	}
	else format(str, sizeof(str), ""GREY2_E"REPORT: "RED_E"%s(%i) reported: "GREY_E"%s", pName[playerid], playerid, tmp);
	foreach(Player, ii)
	{
	    if(pAdmin[ii] == 0) continue;

 		SendClientMessage(ii, COLOR_RED, str);
 		InfoTD_MSG(ii, 3000, "~r~~h~New Report~w~!~n~Type /reports to view previous reports.");
		count++;
		PlayerPlaySound(ii, 1057, 0.0, 0.0, 0.0);
	}
	SetPVarInt(playerid, "ReportedPlayer", otherid);
	format(str, sizeof(str), "5,9REPORT:3,0 %s(%i) reported %s(%i) for: 4%s", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(otherid != -1)
	{
		format(str, sizeof(str), "%s(%i) reported %s(%i) - Reason: %s", pName[playerid], playerid, giveplayer, otherid, tmp);
	}
	else format(str, sizeof(str), "%s(%i) reported: %s", pName[playerid], playerid, tmp);
	for(new ir = 1; ir < MAX_REPORTS - 1; ir++)
	{
		Reports[ir] = Reports[ir + 1];
	}
	Reports[MAX_REPORTS - 1] = str;

	if(otherid != -1)
	{
		format(str, sizeof(str), ""UFF" "YELLOW_E"Your report on %s(%i) has been saved and sent to administrators online.", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_YELLOW, str);
	}
	else SendClientMessage(playerid, COLOR_YELLOW, ""UFF" "YELLOW_E"Your report has been saved and sent to administrators online.");
	return true;
}*/

CMD:report(playerid, params[])
{
	if(pAdmin[playerid] > 0)
	    return Error(playerid, "This command is not designed for admins to use!");

	if(sscanf(params, "U(-1)s[75]", otherid, tmp))
	{
	   	Usage(playerid, "/report <ID> <REASON>");
		return true;
	}

    if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't report yourself!");
	if(pAdmin[otherid] > 0 && pHidden[otherid] == 0)
	    return Error(playerid, "You can't report an administrator!");
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	if(GetPVarInt(playerid, "ReportedPlayer") == otherid)
 	{
 		Error(playerid, "You have already reported that player, please wait for the admins to handle it!");
	    return true;
	}
	if(GetPVarInt(playerid, "ReportedPlayer")) SetTimerEx("ResetReport", 30000, false, "i", playerid);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	new count = 0;
	format(str, sizeof(str), ""GREY2_E"REPORT: "RED_E"%s(%i) reported %s(%i) for: "GREY_E"%s", pName[playerid], playerid, giveplayer, otherid, tmp);

	foreach(Player, ii)
	{
	    if(pAdmin[ii] == 0 && pPremium[ii] == 0) continue;

 		SendClientMessage(ii, COLOR_RED, str);
 		InfoTD_MSG(ii, 3000, "~r~~h~New Report~w~!~n~Type /reports to view previous reports.");
		count++;
		PlayerPlaySound(ii, 1057, 0.0, 0.0, 0.0);
	}
	SetPVarInt(playerid, "ReportedPlayer", otherid);
	format(str, sizeof(str), "5,9REPORT:3,0 %s(%i) reported %s(%i) for: 4%s", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), "%s(%i) reported %s(%i) - Reason: %s", pName[playerid], playerid, giveplayer, otherid, tmp);

	for(new ir = 1; ir < MAX_REPORTS - 1; ir++)
	{
		Reports[ir] = Reports[ir + 1];
	}
	Reports[MAX_REPORTS - 1] = str;

	format(str, sizeof(str), ""UFF" "YELLOW_E"Your report on %s(%i) for the reason %s has sent to the online administrators.", giveplayer, otherid, tmp);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	format(str, sizeof(str), "~g~Successfully Reported");
	GameTextForPlayer(playerid, str, 3000, 3);
	return true;
}

CMD:checkreports(playerid) return cmd_reports(playerid);
CMD:reports(playerid)
{
	if(pAdmin[playerid] == 0)
		if(pPremium[playerid] == 0)
			return Error(playerid, "Insufficient permissions!");
			
  	new bigStr[600], ReportCount;
  	strcat(bigStr, ""RED_E"Recent Reports:\n\n"WHITE_E"");
  	for(new i = 1; i < MAX_REPORTS; i++)
	{
  		if(strcmp(Reports[i], "none", false) != 0)
		{
			ReportCount++;
			format(str, sizeof(str), "%s\n", Reports[i]);
			strcat(bigStr, str);
		}
	}
	if(ReportCount == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "There isn't any reports!");
	}
	else ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""BLUE_E"UFF :: "WHITE_E"Reports", bigStr, "OK", "");
    return 1;
}

CMD:connectbots(playerid)
{
	if(pAdmin[playerid] < 5)
		return Error(playerid, "Insufficient permissions!");
	format(str, sizeof(str), "4Server: 2%s(%i) has re-connected all IRC bots.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) re-connected all IRC bots.", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_RED, str);


	// Set the IRC names
	ircName[0] = IRC_BOT_1_NAME;
	ircName[1] = IRC_BOT_2_NAME;
	ircName[2] = IRC_BOT_3_NAME;
	ircName[3] = IRC_BOT_4_NAME;
	ircName[4] = IRC_BOT_5_NAME;
	ircName[5] = IRC_BOT_6_NAME;
	ircName[6] = IRC_BOT_7_NAME;
	ircName[7] = IRC_BOT_8_NAME;
	SetTimerEx("IRC_ConnectDelay", 2000, 0, "d", 1); // Connect the first bot with a one-second delay
	SetTimerEx("IRC_ConnectDelay", 3000, 0, "d", 2); // Connect the second bot with a two-second delay
	SetTimerEx("IRC_ConnectDelay", 4000, 0, "d", 3); // Connect the third bot with a three-second delay
	SetTimerEx("IRC_ConnectDelay", 5000, 0, "d", 4); // Connect the 4th bot with a four-second delay
	SetTimerEx("IRC_ConnectDelay", 6000, 0, "d", 5); // Connect the 5th bot with a five-second delay
	SetTimerEx("IRC_ConnectDelay", 7000, 0, "d", 6); // Connect the 6th bot with a three-second delay
	SetTimerEx("IRC_ConnectDelay", 7000, 0, "d", 7); // Connect the 7th bot with a four-second delay
	SetTimerEx("IRC_ConnectDelay", 9000, 0, "d", 8); // Connect the 8th bot with a five-second delay

	// Create the IRC groups
	ircGroup = IRC_CreateGroup();
	SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY2_E"You have re-connected all IRC bots!");
	return 1;
}

CMD:setpassword(playerid, params[])
{
	if(pAdmin[playerid] != 5)
		return Error(playerid, "Insufficient permissions!");

	new cname[21];
	if(sscanf(params, "s[21]s[20]", cname, tmp))
	{
	    Usage(playerid, "/setpassword <name> <new password>");
	    Info(playerid, "Make sure you enter the players name and not ID!");
	   	return true;
	}

	format(query, sizeof(query), "SELECT pass FROM players WHERE name='%s'", cname);
	MySQL_query(query, true, "ChangePlayerPassword", "iss", playerid, cname, tmp);
	return true;
}


// SetPassword Callback
forward ChangePlayerPassword(admin, cPlayer[], newpass[]);
public ChangePlayerPassword(admin, cPlayer[], newpass[])
{
	if(MySQL_rowCount())
	{
		format(str, sizeof(str), "** "GREY2_E"Password for %s has been set to \"%s\"", cPlayer, newpass);
		SendClientMessage(admin, COLOR_YELLOW, str);
		format(query, sizeof(query), "UPDATE players SET pass=SHA1('%s') WHERE name='%s'", newpass, cPlayer);
		MySQL_updateQuery(query);
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), ""GREY2_E"ERROR: "GREY_E"The name "DARK_E"'%s' "GREY_E"doesn't exist in the database!", cPlayer);
		SendClientMessage(admin, COLOR_GREY, str);
	}
    return true;
}

CMD:forcerules(playerid, params[])
{
	if(pAdmin[playerid] < 1)

		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
 	{
  		Usage(playerid, "/forcerules <ID>");
  		SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Forces a player to read the rules dialog.");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has forced %s(%i) to read the rules.", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been forced to read the rules by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has forced %s(%i) to read the rules.", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	Info(otherid, "You have been forced to read the rules, obey them or receive punishment.");
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	cmd_rules(otherid);
	
	return 1;
}
CMD:forcerespawn(playerid, params[])
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
 	{
  		Usage(playerid, "/forcerespawn <ID>");
  		SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Forces a player to respawn.");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	SpawnPlayer(otherid);
	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has respawned %s(%i).", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been respawned by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has respawned %s(%i.", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	Info(otherid, "You have been forced to respawn by an administrator..");
	return 1;
}
/*
// Moneybag Commands
CMD:gotomb(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");

	SetPlayerPosition(playerid, MoneyBagPos[0], MoneyBagPos[1] +1.5, MoneyBagPos[2] +2, 0);
	SendClientMessage(playerid, COLOR_RED, "** "GREEN_E"You have been teleported to the moneybag!");
    AdminCommandLog("GOTOMB", playerid, otherid);
	return 1;
}*/
/*
CMD:startmb(playerid)
{
	if(pAdmin[playerid] < 2)
	{
		Error(playerid, "Insufficient permissions!");
		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You have started the moneybag hunt!");
	EndMBHunt();
 	return 1;
}
*/
CMD:gotogb(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");

	SetPlayerPosition(playerid, GoldBlockPos[0], GoldBlockPos[1] +1.5, GoldBlockPos[2] +2, 0);
	SendClientMessage(playerid, COLOR_RED, "** "GREEN_E"You have been teleported to the gb location!");
	return 1;
}

CMD:startgb(playerid)
{
	if(pAdmin[playerid] < 4)
	{
		Error(playerid, "Insufficient permissions!");
		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You have started the gc jar hunt!");
	StartGoldBlock();
 	return 1;
}

CMD:agod(playerid, params[])
{

	if(pAdmin[playerid] < 4)
		return Error(playerid, "Insufficient permissions!");
	if(sscanf(params, "s[8]", tmp))
	{
		SetPVarInt(playerid, "aGod", 1);
		SetPlayerHealth(playerid, 99999);
		SendClientMessage(playerid, COLOR_GREEN,""UFF" "YELLOW_E"Type /agod off to disable it.");
		format(tmp, sizeof(tmp), "~y~~h~Admin God: ~n~~g~on");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
 	}
 	else
 	{
 		if(!strcmp(tmp, "off", true))
	    {
	    	DeletePVar(playerid, "aGod");
	    	SetPlayerHealth(playerid, 100);
	    	format(tmp, sizeof(tmp), "~y~~h~Admin God: ~n~~r~off");
	        GameTextForPlayer(playerid, tmp, 3500, 4);
  		}
  		else
 		{
 			SetPVarInt(playerid, "aGod", 1);
    		SetPlayerHealth(playerid, 99999);
    		format(tmp, sizeof(tmp), "~y~~h~Admin God: ~n~~g~on");
	        GameTextForPlayer(playerid, tmp, 3500, 4);
			SendClientMessage(playerid, COLOR_GREEN,""UFF" "YELLOW_E"Type /agod off to disable it.");
 		}
 	}
 	
	return true;
}
CMD:heal(playerid, params[])
{
    
	if(pPremium[playerid] == 0)
		return Error(playerid, "Insufficient permissions!");
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(GetPVarInt(playerid, "UsedHeal") == 1)
	{
		SendClientMessage(playerid, COLOR_GREY2, ""RED_E"Server: "GREY_E"You can only heal once every 30 seconds!");
		return true;
	}
	if(GetPVarInt(playerid, "UsedHeal") == 0) SetTimerEx("ResetHeal", 30000, false, "i", playerid);
	SetPVarInt(playerid, "UsedHeal", 1);
	if(sscanf(params, "u", otherid))
	{
		SetPlayerHealth(playerid, 100);
		SendClientMessage(playerid, COLOR_GREEN,""UFF" "GREEN_E"You have healed yourself!");
	}
	else
	{
		if(InDM[otherid] != 0)
			return Error(playerid, "Player is currently in a DM and can't be healed!");
 		if(InEvent[otherid] != 0)
			return Error(playerid, "Player is currently in aa event and can't be healed!");
		if(GOD[otherid] != 0)
			return Error(playerid, "Player has godmode and doesn't need to be healed!");
		SetPlayerHealth(otherid, 100);
		format(str, 90, ""UFF" "GREEN_E"%s(%i) has healed you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREEN, str);
	}
	return 1;
}

CMD:disablearmour(playerid) return cmd_togarmour(playerid);
CMD:togarmor(playerid) return cmd_togarmour(playerid);
CMD:armour(playerid) return cmd_togarmour(playerid);
CMD:togarmour(playerid)
{
    
	if(pPremium[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");
		
	if(InEvent[playerid] != 0)
		return Error(playerid, "You can't use this command in an event!");
	if(bounty[playerid] > 0)
		return Error(playerid, "You currently have a hit on you, you can't toggle armour!");
	GetPlayerArmour(playerid, A);
	if(A == 0)
	{
		if(InDM[playerid] != 0)
			return Error(playerid, "You can't enable your armour in DM zones!");

		SetPlayerArmour(playerid, 50.0);
		if(pPremium[playerid] == 1) SetPlayerArmour(playerid, 100.0);

		format(tmp, sizeof(tmp), "~y~~h~Armour: ~n~~g~enabled");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
	}
	else
	{
		SetPlayerArmour(playerid, 0.0);
		format(tmp, sizeof(tmp), "~y~~h~Armour: ~n~~r~diabled");
	    GameTextForPlayer(playerid, tmp, 3500, 4);
  	}
	return 1;
}
CMD:godmode(playerid) return cmd_god(playerid);
CMD:god(playerid)
{

    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pLogged[playerid] == false)
		return Error(playerid, "You must be logged in in order to enable godmode!");
	if(doingStunt[playerid] == 33 || doingStunt[playerid] == 18 || doingStunt[playerid] == 19)
		return Error(playerid, "You can't toggle godmode in the minigame!");
	if(InDM[playerid] != 0)
		return Error(playerid, "You can't toggle godmode in DM zones!");
 	if(InEvent[playerid] != 0)
		return Error(playerid, "You can't toggle godmode in an event!");
	if(bounty[playerid] > 0)
		return Error(playerid, "You currently have a hit on you, you can't enable godmode!");

	if(GOD[playerid] == 0)
	{
     	new Float:hp;
	    GetPlayerHealth(playerid, hp);
		if(hp < 30.0)
                 return GameTextForPlayer(playerid, "~w~You can't enable godmode~n~~w~health below 30 HP", 3500, 3);
	 	if(PlayerHit[playerid] == true)
			return Error(playerid, "You can't enable godmode while being shot at!");
		GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
	    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
  		ResetPlayerWeapons(playerid);
  	  	GOD[playerid] = 1;
  	  	TextDrawShowForPlayer(playerid, godTD);
  	  	TextDrawShowForPlayer(playerid, godTDBOX);
  	  	TextDrawHideForPlayer(playerid, GGBOX);
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has enabled godmode.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup,IRC_CHANNEL,str);
		if(god3D[playerid] == Text3D:-1) god3D[playerid] = CreateDynamic3DTextLabel("GODMODE ON", 0x3BBD44FF , 0, 0, 0.39, 18.0, playerid, INVALID_VEHICLE_ID, 1);
		if(pPremium[playerid] == 1) SetPlayerArmour(playerid, 100);
		if(killStreak[playerid] != 0) killStreak[playerid] = 0, Info(playerid, "Your killstreak has been reset to 0.");
	}
	else
 	{
        GameTextForPlayer(playerid, "~y~GODMODE: ~n~~r~OFF~y~", 3000, 3);
		SendClientMessage(playerid, COLOR_RED, ""UFF" "GREY_E"You have disabled god-mode. You can now lose health in stunt zones.");
		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You can now freely use weapons.");
 		GOD[playerid] = 0;
 		SetPlayerHealth(playerid, 100);
 		TextDrawHideForPlayer(playerid, godTD);
 		TextDrawHideForPlayer(playerid, godTDBOX);
 		if(doingStunt[playerid] == 0)
 		{
 			GiveSpawnWeapons(playerid);
   		}
	    format(str, sizeof(str), "4Server:3 %s(%i)2 has disabled godmode.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
  		DestroyDynamic3DTextLabel(god3D[playerid]);
		god3D[playerid] = Text3D:-1;
	}
	return true;
}
CMD:getip1(playerid, params[])
{
    
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
 	{
  		Usage(playerid, "/getip <ID>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(pAdmin[otherid] == 5)
 	{
  		Error(playerid, "You can't get the Executive Administrator ip!");
  		format(str, 90, "*** "RED_E"%s(%i) tried to get your IP!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_YELLOW, str);
  		return 1;
    }
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));

	format(str, 90, "** "RED_E"%s(%i)'s IP: %s", giveplayer, otherid, PlayerIP);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	return true;
}
CMD:getip(playerid, params[])
{
    
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
 	{
  		Usage(playerid, "/getip <ID>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(pAdmin[otherid] == 5)
 	{
  		Error(playerid, "You can't get the Executive Administrator ip!");
  		format(str, 90, "*** "RED_E"%s(%i) tried to get your IP!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_YELLOW, str);
  		return 1;
    }
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));

	format(str, 90, "** "RED_E"This command is not available right now.");
	SendClientMessage(playerid, COLOR_YELLOW, str);
	return true;
}
CMD:hydra(playerid)
{
    
    if(pAdmin[playerid] == 0)
		if(pPremium[playerid] != 1)
				return Error(playerid, "Insufficient permissions!");

	if(InDM[playerid] != 0) return Error(playerid, "You can't spawn a vehicle while in a DM!");
 	if(doingStunt[playerid] != 0) return Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
 	if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
	if(RaceParticipant[playerid] == true) return Error(playerid, "You can't this vehicle in a race!");
	SpawnPlayerVehicle(playerid, 520);
	return true;
}
CMD:hunter(playerid)
{
    
	if(pPremium[playerid] != 1)
		return Error(playerid, "You must be a VIP member to use this command, check /premium for more info.");

    if(InDM[playerid] != 0) return Error(playerid, "You can't spawn a vehicle while in a DM!");
 	if(doingStunt[playerid] != 0) return Error(playerid, "You can't spawn a vehicle in this area! Type /leave");
 	if(InEvent[playerid] != 0) return Error(playerid, "You can't spawn vehicles in an event!");
	if(RaceParticipant[playerid] == true) return Error(playerid, "You can't this vehicle in a race!");
	SpawnPlayerVehicle(playerid, 425);
	return true;
}/*
CMD:dspectate(playerid, params[]) return cmd_dspec(playerid, params);
CMD:dspec(playerid, params[])
{
    
    if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command! (/register)");

    if(doingStunt[playerid] != 0) return Error(playerid, "You can't spectate from this area..");
    if(InDM[playerid] != 0) return Error(playerid, "You can't spectate from a DM area!");
    if(doingStunt[playerid] == 70)  return Error(playerid, "You can't spectate while watching an event, type /stopwatch!");
	if(doingStunt[playerid] == 18 || doingStunt[playerid] == 19)
	{
		Error(playerid, "You can't spectate while in fallout or derby!");
	    return true;
	}
	if(RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't spectate while in a race!");
	    return true;
	}
	if(doingStunt[playerid] != 0) return Error(playerid, "You can't spectate duel from this area!");
	if(InDM[playerid] != 0) return Error(playerid, "You can't spectate duel from a deathmatch!!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/dspec <ID/Name>");
		return true;
	}
    if(InDuel[otherid] == 0) return Error(playerid, "That player is not in a duel");

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't spectate yourself bro..");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pSpectating[playerid] == -1)
	{
		SavePlayerPositionEx(playerid);
  	}
	playerSpectated[otherid]++;
	pSpectating[playerid] = otherid;
	SetPlayerInterior(playerid, GetPlayerInterior(otherid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));
	TogglePlayerSpectating(playerid, 1);
	SendClientMessage(playerid, COLOR_YELLOW, "** "GREY_E"Type '/specoff' to stop spectating");
	return true;
}
*/
CMD:spectate(playerid, params[]) return cmd_spec(playerid, params);
CMD:spec(playerid, params[])
{
    
    if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command! (/register)");

	if(pAdmin[playerid] == 0)
		if(pPremium[playerid] == 0)
				return Error(playerid, "Insufficient permissions!");

    if(pAdmin[playerid] == 0 && doingStunt[playerid] != 0) return Error(playerid, "You can't spectate from this area..");
    if(pAdmin[playerid] == 0 && InDM[playerid] != 0) return Error(playerid, "You can't spectate from a DM area!");
    if(doingStunt[playerid] == 70)  return Error(playerid, "You can't spectate while watching an event, type /stopwatch!");
	if(doingStunt[playerid] == 18 || doingStunt[playerid] == 19)
	{
		Error(playerid, "You can't spectate while in fallout or derby!");
	    return true;
	}
	if(RaceParticipant[playerid] == true)
	{
		Error(playerid, "You can't spectate while in a race!");
	    return true;
	}
	if(pAdmin[playerid] == 0)
	{
		if(doingStunt[playerid] != 0) return Error(playerid, "You can't spectate from this area!");
		if(InDM[playerid] != 0) return Error(playerid, "You can't spectate from a deathmatch!!");
	}
	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/spec <ID/Name>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't spectate yourself bro..");

	if(specOFF[otherid] == 1)
	{
	    if(pAdmin[otherid] > pAdmin[playerid])
		{
			format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has spectating disabled.", pName[otherid], otherid);
			SendClientMessage(playerid, COLOR_GREY, str);
			format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has tried to spectate you!", pName[playerid], playerid);
	    	SendClientMessage(otherid, COLOR_GREY, str);
			return true;
		}
	}
    if(GetPVarInt(otherid, "pickedUpMB") && pAdmin[playerid] == 0)
	{
		format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has just picked up a moneybag. you must wait before spectating.", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pSpectating[otherid] != -1)
	{
	    format(str, sizeof(str), ""UFF" "GREY2_E"%s(%i) is currently in spectate mode!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_GREY2, str);
		return true;
	}
	if(pSpawned[otherid] == 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY_E"%s(%i) isn't spawned", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(pSpectating[playerid] == -1)
	{
		SavePlayerPositionEx(playerid);
  	}
	playerSpectated[otherid]++;
	pSpectating[playerid] = otherid;
	SetPlayerInterior(playerid, GetPlayerInterior(otherid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));
	TogglePlayerSpectating(playerid, 1);


	if(IsPlayerInAnyVehicle(otherid))
	{
	    vID = GetPlayerVehicleID(otherid);

	    PlayerSpectateVehicle(playerid, vID);

	    if(GetPlayerState(otherid) == PLAYER_STATE_DRIVER)
	    {
	    	format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"You are now spectating %s(%i) who is driving a %s(%d).", giveplayer, otherid, vehName[GetVehicleModel(vID) - 400], vID);
		}
		else
		{
		    format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"You are now spectating %s(%i) who is a passenger in %s(%d).", giveplayer, otherid, vehName[GetVehicleModel(vID) - 400], vID);
		}
	}
	else
	{
	    PlayerSpectatePlayer(playerid, otherid);
	    format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"You are now spectating %s(%i) who is on foot.", giveplayer, otherid);
	}
	SendClientMessage(playerid, COLOR_WHITEP, str);
	format(str, sizeof(str), "~g~~h~~h~You are now spectating %s(%d).~n~Type /specoff to end spectating.", giveplayer, otherid);
	InfoTD_MSG(playerid, 4000, str);
	new speccers;
	foreach(Player, ii)
	{
	    if(pSpectating[ii] == otherid)
	    {
	        speccers = speccers + 1;
		}
	}
	speccers --; // exclude you
	if(speccers != 0)
	{
		if(speccers == 1)
		{
			format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) is also spectated by another admin (/spectators)", giveplayer, otherid);
		}
		else
		{
		    format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) is also spectated by %d other admins (/spectators)", giveplayer, otherid, speccers);
		}
		SendClientMessage(playerid, COLOR_WHITEP, str);
	}
	if(pAdmin[otherid] == 5)
	{
		format(str, sizeof(str), "** "ORANGE_E"%s(%i) has started spectating you.", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_YELLOW, str);
	}
	if(InDM[otherid] == 13)
	{
		format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) is currently playing CNR, your objects have been disabled while spectating.", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_WHITEP, str);
		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 0);
	}
	SendClientMessage(playerid, COLOR_YELLOW, "** "GREY_E"Type '/specoff' to stop spectating");
	return true;
}

CMD:specoff(playerid, params[])
{
   	if(pAdmin[playerid] == 0)
		if(pPremium[playerid] == 0)

				return Error(playerid, "Insufficient permissions!");

	if(pSpectating[playerid] == -1)
		return Error(playerid, "You aren't spectating anyone!");


	GetPlayerName(pSpectating[playerid], giveplayer, sizeof(giveplayer));
	format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"You have stopped spectating %s(%i).", giveplayer, pSpectating[playerid]);
	SendClientMessage(playerid, COLOR_WHITEP, str);
	if(pAdmin[pSpectating[playerid]] == 5)
	{
		format(str, sizeof(str), "** "GREY2_E"%s(%i) has stopped spectating you.", pName[playerid], playerid);
		SendClientMessage(pSpectating[playerid], COLOR_YELLOW, str);
	}

	playerSpectated[pSpectating[playerid]]--;
	TogglePlayerSpectating(playerid, false);
	if(InDM[playerid] != 13) Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	return true;
}/*
CMD:dspecoff(playerid, params[])
{
	if(pSpectating[playerid] == -1)
		return Error(playerid, "You aren't spectating anyone!");

	GetPlayerName(pSpectating[playerid], giveplayer, sizeof(giveplayer));
	playerSpectated[pSpectating[playerid]]--;
	TogglePlayerSpectating(playerid, false);
	if(InDM[playerid] != 13) Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
	return true;
}*/
CMD:togspec(playerid)
{
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(specOFF[playerid]== 1)
 	{
		specOFF[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREEN,""UFF" "GREY_E"Players will now be able to spectate you!");
  	}
   	else
	{
		specOFF[playerid] = 1;
		SendClientMessage(playerid, COLOR_RED,""UFF" "GREY_E"Players will no longer be able to spectate you!");
	}
	format(query, sizeof(query), "UPDATE players SET specoff=%d WHERE reg_id=%d", specOFF[playerid], pRegID[playerid]);
	MySQL_updateQuery(query);
	return 1;
}

CMD:spectators(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	new speccers;
	foreach(Player, ii)
	{
	    if(pSpectating[ii] != -1)
	    {
	        speccers = speccers + 1;
		}
	}

	if(speccers == 0)
		return SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There isn't anyone spectating!");

	if(speccers == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"Displaying a list of 1 player spectating:");
	}
	else
 	{
		format(str, sizeof(str), ""UFF" "GREY_E"Displaying a list of %d players spectating:", speccers);
		SendClientMessage(playerid, COLOR_GREY, str);
	}

	speccers = 0;

	foreach(Player, ii)
	{
	    if(pSpectating[ii] != -1)
	    {
		    speccers = speccers + 1;
			GetPlayerName(pSpectating[ii], giveplayer, sizeof(giveplayer));
			format(str, sizeof(str), "  %d. %s(%i) spectating %s(%i).", speccers, pName[ii], ii, giveplayer, pSpectating[ii]);
		    SendClientMessage(playerid, COLOR_GREY, str);
		}
	}
	return true;
}

/*
CMD:removerb(playerid,params[])
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	for(new iit = 0; iit < sizeof(block); iit++)
	{
		DestroyObject(block[iit][playerid]);
	}
	pblock[playerid] = 0;
	format(str,sizeof (str),"{%06x}%s(%i) "YELLOW_E"has removed all of his roadblocks.", pColor[playerid], pName[playerid], playerid);
	SendClientMessageToAll(COLOR_YELLOW, str);
    return 1;
}

CMD:rb(playerid, params[]) return cmd_roadblock(playerid, params);
CMD:roadblock(playerid,params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 1) return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "d", otherid))
 	{
  		SendClientMessage(playerid,COLOR_LB,"USAGE: /rb <1/2/3/4>");
    	SendClientMessage(playerid,COLOR_LB,"| 1: Small Roadblock");
     	SendClientMessage(playerid,COLOR_LB,"| 2: Barrier");
      	SendClientMessage(playerid,COLOR_LB,"| 3: Traffic cone");
       	SendClientMessage(playerid,COLOR_LB,"| 4: Detour sign");
		return 1;
  	}
   	if(pblock[playerid] > 10)
	{
		Error(playerid, "You can't place more than 10 roadblocks!");
		return 1;
	}

	new Float:X, Float:Y, Float:Z, Float:ang;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, ang);
	new atrb = pblock[playerid];
 	switch(otherid)
  	{
		case 1:
     	{
     		ang = GetPosInFrontOfPlayer(playerid,  X, Y, GetRBDistance(playerid));
			block[atrb][playerid] = CreateObject(1459, X, Y, Z, 0, 0, ang);
			GameTextForPlayer(playerid,"~w~Roadblock ~b~Placed!", 3000, 1);
			//format(str,sizeof (str),""YELLOW_E"Administrator {%06x}%s(%i) "YELLOW_E" has placed a roadblock in his position.", pColor[playerid], pName[playerid], playerid);
  			//SendClientMessageToAll(COLOR_YELLOW, str);
		}
		case 2:
  		{
   			ang = GetPosInFrontOfPlayer(playerid,  X, Y, GetRBDistance(playerid));
			block[atrb][playerid] = CreateObject(978, X, Y, Z, 0, 0, ang);
 			GameTextForPlayer(playerid,"~w~Roadblock ~b~Placed!", 3000, 1);
 			//format(str,sizeof (str),""YELLOW_E"Administrator {%06x}%s(%i) "YELLOW_E" has placed a roadblock in his position.", pColor[playerid], pName[playerid], playerid);
  			//SendClientMessageToAll(COLOR_YELLOW, str);
		}
		case 3:
  		{
   			ang = GetPosInFrontOfPlayer(playerid,  X, Y, GetRBDistance(playerid));
			block[atrb][playerid] = CreateObject(1238, X, Y, Z, 0, 0, ang);
  			GameTextForPlayer(playerid,"~w~Cone ~b~Placed!", 3000, 1);
  			//format(str,sizeof (str),""YELLOW_E"Administrator {%06x}%s(%i) "YELLOW_E" has placed a Cone in his position.", pColor[playerid], pName[playerid], playerid);
   			//SendClientMessageToAll(COLOR_YELLOW, str);
   		}
		case 4:
  		{
   			ang = GetPosInFrontOfPlayer(playerid,  X, Y, GetRBDistance(playerid));
			block[atrb][playerid] = CreateObject(1425, X, Y, Z, 0, 0, ang);
  			GameTextForPlayer(playerid,"~w~Sign ~b~Placed!", 3000, 1);
  			//format(str,sizeof (str),""YELLOW_E"Administrator {%06x}%s(%i) "YELLOW_E" has placed a Detour Sign in his position.", pColor[playerid], pName[playerid], playerid);
   			//SendClientMessageToAll(COLOR_YELLOW, str);
   		}
	}
	pblock[playerid]++;
	Info(playerid, ""RED_E"Remember to /removerb once you are done!");
	
	return 1;
}
*/
CMD:dragplayer(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");
    if (sscanf(params, "u", otherid)) {
        Usage(playerid, "/dragplayer <ID/Name>");
        SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Will teleport the specified player into your vehicle.");
        return 1;
    }
    if(otherid == playerid) return Error(playerid, "You can't get yourself in your own vehicle!");
    if(otherid == INVALID_PLAYER_ID) return Error(playerid, "Player not connected!");
    if(InDM[otherid] == 1) return Error(playerid, "Player is currently in a DM zone!");

	if(GetPlayerState(playerid)== PLAYER_STATE_DRIVER)
	{
        if(!IsVehicleOneSeater(playerid, GetPlayerVehicleID(playerid)))
		{
			if(IsPlayerInAnyVehicle(otherid)) RemovePlayerFromVehicle(otherid);
			format(str,sizeof(str),"Server: You have teleported %s into your vehicle.", pName[otherid]);
            SendClientMessage(playerid, COLOR_YELLOW, str);
            format(str,sizeof(str),"Server: Administrator %s has teleport you inside his vehicle.", pName[playerid]);
            SendClientMessage(otherid, COLOR_YELLOW, str);

			PutPlayerInVehicle(otherid, GetPlayerVehicleID(playerid), 1);
            SetPlayerInterior(otherid, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(otherid, GetPlayerVirtualWorld(playerid));
			SetVehicleVirtualWorld(GetPlayerVehicleID(otherid), GetPlayerVirtualWorld(playerid));
   		}
        else Error(playerid, "Your using a one seat vehicle!");
   	}
    else Error(playerid, "You aren't in a vehicle!");
    return 1;
}

CMD:getin(playerid, params[])
{
    
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	new seat;
	if(sscanf(params, "ud", otherid, seat))
	{
		Usage(playerid, "/getin <ID/Name> <seat id>");
		return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(!IsPlayerInAnyVehicle(otherid))
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is not in any vehicle!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(IsVehicleOneSeater(otherid,GetPlayerVehicleID(otherid)))
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is currently driving a one seat vehicle!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(seat < 0 || seat > 3)
	{
		Error(playerid, "You can choose seat from 0 - 3!");
		return true;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	vID = GetPlayerVehicleID(otherid);
	vv = GetVehicleModel(vID);
	foreach(Player, ii)
	{
	    if(!IsPlayerInVehicle(ii, vID)) continue;
	    if(GetPlayerVehicleSeat(ii) == seat)
	    {
			format(str, sizeof(str), "ERROR: "GREY2_E"Seat %d in %s(%i)'s %s(%d) is occupied by %s(%i).", seat, giveplayer, otherid, vehName[vv - 400], vID, pName[ii], ii);
			SendClientMessage(playerid, COLOR_RED, str);
			return true;
		}
	}

	SetPlayerInterior(playerid, GetPlayerInterior(otherid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));
	PutPlayerInVehicle(playerid, vID, seat);
	doingStunt[playerid] = 0;

	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) teleported into your %s(%d) to seat %d.", pName[playerid], playerid, vehName[vv - 400], vID, seat);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"You teleported into %s(%i)'s %s(%d) to seat %d.", giveplayer, otherid, vehName[vv - 400], vID, seat);
	SendClientMessage(playerid, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) teleported into %s(%i)'s %s(%d) to seat %d.", pName[playerid], playerid, giveplayer, otherid, vehName[vv - 400], vID, seat);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:gotoxyz(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "fff", POS[0], POS[1], POS[2]) && sscanf(params, "p<,>fff", POS[0], POS[1], POS[2]))
	{
		Usage(playerid, "/gotoxyz <X> <Y> <Z>");
		return true;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SetPlayerPosition(playerid, POS[0], POS[1], POS[2], 0);
 	}
	else SetPlayerVehiclePosition(playerid, POS[0], POS[1], POS[2], 0);
	doingStunt[playerid] = 0;

	format(str, sizeof(str), ""UFF" "GREY_E"You have teleported yourself to %f %f %f!", POS[0], POS[1], POS[2]);
	SendClientMessage(playerid, COLOR_GREY, str);
	return true;
}

CMD:telep(playerid, params[])
{

    if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	new p1, p1name[24],
	    p2, p2name[24];

	if(sscanf(params, "ii", p1, p2))
	{
		Usage(playerid, "/telep <teleportee> <other player>");
		return true;
	}

	if(!IsPlayerConnected(p1))
		return Error(playerid, "Invalid teleportee ID!");
	if(!IsPlayerConnected(p2))
	    return Error(playerid, "Invalid destination ID!");

	GetPlayerName(p1, p1name, sizeof(p1name));
	GetPlayerName(p2, p2name, sizeof(p2name));


	if(!IsPlayerInAnyVehicle(p2))
	{
		GetPlayerPos(p2, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(p2, A);
	}
	else
	{
	    GetVehiclePos(GetPlayerVehicleID(p2), POS[0], POS[1], POS[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(p2), A);
	}

	if(!IsPlayerInAnyVehicle(p1))
	{
	    SetPlayerPosition(p1, POS[0], POS[1], POS[2], A);
 	}
	else
	{
	    SetPlayerVehiclePosition(p1, POS[0], POS[1], POS[2], A);
 	}
	doingStunt[p1] = 0;
	doingStunt[p2] = 0;

	format(str, sizeof(str), ""LB_E"You have teleported %s(%i) to %s(%i).", p1name, p1, p2name, p2);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""LB_E"%s(%i) has teleported %s(%i) to you.", pName[playerid], playerid, p1name, p1);
	SendClientMessage(p2, COLOR_GREY, str);
	format(str, sizeof(str), ""LB_E"%s(%i) has teleported you to %s(%i).", pName[playerid], playerid, p2name, p2);
	SendClientMessage(p1, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has teleported %s(%i) to %s(%i)", pName[playerid], playerid, p1name, p1, p2name, p2);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:explode(playerid, params[])
{
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
		Usage(playerid, "/explode <ID/Name>");
		return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), ""UFF" "GREY_E"You have exploded %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	CreateExplosion(POS[0], POS[1], POS[2], 7, 5.0);
	return true;
}

CMD:asay(playerid, params[])
{
    if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

    if(sscanf(params, "s[128]", tmp))
	{
		Usage(playerid, "/asay <message>");
		return true;
	}

	new tmp3[25];
	switch(pAdmin[playerid])
 	{
		case 1: tmp3 = "Junior Administrator";
  		case 2: tmp3 = "General Administrator";
    	case 3: tmp3 = "Lead Administrator";
    	case 4: tmp3 = "Head Administrator";
     	case 5: tmp3 = "Executive Administrator";
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s %s: "RED_E"%s", tmp3,  pName[playerid], tmp);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"Admin: "RED_E"%s", tmp);

	SendClientMessageToAll(COLOR_WHITEP, str);
	return true;
}
CMD:vsay(playerid, params[])
{
    if(pPremium[playerid] < 1)
		return Error(playerid, "You are not a premium member to use that command (/premium)!");

    if(sscanf(params, "s[128]", tmp))
	{
		Usage(playerid, "/vsay <message>");
		return true;
	}

	new tmp3[25];
	switch(pPremium[playerid])
 	{
		case 1: tmp3 = "VIP";
	}
	format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"Very Important Player %s: "SBLUE_E"%s", pName[playerid], tmp);
	SendClientMessageToAll(COLOR_WHITEP, str);
	return true;
}
CMD:msay(playerid, params[])
{
   	if(Mapper[playerid] == 0)
	return Error(playerid, "Insufficient permissions!");

    if(sscanf(params, "s[128]", tmp))
	{
		Usage(playerid, "/msay <message>");
		return true;
	}
	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"Mapper %s(%i): %s", pName[playerid], playerid, tmp);
	else
		format(str, sizeof(str), "Mapper: "WHITEP_E"%s", tmp);

	SendClientMessageToAll(COLOR_WHITEP, str);
	return true;
}
CMD:rconsay(playerid, params[])
{
    if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

    if(sscanf(params, "s[128]", tmp))
	{
		Usage(playerid, "/rconsay <message>");
		return true;
	}
	format(str, sizeof(str), "*** Admin: %s", tmp);
	SendClientMessageToAll(COLOR_RCONBLUE, str);
	return true;
}
CMD:aminigun(playerid)
{
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");
	GivePlayerWeapon(playerid, 38, 999999);
	
	return true;
}
CMD:rpg(playerid)
{
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");
	GivePlayerWeapon(playerid, 35, 999999);
	
	return true;
}
CMD:endduel(playerid)
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	if(g_DuelInProgress == 0)
		return Error(playerid, "There is no duel going on at the moment!");

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "LB2_E"%s(%i) has ended the duel.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "LB2_E"The duel has been cancelled by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);

	EndDuel();
	return true;
}
CMD:rv(playerid) return cmd_respawnvehicles(playerid);
CMD:respawnvehicles(playerid)
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");


	for(new itt=0; itt<MAX_VEHICLES; itt++)
 	{
  		new vehs;
		for(new iit = 0; iit < sizeof(veh_cnr); iit++)
		{
			if(veh_cnr[iit] == itt) vehs = 1;
		}
    	foreach(Player, ii)
     	{
			if(GetPlayerVehicleID(ii) == itt || PlayerVehicle[ii] == itt)
			{
          		vehs = 1;
	  		}
		}
		if(!vehs)
		{
		    SetVehicleToRespawn(itt);
     	}
      	vehs = 0;
	}
 	foreach(Player, ii)
	{
		if(!IsPlayerInAnyVehicle(ii))
	    {
	    	RemoveComponents(ii, true);
	    	DestroyVehicle(pSpawnVehicle[ii]);
			pSpawnVehicle[ii] = -1;
		}
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has respawned all unoccupied vehicles.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"All vehicles have been respawned by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);

	format(tmp, sizeof(tmp), "4Server: 2%s(%i) has respawned all unoccupied vehicles.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return true;
}
CMD:rvcnr(playerid)
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");


	for(new itt=0; itt<MAX_VEHICLES; itt++)
 	{
  		new vehs;
		foreach(Player, ii)
     	{
			if(GetPlayerVehicleID(ii) == itt || PlayerVehicle[ii] == itt)
			{
          		vehs = 1;
	  		}
		}
		if(!vehs)
		{
		    for(new iit = 0; iit < sizeof(veh_cnr); iit++)
			{
				if(veh_cnr[iit] == itt) SetVehicleToRespawn(itt);
			}
     	}
      	vehs = 0;
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has respawned all unoccupied CnR vehicles.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"All CnR vehicles have been respawned by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);

	format(tmp, sizeof(tmp), "4Server: 2%s(%i) has respawned all unoccupied CnR vehicles.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return true;
}
CMD:respawnpvs(playerid)
{
	if(pAdmin[playerid] < 2)
		return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
	{
		if(!IsPlayerInAnyVehicle(ii))
	    {
			DestroyDynamic3DTextLabel(PV_3DLabel[ii]);
			DestroyVehicle(PlayerVehicle[ii]);
			PlayerVehicle[ii] = -1;
		}
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has respawned all unoccupied private vehicles.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"All private vehicles have been respawned by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);

	format(tmp, sizeof(tmp), "4Server: 2%s(%i) has respawned all unoccupied private vehicles.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return true;
}

CMD:autofix(playerid)
{
	if(InDM[playerid] != 0)
	{
	    Error(playerid, "You can't enable autofix while in a DM!");
	    return true;
	}
	if(doingStunt[playerid] != 0)
	{
		Error(playerid, "You can't toggle autofix in this area!");
	    return true;
	}
	if(InEvent[playerid] != 0) return Error(playerid, "You can't toggle autofix in an event!");
	if(pAutoFix[playerid] == 1)
	{
		pAutoFix[playerid] = 0;
		SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have "RED_E"disabled "LB2_E"autofix");
	}
 	else
 	{
 		pAutoFix[playerid] = 1;
		SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have "LG_E"enabled "LB2_E"autofix.");
 	}
 	if(pLogged[playerid] == true)
 	{
 		format(query, sizeof(query), "UPDATE players SET autofix=%d WHERE reg_id=%d", pAutoFix[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:allowgoto(playerid) return cmd_toggoto(playerid);
CMD:toggoto(playerid)
{
	if(pGoTo[playerid] == 1)
	{
		pGoTo[playerid] = 0;
		SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have "LG_E"allowed "LB2_E"players to teleport to you.");
	}
 	else
 	{
 		pGoTo[playerid] = 1;
		SendClientMessage(playerid, COLOR_LB, ""UFF" "LB2_E"You have "RED_E"disabled "LB2_E"players from teleporting to you.");
 	}
 	if(pLogged[playerid] == true)
	{
 		format(query, sizeof(query), "UPDATE players SET goto=%d WHERE reg_id=%d", pGoTo[playerid], pRegID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
CMD:pmsoff(playerid) return cmd_togpms(playerid);
CMD:togpm(playerid) return cmd_togpms(playerid);
CMD:nopm(playerid) return cmd_togpms(playerid);
CMD:togpms(playerid)
{
	if(GetPVarInt(playerid, "PMsDisabled") == 1)
	{
		DeletePVar(playerid, "PMsDisabled");
		GameTextForPlayer(playerid,"~y~~h~private messages: ~n~~g~ON~y~",3000,3);
	}
 	else
 	{
 		SetPVarInt(playerid, "PMsDisabled", 1);
        GameTextForPlayer(playerid,"~y~~h~private messages: ~n~~r~OFF~y~",3000,3);
 	}
 	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	return true;
}
CMD:go(playerid, params[]) return cmd_goto(playerid, params);
CMD:goto(playerid, params[])
{

	if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command!");

	if(sscanf(params, "u", otherid))
	{
		Usage(playerid, "/goto <player name/ID>");
		return true;
	}
	if(pAdmin[otherid] != 0 && pAdmin[playerid] == 0)
  	{
		Error(playerid, "You can't teleport to Administrators!");
		return true;
    }
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(otherid == playerid)
		return Error(playerid, "You can't teleport to yourself");
	if(pLogged[playerid] == false)
       return SetTimerEx("URMSG", 3000, false, "i", playerid);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
 	if(killStreak[otherid] >= 5)
	{
		Error(playerid, "Player has Killstreak!");
		return true;
	}
	if(pSpectating[otherid] != -1)
	{
	    format(str, sizeof(str), ""UFF" "GREY2_E"%s(%i) is currently in spectate mode and can't be teleported to!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY2, str);
		return true;
	}
	if(pSpawned[otherid] == 0)
	{
	    format(str, sizeof(str), ""UFF" "GREY2_E"%s(%i) is not spawned yet!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY2, str);
		return true;
	}
	if(pJail[otherid] > 0)
	{
		Error(playerid, "You can't teleport to players that are in jail!");
		return true;
	}
	if(pAdmin[playerid] == 0)
	{
		if(ignore[otherid][playerid] == 1)
		{
		    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) has disabled teleports from you!", giveplayer, otherid);
		    SendClientMessage(playerid, COLOR_RED, str);
		    format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%d) has tried to teleport to you!", pName[playerid], playerid);
			SendClientMessage(otherid, COLOR_GREY, str);
		    return true;
		}
		if(GetPVarInt(playerid, "usedGoto") == 3 && pPremium[playerid] == 0)
		{
  			Error(playerid, "You can only teleport to players 3 times per minute!");
	 		return true;
  		}
		if(InDM[playerid] != 0 || InEvent[playerid] != 0 || RaceParticipant[playerid] == true || doingStunt[playerid] != 0)
		{
      		Error(playerid, "You can't teleport to players while in a DM/Race/Event!");
	    	return true;
		}
		if(pGoTo[otherid] == 1)
		{
			format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%d) has tried to teleport to you!", pName[playerid], playerid);
			SendClientMessage(otherid, COLOR_GREY, str);
			format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has disabled players from teleporting to them.", giveplayer, otherid);
			SendClientMessage(playerid, COLOR_GREY, str);
			return true;
		}
		if(GetPVarInt(otherid, "pickedUpMB"))
		{
			format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has just picked up a moneybag. you must wait before teleporting.", giveplayer, otherid);
			SendClientMessage(playerid, COLOR_GREY, str);
			return true;
  		}
		if(doingStunt[otherid] != 0)
  		{
  			format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in an area where you can't teleport to!", giveplayer, otherid);
			SendClientMessage(playerid, COLOR_GREY, str);
			return true;
  		}
		if(InDM[otherid] != 0 || InEvent[otherid] != 0 || RaceParticipant[otherid] == true)
		{
			format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in a Race/DM or Event and can't be teleported to!", giveplayer, otherid);
			SendClientMessage(playerid, COLOR_GREY, str);
			return true;
		}
		if(bounty[otherid] > 0)
		{
			format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) currently has a hit active! You can't teleport to him.", giveplayer, otherid);
			SendClientMessage(playerid, COLOR_RED, str);
			return true;
		}
	}
	if(playerSpectated[playerid] != 0)
	{
		format(str, sizeof(str), "~r~SPEC: ~w~%s(%i) has teleported to %s(%i)", pName[playerid], playerid, giveplayer, otherid);
		foreach(Player, ii)
		{
		    if(pSpectating[ii] == playerid)
		    {
		        InfoTD_MSG(ii, 4000, str);
		    }
		}
	}
	if(GetPlayerWeapon(playerid) == 46)
	{
  		SetPlayerArmedWeapon(playerid, 0);
	}
	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerFacingAngle(otherid, A);
	}
	else GetVehicleZAngle(GetPlayerVehicleID(otherid), A);
	if(GetPVarInt(playerid, "usedGoto") == 0 && pPremium[playerid] == 0) SetTimerEx("ResetGoTo", 50000, false, "i", playerid);

	new pGoto = GetPVarInt(playerid, "usedGoto") + 1;
	SetPVarInt(playerid, "usedGoto", pGoto);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsInHouse{otherid} != 0)
		{
			Error(playerid, "This player is currently in his house, exit your vehicle to teleport!");
			return true;
		}
	    new vehicleID = GetPlayerVehicleID(playerid);
	    switch(GetVehicleModel(vehicleID))
		{
			case 592, 577, 493, 452, 446, 519, 453, 484, 553: //
			{
				Error(playerid, "You can't teleport to players with this vehicle!");
				return true;
			}
		}
		if(InDM[otherid] != 0)
		{
			SetPlayerPosition(playerid, POS[0], POS[1] + 2, POS[2] + 1, A);
			SetPlayerInterior(playerid, GetPlayerInterior(otherid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "YELLOW_E"You have been removed from your vehicle since the other player is current in a DM");
		}
		else
		{
			SetPlayerVehiclePosition(playerid, POS[0], POS[1] + 2.5, POS[2] + 1, A);
			LinkVehicleToInterior(vehicleID, GetPlayerInterior(otherid));
			SetVehicleVirtualWorld(vehicleID, GetPlayerVirtualWorld(otherid));
		}
	}
	else
	{
		SetPlayerPosition(playerid, POS[0], POS[1] + 2, POS[2] + 1, A);
		SetPlayerInterior(playerid, GetPlayerInterior(otherid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherid));
	}
	if(IsInHouse{otherid} != 0)
	{
		IsInHouse{playerid} = 1;
		SetPVarInt(playerid, "LastHouseCP", GetPVarInt(otherid, "LastHouseCP"));
	}
 	if(GetPVarInt(playerid, "HideObjects") == 1)
 	{
 		DeletePVar(playerid, "HideObjects");
 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
 	doingStunt[playerid] = 0;

 	// Send Message
 	format(str, sizeof(str), ""LB_E"You teleported to %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_DARK, str);
	format(str, sizeof(str), ""LB_E"%s(%i) has teleported to you.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_DARK, str);
	format(str, sizeof(str), "4Server:3 %s(%i) has teleported to %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}
CMD:get(playerid, params[]) return cmd_gethere(playerid, params);
CMD:gethere(playerid, params[])
{
	if(pAdmin[playerid] < 1)
		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
		Usage(playerid, "/gethere <ID/Name>");
		return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pSpawned[otherid] == 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) isn't spawned", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(cAFK[otherid] > 10)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is currently AFK!", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(pSpectating[otherid] != -1)
	{
	    format(str, sizeof(str), ""UFF" "GREY2_E"%s(%i) is currently in spectate mode!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY2, str);
		return true;
	}
	format(str, sizeof(str), ""LB_E"%s(%i) has teleported you to himself.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), ""LB_E"You have teleported %s(%i) to yourself.", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) has teleported %s(%i) to themselves", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	GetPlayerPos(playerid, POS[0], POS[1] , POS[2]);
	GetPlayerFacingAngle(playerid, A);

	if(GetPlayerState(otherid) == PLAYER_STATE_DRIVER)
	{
		SetPlayerVehiclePosition(otherid, POS[0], POS[1] +2, POS[2] +1, A);
		LinkVehicleToInterior(GetPlayerVehicleID(otherid), GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(otherid), GetPlayerVirtualWorld(playerid));
	}
	else
	{
		SetPlayerPosition(otherid, POS[0], POS[1] +2, POS[2] +1, A);
		SetPlayerInterior(otherid, GetPlayerInterior(playerid));
	}
	if(InDM[otherid] != 0)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"You have been removed from deathmatch %s.", GetDMName(otherid));
		SendClientMessage(otherid, COLOR_GREY, str);
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has been removed from deathmatch %s.", giveplayer, otherid, GetDMName(otherid));
		SendClientMessage(playerid, COLOR_GREY, str);

		RemovePlayerFromDM(otherid);
		ResetPlayerWeapons(otherid);
		SetPlayerWorldBounds(otherid, 20000.0, -20000.0, 20000.0, -20000.0);
	}
	if(IsInHouse{playerid} != 0)
	{
		IsInHouse{otherid} = 1;
		SetPVarInt(otherid, "LastHouseCP", GetPVarInt(playerid, "LastHouseCP"));
	}
	doingStunt[otherid] = 0;
	SetPlayerVirtualWorld(otherid, GetPlayerVirtualWorld(playerid));
	return true;
}
CMD:bring(playerid, params[])
{
	if(pPremium[playerid] != 1)
		return Error(playerid, "You must be a VIP player to use this command! (Check /vip)");

	if(sscanf(params, "u", otherid))
	{
		Usage(playerid, "/bring <ID/Name>");
		return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");

	if(InDM[playerid] != 0 || InEvent[playerid] != 0 || RaceParticipant[playerid] == true || doingStunt[playerid] != 0)
	{
	    	Error(playerid, "You can't teleport to players while in a DM/Race/Event!");
	    	return true;
	}
	if(pGoTo[otherid] == 1)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has player teleports disabled.", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	if(doingStunt[otherid] != 0)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently doing a challenge and can't be requested!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	if(pJail[otherid] > 0)
	{
		Error(playerid, "Player is currently in jail..");
		return true;
	}
	if(InDM[otherid] != 0 || InEvent[otherid] != 0 || RaceParticipant[otherid] == true)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) is currently in a Race/DM or Event and can't be teleported to you!", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_GREY, str);
		return true;
	}
	if(bounty[otherid] > 0)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) currently has a hit active! You can't /bring him.", pName[otherid], otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	format(str, sizeof(line), "VIP member %s(%i) has requested you to teleport to him\nWould you like to teleport to this player?", pName[playerid], playerid);
	ShowPlayerDialog(otherid, 954, DIALOG_STYLE_MSGBOX, ""LB2_E"Teleport Request", str, "Yes", "No");
	SetPVarInt(otherid, "requestedPlayer", playerid);
	return true;
}


CMD:day(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!"), SendClientMessage(playerid, COLOR_YELLOW, "HELP: "GREY_E"Use /mytime 12 to change your time to daytime");

    SetWorldTime(12);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), "** "RED_E"%s(%i) has changed the time to day.", pName[playerid], playerid);
	else
		format(str, sizeof(str), "** "RED_E"The time has been set to day by an Administrator.");
	SendClientMessageToAll(COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has changed the time to day.", pName[playerid], playerid);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
    foreach(Player, ii)
	{
	    if(pTime[ii] != -1 && pWeather[ii] != -1)
	 	{
			if(pTime[ii] != -1) SetPlayerTime(ii, pTime[ii], 0);
			if(pWeather[ii] != -1) SetPlayerWeather(ii, pWeather[ii]);
			Info(ii, "Your time/weather has been set to your custom settings!");
	 	}
	}
	return true;
}
CMD:dawn(playerid)
{
	if(pAdmin[playerid] < 3)
		return Error(playerid, "Insufficient permissions!");

	SetWorldTime(6);
	SetWeather(1);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), "** "RED_E"%s(%i) has changed the time to dawn.", pName[playerid], playerid);
	else
		format(str, sizeof(str), "** "RED_E"The time has been set to dawn by an Administrator.");
	SendClientMessageToAll(COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has changed the time to dawn.", pName[playerid], playerid);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
    foreach(Player, ii)
	{
	    if(pTime[ii] != -1 && pWeather[ii] != -1)
	 	{
			if(pTime[ii] != -1) SetPlayerTime(ii, pTime[ii], 0);
			if(pWeather[ii] != -1) SetPlayerWeather(ii, pWeather[ii]);
			Info(ii, "Your time/weather has been set to your custom settings!");
	 	}
	}
	return 1;

}
CMD:night(playerid)
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!"), SendClientMessage(playerid, COLOR_YELLOW, "HELP: "GREY_E"Use /mytime 0 to change your time to night.");

    SetWorldTime(0);
    SetWeather(17);
    if(pHidden[playerid] == 0)
		format(str, sizeof(str), "** "RED_E"%s(%i) has changed the time to night.", pName[playerid], playerid);
	else
		format(str, sizeof(str), "** "RED_E"The time has been set to night by an Administrator.");
	SendClientMessageToAll(COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has changed the time to night.", pName[playerid], playerid);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
    foreach(Player, ii)
	{
	    if(pTime[ii] != -1 && pWeather[ii] != -1)
	 	{
			if(pTime[ii] != -1) SetPlayerTime(ii, pTime[ii], 0);
			if(pWeather[ii] != -1) SetPlayerWeather(ii, pWeather[ii]);
			Info(ii, "Your time/weather has been set to your custom settings!");
	 	}
	}
   	return true;
}

CMD:setweather(playerid, params[])
{
	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	new weather;
	if(sscanf(params, "d", weather))
	{
		Usage(playerid, "/setweather <weather ID>");
		return true;
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), "** "RED_E"%s(%i) has changed the weather to: "YELLOW_E"%d", pName[playerid], playerid, weather);
	else
		format(str, sizeof(str), "** "RED_E"The weather has been set to "YELLOW_E"%d "LB_E"by an Administrator.", weather);
	SendClientMessageToAll(COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has changed the weather to: %d", pName[playerid], playerid, weather);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "~y~Weather changed: ~n~~y~%d", weather);
	GameTextForAll(str, 3000, 4);

	SetWeather(weather);
	foreach(Player, ii)
	{
	    if(pTime[ii] != -1 && pWeather[ii] != -1)
	 	{
			if(pTime[ii] != -1) SetPlayerTime(ii, pTime[ii], 0);
			if(pWeather[ii] != -1) SetPlayerWeather(ii, pWeather[ii]);
			Info(ii, "Your time/weather has been set to your custom settings!");
	 	}
	}
	return true;
}

CMD:settime(playerid, params[])
{
	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	new time;
	if(sscanf(params, "d", time))
	{
		Usage(playerid, "/settime <time ID>");
		return true;
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), "** "RED_E"%s(%i) has changed the time to: "YELLOW_E"%d", pName[playerid], playerid, time);
	else
		format(str, sizeof(str), "** "RED_E"The time has been set to "YELLOW_E"%d "LB_E"by an Administrator.", time);
	SendClientMessageToAll(COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has changed the weather to: %d", pName[playerid], playerid, time);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "~y~Time changed: ~n~~w~%d", time);
	GameTextForAll(str, 3000, 4);

	SetWorldTime(time);
	foreach(Player, ii)
	{
	    if(pTime[ii] != -1 && pWeather[ii] != -1)
	 	{
			if(pTime[ii] != -1) SetPlayerTime(ii, pTime[ii], 0);
			if(pWeather[ii] != -1) SetPlayerWeather(ii, pWeather[ii]);
			Info(ii, "Your time/weather has been set to your custom settings!");
	 	}
	}
	return true;
}

CMD:givejetpack(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/givejetpack <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(GetPlayerState(otherid) == PLAYER_STATE_DRIVER)
		return Error(playerid, "Player is in a vehicle and can't be given a jetpack!");

	if(InDM[otherid] != 0)
		return Error(playerid, "Player is currently in a DM!");

  	if(doingStunt[otherid]!= 0)
		return Error(playerid, "You can't give the player a jetpack in his location!");

	format(str, sizeof(str), ""UFF" "GREY_E"You have given %s(%i) a jetpack!", pName[otherid], otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has given you a jetpack!", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_GREY, str);

	SetPlayerSpecialAction(otherid, SPECIAL_ACTION_USEJETPACK);
	return true;
}

CMD:slap(playerid, params[])
{
	if(pAdmin[playerid] < 1)

	    	return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/slap <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	SetPlayerPos(otherid, POS[0], POS[1], POS[2] + 9.0);
	if(IsPlayerInAnyVehicle(otherid)) OnPlayerExitVehicle(otherid, GetPlayerVehicleID(otherid));

	format(str, sizeof(str), ""UFF" "GREY_E"You have slapped %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);

	PlayerPlaySound(otherid, 1130, 0.0, 0.0, 0.0);
	return true;
}

CMD:reward(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	new score, money;
	if(sscanf(params, "uii", otherid, score, money))
	{
	    Usage(playerid, "/reward <ID/Name> <score> <money>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
 	if(otherid == playerid)
        return Error(playerid, "You can't reward yourself!");

	if(score > 20 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't reward more than 20 score!");
	if(score < 1)
		return Error(playerid, "You can't reward anyone less than 1 score!");
  	if(money > 5000000 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't reward more than $5000000!");
	if(money < 1)
		return Error(playerid, "You can't reward anyone less than $1!");

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"[Report Reward] "LB_E"%s(%i) "WHITE_E" has rewarded %s(%i)", pName[playerid], playerid, pName[otherid], otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"[Report Reward] "LB_E"%s(%d) "WHITE_E"has been rewarded by an Administrator.", pName[otherid], otherid);
	SendClientMessageToAll(COLOR_WHITE, str);

	format(str, sizeof(str), "4Server: 2Administrator %s(%d) has rewarded %s(%i)",  pName[playerid], playerid, pName[otherid], otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	SendClientMessage(otherid, COLOR_GREEN, ""UFF" "GREEN_E"You have also received 1 report point!");
	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"Player has also received 1 report point.");
	pReportPoints[otherid]++;
	format(query, sizeof(query), "UPDATE players SET report_points=report_points+1 WHERE reg_id=%d", pRegID[otherid]);
	MySQL_updateQuery(query);
	GivePlayerCash(otherid, money);
	GivePlayerScore(otherid, score);
	GameTextForPlayer(otherid, "~g~~h~Rewarded!", 4000, 5);
	return true;
}

//EVENTREWARD
CMD:ereward(playerid, params[]) return cmd_eventreward(playerid, params);
CMD:eventreward(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	new reason, score, money;
	if(sscanf(params, "uii", otherid, score, money))
	{
	    Usage(playerid, "/eventreward <ID/Name> <score> <money>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
 	if(otherid == playerid)
        return Error(playerid, "You can't reward yourself!");

	if(score > 5 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't reward more than 5 score!");
	if(score < 1)
		return Error(playerid, "You can't reward anyone less than 1 score!");
  	if(money > 5000000 && pAdmin[playerid] != 5)
		return Error(playerid, "You can't reward more than 5 million!");
	if(money < 1)
		return Error(playerid, "You can't reward anyone less than $1!");

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"[Event Reward] "LB_E"Administrator %s(%i) "WHITE_E"has rewarded %s(%i)", pName[playerid], playerid, pName[otherid], otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"[Event Reward] "LB_E"%s(%d) "WHITE_E"has been rewarded by an Administrator", pName[otherid], otherid);
	SendClientMessageToAll(COLOR_WHITE, str);

	format(str, sizeof(str), "4Server: 2Administrator %s(%d) has rewarded %s(%i) [Reason: %s] ",  pName[playerid], playerid, pName[otherid], otherid, reason);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	GivePlayerCash(otherid, money);
	GivePlayerScore(otherid, score);
	pInfo[playerid][pEventsWon]++;
	format(query, sizeof(query), "UPDATE players SET events_won=events_won+1 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	GameTextForPlayer(otherid, "~g~~h~Event Rewarded!", 4000, 5);
	return true;
}


CMD:givecar(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	new sVehicle[32], spawnModel;
	if(sscanf(params, "us[32]", otherid, sVehicle))
	{
	    Usage(playerid, "/givecar <ID/Name> <vehicleID/Name>");
	    return 1;
	}
	if(InDM[otherid] != 0)
	{
	    Error(playerid, "You can't give that player a vehicle while they are in an DM!");
	    return true;
	}
	if(RaceParticipant[otherid] == true)
	{
	    Error(playerid, "You can't give that player a vehicle while they are in race!");
	    return true;
	}
	if(InEvent[otherid] != 0)
	{
	    Error(playerid, "You can't give that player a vehicle while they are in an event!");
	    return true;
	}
	if(!IsNumeric(sVehicle))
	{
	 	spawnModel = GetVehicleModelIDFromName(sVehicle);
	}
	else spawnModel = strval(sVehicle);

	if(spawnModel < 400 || spawnModel > 611 )
	{
		return Error(playerid, "You've entered an invalid vehicle ID/Name!");
	}
    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	format(str, sizeof(str), ""UFF" "YELLOW_E"You have gave %s(%i) a %s.", giveplayer, otherid, vehName[spawnModel - 400]);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	format(str, sizeof(str), ""UFF" "YELLOW_E"%s(%i) has given you a %s.", pName[playerid], playerid, vehName[spawnModel - 400]);
	SendClientMessage(otherid, COLOR_YELLOW, str);

	SpawnPlayerVehicle(otherid, spawnModel, false);
	return true;
}
CMD:caps(playerid, params[])
{
	if(pAdmin[playerid] < 1)

     		return Error(playerid, "Insufficient permissions!");

 	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/caps <ID>");
	    SendClientMessage(playerid, COLOR_YELLOW2, "Function: Will disable caps for the player, type again to enable caps.");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	iTemp = GetTickCount();
	if((iTemp - pLastCapsed[otherid]) < 5000)
	{
		Error(playerid, "Player has recently been caps'd, please wait before using this command on them again.");
		return true;
	}
	pLastCapsed[otherid] = iTemp;

	if(!GetPVarType(otherid, "Caps"))
	{
	    // Disable Caps
	    SetPVarInt(otherid, "Caps", 1);
	    if(pHidden[playerid] == 0)
	    {
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has disabled %s(%i) caps in chat.", pName[playerid], playerid, pName[otherid], otherid);
			format(tmp, sizeof(tmp), ""UFF" "RED_E"%s(%i) has disabled your caps in chat.", pName[playerid], playerid);
		}
		else
		{
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%d) caps have been disabled by an Administrator.", pName[otherid], otherid);
			format(tmp, sizeof(tmp), ""UFF" "RED_E"Your caps has been disabled by an admin.");
		}
		SendClientMessageToAll(COLOR_RED, str);


		SendClientMessage(otherid, COLOR_GREY, tmp);

		format(str, sizeof(str), "4Server: 2%s(%i) has disabled %s(%i) caps in chat.", pName[playerid], playerid, pName[otherid], otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
	    // Enable Caps
		DeletePVar(otherid, "Caps");

		if(pHidden[playerid] == 0)
		{
			format(str, sizeof(str), ""YELLOW_E"** "GREEN_E"%s(%i) has enabled %s(%i) caps in chat.", pName[playerid], playerid, pName[otherid], otherid);
			format(tmp, sizeof(tmp), ""UFF" "GREEN_E"%s(%i) has enabled your caps in chat.", pName[playerid], playerid);
		}
		else
		{
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%d) caps have been enabled by an Administrator.", pName[otherid], otherid);
			format(tmp, sizeof(tmp), ""UFF" "GREEN_E"Your caps have been enabled by an admin.");
		}
		SendClientMessageToAll(COLOR_GREEN, str);


		SendClientMessage(otherid, COLOR_RED, tmp);
		format(str, sizeof(str), "4Server: 2%s(%i) has enabled %s(%i) caps in chat.", pName[playerid], playerid, pName[otherid], otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	return true;
}
CMD:cuff(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/cuff <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	SetPlayerSpecialAction(otherid, SPECIAL_ACTION_CUFFED);
	format(str, sizeof(str), ""UFF" "GREY_E"You have cuffed %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	SendClientMessage(playerid, COLOR_GREY, "Server: "GREY2_E"Type /uncuff to uncuff the player.");
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has cuffed you.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_GREY, str);
	return true;
}
CMD:uncuff(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/uncuff <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
 	SetPlayerSpecialAction(otherid, SPECIAL_ACTION_NONE);
	format(str, sizeof(str), ""UFF" "GREY_E"You have uncuffed %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has uncuffed you.", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_GREY, str);
	return true;
}
CMD:throw(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/throw <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	SetPlayerPos(otherid, POS[0], POS[1], POS[2] + 20.0);
	if(IsPlayerInAnyVehicle(otherid)) OnPlayerExitVehicle(otherid, GetPlayerVehicleID(otherid));

	format(str, sizeof(str), ""UFF" "GREY_E"You have thrown %s(%i).", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);

	PlayerPlaySound(otherid, 1130, 0.0, 0.0, 0.0);
	return true;
}
CMD:givegun(playerid, params[]) return cmd_giveweapon(playerid, params);
CMD:giveweapon(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	new weaponID, weaponName[20],
	    ammo_a;

	if(sscanf(params, "udD(500)", otherid, weaponID, ammo_a))
	{
	    Usage(playerid, "/giveweapon <ID> <Weapon ID> <ammo>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(ammo_a < 0 || ammo_a > 999999)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Invalid ammo provided!");
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

	if(weaponID < 0 && weaponID > 47)
	{
	    if(weaponID == 20)
	    {
			Error(playerid, "Invalid weapon ID provided!");
			return true;
		}
		Error(playerid, "Invalid weapon ID provided!");
		return true;
	}
	GetWeaponName(weaponID, weaponName, sizeof(weaponName));
	if(weaponID == 38 || weaponID == 35 || weaponID == 36)
	{
	    if(pAdmin[otherid] == 0)
	 	{
	    	format(str, sizeof(str), ""RED_E"ERROR: "GREY_E"You can't give out %s to regular players, they will get banned!", weaponName);
			SendClientMessage(playerid, COLOR_GREY, str);
	    	return true;
  		}
	}
	GivePlayerWeapon(otherid, weaponID, ammo_a);


	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) gave you a %s(%d) with %d ammo.", pName[playerid], playerid, weaponName, weaponID, ammo_a);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"You gave %s(%i) a %s(%d) with %d ammo.", giveplayer, otherid, weaponName, weaponID, ammo_a);
	SendClientMessage(playerid, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) gave %s(%i) a %s(%d) with %d ammo.", pName[playerid], playerid, giveplayer, otherid, weaponName, weaponID, ammo_a);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:giveallweapon(playerid, params[])
{
	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	new weaponID, weaponName[20],
	    ammo_a;

	if(sscanf(params, "dd", weaponID, ammo_a))
	{
	    Usage(playerid, "/giveallweapon <Weapon ID> <ammo>");
	    return true;
	}


	if(ammo_a < 0 || ammo_a > 99999)
	{
	    Error(playerid, "Invalid ammo provided!");
	    return true;
	}

	if(weaponID < 0 && weaponID > 47)
	{
	    if(weaponID == 20)
	    {
			Error(playerid, "Invalid weapon ID provided!");
			return true;
		}
		Error(playerid, "Invalid weapon ID provided!");
		return true;
	}

	if(weaponID == 38 || weaponID == 35 || weaponID == 36)
	{
	    Error(playerid, "You can not give out miniguns or rocket launchers!");
	    return true;
	}
	foreach(Player, ii)
	{
		if(InDM[ii] == 0) GivePlayerWeapon(ii, weaponID, ammo_a);
  	}
	GetWeaponName(weaponID, weaponName, sizeof(weaponName));


	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "WHITEP_E"%s(%i) has given everyone a %s with %d ammo.", pName[playerid], playerid, weaponName, ammo_a);
	else
		format(str, sizeof(str), ""YELLOW_E"** "WHITEP_E"An Administrator has given everyone a %s with %d ammo.", weaponName, ammo_a);
	SendClientMessageToAll(COLOR_WHITE, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has given everyone a %s(%d) with %d ammo.", pName[playerid], playerid, weaponName, weaponID, ammo_a);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	//GameTextForAll("~p~HF", 2000, 4);
	return true;
}
CMD:disarmall(playerid, params[])
{
   	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
	{
		if(InDM[ii] == 0) ResetPlayerWeapons(ii);
	}


	if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has disarmed all players outside DM zones.", pName[playerid], playerid);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"All players outside DM zones have been disarmed by an Administrator.");
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has disarmed all players.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	GameTextForAll("~p~Disarmed", 1000, 1);
	return true;
}
CMD:peject(playerid, params[])
{
   	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/peject <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(!IsPlayerInAnyVehicle(otherid))
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't in a vehicle!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	vv = GetVehicleModel(GetPlayerVehicleID(otherid));
	format(str, sizeof(str), ""UFF" "GREY_E"You have successfully ejected %s(%i) from their %s.", giveplayer, otherid, vehName[vv - 400]);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has ejected you from your %s.", pName[playerid], playerid, vehName[vv - 400]);
	SendClientMessage(otherid, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has ejected %s(%i) from %s's %s", pName[playerid], playerid, giveplayer, otherid, giveplayer, vehName[vv - 400]);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);


	RemovePlayerFromVehicle(otherid);
	OnPlayerExitVehicle(otherid, GetPlayerVehicleID(otherid));

	return true;
}

CMD:setskin(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	new skin;
	if(sscanf(params, "ud", otherid, skin))
	{
	    Usage(playerid, "/setskin <ID> <skin ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(GetPlayerSkin(otherid) == skin)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) already uses skin ID %d!", giveplayer, otherid, skin);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

	if(!IsValidSkin(skin))
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Skin %d is an invalid skin!", skin);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}

	new oldskin = GetPlayerSkin(otherid);

	SetPlayerSkin(otherid, skin);

	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) has set your skin to %d (skin before: %d)", pName[playerid], playerid, skin, oldskin);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s skin to %d (skin before: %d)", giveplayer, otherid, skin, oldskin);
	SendClientMessage(playerid, COLOR_GREY, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has set %s(%i)'s skin to %d (skin before: %d)", pName[playerid], playerid, giveplayer, otherid, skin, oldskin);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:sethealth(playerid, params[])
{
    if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	new health;
	if(sscanf(params, "ud", otherid, health))
	{
	    Usage(playerid, "/sethealth <ID> <health>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(health < 0)
	{
	    Error(playerid, "Health can't go below 0!");
		return true;
	}
	if(health > 100)
	{
		Error(playerid, "You can't set anyone's health over 100.");
		return true;
	}

	SetPlayerHealth(otherid, health);
	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s health to %d", giveplayer, otherid, health);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) has set %s(%i)'s health to %d", pName[playerid], playerid, giveplayer, otherid, health);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
    
	return true;
}

CMD:getinfo(playerid, params[]) return cmd_playerinfo(playerid, params);
CMD:pinfo(playerid, params[]) return cmd_playerinfo(playerid, params);
CMD:playerinfo(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/playerinfo <ID>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	format(query, sizeof(query), "SELECT newname FROM namechanges WHERE reg_id=%d", pRegID[otherid]);
	MySQL_query(query, true, "CheckPlayerNames", "ii", playerid, otherid);
	return true;
}

function CheckPlayerNames(playerid, otherid2)
{
	new rows = MySQL_rowCount();
	if(!rows)
	{
	  	line = "No namechanges.";
	}
	else
 	{
 		datez = 0;
	 	line = "";
	 	for(new i = 0; i != rows; i++)
		{
			// Get the name  ache and append it to the dialog content
			MySQL_getString(i, 0, str);
			strcat(line, str);
			datez ++;

			if(datez == 8)
				strcat(line, "\n"), datez = 0;
			else
				strcat(line, ", ");
		}

	}
	new line3[1500], line4[1000];
	new totalcash = (pCash[otherid2] + BankMoney[otherid2]);
	new str9[20],
		str2[40],
		str3[20],
		str4[20],
		str5[20],
  		Float:health,
		Float:armour;

	GetPlayerHealth(otherid2, health);
	GetPlayerArmour(otherid2, armour);
	GetPlayerIp(otherid2, PlayerIP, sizeof(PlayerIP));

	if(GOD[otherid2] == 1)
 	{
		str9 = GREEN_E"[ON]";
	}
	else str9 = RED_E"[OFF]";

	if(speedBoost[otherid2] == 0.0)
 	{
 		str2 = RED_E"[OFF]";
	}
	else format(str2, sizeof(str2), ""GREEN_E"[ON] "WHITE_E"(%0.2f)", speedBoost[otherid2]);

	if(pBounce[otherid2] == 1)
 	{
		str3 = GREEN_E"[ON]";
	}
	else str3 = RED_E"[OFF]";

	if(pSuperJump[otherid2] == 1)
 	{
		str4 = GREEN_E"[ON]";
	}
	else str4 = RED_E"[OFF]";

	if(InDM[otherid2] != 0)
 	{
		str5 = WHITE_E"Yes";
	}
	else str5 = WHITE_E"No";

	format(line4, sizeof(line4), ""WHITEP_E"%s(%d)\n\n"RED_E"IP: "WHITE_E"%s\n"RED_E"Health: "WHITE_E"%.0f% "ORANGE_E"|| "RED_E"Armour: "WHITE_E"%.0f%\n"RED_E"Total Cash: "LG_E"$%s\n"RED_E"Godmode: %s\n"RED_E"Speedboost: %s "ORANGE_E"|| "RED_E"Bounce: %s "ORANGE_E"|| "RED_E"SuperJump: %s", pName[otherid2], otherid2, PlayerIP, health, armour, ToCurrency(totalcash), str9, str2, str3, str4);
	strcat(line3, line4);

	format(line4, sizeof(line4), "\n"RED_E"In DM: %s\n"RED_E"Virtual World: "WHITE_E"%d\n"RED_E"Last Online: "WHITE_E"%s\n"RED_E"Previous Names: "WHITE_E"%s\n"RED_E"Report Points: "WHITE_E"%d\n\n"YELLOW_E"* Type /stats to view public player info.", str5, GetPlayerVirtualWorld(otherid2), pLastDate[otherid2], line, pReportPoints[otherid2]);
	strcat(line3, line4);

	format(str, sizeof(str), ""WHITE_E"Player Info: %s(%d)", pName[otherid2], otherid2);
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, str, line3, "OK", "");
	return 1;
}

CMD:playerweapons(playerid, params[]) return cmd_pweaps(playerid, params);
CMD:pweaps(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if (sscanf(params, "u", otherid))
	{
        Usage(playerid, "/pweaps <ID/Name>");
        SendClientMessage(playerid, COLOR_ORANGE, "FUNCTION: Will check the selected player's weapons.");
        return 1;
    }

    if(otherid == INVALID_PLAYER_ID) return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "Showing a list of %s(%i)'s weapons:", giveplayer, otherid);
	SendClientMessage(playerid, COLOR_GREY, str);

	line[0] = EOS;
	new weapons_processed[1 char],
		weapons_total[1 char],

		weapon_id, weapon_tmp[20],
		ammo, weapon_ammo[5];

	for(new i = 1; i != 12; i++)
	{
		GetPlayerWeaponData(otherid, i, weapon_id, ammo);

		if(!weapon_id) continue;

		weapons_processed{0} ++;
		weapons_total{0} ++;

		GetWeaponName(weapon_id, weapon_tmp, sizeof(weapon_tmp));

		if(ammo < 0) weapon_ammo = "MAX";
		else valstr(weapon_ammo, ammo);

		format(tmp, sizeof(tmp), ""GREEN_E"%s(%s){FFFFFF}%s", weapon_tmp, weapon_ammo, (i != 11 ? (", ") : ("")));
		strcat(line, tmp);

		if(weapons_processed{0} == 4)
		{
			SendClientMessage(playerid, COLOR_WHITE, line);
			weapons_processed{0} = 0, line[0] = EOS;
		}
	}

	if(weapons_total{0} == 0)
	{
		SendClientMessage(playerid, COLOR_GREY2, "This player has no weapons.");
	}
	else if(1 <= weapons_processed{0} <= 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, line);
	}
	return true;
}

CMD:gmx(playerid, params[])
{
    if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	format(str, sizeof(str), ""arrow"%s(%i) has restarted the server, please wait...", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_GREY, str);
	
	SendRconCommand("gmx");
	return true;
}

CMD:vehiclex(playerid, params[])
{
    if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	new action[12], id;
	if(sscanf(params, "s[25]D(-1)", action, id))
	{
	    Usage(playerid, "/vehiclex <destroy / respawn> (optional: <ID/Name>)");
	    return true;
	}

	if(id == -1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        id = GetPlayerVehicleID(playerid);
		}
		else
		{
		    Usage(playerid, "/vehiclex <destroy / respawn> (optional: <ID/Name>)");
	    	return true;
		}
	}

	if(!strcmp(action, "destroy", true))
	{
		format(str, sizeof(str), "Server: "GREY_E"Vehicle %s(%d) has been destroyed.", vehName[GetVehicleModel(id) - 400], id);
		SendClientMessage(playerid, COLOR_RED, str);

		DestroyVehicle(id);
	}
	else if(!strcmp(action, "respawn", true))
	{
		format(str, sizeof(str), "Server: "GREY_E"Vehicle %s(%d) has been set to respawn.", vehName[GetVehicleModel(id) - 400], id);
		SendClientMessage(playerid, COLOR_RED, str);

		SetVehicleToRespawn(id);
	}
	else
	{
	    Usage(playerid, "/vehiclex <destroy / respawn> (optional: <ID/Name>)");
	}
	return true;
}

CMD:fakemsg(playerid, params[])
{
    if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[128]", otherid, tmp))
	{
	    Usage(playerid, "/fakemsg <ID/Name> <message>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(pAdmin[otherid] == 5)
		return Error(playerid, "You can't fake messages of the Executive Administrator!");

    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	format(str, sizeof(str), ""RED_E"FAKE-MSG: "GREY_E"%s(%i): %s", giveplayer, otherid, tmp);
	SendAdminMessage(COLOR_GREY, str);

	OnPlayerText(otherid, tmp);
	
	return true;
}
CMD:fakeban(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[128]", otherid, tmp))
	{
	    Usage(playerid, "/fakeban <ID/Name> <reason>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(pAdmin[otherid] > pAdmin[playerid])
	    return Error(playerid, "You are not able to fake ban a admin with a higher level than you!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has banned %s(%i) "RED_E""RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);
	//if(Iter_Count(Player) > 50)
	//{
		SendDeathMessage(INVALID_PLAYER_ID, otherid, 201);
	//}
	BanPlayerMSG(otherid, playerid, tmp);
	SendClientMessage(otherid, COLOR_LB, "Server closed the connection.");
	return true;
}

CMD:fakeme(playerid, params[])
{
    if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[90]", otherid, tmp))
	{
	    Usage(playerid, "/fakeme <ID/Name> <message>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(pAdmin[otherid] == 5)
		return Error(playerid, "You can't fake /me of a level 5 administrator!");

	if(strlen(tmp) > 124)
		return Error(playerid, "Message too long!");

	if(tmp[0] == ' ')
		return Usage(playerid, "/fakeme <ID/Name> <message>");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	cmd_ame(otherid, tmp);

	format(str, sizeof(str), ""RED_E"FAKE-/ME: "GREY_E"%s(%i): %s", giveplayer, otherid, tmp);
	SendClientMessage(playerid, COLOR_GREY, str);
	return true;
}
CMD:fakepm(playerid, params[])
{
    if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	new player1, player2;
	if(sscanf(params, "uus[128]", player1, player2, tmp))
	{
	    Usage(playerid, "/fakepm <player1> <player2> <message>");
	    return true;
	}

	if(player1 == INVALID_PLAYER_ID)
		return Error(playerid, "Player 1 not connected!");
	if(player2 == INVALID_PLAYER_ID)
		return Error(playerid, "Player 2 not connected!");

	if(pAdmin[player1] == 5 || pAdmin[player2] == 5)
		return Error(playerid, "You can't fake PM's of the Executive Administrator!");

	format(str, sizeof(str), ""RED_E"FAKE-PM: "GREY_E"%s(%i) -> %s(%i): %s", pName[player1], player1, pName[player2], player2, tmp);
	SendAdminMessage(COLOR_GREY, str);

	SendPlayerPM(player1, player2, tmp);
	return true;
}
CMD:sendmoney(playerid, params[]) return cmd_givemoney(playerid, params);
CMD:givecash(playerid, params[]) return cmd_givemoney(playerid, params);
CMD:gc(playerid, params[]) return cmd_givemoney(playerid, params);
CMD:pay(playerid, params[]) return cmd_givemoney(playerid, params);
CMD:givemoney(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	new money;
	if(sscanf(params, "ud", otherid, money))
	{
	    Usage(playerid, "/givemoney <ID/Name> <amount>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

 	if(otherid == playerid)
		return Error(playerid, "You can't send yourself money!");
	if(pCash[playerid] < money)
		return Error(playerid, "You don't have enough money to send!");
	if(money > 5000000 && pAdmin[playerid] == 0)
		return Error(playerid, "You can't send more than $5,000,000 at once!");
	if(money < 1)
		return Error(playerid, "You can't send anyone less than $1!");

	format(tmp, sizeof(tmp), ""WHITEP_E"Are you sure you want to send %s(%d) "GREEN_E"$"WHITE_E"%s?", pName[otherid], otherid, ToCurrency(money));
	ShowPlayerDialog(playerid, 994, DIALOG_STYLE_MSGBOX, ""GREEN_E"Send Money", tmp, "Send", "Cancel");

	SetPVarInt(playerid, "gcAmount", money);
	SetPVarInt(playerid, "gcPlayer", otherid);

	return true;
}


CMD:takemoney(playerid, params[])
{

	if(pAdmin[playerid] < 5) return Error(playerid, "Insufficient permissions!");
	new money;
	if(sscanf(params, "ud", otherid, money))
	{
	    Usage(playerid, "/takemoney <ID/Name> <amount>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

 	if(money > pCash[otherid])
		return Error(playerid, "Player doesn't have enough money to deduct from!");

 	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GivePlayerCash(otherid, -money);

	format(str, sizeof(str), ""UFF" "RED_E"You have removed "GREEN_E"$%s "RED_E"from %s(%i)", ToCurrency(money), giveplayer, otherid);
	SendClientMessage(playerid, COLOR_RED, str);
	format(str, sizeof(str), ""UFF" "RED_E"%s(%i) has taken away "GREEN_E"$%s "RED_E"from you.", pName[playerid], playerid, ToCurrency(money));
	SendClientMessage(otherid, COLOR_RED, str);
	format(str, sizeof(str), "4Server:3%s(%i) has taken $%s from %s(%i)", pName[playerid], playerid, ToCurrency(money), giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:setscore(playerid, params[])
{
   	if(pAdmin[playerid] < 5) return Error(playerid, "Insufficient permissions!");

	new score;
	if(sscanf(params, "ud", otherid, score))
	{
	    Usage(playerid, "/setscore <ID/Name> <score>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pScore[otherid] = score;
	SetPlayerScore(otherid, pScore[otherid]);

	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s score to %d", giveplayer, otherid, score);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your score to %d", pName[playerid], playerid, score);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s score to %d", pName[playerid], playerid, giveplayer, otherid, score);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "%d", score);
	
	return true;
}
CMD:setkills(playerid, params[])
{
	if(pAdmin[playerid] < 5) return Error(playerid, "Insufficient permissions!");

	new kills;
	if(sscanf(params, "ud", otherid, kills))
	{
	    Usage(playerid, "/setkills <ID/Name> <kills>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pInfo[otherid][pKills] = kills;
	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s kills to %d", giveplayer, otherid, kills);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your kills to %d", pName[playerid], playerid, kills);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s kills to %d", pName[playerid], playerid, giveplayer, otherid, kills);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "%d", kills);
	
	return true;
}
CMD:setdeaths(playerid, params[])
{
   	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	new kills;
	if(sscanf(params, "ud", otherid, kills))
	{
	    Usage(playerid, "/setdeaths <ID/Name> <deaths>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pInfo[otherid][pDeaths] = kills;
	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s deaths to %d", giveplayer, otherid, kills);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your deaths to %d", pName[playerid], playerid, kills);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s deaths to %d", pName[playerid], playerid, giveplayer, otherid, kills);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "%d", kills);
	
	return true;
}
CMD:sethours(playerid, params[])
{
   	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	new kills;
	if(sscanf(params, "ud", otherid, kills))
	{
	    Usage(playerid, "/sethours <ID/Name> <hours>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pTotalHours[otherid] = kills;
	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s hours to %d", giveplayer, otherid, kills);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your hours to %d", pName[playerid], playerid, kills);
	SendClientMessage(otherid, COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s hours to %d", pName[playerid], playerid, giveplayer, otherid, kills);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "%d", kills);
	
	return true;
}
CMD:setcash(playerid, params[]) return cmd_setmoney(playerid, params);
CMD:setmoney(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new money;
	if(sscanf(params, "ud", otherid, money))
	{
	    Usage(playerid, "/setmoney <ID/Name> <money>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	ResetPlayerCash(otherid);
	GivePlayerCash(otherid, money);

	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s money to $%s", giveplayer, otherid, ToCurrency(money));
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your money to $%s", pName[playerid], playerid, ToCurrency(money));
	SendClientMessage(otherid, COLOR_GREY, str);

   	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s money to $%s", pName[playerid], playerid, giveplayer, otherid, ToCurrency(money));
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "$%d", money);
	
	return true;
}
CMD:setgbs(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new gbs;
	if(sscanf(params, "ud", otherid, gbs))
	{
	    Usage(playerid, "/setgbs <ID/Name> <gbs>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pGBs[otherid] = 0;
	GivePlayerGB(otherid, gbs);

	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s gbs to %s", giveplayer, otherid, ToCurrency(gbs));
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your gbs to %s", pName[playerid], playerid, ToCurrency(gbs));
	SendClientMessage(otherid, COLOR_GREY, str);

   	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s gbs to %s", pName[playerid], playerid, giveplayer, otherid, ToCurrency(gbs));
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "%d", gbs);
	
	return true;
}

CMD:setgangscore(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new score;
	if(sscanf(params, "s[25]d", tmp, score))
	{
	    Usage(playerid, "/setgangscore <Gang Name> <Score>");
	    return true;
	}

	format(query, sizeof(query), "SELECT gID FROM groups WHERE gName='%s'", tmp);
	MySQL_query(query, false, "UpdateGScore", "isi", playerid, tmp, score);
	
	return true;
}



CMD:gcolor(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(pGroupID[playerid] == -1) return Error(playerid, "You are not in a gang!");
	if(pGroupRank[playerid] < 5) return Error(playerid, "You must be the atlease gang co-founder to change the gang color!");

	if(sscanf(params, "iii", hour, minute, second) || !(0 <= hour <= 255) || !(0 <= minute <= 255) || !(0 <= second <= 255))
	{
		Usage(playerid, "/gcolor <R> <G> <B>");
	}
	else
	{
		if(hour < 10 && minute < 10 && second < 10)
		{
			Error(playerid, "RGB values under 10 are not allowed!");
			return true;
		}
		datez = COLOR_RGB(hour, minute, second, 99);
		format(str, sizeof(str), "Server: Your gang color has been changed to %d-%d-%d in RGB", hour, minute, second);
		SendClientMessage(playerid, COLOR_IVORY, str);

		pGcolor[playerid] = datez;
		format(query, sizeof(query), "UPDATE groups SET gColor=%d WHERE gID=%d", pGcolor[playerid],pGroupID[playerid]);
		MySQL_updateQuery(query);
	}
	return true;
}
function UpdateGScore(playerid, gName[], gScore)
{
 	if(!MySQL_rowCount())
 	{
 	    Error(playerid, "This gang does not exist.");
 	}
 	else
 	{

		format(query, sizeof(query), "UPDATE groups SET gScore=%d WHERE gName='%s'", gScore, gName);
		MySQL_updateQuery(query);

		format(str, sizeof(str), ""UFF" "GREY_E"You have set %s's gang score to %d.", gName, gScore);
		SendClientMessage(playerid, COLOR_GREY, str);

	   	format(str, sizeof(str), "4Server:3 %s(%i) set %s's gang score to %d", pName[playerid], playerid, gName, gScore);
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	}
	return 1;
}

function UpdateGCar(playerid, gCar)
{
 	if(!MySQL_rowCount())
 	{
 	    Error(playerid, "This group does not exist.");
 	}
 	else
 	{
		format(query, sizeof(query), "UPDATE groups SET gCar = %d WHERE gID = %d", pGroupCar[playerid], pGroupID[playerid]);
		MySQL_updateQuery(query);
		format(str, sizeof(str), ""UFF" "WHITE_E"You have set your gang vehcile");
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	return 1;
}

function UpdateGColor(playerid, gColor)
{
 	if(!MySQL_rowCount())
 	{
 	    Error(playerid, "This group does not exist.");
 	}
 	else
 	{
		format(query, sizeof(query), "UPDATE groups SET gColor=%d WHERE gID=%d", pGcolor[playerid], pGroupID[playerid]);
		MySQL_updateQuery(query);
	}
	return 1;
}

/*CMD:osetcash(playerid, params[])
{
	if(pAdmin[playerid] < 4)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new player[24], money;
	if(sscanf(params, "s[24]d", player, money))
	{
	    Usage(playerid, "/setmoney <name> <money>");
	    return true;
	}


	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			Error(playerid, "Player is online, you can use /setcash on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT ip FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnOBanQueryData", "issi", playerid, escaped_player, tmp, datez);
	return true;
}

forward OnOBanQueryData(adminid, NameToBan[], banReason[], banTime);
public OnOBanQueryData(adminid, NameToBan[], banReason[], banTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "[ERROR] "GREY_E"Account '%s' does not exist.", NameToBan);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	else
	{
		MySQL_getString(0, 0, PlayerIP);
		if(banTime != 0)
	    {
			banTime = gettime() + (datez * 86400);
            format(str, sizeof(str), "** "RED_E"You have temp-banned %s (IP: %s) from the server.", NameToBan, PlayerIP);
			SendClientMessage(adminid, COLOR_YELLOW, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has temp-banned %s from the server.", pName[adminid], adminid, NameToBan);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			if(pHidden[adminid] == 0)
				format(str, sizeof(str), "** "RED_E"%s(%i) has temp-banned %s from the server.", pName[adminid], adminid, NameToBan);
			else
			    format(str, sizeof(str), "** "RED_E"%s has been temp-banned by an Administrator.", pName[adminid], adminid, NameToBan);
			SendClientMessageToAll(COLOR_YELLOW, str);
		}
		else
		{
			format(str, sizeof(str), "- AS - "RED_E"You have banned %s (IP: %s) from the server.", NameToBan, PlayerIP);
			SendClientMessage(adminid, COLOR_YELLOW, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has banned %s from the server.", pName[adminid], adminid, NameToBan);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			if(pHidden[adminid] == 0)
				format(str, sizeof(str), "- AS - "RED_E"%s(%i) has banned %s from the server.", pName[adminid], adminid, NameToBan);
			else
			    format(str, sizeof(str), "- AS - "RED_E"%s has been banned by an Administrator.", pName[adminid], adminid, NameToBan);
			SendClientMessageToAll(COLOR_YELLOW, str);
		}

		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), %d)", NameToBan, PlayerIP, pName[adminid], banReason, banTime);
		MySQL_updateQuery(query);
	}
	return true;
}
*/
CMD:setbcash(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new money;
	if(sscanf(params, "ud", otherid, money))
	{
	    Usage(playerid, "/setbcash <ID/Name> <money>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	BankMoney[otherid] = money;
	format(query, sizeof(query), "UPDATE players SET bmoney=%d WHERE reg_id=%d", money, pRegID[otherid]);
	MySQL_updateQuery(query);

	format(str, sizeof(str), ""UFF" "GREY_E"You have set %s(%i)'s bank money to $%s", giveplayer, otherid, ToCurrency(money));
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), ""UFF" "GREY_E"%s(%i) set your bank money to $%s", pName[playerid], playerid, ToCurrency(money));
	SendClientMessage(otherid, COLOR_GREY, str);

   	format(str, sizeof(str), "4Server:3 %s(%i) set %s(%i)'s bank money to $%s", pName[playerid], playerid, giveplayer, otherid, ToCurrency(money));
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(tmp, sizeof(tmp), "$%d", money);
	
	return true;
}

CMD:eventkick(playerid, params[])
{
	if(pAdmin[playerid] < 3)

	    	return Error(playerid, "Insufficient permissions!");

	if(EventGoingOn == 0)
		return Error(playerid, "There is no event active!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/eventkick <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(InEvent[otherid] == 0) return Error(playerid, "Player is not in an event!");
	{
		TogglePlayerControllable(otherid, 1);
		SetPlayerWorldBounds(otherid, 20000.0, -20000.0, 20000.0, -20000.0);
		if(CageFightOn == 1)
			NumEventPlayers--;
   		else
	   		DerbyPlayers--;
        InEvent[otherid] = 0;
        InDerby[otherid] = 0;
        if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has kicked %s(%i) from the event", pName[playerid], playerid, giveplayer, otherid);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been kicked from the event by an Administrator.", giveplayer, otherid);
		SendClientMessageToAll(COLOR_RED, str);
		format(str, sizeof(str), "4Server:3 %s(%i) has kicked %s(%i) from the event", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		ResetPlayerWeapons(otherid);
		GameTextForPlayer(otherid, " ", 500, 6);
		LoadPlayerPosition(otherid);
		TogglePlayerControllable(otherid, 1);
		DeletePVar(otherid, "DerbyVeh");
		SetTimer("EndEventCheck", 1000, 0);
  		SetTimer("EndDerbyCheck", 2000, 0);
		SendClientMessage(otherid, COLOR_RED, ""UFF" "GREY_E"You have been kicked from the event by an admin!");
	}
	return true;
}

CMD:kick(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[80]", otherid, tmp))
	{
	    Usage(playerid, "/kick <ID/Name> <reason>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been removed from the server.");
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	if(strlen(tmp) > 80)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has kicked %s(%i) "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been kicked by an Administrator. "RED_E"[Reason: %s]", giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has kicked %s(%i) [Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	GameTextForPlayer(otherid, "~r~~h~Kicked!", 4000, 5);
	SetPVarInt(otherid, "pRemoved", 1);
	// Update DB
	AddKickLogEntry(otherid, giveplayer, PlayerIP, playerid, tmp);
	
	KickEx(otherid);
	return true;
}
CMD:eclipsekick(playerid, params[])
{
	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[70]", otherid, tmp))
	{
	    Usage(playerid, "/chumkick <ID/Name> <reason>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been removed from the server.");
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"Nancy has kicked %s(%i) "RED_E"[Reason: %s]", giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has kicked %s(%i) [Reason: %s]", giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	GameTextForPlayer(otherid, "~r~~h~Kicked!", 4000, 5);
	SetPVarInt(otherid, "pRemoved", 1);

	KickEx(otherid);
	return true;
}
CMD:skick(playerid, params[]) return cmd_silentkick(playerid, params);
CMD:silentkick(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[70]", otherid, tmp))
	{
	    Usage(playerid, "/silentkick <ID/Name> <reason>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));


	format(str, sizeof(str), ""YELLOW_E"* ADMIN-MSG: "RED_E"%s(%i) has kicked %s(%i) "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
 	SendAdminMessage(COLOR_RED, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has kicked %s(%i) [Reason: %s]", giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "Server: You have been kicked by %s(%i). "RED_E"[Reason: %s]", pName[playerid], playerid, tmp);
 	SendClientMessage(otherid, COLOR_RED, str);
	GameTextForPlayer(otherid, "~r~~h~Kicked!", 4000, 5);

	// Update DB
	AddKickLogEntry(otherid, giveplayer, PlayerIP, playerid, tmp);
	
	KickEx(otherid);
	return true;
}
CMD:gangwarn(playerid, params[]) return cmd_gwarn(playerid, params);
CMD:gwarn(playerid, params[])
{
	if(pGroupID[playerid] == -1) return Error(playerid, "You are not in a gang!");
  	if(pGroupRank[playerid] < 5) return Error(playerid, "You must be atleast co-founder to warn gang members!");

	if(sscanf(params, "us[70]", otherid, tmp))
	{
	    Usage(playerid, "/gwarn <ID/Name> <reason>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
    if(pGroupID[otherid] != pGroupID[playerid]) return Error(playerid, "This player is not in your gang!");

	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), ""GANG" %s(%i) has been warned by %s(%i)[Reason: %s]", giveplayer, otherid, pName[playerid], playerid, tmp);
	SendGroupMessage(playerid, COLOR_WHITE, line);

	format(line, sizeof(line), ""GANG" You have been warned by %s(%d). Reason: %s", pName[playerid], playerid, tmp);
	ShowPlayerDialog(otherid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"Gang Warn", line, "Close", "");
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	return true;
}
CMD:gangtransfer(playerid, params[]) return cmd_gtransfer(playerid, params);
CMD:gtransfer(playerid, params[])
{
	if(pGroupID[playerid] == -1) return Error(playerid, "You are not in a gang!");
  	if(pGroupRank[playerid] != 6) return Error(playerid, "You must be the gang founder to change the gang name!");

	if(sscanf(params, "u[70]", otherid))
	{
	    Usage(playerid, "/gtransfer <ID/Name>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
    if(pGroupID[otherid] != pGroupID[playerid]) return Error(playerid, "This player is not in your gang!");


	format(str, sizeof(str), ""GANG" %s(%i) has been transfered his gang foundership to %s(%i)", pName[playerid], playerid, pName[otherid], otherid);
	SendGroupMessage(playerid, COLOR_WHITE, line);
// setting the other id to rank founder//============
	format(query, sizeof(query), "UPDATE players SET group_rank=6 WHERE reg_id=%d", pRegID[otherid]);
	MySQL_updateQuery(query);
	format(query, sizeof(query), "UPDATE groups SET gFounder = '%s' WHERE gID=%d", pName[otherid], pGroupID[otherid]);
	MySQL_updateQuery(query);
	//===============================
	//=========== Update the founder to co-founder
	format(query, sizeof(query), "UPDATE players SET group_rank=5 WHERE reg_id=%d", pRegID[playerid]);
	MySQL_updateQuery(query);
	
	return true;
}
CMD:warn(playerid, params[])
{
	if(pAdmin[playerid] < 1)

			return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[70]", otherid, tmp))
	{
	    Usage(playerid, "/warn <ID/Name> <reason>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
	if(GetPVarInt(otherid, "JustWarned")) return Error(playerid, "Player has just recently been warned..");
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server: 2%s(%i) has warned %s(%i) for: %s", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has warned %s(%i) "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been warned by an Administrator. "RED_E"[Reason: %s]", giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	SendClientMessage(otherid, COLOR_GREY, ""RED_E"Server: "GREY2_E"You have been warned by an administrator, read the /rules, too many warnings will result in a kick or ban!");
	format(line, sizeof(line), "You have been warned by %s(%d). Reason: %s\nRead and abide the rules otherwise you will be punished further.", pName[playerid], playerid, tmp);
	ShowPlayerDialog(otherid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"WARNED", line, "Close", "");
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	pWarns[otherid] ++;
	pWarns2[otherid] ++;
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	SetPVarInt(otherid, "JustWarned", 1);
	SetTimerEx("ResetWarning", 10000, false, "i", otherid);
	format(query, sizeof(query), "UPDATE players SET warns=warns+1 WHERE reg_id=%d", pRegID[otherid]);
	MySQL_updateQuery(query);
	if(pWarns[otherid] >= 3)
	{
		format(str, sizeof(str), "4Server: %s(%i) has been kicked for excessive warnings.", giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
		format(str, sizeof(str), ""RED_E"Server: "GREY_E"%s(%i) has been kicked for excessive warnings.", giveplayer, otherid);
		SendClientMessageToAll(COLOR_GREY, str);
		KickEx(otherid);
		return true;
	}
	if(pWarns2[otherid] >= 50)
	{
		BanPlayerMSG(otherid, playerid, "excessive warnings");
		if(pLogged[otherid] == true)
		{
	  		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', 'Server Ban', 'Excessive Warnings', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP);
		}
		else format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s__', '%s', 'Server Ban', 'Excessive Warnings', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP);
		MySQL_updateQuery(query);
		KickEx(otherid);
	}
	return true;
}

CMD:ban(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions! Take poofs and report to higher admins");

	if(sscanf(params, "us[80]", otherid, tmp))
	{
	    Usage(playerid, "/ban <ID/Name> <reason>");
	   	return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(otherid == playerid)
 		return Error(playerid, "You are not able to ban yourself!");
	if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been banned from the server.");
	if(pAdmin[otherid] > pAdmin[playerid])
	{
		format(str, sizeof(str), "** "RED_E"%s(%i) has just tried to ban you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREY2, str);
 		Error(playerid, "You are not able to ban a admin with a higher level than you!");
 		return true;
   	}
   	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	SetPVarInt(otherid, "pRemoved", 1);
	if(strlen(tmp) > 80)
	{
	    Error(playerid, "Reason can't be longer than 80 characters!");
	    return true;
	}
	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";
	else if(!strcmp(tmp, "rh", true)) tmp = "Ram Hacks";
	else if(!strcmp(tmp, "ah", true)) tmp = "Ammo Hacks";

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has banned %s(%i) "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been banned by an Administrator. "RED_E"[Reason: %s]", giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has banned %s(%i) 1[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	BanPlayerMSG(otherid, playerid, tmp);
	if(pLogged[otherid] == true)
	{
  		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	}
	else format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s__', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	MySQL_updateQuery(query);
	KickEx(otherid);
	return true;

}
CMD:eclipseban(playerid, params[])
{
	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[60]", otherid, tmp))
	{
	    Usage(playerid, "/chumban <ID/Name> <reason>");
	   	return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(otherid == playerid)
 		return Error(playerid, "You are not able to ban yourself!");
	if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been removed from the server.");
	if(pAdmin[otherid] > pAdmin[playerid])
	{
		format(str, sizeof(str), "** "RED_E"%s(%i) has just tried to ban you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREY2, str);
 		Error(playerid, "You are not able to ban a admin with a higher level than you!");
 		return true;
   	}
   	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	SetPVarInt(otherid, "pRemoved", 1);
	if(strlen(tmp) > 70)
	{
	    Error(playerid, "Reason can't be longer than 70 characters!");
	    return true;
	}
	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";
	else if(!strcmp(tmp, "rh", true)) tmp = "Ram Hacks";
	else if(!strcmp(tmp, "ah", true)) tmp = "Ammo Hacks";

	format(str, sizeof(str), ""YELLOW_E"** "RED_E"Eclipse has banned %s(%i) "RED_E"[Reason: %s]", giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has banned %s(%i) 1[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	BanPlayerMSG(otherid, playerid, tmp);

	if(pLogged[otherid] == true)
	{
  		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	}
	else format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s__', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	MySQL_updateQuery(query);
	KickEx(otherid);
	return true;
}
CMD:sban(playerid, params[]) return cmd_silentban(playerid, params);
CMD:silentban(playerid, params[])
{
	if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions! Take poofs and report to higher admins");

	if(sscanf(params, "us[60]", otherid, tmp))
	{
	    Usage(playerid, "/silentban <ID/Name> <reason>");
	   	return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(otherid == playerid)
 		return Error(playerid, "You are not able to ban yourself!");
	if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been removed from the server.");
	if(pAdmin[otherid] > pAdmin[playerid])
	{
		format(str, sizeof(str), "** "RED_E"%s(%i) has just tried to ban you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREY2, str);
 		Error(playerid, "You are not able to ban a admin with a higher level than you!");
 		return true;
   	}
   	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	SetPVarInt(otherid, "pRemoved", 1);

	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";


	format(str, sizeof(str), "* ADMIN-MSG: "RED_E"%s(%i) has banned %s(%i) "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	SendAdminMessage(COLOR_YELLOW, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has banned %s(%i) 1[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	BanPlayerMSG(otherid, playerid, tmp);
	if(pLogged[otherid] == true)
	{
  		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	}
	else format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s__', '%s', '%s', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, pName[playerid], tmp);
	MySQL_updateQuery(query);
	KickEx(otherid);
	return true;
}
CMD:tban(playerid, params[]) return cmd_tempban(playerid, params);
CMD:tempban(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	new ban_time;
	if(sscanf(params, "uds[60]", otherid, datez, tmp))
	{
	    Usage(playerid, "/tempban <ID/Name> <time (in days)> <reason> ");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
 	if(ban_time < 0) Error(playerid, "Please input a valid ban time.");
	if(otherid == playerid)
	    return Error(playerid, "You are not able to ban yourself!");
    if(GetPVarInt(otherid, "pRemoved")) return Error(playerid, "Player has already been removed from the server.");
	if(pAdmin[otherid] > pAdmin[playerid])
	{
		format(str, sizeof(str), "** "RED_E"%s(%i) has just tried to ban you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_GREY2, str);
 		Error(playerid, "You are not able to ban a admin with a higher level than you!");
 		return true;
   	}
   	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));

	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";
	else if(!strcmp(tmp, "rh", true)) tmp = "Ram Hacks";
	else if(!strcmp(tmp, "ah", true)) tmp = "Ammo Hacks";
    SetPVarInt(otherid, "pRemoved", 1);
	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has temp-banned %s(%i) for %d days. "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, datez, tmp);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been temp-banned by an Administrator for %d days. "RED_E"[Reason: %s]", giveplayer, otherid, datez, tmp);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) has temp-banned %s(%i) for %d days. 1[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, datez, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	BanPlayerMSG(otherid, playerid, tmp);
 	if(datez != 0)
    {
		format(str, sizeof(str), ""RED_E"Server: "GREY2_E"This is a "RED_E"TEMP-BAN "GREY2_E"that will last for %d days.", datez);
		SendClientMessage(otherid, COLOR_GREY2, str);
	}
	ban_time = gettime() + (datez * 86400);
	if(pLogged[otherid] == true)
	{
		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), %d)", giveplayer, PlayerIP, pName[playerid],  tmp, ban_time);
	}
	else format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s__', '%s', '%s', '%s', UNIX_TIMESTAMP(), %d)", giveplayer, PlayerIP, pName[playerid], tmp, ban_time);
	MySQL_updateQuery(query);
	KickEx(otherid);
	return true;
}


CMD:offlineban(playerid, params[]) return cmd_oban(playerid, params);
CMD:oban(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	new player[24];
	if(sscanf(params, "s[24]D(0)s[50]", player, datez, tmp))
	{
	    Usage(playerid, "/oban <ban name> <time in days (0 for permanent ban)> <reason>");
	    SendClientMessage(playerid, COLOR_YELLOW2, "FUNCTION: Will ban a player while he is offline. If time isn't specified it will be a perm ban.");
	    return true;
	}
	if(strlen(tmp) > 50) return Error(playerid, "Reason must be shorter than 50 characters.");

	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			Error(playerid, "Player is online, you can use /ban on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT ip FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnOBanQueryData", "issi", playerid, escaped_player, tmp, datez);
	return true;
}

forward OnOBanQueryData(adminid, NameToBan[], banReason[], banTime);
public OnOBanQueryData(adminid, NameToBan[], banReason[], banTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "[ERROR] "GREY_E"Account '%s' does not exist.", NameToBan);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	else
	{
		MySQL_getString(0, 0, PlayerIP);
		if(banTime != 0)
	    {
			banTime = gettime() + (datez * 86400);
            format(str, sizeof(str), "** "RED_E"You have temp-banned %s (IP: %s) from the server.", NameToBan, PlayerIP);
			SendClientMessage(adminid, COLOR_YELLOW, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has temp-banned %s from the server.", pName[adminid], adminid, NameToBan);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			if(pHidden[adminid] == 0)
			format(str, sizeof(str), "** "RED_E"%s(%i) has temp-banned %s from the server.", pName[adminid], adminid, NameToBan);
			else
			format(str, sizeof(str), "** "RED_E"%s has been temp-banned by an Administrator.", NameToBan);
			SendClientMessageToAll(COLOR_YELLOW, str);
		}
		else
		{
			format(str, sizeof(str), "** "RED_E"You have banned %s (IP: %s) from the server.", NameToBan, PlayerIP);
			SendClientMessage(adminid, COLOR_YELLOW, str);
			format(str, sizeof(str), "4Server:3 %s(%i) has banned %s from the server.", pName[adminid], adminid, NameToBan);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			if(pHidden[adminid] == 0)
			format(str, sizeof(str), "** "RED_E"%s(%i) has banned %s from the server.", pName[adminid], adminid, NameToBan);
			else
			format(str, sizeof(str), "** "RED_E"%s has been banned by an Administrator.", NameToBan);
			SendClientMessageToAll(COLOR_YELLOW, str);
		}

		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s', UNIX_TIMESTAMP(), %d)", NameToBan, PlayerIP, pName[adminid], banReason, banTime);
		MySQL_updateQuery(query);
	}
	return true;
}

CMD:unban(playerid, params[])
{
   	if(pAdmin[playerid] < 4)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "s[24]", tmp))
	{
	    Usage(playerid, "/unban <ban name>");
	    return true;
	}
	new escaped_tmp[24];
	mysql_real_escape_string(tmp, escaped_tmp);

	format(query, sizeof(query), "SELECT user_banned,bIP FROM bans WHERE user_banned = '%s'", escaped_tmp);
	MySQL_query(query, true, "OnUnbanQueryData", "is", playerid, escaped_tmp);
	return true;
}

CMD:freeze(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/freeze <ID/Name>");
	    return true;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	TogglePlayerControllable(otherid, false);
	Freezed[otherid] = true;

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has frozen %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been frozen by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has frozen %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:aka(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/aka <ID/Name>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");
        
	if(pAdmin[otherid] == 5)
 	{
  		Error(playerid, "You can't AKA the Executive Administrator!");
  		format(str, 90, "*** "RED_E"%s(%i) tried to AKA you!", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_YELLOW, str);
  		return 1;
    }
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	format(query, sizeof(query), "SELECT name FROM players WHERE IP='%s'", PlayerIP);
	MySQL_query(query, true, "CheckPlayerIP", "is", playerid, PlayerIP);
	return true;
}

function CheckPlayerIP(playerid, zplayerIP[])
{
	new rows = MySQL_rowCount();
	if(!rows)
	{
  		Error(playerid, "No other accounts from this IP!");
	}
	else
 	{
 		datez = 0;
 		line = "";
 		format(line, sizeof(line), "Names matching IP: %s:\n\n", zplayerIP);
 		for(new i = 0; i != rows; i++)
		{
			// Get the name  ache and append it to the dialog content
			MySQL_getString(i, 0, str);
			strcat(line, str);
			datez ++;

			if(datez == 5)
				strcat(line, "\n"), datez = 0;
			else
				strcat(line, "\t\t");
		}

		tmp = "{ACB5BA}Aliases for {70CAFA}", strcat(tmp, zplayerIP);
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, tmp, line, "Close", "");
	}
	return 1;
}

CMD:akaip(playerid, params[])
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/akaip <IP>");
		return true;
	}

	format(query, sizeof(query), "SELECT name FROM players WHERE IP='%s'", params);
	MySQL_query(query, true, "CheckPlayerIP2", "is", playerid, params);
	return true;
}

function CheckPlayerIP2(playerid, zplayerIP[])
{
	new rows = MySQL_rowCount();
	if(!rows)
	{
		Error(playerid, "No other accounts from this IP!");
	}
	else
 	{
 		datez = 0;
 		line = "";
 		format(line, sizeof(line), "Names matching IP: %s:\n\n", zplayerIP);
 		for(new i = 0; i != rows; i++)
		{
			// Get the name from the cache and append it to the dialog content
			MySQL_getString(i, 0, str);
			strcat(line, str);
			datez ++;

			if(datez == 5)
				strcat(line, "\n"), datez = 0;
			else
				strcat(line, "\t\t");
		}

		tmp = "{ACB5BA}Aliases for {70CAFA}", strcat(tmp, zplayerIP);
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, tmp, line, "Close", "");
	}
	return 1;
}
CMD:unfreeze(playerid, params[])
{
    if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/unfreeze <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	TogglePlayerControllable(otherid, true);
	Freezed[otherid] = false;

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has unfrozen %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been unfrozen by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server:3 %s(%i) has unfrozen %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}
CMD:tgc(playerid) return cmd_togglegc(playerid);
CMD:togglegc(playerid)
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");
	if(pInfo[playerid][pSeeGC] == 0)
	{
	    pInfo[playerid][pSeeGC] = 1;
		GameTextForPlayer(playerid,"~y~See GC: ~n~~g~ON~y~",3000,3);
	}
	else
	{
	    pInfo[playerid][pSeeGC] = 0;
		GameTextForPlayer(playerid,"~y~see gc: ~n~~r~Off~y~",3000,3);
	}
	format(query, sizeof(query), "UPDATE players SET seegc=%d WHERE reg_id=%d", pInfo[playerid][pSeeGC], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
CMD:listensong(playerid) return cmd_hearsong(playerid);
CMD:hearsong(playerid)
{

	if(pInfo[playerid][pHearSong] == 0)
	{
	    pInfo[playerid][pHearSong] = 1;
		GameTextForPlayer(playerid,"~y~Hear Song: ~n~~g~ON~y~",3000,3);
	}
	else
	{
	    pInfo[playerid][pHearSong] = 0;
	    StopAudioStreamForPlayer(playerid);
		GameTextForPlayer(playerid,"~y~Hear Song: ~n~~r~Off~y~",3000,3);
	}
	format(query, sizeof(query), "UPDATE players SET songs=%d WHERE reg_id=%d", pInfo[playerid][pHearSong], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
CMD:viplogin(playerid) return cmd_viploginmsg(playerid);
CMD:viploginmsg(playerid)
{
	if(pPremium[playerid] != 1)
	    return Error(playerid, "You must be a VIP to use this option! (/vip)");


	if(pInfo[playerid][pVipLogin] == 0)
	{
	    pInfo[playerid][pVipLogin] = 1;
		GameTextForPlayer(playerid,"~y~Vip Login: ~n~~g~ON~y~",3000,3);
	}
	else
	{
	     pInfo[playerid][pVipLogin] = 0;
		GameTextForPlayer(playerid,"~y~Vip Login: ~n~~r~Off~y~",3000,3);
	}
	format(query, sizeof(query), "UPDATE players SET VIPLOGIN=%d WHERE reg_id=%d", pInfo[playerid][pVipLogin], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
CMD:seepms(playerid)
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(pInfo[playerid][pSeePMs] == 0)
	{
	    pInfo[playerid][pSeePMs] = 1;
		GameTextForPlayer(playerid,"~y~See Pms: ~n~~g~ON~y~",3000,3);
	}
	else
	{
	    pInfo[playerid][pSeePMs] = 0;
		GameTextForPlayer(playerid,"~y~See Pms: ~n~~r~OFF~y~",3000,3);
	}
	format(query, sizeof(query), "UPDATE players SET seepms=%d WHERE reg_id=%d", pInfo[playerid][pSeePMs], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
/*CMD:seewhisper(playerid)
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(pInfo[playerid][pSeeWhisper] == 0)
	{
	    pInfo[playerid][pSeeWhisper] = 1;
		SendClientMessage(playerid, COLOR_GREEN, ""UFF" "LG_E"You have enabled 'See Whispers' feature.");
	}
	else
	{
	    pInfo[playerid][pSeeWhisper] = 0;
		SendClientMessage(playerid, COLOR_RED, ""UFF" "RED_E"You have disabled 'See Whispers' feature.");
	}
	format(query, sizeof(query), "UPDATE players SET seewhisper=%d WHERE reg_id=%d", pInfo[playerid][pSeeWhisper], pRegID[playerid]);
	MySQL_updateQuery(query);
	return true;
}*/
CMD:hitsound(playerid)
{
    
	if(pInfo[playerid][phitsound] == 0)
	{
	    pInfo[playerid][phitsound] = 1;
		GameTextForPlayer(playerid,"~y~HITSOUND: ~n~~g~ON~y~",3000,3);
	}
	else
	{
	    pInfo[playerid][phitsound] = 0;
		GameTextForPlayer(playerid,"~y~HITSOUND ~n~~r~OFF~y~",3000,3);
	}
	format(query, sizeof(query), "UPDATE players SET hitsound=%d WHERE reg_id=%d", pInfo[playerid][phitsound], pRegID[playerid]);
	MySQL_updateQuery(query);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return true;
}
CMD:makeadmin(playerid, params[]) return cmd_setlevel(playerid, params);
CMD:setlevel(playerid, params[])
{
	if(pAdmin[playerid] < 5)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");

	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    Usage(playerid, "/setlevel <ID/Name> <level 0 - 5>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(alevel > 5)
		return Error(playerid, "Level can't be higher than 5!");
	if(alevel < 0)
		return Error(playerid, "Level can't be lower than 0!");
	if(pAdmin[playerid] == 5)
	{
		if(alevel > 5)
			return Error(playerid, "You can't promote yourself or other players to owner as an head admin.");
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(pAdmin[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d!", giveplayer, otherid, alevel);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	new levelstr[50];
	levelstr = (alevel > pAdmin[otherid]) ? ("~g~~h~promoted") : ("~r~~h~demoted");


	switch(alevel)
	{
	    case 0:
		{
			tmp = "Regular Player";
			pHidden[otherid] = 0;
   			format(query, sizeof(query), "UPDATE players SET hidden=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			if(admin3D[otherid] != Text3D:-1) DestroyDynamic3DTextLabel(admin3D[otherid]);
		}
	   	case 1: tmp = "LEVEL 1";
		case 2: tmp = "LEVEL 2";
		case 3: tmp = "LEVEL 3";
		case 4: tmp = "LEVEL 4";
		case 5: tmp = "LEVEL 5";
	}

	format(query, sizeof(query), "UPDATE players SET adminlevel=%d WHERE reg_id=%d", alevel, pRegID[otherid]);
	MySQL_updateQuery(query);
	
    format(str, sizeof(str), ""SBLUE_E"Administrator %s(%i) has set you to Admin Status [%s]", pName[playerid], playerid, tmp);
    SendClientMessage(otherid, COLOR_BLUE, str);


    format(str, sizeof(str), ""SBLUE_E"You have set %s(%i)'s Admin Status [%s]", pName[playerid], playerid, tmp);
    SendClientMessage(playerid, COLOR_BLUE, str);
    
	pAdmin[otherid] = alevel;
	format(str, sizeof(str), ""SBLUE_E"Administrator %s(%i) has made %s(%i) %s", pName[playerid], playerid,  giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_SBLUE, str);
	format(str, sizeof(str), "4Server: 2Executive Administrator %s(%i) has %s %s(%i) to %s.", pName[playerid], playerid, levelstr, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(tmp, sizeof(tmp), "~y~~h~Admin Status ~n~%s", levelstr);
	GameTextForPlayer(otherid, tmp, 3500, 4);
	
    return true;
}
CMD:makemapper(playerid, params[])
{
	if(pAdmin[playerid] < 5) return Error(playerid, "Insufficient permissions!");

	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    Usage(playerid, "/makemapper <ID/Name> <0/1>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(alevel > 1)
		return Error(playerid, "Level can't be higher than 1!");
	if(alevel < 0)
		return Error(playerid, "Level can't be lower than 0!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(Mapper[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d!", giveplayer, otherid, alevel);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	switch(alevel)
	{
	    case 0:
		{
			format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"%s(%i) has removed %s(%d)'s Mapper status.", pName[playerid], playerid, giveplayer, otherid);
			SendClientMessageToAll(COLOR_SBLUE, str);
			format(str, sizeof(str), "4Server: 2%s(%i) has removed %s(%d)'s Mapper status.", pName[playerid], playerid, giveplayer, otherid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			DestroyDynamic3DTextLabel(mapper3D[playerid]);
		}
	   	case 1:
	   	{
	   		format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"%s(%i) has given %s(%d) Mapper status.", pName[playerid], playerid, giveplayer, otherid);
			SendClientMessageToAll(COLOR_SBLUE, str);
			format(str, sizeof(str), "4Server: 2%s(%i) has given %s(%d) Mapper status.", pName[playerid], playerid, giveplayer, otherid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	   	}

	}

	format(query, sizeof(query), "UPDATE players SET mapper=%d WHERE reg_id=%d", alevel, pRegID[otherid]);
	MySQL_updateQuery(query);

	Mapper[otherid] = alevel;
    return true;
}

CMD:setvip(playerid, params[]) return cmd_givepremium(playerid, params);
CMD:makevip(playerid, params[]) return cmd_givepremium(playerid, params);
CMD:givepremium(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    Usage(playerid, "/givepremium <ID/Name> <level 0-1>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(alevel > 1)
		return Error(playerid, "Level can't be higher than 1!");
	if(alevel < 0)
		return Error(playerid, "Level can't be lower than 0!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(pPremium[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d premium!", giveplayer, otherid, alevel);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(alevel == 1)
	{
		format(str, sizeof(str), ""LB_E"%s(%i) set you as a premium member", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_LB, str);
		format(str, sizeof(str), ""UFF" "LB_E"%s(%i) has given premium membership status to %s(%i) for donating!", pName[playerid], playerid, giveplayer, otherid);
		SendClientMessageToAll(COLOR_LB, str);

		format(str, sizeof(str), "4Server: 2%s(%i) has given VIP status to %s(%i)", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		BankMoney[playerid] += 5000000;
		pPremium[otherid] = 1;
		format(query, sizeof(query), "UPDATE players SET premium=1,v_expired=0 WHERE reg_id=%d", pRegID[otherid]);
		MySQL_updateQuery(query);
		format(tmp, sizeof(tmp), "~y~~h~Premium Status ~n~~g~~h~~h~Received");
        GameTextForPlayer(otherid, tmp, 3500, 4);
        
        format(tmp, sizeof(tmp), "~y~~h~%s recived VIP status for donating", pName[otherid]);
        GameTextForAll(tmp, 3500, 4);


	}
	else
	{
	    format(str, sizeof(str), ""LB_E"%s(%i) has removed your premium membership.", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_LB, str);
		format(str, sizeof(str), ""UFF" "LG_E"%s(%i) "LB_E"has removed "LG_E"%s(%i) "LB_E"premium membership.", pName[playerid], playerid, giveplayer, otherid);
		SendClientMessageToAll(COLOR_LB, str);

		format(str, sizeof(str), "4Server: 2%s(%i) has removed %s(%i) premium membership", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(query, sizeof(query), "UPDATE players SET premium=0,v_expired=0,chat_color=0,id_color=0,speedboost=1.3 WHERE reg_id=%d", pRegID[otherid]);
		MySQL_updateQuery(query);
		SetPlayerArmour(otherid, 0.0);
		pChatColor[otherid] = 0;
		pIDColor[otherid] = 0;
		pPremium[otherid] = 0;
		if(speedBoost[otherid] != 0.0) speedBoost[otherid] = 1.3;
		format(tmp, sizeof(tmp), "~y~~h~Premium Status ~n~~r~~h~revoked");
        GameTextForPlayer(otherid, tmp, 3500, 4);
	}
	return true;
}
CMD:givetemppremium(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	new alevel, dayz;
	if(sscanf(params, "udd", otherid, alevel, dayz))
	{
	    Usage(playerid, "/givetemppremium <ID/Name> <level 3> <days>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(alevel > 1)
		return Error(playerid, "Level can't be higher than 1!");
	if(alevel < 0)
		return Error(playerid, "Level can't be lower than 0!");
	if(dayz > 31)
		return Error(playerid, "Days can't be longer than one month.");
	if(dayz < 0)
		return Error(playerid, "Days can't be lower than 0.");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(pPremium[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d premium!", giveplayer, otherid, alevel);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	iTemp = gettime() + 86400 * dayz;
	if(alevel == 3)
	{
		format(str, sizeof(str), ""UFF" "LB_E"%s(%i) set you as a "YELLOW_E"VIP "LB_E"for %d days.", pName[playerid], playerid, dayz);
		SendClientMessage(otherid, COLOR_LB, str);
		format(str, sizeof(str), ""RED_E"** "LG_E"%s(%i) "LB_E"has given "YELLOW_E"VIP "LB_E"status to "LG_E"%s(%i) "LB_E"for %d days.", pName[playerid], playerid, giveplayer, otherid, dayz);
		SendClientMessageToAll(COLOR_LB, str);

		format(str, sizeof(str), "4Server: 2%s(%i) has given VIP status to %s(%i) for %d days.", pName[playerid], playerid, giveplayer, otherid, dayz);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		InfoTD_MSG(otherid, 4500, "~g~~h~You have received VIP membership!");
	}
	else if(alevel > 0)
	{
		format(str, sizeof(str), ""UFF" "LB_E"%s(%i) set you to a premium member (Level: %d) for %d days.", pName[playerid], playerid, alevel, dayz);
		SendClientMessage(otherid, COLOR_LB, str);
		format(str, sizeof(str), ""RED_E"** "LG_E"%s(%i) "LB_E"has given premium membership to "LG_E"%s(%i) "GREY_E"(Level %d) "LB_E"for %d days.", pName[playerid], playerid, giveplayer, otherid, alevel, dayz);
		SendClientMessageToAll(COLOR_LB, str);

		format(str, sizeof(str), "4Server: 2%s(%i) has given premium membership to %s(%i) (Level %d)", pName[playerid], playerid, giveplayer, otherid, alevel, dayz);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		InfoTD_MSG(otherid, 4500, "~y~~h~You have received premium membership!");
	}
	else
	{
	    format(str, sizeof(str), ""UFF" "LB_E"%s(%i) has removed your premium membership.", pName[playerid], playerid);
		SendClientMessage(otherid, COLOR_LB, str);
		format(str, sizeof(str), ""RED_E"** "LG_E"%s(%i) "LB_E"has removed "LG_E"%s(%i) "LB_E"premium membership.", pName[playerid], playerid, giveplayer, otherid);
		SendClientMessageToAll(COLOR_LB, str);

		format(str, sizeof(str), "4Server: 2%s(%i) has removed %s(%i) premium membership", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		InfoTD_MSG(otherid, 4000, "~r~~h~Your premium membership has been revoked!");
	}
	format(query, sizeof(query), "UPDATE players SET premium=%d,v_expired=%d WHERE reg_id=%d", alevel, iTemp, pRegID[otherid]);
	MySQL_updateQuery(query);
	pPremium[otherid] = alevel;
	premiumExpired[otherid] = iTemp;
	return true;
}
CMD:setname(playerid, params[])
{
    if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "is[20]", otherid, tmp))
	{
	   	Usage(playerid, "/setname <ID/Name> <newname>");
	    return true;
	}
	if(pLogged[otherid] == false)
		return Error(playerid, "Player not logged in!");

	if(!IsPlayerConnected(otherid))
		return Error(playerid, "Player not connected!");
 	if(strlen(tmp) < 4) return Error(playerid, "New name can't be shorter than 4 characters!");
	if(strlen(tmp) > 20) return Error(playerid, "New name can't be longer than 20 characters!");

	if(!IsValidName(tmp)) return Error(playerid, "Name contains invalid characters, please doublecheck!");

	format(query, sizeof(query), "SELECT name FROM players WHERE name='%s'", tmp);
	MySQL_query(query, true, "a_ChangePlayerName", "iis", otherid, playerid, tmp);
	return true;
}
// SetName Callback
function a_ChangePlayerName(otherplayer, playerid, nname[])
{
	if(!MySQL_rowCount())
	{
		new oldname[24], newname[24];
		GetPlayerName(otherplayer, oldname, sizeof(oldname));
		format(query, sizeof(query), "UPDATE players SET name='%s' WHERE reg_id=%d", nname, pRegID[otherplayer]);
		MySQL_updateQuery(query);
		format(str, sizeof(str), "4Server:3 %s(%d) has changed %s's name to '%s'", pName[playerid], playerid, oldname, nname);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(str, sizeof(str), ""UFF" "LB2_E"%s(%d) has changed your name to \"%s\".", pName[playerid], playerid, nname);
		SendClientMessage(otherplayer, COLOR_LB, str);
		Info(otherplayer, "Make sure you log in with this new name on your next connect!");
		format(str, sizeof(str), "** "LB2_E"You have changed %s(%d) name to \"%s\".", oldname, otherplayer, nname);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		SetPlayerName(otherplayer, nname);
		GetPlayerName(otherplayer, newname, sizeof(newname));
		pName[otherplayer] = newname;
		// Private Vehicle
		if(BoughtVehicle[otherplayer] == true)
		{
			format(query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", newname, oldname);
			MySQL_updateQuery(query);
			PlayerInfoVeh[playerid][Owner] = newname;
		}
		// House
		foreach(Houses, h)
		{
			if(!strcmp(hInfo[h][HouseOwner], oldname, CASE_SENSETIVE))
   			{
   			    // Has House
   			    format(hInfo[h][HouseOwner], 24, "%s", newname);
          		format(query, sizeof(query), "UPDATE houses SET howner='%s' WHERE house_id=%d", newname, h);
				MySQL_updateQuery(query);
				UpdateHouseText(h);
			}
		}
		
		foreach(new i : Business)
	    {
		if(!strcmp(BusinessData[i][Owner], oldname, CASE_SENSETIVE))
		{
		    //  House
		    format(BusinessData[i][Owner], 24, "%s", newname);
      		format(query, sizeof(query), "UPDATE business SET Owner='%e' WHERE ID='%d'", newname, i);
			MySQL_updateQuery(query);
			Business_UpdateLabel(i);
		}
		}
		if(PurchasedToy[otherplayer] == true)
		{
			format(query, sizeof(query), "UPDATE toys SET Name='%s' WHERE Name='%s'", newname, oldname);
			MySQL_updateQuery(query);
		}
		// Update group founder
		if(pGroupRank[otherplayer] == 6)
		{
			format(query, sizeof(query), "UPDATE groups SET gFounder='%s' WHERE gFounder='%s'", newname, oldname);
			MySQL_updateQuery(query);
		}
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), ""GREY2_E"ERROR: "GREY_E"The name "DARK_E"'%s' "GREY_E"already exists in the database, please use a different name!", nname);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
    return true;
}

CMD:nick(playerid, params[]) return cmd_changename(playerid, params);
CMD:namechange(playerid, params[]) return cmd_changename(playerid, params);
CMD:changename(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 ||  InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
   	if(pLogged[playerid] == false)
		return Error(playerid, "You must be logged in to change your name!");

	if(pTotalHours[playerid] < 3)
		return Error(playerid, "You must have at least 3 hours ingame to change your nick!");

	if(sscanf(params, "s[20]", tmp))
	{
	   	Usage(playerid, "/changename <newname>");
	    return true;
	}
	if(strlen(tmp) < 4) return Error(playerid, "New name can't be shorter than 4 characters!");
	if(strlen(tmp) > 20) return Error(playerid, "New name can't be longer than 20 characters!");
	if(!IsValidName(tmp)) return Error(playerid, "Name contains invalid characters, please doublecheck!");

	format(query, sizeof(query), "SELECT name FROM players WHERE name='%s'", tmp);
 	MySQL_query(query, true, "ChangePlayerName", "is", playerid, tmp);
	return true;
}
function ChangePlayerName(playerid, nname[])
{
	if(!MySQL_rowCount())
	{
	    // Proceed to check if players name has been changed today
		format(query, sizeof(query), "SELECT namechange_date FROM players WHERE name='%s'", pName[playerid]);
		MySQL_query(query, true, "ChangePlayerName2", "is", playerid, nname);
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), ""GREY2_E"ERROR: "GREY_E"The name "DARK_E"'%s' "GREY_E"already exists in the database, please use a different name!", nname);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
}

function ChangePlayerName2(playerid, nname[])
{
	if(MySQL_rowCount())
	{
		new cNameDate = MySQL_getInt(0, 0);

		if(cNameDate < gettime())
		{
			if(pPremium[playerid] > 0)
			{
				iTemp = gettime() + 86400 * 7; // VIP 7 days Cooldown
			}
  			else iTemp = gettime() + 86400 * 15; // Player 13 days Cooldown
			new oldname[24], newname[24];
			GetPlayerName(playerid, oldname, sizeof(oldname));

			format(query, sizeof(query), "UPDATE players SET name='%s', namechange_date=%d WHERE reg_id=%d", nname, iTemp, pRegID[playerid]);
			MySQL_updateQuery(query);

			format(str, sizeof(str), "4Server:3 %s(%d) has changed their name to %s.", pName[playerid], playerid, nname);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			format(str, sizeof(str), ""LB_E"Server: "LIME_E"%s(%d) has changed their name to '%s'.", pName[playerid], playerid, nname);
			SendClientMessageToAll(COLOR_WHITEP, str);

			format(str, sizeof(str), ""UFF" "LB2_E"You have changed your name to '%s'", nname);
			SendClientMessage(playerid, COLOR_LB, str);
			Info(playerid, "Make sure you log in with this new name on your next connect!");

			SetPlayerName(playerid, nname);
			GetPlayerName(playerid, newname, sizeof(newname));
			pName[playerid] = newname;
			// Private Vehicle
			if(BoughtVehicle[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", newname, oldname);
				MySQL_updateQuery(query);
				PlayerInfoVeh[playerid][Owner] = newname;
			}
			// House
			foreach(Houses, h)
			{
				if(!strcmp(hInfo[h][HouseOwner], oldname, CASE_SENSETIVE))
	   			{
	   			    // Has House
	   			    format(hInfo[h][HouseOwner], 24, "%s", newname);
	          		format(query, sizeof(query), "UPDATE houses SET howner='%s' WHERE house_id=%d", newname, h);
					MySQL_updateQuery(query);
					UpdateHouseText(h);
				}
			}
			foreach(new i : Business)
			{
			    if(!strcmp(BusinessData[i][Owner], oldname, CASE_SENSETIVE))
			    {
		     	    // Has business
	   			    format(BusinessData[i][Owner], 24, "%s", newname);
	          		format(query, sizeof(query), "UPDATE business SET Owner='%e' WHERE ID=%d", newname, i);
					MySQL_updateQuery(query);
					Business_UpdateLabel(i);
			    }
			}
			if(PurchasedToy[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE toys SET Name='%s' WHERE Name='%s'", newname, oldname);
				MySQL_updateQuery(query);
			}
			// Update group founder
			if(pGroupRank[playerid] == 6)
   			{
				format(query, sizeof(query), "UPDATE groups SET gFounder='%s' WHERE gFounder='%s'", newname, oldname);
				MySQL_updateQuery(query);
			}
			format(query, sizeof(query), "UPDATE racetimes SET holder='%s' WHERE holder='%s'", newname, oldname);
			MySQL_updateQuery(query);

			// Log the namechange
			format(query, sizeof(query), "INSERT INTO namechanges(reg_id,oldname,newname,time) VALUES(%d,'%s','%s',UNIX_TIMESTAMP())", pRegID[playerid], newname, oldname);
			MySQL_updateQuery(query);
		}
   		else
   		{
		   	localtime(cNameDate, tmParam);
			strftime(tmp, sizeof(tmp), "%d/%m/%Y", tmParam);
			new nstring[900];
			if(pPremium[playerid] == 0)
  		 	{
  		 		format(nstring, sizeof(nstring), "\n"RED_E"Namechange is not possible\n\n"WHITE_E"Namechange cooldown: 15\nNext namechange: %s\nCurrent Name: %s", tmp, pName[playerid]);
  			}
			else  format(nstring, sizeof(nstring), "\n"RED_E"Namechange is not possible\n\n"WHITE_E"Namechange cooldown: 7\nNext namechange: %s\nCurrent Name: %s", tmp, pName[playerid]);
			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""UFF" "YELLOW_E"::"WHITE_E" Namechange ", nstring, "OK", "");
   		}
	}
	return true;
}

function ChangePlayerName_cShop(playerid, nname[])
{
	if(!MySQL_rowCount())
	{
	        new oldname[24], newname[24];
			GetPlayerName(playerid, oldname, sizeof(oldname));
            format(str, sizeof(str), ""UFF" "WHITEP_E"%s(%d) has purchased a name change for 650 gbs!", pName[playerid], playerid);
			SendClientMessageToAll(COLOR_WHITEP, str);
	    	format(str, sizeof(str), "4Server:3 %s(%d) has changed their name to %s.", pName[playerid], playerid, nname);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			format(str, sizeof(str), ""LB_E"Server: "LIME_E"%s(%d) has changed their name to '%s'.", pName[playerid], playerid, nname);
			SendClientMessageToAll(COLOR_WHITEP, str);

            format(query, sizeof(query), "UPDATE players SET name='%s' WHERE reg_id=%d", nname, pRegID[playerid]);
			MySQL_updateQuery(query);
			format(str, sizeof(str), ""UFF" "LB2_E"You have changed your name to '%s'", nname);
			SendClientMessage(playerid, COLOR_LB, str);
			Info(playerid, "Make sure you log in with this new name on every connect!");

			SetPlayerName(playerid, nname);
			GetPlayerName(playerid, newname, sizeof(newname));
			pName[playerid] = newname;
			// Private Vehicle
			if(BoughtVehicle[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", newname, oldname);
				MySQL_updateQuery(query);
				PlayerInfoVeh[playerid][Owner] = newname;
			}
			// House
			foreach(Houses, h)
			{
				if(!strcmp(hInfo[h][HouseOwner], oldname, CASE_SENSETIVE))
	   			{
	   			    // Has House
	   			    format(hInfo[h][HouseOwner], 24, "%s", newname);
	          		format(query, sizeof(query), "UPDATE houses SET howner='%s' WHERE house_id=%d", newname, h);
					MySQL_updateQuery(query);
					UpdateHouseText(h);
				}
			}
			foreach(new i : Business)
		    {
			if(!strcmp(BusinessData[i][Owner], oldname, CASE_SENSETIVE))
			{
			    //  House
			    format(BusinessData[i][Owner], 24, "%s", newname);
	      		format(query, sizeof(query), "UPDATE business SET Owner='%e' WHERE ID='%d'", newname, i);
				MySQL_updateQuery(query);
				Business_UpdateLabel(i);
			}
			}
			if(PurchasedToy[playerid] == true)
			{
				format(query, sizeof(query), "UPDATE toys SET Name='%s' WHERE Name='%s'", newname, oldname);
				MySQL_updateQuery(query);
			}
			// Update group founder
			if(pGroupRank[playerid] == 6)
   			{
				format(query, sizeof(query), "UPDATE groups SET gFounder='%s' WHERE gFounder='%s'", newname, oldname);
				MySQL_updateQuery(query);
			}
			format(query, sizeof(query), "UPDATE racetimes SET holder='%s' WHERE holder='%s'", newname, oldname);
			MySQL_updateQuery(query);

			// Log the namechange
			format(query, sizeof(query), "INSERT INTO namechanges(reg_id,oldname,newname,time) VALUES(%d,'%s','%s',UNIX_TIMESTAMP())", pRegID[playerid], newname, oldname);
			MySQL_updateQuery(query);
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), ""RED_E"[ERROR] This name already exists in the database, please use a different name!", nname);
		SendClientMessage(playerid, COLOR_GREY, str);
		ShowPlayerDialog(playerid, GC_DIALOG+4, DIALOG_STYLE_INPUT, ""WHITE_E"Change Name", "Enter your new name:", "Enter", "Exit");
	}
}

CMD:mute(playerid, params[])
{
 	if(pAdmin[playerid] < 1)

     		return Error(playerid, "Insufficient permissions!");

	new reason[60], timeSec;
	if(sscanf(params, "uD(180)S(*)[40]", otherid, timeSec, reason))
	{
	    Usage(playerid, "/mute <ID/Name> (optional: <time in seconds> <reason>)");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(pMute[otherid] > 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is already muted (mute lifted in %d seconds)", giveplayer, otherid, pMute[otherid]);
	    SendClientMessage(playerid, COLOR_RED, str);
	    SendClientMessage(playerid, COLOR_WHITE, "HINT: /unmute <ID/Name> to unmute");
	    return true;
	}

	if(reason[0] != '*' && strlen(reason) > 40)
	{
	 	Error(playerid, "Reason too long! Must be smaller than 40 characters!");
	   	return true;
	}
	if(timeSec < 10 || timeSec > 600)
	{
	    if(pAdmin[playerid] != 5)
	    {
 			Error(playerid, "Mute time must remain between 10 and 600 seconds");
	    	return true;
   		}
	}

	pMute[otherid] = timeSec;

	if(reason[0] == '*')
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) muted %s(%i) for %d seconds.", pName[playerid], playerid, giveplayer, otherid, timeSec);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been muted by an Administrator for %d seconds.", giveplayer, otherid, timeSec);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) muted %s(%i) (%d seconds)", pName[playerid], playerid, giveplayer, otherid, timeSec);
	}
	else
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) muted %s(%i) for %d seconds. "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been muted by an Administrator for %d seconds. "RED_E"[Reason: %s]", giveplayer, otherid, timeSec, reason);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) muted %s(%i) for %d seconds. [Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
	}
	SendClientMessageToAll(COLOR_RED, str);

	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	
	return true;
}


CMD:omute(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	new player[24];
	if(sscanf(params, "s[24]ds[50]", player, datez, tmp))
	{
	    Usage(playerid, "/omute <name> <time in seconds)> <reason>");
	    SendClientMessage(playerid, COLOR_YELLOW2, "FUNCTION: Will mute a player while he is offline. Time will start when he comes in game.");
	    return true;
	}
	if(strlen(tmp) > 50) return Error(playerid, "Reason must be shorter than 50 characters.");
	if(datez < 10 || datez > 1000)
	{
 		if(pAdmin[playerid] != 5)
   		{
			Error(playerid, "Mute time must remain between 10 and 1000 seconds");
  			return true;
   		}
	}
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			Error(playerid, "Player is online, you can use /mute on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT reg_id FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnOMuteQueryData", "issi", playerid, escaped_player, tmp, datez);
	return true;
}

function OnOMuteQueryData(adminid, NameToMute[], muteReason[], muteTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "[ERROR] "GREY_E"Account '%s' does not exist.", NameToMute);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	else
	{
	    new RegID;
		RegID = MySQL_getInt(0, 0);
		format(str, sizeof(str), "** "RED_E"You have muted %s for %d seconds. (Mute will take affect as soon as player logs in)", NameToMute, muteTime);
		SendClientMessage(adminid, COLOR_YELLOW, str);
		format(str, sizeof(str), "4Server:3 %s(%i) has offline muted %s for %d seconds (Reason: %s)", pName[adminid], adminid, NameToMute, muteTime, muteReason);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		if(pHidden[adminid] == 0)
			format(str, sizeof(str), "** "RED_E"%s(%i) has offline muted %s for %d seconds. "RED_E"[Reason: %s]", pName[adminid], adminid, NameToMute, muteTime, muteReason);
		else
  			format(str, sizeof(str), "** "RED_E"%s has been offline muted by an Administrator for %d seconds. "RED_E"[Reason: %s]", NameToMute, muteTime, muteReason);
		SendClientMessageToAll(COLOR_YELLOW, str);

		format(query, sizeof(query), "UPDATE players SET Muted=%d WHERE reg_id=%d", muteTime, RegID);
		MySQL_updateQuery(query);
	}
	return true;
}

CMD:blockcmds(playerid, params[])
{
   	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	new reason[60], timeSec;
	if(sscanf(params, "uD(180)S(*)[40]", otherid, timeSec, reason))
	{
	    Usage(playerid, "/blockcmds <ID/Name> (optional: <time in seconds> <reason>)");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(pBlocked[otherid] > 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is already has his commands blocked (block lifted in %d seconds)", giveplayer, otherid, pBlocked[otherid]);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	if(reason[0] != '*' && strlen(reason) > 40)
	{
	 	Error(playerid, "Reason too long! Must be smaller than 40 characters!");
	   	return true;
	}
	if(timeSec < 10 || timeSec > 600)
	{
	    if(pAdmin[playerid] != 5)
	    {
 			Error(playerid, "Block time must remain between 10 and 600 seconds");
	    	return true;
   		}
	}

	pBlocked[otherid] = timeSec;

	if(reason[0] == '*')
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has blocked %s(%i)'s commands for %d seconds.", pName[playerid], playerid, giveplayer, otherid, timeSec);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i)'s commands have been blocked by an Administrator for %d seconds.", giveplayer, otherid, timeSec);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) blocked %s(%i)'s commands (%d seconds)", pName[playerid], playerid, giveplayer, otherid, timeSec);
	}
	else
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has blocked %s(%i)'s commands for %d seconds. "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) commands have been blocked by an Administrator for %d seconds. "RED_E"[Reason: %s]", giveplayer, otherid, timeSec, reason);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) blocked %s(%i)'s commands for %d seconds. [Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
	}
	SendClientMessageToAll(COLOR_RED, str);

	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	
	return true;
}

CMD:unblockcmds(playerid, params[])
{
   	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/unblockcmds <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(pBlocked[otherid] == 0)
	    return Error(playerid, "The player commands aren't blocked!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pBlocked[otherid] = 0;

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has unblocked %s(%i)'s commands.", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) commands have been unblocked by an Administrator", giveplayer, otherid);

	SendClientMessageToAll(COLOR_RED, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has unblocked %s(%i)'s commands", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:unmute(playerid, params[])
{
	if(pAdmin[playerid] < 1)

     		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/unmute <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(pMute[otherid] == 0)
	    return Error(playerid, "The player isn't muted!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pMute[otherid] = 0;

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has unmuted %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been unmuted by an Administrator", giveplayer, otherid);

	SendClientMessageToAll(COLOR_RED, str);
	format(str, sizeof(str), "4Server: 2%s(%i) has unmuted %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:muteall(playerid)
{
   	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
	{
		pMute[ii] = 60;
	}
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has muted all players.", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_RED, str);
	format(tmp, sizeof(tmp), "4Server: 2%s(%i) has muted all players.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
 	return true;
}
CMD:unmuteall(playerid)
{
   	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	foreach(Player, ii)
	{
		pMute[ii] = 0;
	}
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has un-muted all players.", pName[playerid], playerid);
	SendClientMessageToAll(COLOR_RED, str);
	format(tmp, sizeof(tmp), "4Server: 2%s(%i) has un-muted all players.", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
 	return true;
}

CMD:jail(playerid, params[])
{
   	if(pAdmin[playerid] < 1)

     		return Error(playerid, "Insufficient permissions!");

	new reason[60], timeSec;
	if(sscanf(params, "uD(180)S(*)[60]", otherid, timeSec, reason))
	{
	    Usage(playerid, "/jail <ID/Name> (optional: <time in seconds> <reason>)");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(pJail[otherid] > 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) is already jailed (gets out in %d seconds)", giveplayer, otherid, pJail[otherid]);
	    SendClientMessage(playerid, COLOR_RED, str);
	    SendClientMessage(playerid, COLOR_WHITE, "HINT: /unjail <ID/Name> to unjail.");
	    return true;
	}
	if(pSpawned[otherid] == 0)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"%s(%i) isn't spawned", giveplayer, otherid);
	    SendClientMessage(playerid, COLOR_RED, str);
	    return true;
	}
	if(reason[0] != '*' && strlen(reason) > 60)
	{
	 	Error(playerid, "Reason too long! Must be smaller than 60 characters!");
	   	return true;
	}
	if(timeSec < 10 || timeSec > 600)
	{
	    if(pAdmin[playerid] != 5)
	 	{
			Error(playerid, "Jail time must remain between 10 and 600 seconds");
	    	return true;
	  	}
	}
	if(InDuel[otherid] != 0)
	{
		format(str, sizeof(str), ""DUEL" "GREY_E"%s has been eliminated.", pName[otherid], otherid);
		SendClientMessageToAll(COLOR_GREY, str);
	 	EndDuel();
	}
	else if(doingStunt[playerid] == 19) // Derby
	{
		RemoveFromDerby(playerid);
	}
	else if(doingStunt[playerid] == 97) // Derby
	{
		RemoveFromShooter(playerid);
	}
	else if(doingStunt[playerid] == 18) // Fallout
	{
		RemoveFromDerby(playerid);
	}
	else if(doingStunt[playerid] == 33) // LMS
	{
		RemoveFromLMS(playerid);
	}
	else if(InDM[playerid] == 87) // Derby
	{
		RemoveFromTdm(playerid);
	}
	ResetPlayerWeapons(otherid);
	pJail[otherid] = timeSec;
	SetPlayerPosition(otherid, 1833.8677,-1722.5714,5202.5859,270.7500);
	TogglePlayerControllable(otherid, false);
    SetTimerEx("unfreezePlayer", 1500, false, "i", otherid);
	pLastVehicle[otherid] = 0;
	SetPVarInt(otherid, "JailedByAdmin", 1);
	ShowPlayerDialog(otherid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

	if(reason[0] == '*')
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) jailed %s(%i) for %d seconds.", pName[playerid], playerid, giveplayer, otherid, timeSec);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been jailed by an Administrator for %d seconds.", giveplayer, otherid, timeSec);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) jailed %s(%i) for %d seconds.", pName[playerid], playerid, giveplayer, otherid, timeSec);
	}
	else
	{
		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) jailed %s(%i) for %d seconds. "RED_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been jailed by an Administrator for %d seconds. "RED_E"[Reason: %s]", giveplayer, otherid, timeSec, reason);

		format(tmp, sizeof(tmp), "4Server: 2%s(%i) jailed %s(%i) for %d seconds. [Reason: %s]", pName[playerid], playerid, giveplayer, otherid, timeSec, reason);
	}
	SendClientMessageToAll(COLOR_RED, str);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	
	return true;
}

CMD:ojail(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	new player[24];
	if(sscanf(params, "s[24]ds[50]", player, datez, tmp))
	{
	    Usage(playerid, "/ojail <name> <time in seconds)> <reason>");
	    SendClientMessage(playerid, COLOR_YELLOW2, "FUNCTION: Will jail a player while he is offline. Time will start when he comes in game.");
	    return true;
	}
	if(strlen(tmp) > 50) return Error(playerid, "Reason must be shorter than 50 characters.");
	if(datez < 10 || datez > 1000)
	{
 		if(pAdmin[playerid] != 5)
   		{
			Error(playerid, "Jail time must remain between 10 and 1000 seconds");
  			return true;
   		}
	}
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			Error(playerid, "Player is online, you can use /jail on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT reg_id FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnOJailQueryData", "issi", playerid, escaped_player, tmp, datez);
	return true;
}

forward OnOJailQueryData(adminid, NameToJail[], jailReason[], jailTime);
public OnOJailQueryData(adminid, NameToJail[], jailReason[], jailTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "[ERROR] "GREY_E"Account '%s' does not exist.", NameToJail);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	else
	{
	    new RegID;
		RegID = MySQL_getInt(0, 0);
		format(str, sizeof(str), "** "RED_E"You have jailed %s for %d seconds. (Time will take affect as soon as player logs in)", NameToJail, jailTime);
		SendClientMessage(adminid, COLOR_YELLOW, str);
		format(str, sizeof(str), "4Server:3 %s(%i) has offline jailed %s for %d seconds. [Reason: %s]", pName[adminid], adminid, NameToJail, jailTime, jailReason);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		if(pHidden[adminid] == 0)
			format(str, sizeof(str), "** "RED_E"%s(%i) has offline jailed %s for %d seconds. "RED_E"[Reason: %s]", pName[adminid], adminid, NameToJail, jailTime, jailReason);
		else
  			format(str, sizeof(str), "** "RED_E"%s has been offline jailed by an Administrator for %d seconds. "RED_E"[Reason: %s]", NameToJail, jailTime, jailReason);
		SendClientMessageToAll(COLOR_YELLOW, str);

		format(query, sizeof(query), "UPDATE players SET Jailed=%d WHERE reg_id=%d", jailTime, RegID);
		MySQL_updateQuery(query);
	}
	return true;
}

CMD:unjail(playerid, params[])
{
	if(pAdmin[playerid] < 1)

     		return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/unjail <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	if(pJail[otherid] == 0)
	    return Error(playerid, "The player isn't in jail!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pJail[otherid] = 0;
	SetPlayerInterior(otherid, 0);
	SetPlayerVirtualWorld(otherid, 0);
	SpawnPlayer(otherid);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has unjailed %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been un-jailed by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);
	format(str, sizeof(str), "4Administrator%s(%i) has unjailed %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}


CMD:ann(playerid, params[]) return cmd_announce(playerid, params);
CMD:announce(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "s", tmp))
	{
	    Usage(playerid, "/announce <msg>");
	    return true;
	}
	// Check for special trouble-making input
   	if(strfind(tmp, "~x~", true) != -1)
		return Error(playerid, "~x~ is not allowed in announce.");
	if(strfind(tmp, "#k~", true) != -1)
		return Error(playerid, "The constant key is not allowed in announce.");
	if(strfind(params, "/q", true) != -1)
		return Error(playerid, "You are not allowed to type /q in announcement!");
	// Count tildes (uneven number = faulty input)
	iTemp = 0;
	for(new i = (strlen(tmp)-1); i != -1; i--)
	{
		if(tmp[i] == '~')
			iTemp ++;
	}
	if(iTemp % 2 == 1)
		return Error(playerid, "You either have an extra ~ or one is missing in the announcement!");
    if(pAdmin[playerid] == 1)
	{
		if(GetPVarInt(playerid, "UsedAnn") ==1)
		{
			Error(playerid, "Junior Admins can only make 1 announcements per 2 minutes, sorry!");
			return true;
		}
		SetPVarInt(playerid, "UsedAnn", 1);
		SetTimerEx("ResetAnn", 120000, false, "i", playerid);
	}
	format(str, sizeof(str), "~w~%s", tmp);
	GameTextForAll(str, 6500, 3);

	format(str, sizeof(str), "4Announcement:3 %s(%i) announced '%s'", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}
CMD:eann(playerid, params[]) return cmd_eventann(playerid, params);
CMD:eventann(playerid, params[])
{
	new text[128];
    if(pAdmin[playerid] < 2)
	    return Error(playerid, "Insufficient permissions!");
	    
    if(sscanf(params, "s[128]",text))
	{
	    Usage(playerid, "/eventann <msg>");
	    return true;
	}
	new string[512];
	format(string, sizeof(string), ""RED_E"[Event News]: "WHITE_E" %s", text);
	SendClientMessageToAll(COLOR_YELLOW, string);
	return 1;
}
CMD:pann(playerid, params[]) return cmd_pannounce(playerid, params);
CMD:pannounce(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us", otherid, tmp))
	{
	    Usage(playerid, "/pann <ID/Name> <msg>");
	    return true;
	}
	// Check for special trouble-making input
   	if(strfind(tmp, "~x~", true) != -1)
		return Error(playerid, "~x~ is not allowed in announce.");
	if(strfind(tmp, "#k~", true) != -1)
		return Error(playerid, "The constant key is not allowed in announce.");
	// Count tildes (uneven number = faulty input)
	iTemp = 0;
	for(new i = (strlen(tmp)-1); i != -1; i--)
	{
		if(tmp[i] == '~')
			iTemp ++;
	}
	if(iTemp % 2 == 1)
		return Error(playerid, "You either have an extra ~ or one is missing in the announcement!");

	format(str, sizeof(str), "~w~%s", tmp);
	GameTextForPlayer(otherid, str, 6500, 3);
	format(str, sizeof(str), ""YELLOW_E"** "GREY_E"You have announced '%s' to %s(%i)", tmp, pName[otherid], otherid);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), "4Player Announcement to %s(%d):3 %s(%i) announced '%s'", pName[otherid], otherid, pName[playerid], playerid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	
	return true;
}

CMD:cnrann(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
    {
	    Usage(playerid, "/cnrann <msg>");
	    return true;
	}
	// Check for special trouble-making input
   	if(strfind(params, "~x~", true) != -1)
		return Error(playerid, "~x~ is not allowed in announce.");
	if(strfind(params, "#k~", true) != -1)
		return Error(playerid, "The constant key is not allowed in announce.");
	// Count tildes (uneven number = faulty input)
	iTemp = 0;
	for(new i = (strlen(params)-1); i != -1; i--)
	{
		if(params[i] == '~')
			iTemp ++;
	}
	if(iTemp % 2 == 1)
		return Error(playerid, "You either have an extra ~ or one is missing in the announcement!");


	if(pAdmin[playerid] == 1)
	{
		if(GetPVarInt(playerid, "UsedAnn") ==1)
		{
			Error(playerid, "Junior Admins can only make 1 announcements per 2 minutes, sorry!");
			return true;
		}
		SetPVarInt(playerid, "UsedAnn", 1);
		SetTimerEx("ResetAnn", 120000, false, "i", playerid);
	}

	format(str, sizeof(str), "~w~%s", params);
	foreach(Player, ii) if(InDM[ii] == 13) GameTextForPlayer(ii, str, 6500, 3);
	format(str, sizeof(str), ""YELLOW_E"** "GREY_E"You have announced '%s' in the CnR minigame", params);
	SendClientMessage(playerid, COLOR_GREY, str);
	format(str, sizeof(str), "4CnR Announcement:3 %s(%i) announced '%s'", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}


CMD:minvite(playerid)
{
	if(pAdmin[playerid] < 3)
	    return Error(playerid, "Insufficient permissions!");

	ShowPlayerDialog(playerid, 511, DIALOG_STYLE_LIST,
		""WHITE_E"Invite Players", ""ORANGE_E"CnR Minigame\n"LB_E"Derby Minigame\n"GREEN_E"Fallout Minigame\n"WHITEP_E"LMS Minigame", "Select", "Back");
	return true;
}


CMD:akill(playerid, params[])
{
   	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "uS(*)[60]", otherid, tmp))
	{
	    Usage(playerid, "/akill <ID/Name> <optional: reason>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	SetPlayerHealth(otherid, 0.0);

	if(tmp[0] != '*')
	{
 		format(str, sizeof(str), "4Server: 2%s(%i) has killed %s(%i).", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has killed %s(%i). "GREY_E"[Reason: %s]", pName[playerid], playerid, giveplayer, otherid, tmp);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been killed by an Administrator. "GREY_E"[Reason: %s]", giveplayer, otherid, tmp);
	}
	else
	{
	    format(str, sizeof(str), "4Server: 2%s(%i) has killed %s(%i).", pName[playerid], playerid, giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		if(pHidden[playerid] == 0)
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has killed %s(%i).", pName[playerid], playerid, giveplayer, otherid);
		else
			format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been killed by an Administrator.", giveplayer, otherid);
	}

	SendClientMessageToAll(COLOR_RED, str);
	return true;
}
CMD:mappers(playerid)
{
    if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command! (/register)");

	new count;
	foreach(Player, ii)
	{
		if(Mapper[ii] == 1) count++;
	}

	if(count == 0)
 	{
	 	GameTextForPlayer(playerid,"~Y~NO MAPPERS ONLINE",2000,3);
	 	return true;
 	}

    new line3[900], displayed;
    if(count == 1)
    {
		str = ""BLUE_E"UFF: {FFFFFF}Mappers";
		line3 = ""WHITE_E"Total of "YELLOW_E"1 "WHITE_E"Mappers online!:\n";
	}
	else
	{
    	format(str, sizeof(str), ""BLUE_E"UFF: {FFFFFF}Mappers");
    	format(line3, sizeof(line3), ""WHITE_E"Total of "YELLOW_E"%d "WHITE_E"Mappers online:\n", count);
	}

    foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, sizeof(PlayerName));
	    if(Mapper[ii] == 1)
	    {
			if(displayed == 0)
			{
				if(cAFK[ii] > 20)
				{
	        		format(line3, sizeof(line3), "%s\n{%06x}%s(ID: %i) %s "WHITE_E"[AFK]", line3, pColor[ii], PlayerName, ii);
  				}
		  		else format(line3, sizeof(line3), "%s\n{%06x}%s(ID: %i)", line3, pColor[ii], PlayerName, ii);
			}
			else
			{
				if(cAFK[ii] > 20)
				{
			    	format(line3, sizeof(line3), "%s\n{%06x}%s(ID: %i) "WHITE_E"[AFK]", line3, pColor[ii], PlayerName, ii);
   				}
		  		else format(line3, sizeof(line3), "%s\n{%06x}%s(ID: %i)", line3, pColor[ii], PlayerName, ii);
			}
			displayed = displayed + 1;
		}
	}
	ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, str, line3, "Close", "");

	return true;
}
CMD:admins(playerid) return cmd_staffs(playerid);
CMD:staffs(playerid)
{

    if(pLogged[playerid] == false)
		return Error(playerid, "You must be registered to use this command! (/register)");
    if(50 > pScore[playerid])
        return Error(playerid, "You must have 50 score to view admins list");
    new
        count = 0,
        count2 = 0,
        string[256],
        string2[3000],
        vName[24],
        arank[102],
        aName[24];
    strcat(string2, "\n"YELLOW_E"Administrators:\n");
    foreach (Player, xx)
    {
        if(pLogged[xx] && pAdmin[xx] > 0 && pHidden[xx] == 0)
        {
            GetPlayerName(xx, aName, 24);
            switch(pAdmin[xx])
            {
                case 1: arank = ""WHITE_E"(Junior Administrator)";
                case 2: arank = ""WHITE_E"(General Administrator)";
                case 3: arank = ""WHITE_E"(Lead Administrator)";
                case 4: arank = ""WHITE_E"(Head Administrator)";
                case 5: arank = ""WHITE_E"(Executive Administrator)";
            }
            if(cAFK[xx] > 20)
            {
                format(string, sizeof(string), ""WHITE_E"%s(%d) %s "RED_E"[AFK]\n", aName, xx, arank);
                strcat(string2, string);
            }
            else
            {
                format(string, sizeof(string), ""WHITE_E"%s(%d) %s\n", aName, xx, arank);
                strcat(string2, string);
            }
            count++;
        }
    }
    if(count == 0) { strcat(string2, ""GREY_E"No administrators online.\n"); }
    //
    strcat(string2, "\n\n"YELLOW_E"Very Important Players:\n");
    foreach (Player, ii)
    {
        if(pLogged[ii] && pPremium[ii] > 0)
        {
            count2++;
            GetPlayerName(ii, vName, 24);
            if(cAFK[ii] > 20)
            {
                format(string, sizeof(string), ""WHITE_E"%s(%d) %s "RED_E"[AFK]\n", vName, ii);
                strcat(string2, string);
            }
            else
            {
                format(string, sizeof(string), ""WHITE_E"%s(%d) %s\n", vName, ii);
                strcat(string2, string);
            }
        }
    }
    if(count2 == 0) { strcat(string2, ""GREY_E"No Very Important Players online\n"); }
    //
    if(count == 0 && count2 == 0)
    {
        GameTextForPlayer(playerid,"~Y~NO ADMINS / VIPS ONLINE",2000,3);
        if(pAdmin[playerid] > 0) ShowHiddenAdmins(playerid);
        return 1;
    }
    //
    format(string, sizeof string, "\n\n"RED_E"Administrators: "WHITE_E"%d\n", count); strcat(string2, string);
    format(string, sizeof string, ""RED_E"Very Important Players: "WHITE_E"%d\n", count2); strcat(string2, string);
    ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, ""YELLOW_E"UFF "WHITE_E":: Admins", string2, "Close", "");
    return 1;
}
CMD:vips(playerid) return cmd_premiums(playerid);
CMD:premiums(playerid)
{
	new count;
	new line3[900];
	foreach(Player, ii)
	{
		if(pPremium[ii] > 0) //&& pHidden[ii] == 0)
		{
		    count++;
		}
	}
	if(count == 0)
	    return GameTextForPlayer(playerid,"~w~NO VIPS ONLINE",2000,3);
	    //SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"There are no vips online.");

    new displayed;
   	format(str, sizeof(str), ""BLUE_E"UFF: "WHITE_E"VIPs");
  	format(line3, sizeof(line3), ""WHITE_E"Total of "LB_E"%d "WHITE_E"VIPs online:\n\n"LB_E"Online VIPs:", count);


    foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, sizeof(PlayerName));
	    if(pPremium[ii] > 0) //&& pHidden[ii] == 0)
	    {
			if(displayed == 0)
			{
	        	format(line3, sizeof(line3), "\n"YELLOW_E"ID:\t\tName:\n"WHITE_E"%d\t\t%s",ii, PlayerName);
			}
			else
			{
			    format(line3, sizeof(line3), "\n"YELLOW_E"ID:\t\tName:\n"WHITE_E"%d\t\t%s",ii, PlayerName);
	     	}
			displayed = displayed + 1;
		}
	}
	format(line3, sizeof(line3), "%s\n\n\n"YELLOW_E"Total of "WHITE_E"%d "YELLOW_E"VIPs online", line3, count);

	ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, str, line3, "Close", "");
	return true;
}
CMD:force(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/force <ID/Name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

 	SetPlayerHealth(otherid, 0.0);
	ForceClassSelection(otherid);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has forced %s(%i) into class selection.", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has been forced to the class selection by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);
	format(str, sizeof(str), "4Server:3 %s(%i) has forced %s(%i) to class selection", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:settempname(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[24]", otherid, tmp))
	{
	    Usage(playerid, "/settempname <ID/Name> <name>");
	    return true;
	}

    if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(strlen(tmp) < 4) return Error(playerid, "New name can't be shorter than 4 characters!");
	if(strlen(tmp) > 20) return Error(playerid, "New name can't be longer than 20 characters!");
	SavePlayerStats(otherid);
	if(SetPlayerName(otherid, tmp) != 1)
	{
		format(str, sizeof(str), ""UFF" "GREY_E"%s(%i)'s name has not been changed to \"%s\". Please doublecheck the name!", giveplayer, otherid, tmp);
	    SendClientMessage(playerid, COLOR_GREY, str);
	    return true;
	}

	format(str, sizeof(str), "Server: "GREY_E"%s(%i) has changed your name to \"%s\".", pName[playerid], playerid, tmp);
	SendClientMessage(otherid, COLOR_RED, str);
	format(str, sizeof(str), "Server: "GREY_E"You have changed %s(%i)'s name to \"%s\".", giveplayer, otherid, tmp);
	SendClientMessage(playerid, COLOR_RED, str);
	Info(otherid, "This namechange is temporary and will not save!");
	format(str, sizeof(str), "4Server:3 %s(%i) has changed %s(%i)'s name to '%s'", pName[playerid], playerid, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	new newname[24];
	GetPlayerName(otherid, newname, sizeof(newname));
	pName[otherid] = newname;
	return true;
}

CMD:a(playerid, params[])
{
  	if(pAdmin[playerid] < 1)
  		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "Insufficient permissions!");
	if(isnull(params))
	{
	    Usage(playerid, "/a <text>");
	    return true;
	}

	// Decide about multi-line msgs
	new i = -1;
	if(strlen(params) > 70)
	{
		i = strfind(params, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, params[i]);

		// delete the rest from msg
		params[i] = EOS;
	}

	format(str, sizeof(str), ""RED_E"[Admin Chat] "LG_E"%s(%i): "LB_E"%s", pName[playerid], playerid, params);
	SendAdminMessage(COLOR_LB, str);
	if(i != -1) SendAdminMessage(COLOR_LB, line);
 	format(str, sizeof(str), "4[Admin Chat]3 %s(%i):2 %s", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(i != -1) IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);
	return true;
}
CMD:p(playerid, params[])
{
  	if(pPremium[playerid] == 0)
  	   if(pAdmin[playerid] == 0)
	    return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/p <text>");
	    return true;
	}

    // Decide about multi-line msgs
	new i = -1;
	if(strlen(params) > 70)
	{
		i = strfind(params, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, params[i]);

		// delete the rest from msg
		params[i] = EOS;
	}

	format(str, sizeof(str), ""WHITE_E"["LB_E"VIP CHAT"WHITE_E"] {%06x}%s(%i): "LB_E"%s", pColor[playerid], pName[playerid], playerid, params);
	foreach(Player, ii) if(pAdmin[ii] > 0 || pPremium[ii] == 1) SendClientMessage(ii, COLOR_WHITEP, str);
	if(i != -1) foreach(Player, ii) if(pAdmin[ii] > 0 || pPremium[ii] == 1) SendClientMessage(ii, COLOR_WHITEP, line);
 	format(str, sizeof(str), "4[VIP CHAT]3 %s(%i): 2%s", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(i != -1) IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);
	return true;
}
CMD:m(playerid, params[])
{
  	if(pAdmin[playerid] < 1)
   		if(Mapper[playerid] == 0)
     		return Error(playerid, "Insufficient permissions!");

	if(isnull(params))
	{
	    Usage(playerid, "/m <text>");
	    return true;
	}

    // Decide about multi-line msgs
	new i = -1;
	if(strlen(params) > 70)
	{
		i = strfind(params, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, params[i]);

		// delete the rest from msg
		params[i] = EOS;
	}

	format(str, sizeof(str), ""SBLUE_E"[MAPPER CHAT] "WHITEP_E"%s(%i): {00FFB4}%s", pName[playerid], playerid, params);
	foreach(Player, ii) if(pAdmin[ii] > 0 || Mapper[ii] == 1) SendClientMessage(ii, COLOR_LB, str);
	if(i != -1) foreach(Player, ii) if(pAdmin[ii] > 0 || Mapper[ii] == 1) SendClientMessage(ii, COLOR_LB, line);
 	format(str, sizeof(str), "2[MAPPER CHAT]3 %s(%i): 2%s", pName[playerid], playerid, params);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	if(i != -1) IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);
	return true;
}
CMD:ask(playerid, params[])
{
	if(isnull(params))
	{
	    Usage(playerid, "/srequest <Your Song>");
	    return true;
	}
	if(GetPVarInt(playerid, "UsedAsk") == 2) return Error(playerid, "You can only ask questions 2 times per minute!");

	format(tmp, sizeof(tmp), ""RED_E"*** "SBLUE_E"%s(%d) has asked a question.!", pName[playerid], playerid);
	format(str, sizeof(str), ""RED_E"*** "SBLUE_E"Questiont: %s", params);
	SetPVarInt(playerid, "askedQuestion", 1);
    if(strlen(params) > 100)
	{
	    Error(playerid, "Too long, Keep your question below 100 characters,");
	    return true;
	}
	foreach(Player, i)
	{
	    if(pAdmin[i] > 0 || Mapper[i] == 1)
		{
    		SendClientMessage(i, COLOR_SBLUE, tmp);
    		SendClientMessage(i, COLOR_SBLUE, str);
    		PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
    		if(GetPVarInt(i, "infoSent") == 0)
			{
   				SetPVarInt(i, "infoSent", 1);
				Info(i, "Type /reply <ID/Name> to answer.");
			}
		}
	}
	if(GetPVarInt(playerid, "UsedAsk") == 0) SetTimerEx("ResetAsk", 60000, false, "i", playerid);
	new counts = GetPVarInt(playerid, "UsedAsk") + 1;
	SetPVarInt(playerid, "UsedAsk", counts);
	SendClientMessage(playerid, COLOR_WHITEP,""RED_E"Server: "WHITEP_E"Your question has been sent to the server helpers/admins. Please wait for a response!");
	return true;
}
CMD:reply(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    	return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "us[120]", otherid, tmp))
	{
	    Usage(playerid, "/reply <ID/Name> <Answer>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
        return Error(playerid, "Player not connected!");

 	if(!GetPVarInt(otherid, "askedQuestion"))
        return Error(playerid, "This player hasn't asked a question or their question has already been answered!");

  	if(strlen(tmp) > 120)
	{
	    Error(playerid, "Answer can't be longer than 120 characters!");
	    return true;
	}

	format(str, sizeof(str), ""RED_E"*** "SBLUE_E"%s(%d) has answered your question!", pName[playerid], playerid);
	SendClientMessage(otherid, COLOR_SBLUE, str);
	format(str, sizeof(str), ""RED_E"*** "SBLUE_E"Answer: %s", tmp);
	SendClientMessage(otherid, COLOR_SBLUE, str);
	DeletePVar(otherid, "askedQuestion");
	foreach(Player, i)
	{
     	if(pAdmin[i] > 0 || Mapper[i] == 1)
		{
    		format(str, sizeof(str), ""RED_E"*** "SBLUE_E"%s(%d) has replied to %s(%d)'s question!", pName[playerid], playerid, pName[otherid], otherid);
			SendClientMessage(i, COLOR_SBLUE, str);
		}
	}
	PlayerPlaySound(otherid, 1057, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_WHITEP,""RED_E"Server: "WHITEP_E"Your answer has been sent to the player, thanks for assisting!");
	return true;
}

CMD:clear(playerid, params[]) return cmd_clearchat(playerid, params);
CMD:clearchat(playerid, params[])
{
   	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	for(new ii = 0; ii < 100; ii++)
	{
	    SendClientMessageToAll(COLOR_SYSTEM, " ");
		GameTextForAll("~p~Chat cleared!", 1000, 1);
	}

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has cleared the chat.", pName[playerid], playerid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"Chat has been cleared by an Administrator.", giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) cleared the chat", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:clearmychat(playerid, params[])
{
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	SendClientMessage(playerid,COLOR_SYSTEM, " ");
	GameTextForAll("~p~Chat cleared!", 1000, 1);

	format(str, sizeof(str), ""YELLOW_E"** "RED_E"You've cleared your chat!");

	SendClientMessage(playerid, COLOR_RED, str);

	format(str, sizeof(str), "4Server: 2%s(%i) cleared the chat", pName[playerid], playerid);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

CMD:disarm(playerid, params[])
{
	if(pAdmin[playerid] < 1)
	    return Error(playerid, "Insufficient permissions!");

	if(sscanf(params, "u", otherid))
	{
	    Usage(playerid, "/disarm <ID/Name>");
	    return true;
	}

    if(!IsPlayerConnected(otherid))
        return Error(playerid, "Player not connected!");


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	ResetPlayerWeapons(otherid);

	if(pHidden[playerid] == 0)
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has disarmed %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	else
		format(str, sizeof(str), ""YELLOW_E"** "RED_E"%s(%i) has has been disarmed by an Administrator.", giveplayer, otherid);
	SendClientMessageToAllEx(otherid, COLOR_RED, str);

	SendClientMessage(playerid, COLOR_YELLOW2, "** "WHITE_E"^ The above message has been sent to everyone except the disarmed player");
	format(str, sizeof(str), "4Server: 2%s(%i) has disarmed %s(%i)", pName[playerid], playerid, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}




function duelTimeOver()
{
	if(g_DuelInProgress == 0) return true;

	SendClientMessageToAll(COLOR_WHITEP, ""DUEL" "WHITEP_E"Duel has been automatically ended. (times up)");
    format(str, sizeof(str), "2,9DUEL7,0 Duel has ended. (time over)", CRaceName);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    // Give Bets back
	foreach(Player, ii)
	{
		if(GetPVarInt(ii, "betPlayer") != -1)
		{
			GivePlayerCash(ii, GetPVarInt(ii, "betAmount"));
			SendClientMessage(ii, COLOR_WHITEP, ""RED_E"[BET] "WHITEP_E"Duel has ended (times up), you have recived your money back.");
		}
		SetPVarInt(ii, "betPlayer", -1);
		DeletePVar(ii, "betAmount");
	}
	EndDuel();
	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(rpInfo[playerid][CPProgess] == TotalCP -1)
	{
		new TimeStamp,TotalRaceTime,rTime[3],Prize[2],rctime[35];
		rPosition++;
		TimeStamp = GetTickCount();
		TotalRaceTime = TimeStamp - RaceTick;
		ConvertTime(var, TotalRaceTime, rTime[0], rTime[1], rTime[2]);
		if(rTime[0] >= 2 && rTime[1] >= 1){format(rctime, 30, "%d minutes, %d seconds",rTime[0], rTime[1]);}
		else if(rTime[0] == 1 && rTime[1] >= 1){format((rctime), 27, "1 minute, %d seconds", rTime[1]);}
		else if(rTime[0] < 1 && rTime[1] >= 1){format((rctime), 12, "%d seconds",rTime[1]);}

		switch(rPosition)
		{
		    case 1: Prize[0] = 70, Prize[1] = 9000;
		    case 2: Prize[0] = 65, Prize[1] = 7500;
		    case 3: Prize[0] = 50, Prize[1] = 5000;
		    case 4: Prize[0] = 55, Prize[1] = 4600;
		    case 5: Prize[0] = 50, Prize[1] = 4200;
		    case 6: Prize[0] = 30, Prize[1] = 3400;
		    case 7: Prize[0] = 30, Prize[1] = 3000;
		    case 8: Prize[0] = 30, Prize[1] = 20200;
		    case 9: Prize[0] = 20, Prize[1] = 1000;
		    default: Prize[0] = 10, Prize[1] = 1000;
		}
		if(rPosition == 1)
		{
	        format(str, sizeof(str), ""IVORY_E"»»» %s(%d) has won the race %d. in %s", pName[playerid], playerid, rPosition, rctime);
			SendClientMessageToAll(COLOR_YELLOW, str);
			pInfo[playerid][pRacesWon]++;
			format(query, sizeof(query), "UPDATE players SET races_won=races_won+1 WHERE reg_id=%d", pRegID[playerid]);
			MySQL_updateQuery(query);
			GivePlayerScore(playerid, Prize[0]);
			GivePlayerCash(playerid, Prize[1]);
			format(str, sizeof(str), "~g~~h~~h~+$%d~w~~n~~y~~h~+%d score", Prize[1], Prize[0]);
            MSTD_MSG(playerid, 3500, str);

            if(pInfo[playerid][pRacesWon] >= 10)
			{
				if(pAch6[playerid] == 0)
				{
					pAch6[playerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a6=1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(playerid, "Elite Racer", "Congrats you won 10 races!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
				}
			}
		}
		else if(rPosition >= 2)
		{
		    format(str, sizeof(str), ""YELLOW_E"»»» %s(%d) has finished the race %d. in %s", pName[playerid], playerid, rPosition, rctime);
			SendClientMessageToAll(COLOR_YELLOW, str);
			GivePlayerCash(playerid, Prize[1]);
			format(str, sizeof(str), "~g~~h~~h~+$%d~w~~n~~y~~h~+%d score", Prize[1], Prize[0]);
            MSTD_MSG(playerid, 3500, str);
			GivePlayerScore(playerid, Prize[0]);
		}
		if(FinishCount <= 3)
		{
			if (IsNewRecord(RaceName, TimeProgress+1, TotalRaceTime))
			{
				if (!AreTimeRegisterd(RaceName, TimeProgress+1))
				{
				    if(TimeProgress+1 <= 3)
					{
						format(str, sizeof(str), ""RACE" %s(%i) has made a new record in the race '%s' [Record pos: %d - Bonus: $1000.000]", pName[playerid], playerid, RaceName, TimeProgress+1);
			            SendClientMessageToAll(COLOR_YELLOW, str);
    		            UpdateRRecord(RaceName, TimeProgress+1, TotalRaceTime, pName[playerid]);
    		            GivePlayerCash(playerid, 1000000);
    	            }
				}
				else
				{
					new RacerNameLastRecord[24], TimeRP;
					CheckLastRecord(RaceName, TimeProgress+1, TotalRaceTime, RacerNameLastRecord, TimeRP);

                    if(strcmp(RacerNameLastRecord, pName[playerid], true) == 0)
					{
				    	format(str, sizeof(str), ""RACE" %s(%i) has overcomed his own record in the race '%s' and receive a bonus: $500000", pName[playerid], playerid, RaceName);
			            SendClientMessageToAll(COLOR_YELLOW, str);
	                	GivePlayerCash(playerid, 500000);
					}
					else
					{
						format(str, sizeof(str), ""RACE" %s(%i) has overcomed %s's record in the race '%s' and receive a bonus: $250000", pName[playerid], playerid, RacerNameLastRecord, RaceName);
			            SendClientMessageToAll(COLOR_YELLOW, str);
						GivePlayerCash(playerid, 250000);
						if(pAch16[playerid] == 0)
					    {
						pAch16[playerid] = 1;
						format(query, sizeof(query), "UPDATE achievements SET a16=1 WHERE reg_id=%d", pRegID[playerid]);
						MySQL_updateQuery(query);
						GivePlayerAchievement(playerid, "Pro Racer", "Congrats you beat a race record!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
					    }
					}
					UpdateRaceTime(RaceName, TimeProgress+1, TotalRaceTime, pName[playerid]);
				}
			}
			TimeProgress++;
		}
		FinishCount++;
    	DisablePlayerRaceCheckpoint(playerid);
		rpInfo[playerid][CPProgess]++;
		RaceParticipant[playerid] = false;
		SetVehicleHealth(GetPlayerVehicleID(playerid),1250.0);
        HidePlayerRaceTextdraws(playerid);
	    KillTimer(rpInfo[playerid][InfoTimer]);
	    SetCameraBehindPlayer(playerid);
        SetPlayerVirtualWorld(playerid, 0);
		if(FinishCount >= JoinCount) return StopRace();
	    if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
		{
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
	    	GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
		    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
	  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
		}
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 100);
        GodModeLabel(playerid, true);
        TextDrawShowForPlayer(playerid, TeleTD);

    }
	else
	{
		rpInfo[playerid][CPProgess]++;
		CPCoords[rpInfo[playerid][CPProgess]][3]++;
		rpInfo[playerid][RacePPos] = floatround(CPCoords[rpInfo[playerid][CPProgess]][3], floatround_floor);
	    SetCP(playerid, rpInfo[playerid][CPProgess], rpInfo[playerid][CPProgess]+1, TotalCP, RaceType);
	    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:cp(playerid)
{
	if(pAdmin[playerid] < 5)
    {
       	Error(playerid, "Insufficient permissions!");
       	return true;
	}
	if(RaceBuilders[playerid] != 0 && BCurrentCheckpoints < 49)
	{
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

		format(str, sizeof(str), ""RACE" Checkpoint %d created (%f, %f, %f)", BCurrentCheckpoints, POS[0], POS[1], POS[2]);
		SendClientMessage(playerid, COLOR_GREEN, str);

		BRaceCheckpoints[BCurrentCheckpoints][0] = POS[0];
		BRaceCheckpoints[BCurrentCheckpoints][1] = POS[1];
		BRaceCheckpoints[BCurrentCheckpoints][2] = POS[2];

		BSelectedCheckpoint = BCurrentCheckpoints;
		SetBRaceCheckpoint(playerid, BCurrentCheckpoints, -1);
		BCurrentCheckpoints ++;
	}
	else if(RaceBuilders[playerid] != 0 && BCurrentCheckpoints == 49)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Maximum amount of checkpoints reached (%d).", 49);
		SendClientMessage(playerid, COLOR_RED, str);
	}
	else Error(playerid, "You are not building a race!");
	return 1;
}


CMD:scp(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	{
       	Error(playerid, "Insufficient permissions!");
       	return true;
	}

	new sele;
	if(sscanf(params, "d", sele))
	{
		Usage(playerid, "/scp [checkpoint]");
		return 1;
	}

	if(RaceBuilders[playerid] != 0)
	{
		if(sele>BCurrentCheckpoints -1 || BCurrentCheckpoints < 1 || sele < 0)
		{
			Error(playerid, "Invalid checkpoint!");
			return 1;
		}
		format(str,sizeof(str), ""UFF" Selected checkpoint %d", sele);
		SendClientMessage(playerid, COLOR_GREEN, str);
		BActiveCP(playerid, sele);
		BSelectedCheckpoint = sele;
	}
	else Error(playerid, "You are not building a race!");
	return 1;
}

CMD:rcp(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	{
       	Error(playerid, "Insufficient permissions!");
       	return true;
	}
	if(RaceBuilders[playerid] == 0)
	{
		Error(playerid, "You are not building a race!");
		return 1;
	}
	else if(BCurrentCheckpoints < 1)
	{
		Error(playerid, "No checkpoint to replace!");
		return 1;
	}

	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);

	BRaceCheckpoints[BSelectedCheckpoint][0] = POS[0];
	BRaceCheckpoints[BSelectedCheckpoint][1] = POS[1];
	BRaceCheckpoints[BSelectedCheckpoint][2] = POS[2];

	BActiveCP(playerid, BSelectedCheckpoint);

	format(tmp,sizeof(tmp), ""UFF" Checkpoint %d replaced: %f, %f, %f.", BSelectedCheckpoint, POS[0], POS[1], POS[2]);
	SendClientMessage(playerid, COLOR_GREEN, tmp);
	return 1;
}

CMD:deletecp(playerid) return cmd_dcp(playerid);
CMD:dcp(playerid)
{
	if(pAdmin[playerid] < 5)
	{
		Error(playerid, "Insufficient permissions!");
		return true;
	}
	if(RaceBuilders[playerid] == 0)
	{
		Error(playerid, "You are not building a race!");
		return 1;
	}
	else if(BCurrentCheckpoints < 1)
	{
		Error(playerid, "No checkpoint to delete!");
		return 1;
	}
	for(new ii = BSelectedCheckpoint; ii < BCurrentCheckpoints; ii++)
	{
		BRaceCheckpoints[ii][0] = BRaceCheckpoints[ii + 1][0];
		BRaceCheckpoints[ii][1] = BRaceCheckpoints[ii + 1][1];
		BRaceCheckpoints[ii][2] = BRaceCheckpoints[ii + 1][2];
	}
	BCurrentCheckpoints --;
	BSelectedCheckpoint--;
	if(BCurrentCheckpoints < 1)
	{
		DisablePlayerRaceCheckpoint(playerid);
		BSelectedCheckpoint= 0;
		return 1;
	}
	else if(BSelectedCheckpoint < 0)
	{
		BSelectedCheckpoint= 0;
	}
	BActiveCP(playerid, BSelectedCheckpoint);
	SendClientMessage(playerid, COLOR_GREEN, ""UFF" Checkpoint deleted!");
	return 1;
}


CMD:clearrace(playerid,params[])
{
	if(pAdmin[playerid] < 4)
	{
		Error(playerid, "Insufficient permissions!");
       	return true;
	}

	if(RaceBuilders[playerid] != 0)
	{
		clearrace(playerid);
	}
	else
	{
		Error(playerid, "You are not building a race!");
	}
	return 1;
}


CMD:saverace(playerid, params[])
{
	if(pAdmin[playerid] < 5)
	{
       	Error(playerid, "Insufficient permissions!");
       	return true;
	}
	if(RaceBuilders[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_RED, "You are not building a race!");
		return true;
	}
	if(BCurrentCheckpoints < 2)
	{
		Error(playerid, "You need atleast 2 checkpoints to save!");
		return true;
	}

	if(sscanf(params, "s[90]", str))
	{
		Usage(playerid, "/saverace <name>");
		return true;
	}

	if(strlen(str) > 30)
	{
		Error(playerid, "Race name can't be longer than 30 characters!");
		return true;
	}
	if(!IsValidChar(str))
	{
		Error(playerid, "Race name contains invalid characters!");
		return true;
	}

	format(raceName, sizeof(raceName), "%s.yr", str);
	if(fexist(raceName))
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Race '%s' already exists!", str);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}


	new File:raceFile = fopen(raceName, io_write);
	format(tmp, sizeof(tmp), "YRACE 0 %d %f\n", BAirrace, BCPsize);
	fwrite(raceFile, tmp);
	for(new ii = 0; ii < BCurrentCheckpoints; ii++)
	{
		POS[0] = BRaceCheckpoints[ii][0];
		POS[1] = BRaceCheckpoints[ii][1];
		POS[2] = BRaceCheckpoints[ii][2];
		format(tmp, sizeof(tmp), "%f %f %f\n", POS[0], POS[1], POS[2]);
		fwrite(raceFile, tmp);
	}
	fclose(raceFile);
	DisablePlayerRaceCheckpoint(playerid);
	format(str, sizeof(str), ""UFF" Your race '%s' has been saved.", str);
	SendClientMessage(playerid, COLOR_GREEN, str);
	format(query, sizeof(query), "INSERT INTO `racetimes`(race) VALUES('%s')", str);
	MySQL_updateQuery(query);
	RaceBuilders[playerid] = 0;
	return true;
}



CMD:deleterace(playerid, params[])
{
	if(pAdmin[playerid] < 5)
   	{
       	Error(playerid, "Insufficient permissions!");
       	return true;
	}

	if(sscanf(params, "s[90]", tmp))
	{
		Usage(playerid, "/deleterace <race name>");
		return true;
	}

	format(raceName, sizeof(raceName), "%s.yr", tmp);
	if(!fexist(raceName))
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"The race '%s' doesn't exist!", tmp);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	fremove(raceName);
	format(str, sizeof(str), ""UFF" The race '%s' has been deleted.", tmp);
	SendClientMessage(playerid, COLOR_GREEN, str);
	return 1;
}

CMD:rplayers(playerid) return cmd_racers(playerid);
CMD:racers(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0 || InAMEvent[playerid] || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(RaceActive == 0)
		return GameTextForPlayer(playerid, "~y~No Race Active", 3000, 3);

	JoinCount = 0;
	foreach(Player, ii)
	{
		if(RaceParticipant[ii] == false) continue;
		JoinCount = JoinCount + 1;
	}

	format(str, sizeof(str), ""UFF"Showing a list of total %d racer(s) in '%s':", JoinCount, RaceName);
	SendClientMessage(playerid, COLOR_WHITE, str);

	JoinCount = 0;
	new racertmp[38];
	foreach(Player, ii)
	{
		if(RaceParticipant[ii] == false) continue;
		switch(RaceParticipant[ii])
		{
		    case 1: racertmp = "joined";
		    case 2: racertmp = "arrived to start";
		    case 3: racertmp = "ready";
		    case 4: racertmp = "racing";
		    case 5: racertmp = "finished";
		}
		JoinCount++;
		format(str, sizeof(str), "%d. %s(%i) (%s)", JoinCount, pName[ii], ii, racertmp);
		SendClientMessage(playerid, COLOR_GREY, str);
	}
	return true;
}

CMD:race(playerid, params[]) return cmd_join(playerid, params);
CMD:join(playerid, params[])
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0  || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
	if(RaceStarted > 0) return GameTextForPlayer(playerid, "~y~Race already started", 3000, 3);
	if(RaceBusy == 0x00) return GameTextForPlayer(playerid, "~y~No Race Active", 3000, 3);
//	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return Error(playerid, "Exit your vehicle to join race!");
	if(JoinCount >= 20)
	{
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "ORANGE_E"Sorry the race is full, you can no longer join.. wait for the next one!");
		return 1;
	}
	if(RaceParticipant[playerid] == true) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] You are already in race.");
//	RemovePlayerFromVehicle(playerid);
	RaceParticipant[playerid] = true;
	SetupRaceForPlayer(playerid);
    ShowPlayerRaceTextdraws(playerid);
	RaceParticipant[playerid] = true;
	// Close any open dialogs.
	ClosePlayerDialog(playerid);
	SavePlayerPosition(playerid);
	InDM[playerid] = 0;
	canUseKey[playerid] = false;
	ResetPlayerWeapons(playerid);
	HideModelSelectionMenu(playerid);
	if(GOD[playerid] == 1)
	{
		TextDrawHideForPlayer(playerid, godTD);
		TextDrawHideForPlayer(playerid, godTDBOX);
	}
	TextDrawHideForPlayer(playerid, TeleTD);
    ResetPlayerWeapons(playerid);
	GodModeLabel(playerid, false);
    SetPlayerHealth(playerid, 99999);
	SetTimerEx("ResetHealth", 2000, false, "i", playerid);
	SetPlayerVirtualWorld(playerid, 9);
	//==============================Top 3 List=============================/
	new TotalRaceTime;
	CheckRecords(RaceName, TimeProgress+1, TotalRaceTime, playerid); 

 /*	format(tmp, sizeof(tmp), "2,9RACE7,0 %s(%i) has joined the race '%s', which has %d/20 participants.", pName[playerid], playerid, RaceName, JoinCount);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);*/
	CarLocked[GetPlayerVehicleID(playerid)] = true;
	UpdateMinigameBox(playerid, 3, "Race [/Race]");
	if(JoinCount <= 1) return CountTimer = SetTimer("CountTillRace", 1000, true);
	DisableRemoteVehicleCollisions(playerid, 1);
	SetTimerEx("SetupRaceForPlayer", 2500, false, "i", playerid);
	if(GetPVarInt(playerid, "HideObjects") == 1)
 	{
 		DeletePVar(playerid, "HideObjects");
 		Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, 1);
 	}
	return 1;
}

CMD:bexit(playerid)
{
    if(RaceParticipant[playerid] == true || InDM[playerid] != 0  || doingStunt[playerid] != 0 || InEvent[playerid] != 0 || IsInHouse{playerid} != 0)
	    return Error(playerid, "You can't use this command now! Use /exit to leave");
    if(InBusiness[playerid] == INVALID_BUSINESS)
	    return Error(playerid, "You're not in a business.");
	new id = InBusiness[playerid];
    SetPVarInt(playerid, "BusinessCooldown", gettime() + 8);
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPos(playerid, BusinessData[id][BusinessX], BusinessData[id][BusinessY], BusinessData[id][BusinessZ]);
    InBusiness[playerid] = INVALID_BUSINESS;
    return 1;
}
CMD:exit(playerid) return cmd_leave(playerid);
CMD:leave(playerid)
{

	if(RaceParticipant[playerid] == false && InDM[playerid] == 0  && doingStunt[playerid] == 0 && InEvent[playerid] == 0 && IsInHouse{playerid} == 0)
		return Error(playerid, "You aren't in a Race, DM or Event!");
	if(InEvent[playerid] != 0)
	{
		RemovePlayerFromEvent(playerid);

		SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"You have left the event.");
		format(str,sizeof(str),""EVENT" "GREY2_E"%s(%i) has left the event.", pName[playerid], playerid);
    	SendClientMessageToAll(COLOR_GREY2, str);
		return 1;
	}
	else if(IsInHouse{playerid} == 1) // Exit from house
	{
        new h = GetPVarInt(playerid, "LastHouseCP");
	    if(IsPlayerInHouse(playerid, h))
	    {
	        ExitHouse(playerid, h);
	    }
	    return 1;
	}
	else if(doingStunt[playerid] != 0)
	{
	    if(doingStunt[playerid] == 18) // Fallout
		{
			SendClientMessage(playerid, COLOR_WHITEP, ""FALLOUT" You have left the fallout minigame.");
			RemoveFromFallout(playerid);
			return true;
		}
		if(InDM[playerid] == 87) // TDM
		{
			SendClientMessage(playerid, COLOR_WHITEP, ""TDM2" You have left the tdm minigame.");
			RemoveFromTdm(playerid);
			RemovePlayerFromDM(playerid);
			return true;
		}
        else if(InDM[playerid] == 94)
	    {
            WaitReset(playerid);
            return true;
	    }
		else if(doingStunt[playerid] == 19) // Derby
		{
			SendClientMessage(playerid, COLOR_WHITEP, ""DERBY" You have left the derby minigame.");
			RemoveFromDerby(playerid);
			return true;
		}
		else if(doingStunt[playerid] == 97) // Derby
		{
			SendClientMessage(playerid, COLOR_WHITEP, ""SHOOTER" You have left the shooter minigame.");
			RemoveFromShooter(playerid);
			return true;
		}
		else if(doingStunt[playerid] == 33) // LMS
		{
			SendClientMessage(playerid, COLOR_WHITEP, ""LMS" You have left the LMS minigame.");
			RemoveFromLMS(playerid);
			LMS_LoseGame();
			return true;
		}
		else if(doingStunt[playerid] == 70) // Spectating Event
		{
		   // cmd_stopwatch(playerid);
		    return true;
		}
		else if(doingStunt[playerid] == 7) // Spectating Event
		{
		   	doingStunt[playerid] = 0;
		   	SetPlayerHealth(playerid, 100);
		    SetPlayerVirtualWorld(playerid, 0);
		    ResetPlayerWeapons(playerid);
		    LoadPlayerPosition(playerid);
		    return true;
		}
		else if(doingStunt[playerid] == 9) // Spectating Event
		{
		   	doingStunt[playerid] = 0;
		   	SetPlayerHealth(playerid, 100);
		    SetPlayerVirtualWorld(playerid, 0);
		    ResetPlayerWeapons(playerid);
		    LoadPlayerPosition(playerid);
		    return true;
		}
		else if(doingStunt[playerid] == 42) // Spectating Event
		{
		   	doingStunt[playerid] = 0;
		   	SetPlayerHealth(playerid, 100);
		    SetPlayerVirtualWorld(playerid, 0);
		    ResetPlayerWeapons(playerid);
		    LoadPlayerPosition(playerid);
		    return true;
		}
		// Other stunts
		doingStunt[playerid] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		if(IsPlayerInAnyVehicle(playerid)) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			switch(random(3))
	  		{
				case 0:
				{
				    SetPlayerVehiclePosition(playerid,  364.1760,2542.6189,17.7123,181.5505);// aa
				    TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
	            }
		    	case 1:
				{
				    SetPlayerVehiclePosition(playerid, -789.7336,2194.9150,43.3971,182.0993);// dam
				    TogglePlayerControllable(playerid, false);
	                SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
				}
	   			case 2:
				{
					SetPlayerVehiclePosition(playerid, -1336.7538,-242.8128,14.1484,316.2072);// sfa
					TogglePlayerControllable(playerid, false);
		            SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);
	            }
			}
		}
		else
		{
	 		switch(random(3))
	   		{
	   			case 0:
				{SetPlayerPosition(playerid, -2311.0715,-1594.7805,486.5644,177.2409);//chil
				TogglePlayerControllable(playerid, false);
	            SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);}
				case 1:
				{SetPlayerPosition(playerid, 426.1482,-1843.4329,6.1496,182.3893);//beach
				TogglePlayerControllable(playerid, false);
	            SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);}
				case 2:
				{SetPlayerPosition(playerid, 1874.8475,-2287.9719,15.6110,272.2728);//lsa
				TogglePlayerControllable(playerid, false);
	            SetTimerEx("unfreezePlayer", 1500, false, "i", playerid);}
			}
		}
		return true;
	}
	else if(InDM[playerid] >= 1)
	{
	    if(InDM[playerid] == 200) return Error(playerid, "You can't type /leave here, use /killme!");
		if(InDuel[playerid] != 0)
  		{
  			new Float:hp;
		    GetPlayerHealth(playerid, hp);
		    if(hp < 30)
		 	{
		 		return Error(playerid, "You can't leave the duel with less than 30 HP, finish the duel!");
		 	}
  			format(str,sizeof(str),""DUEL" "GREY_E"%s(%i) has left the duel.", pName[playerid], playerid);
    		SendClientMessageToAll(COLOR_GREY, str);
  			SendClientMessage(playerid, COLOR_RED, ""DUEL" "RED_E"You have left the duel.");
  			ResetPlayerWeapons(playerid);

			// Give Bets back
			foreach(Player, ii)
			{
				if(GetPVarInt(ii, "betPlayer") != -1)
				{
					GivePlayerCash(ii, GetPVarInt(ii, "betAmount"));
					format(str,sizeof(str),""RED_E"[BET] "WHITEP_E"%s(%i) has left the duel, you have recived your money back.", pName[playerid], playerid);
	    			SendClientMessage(ii, COLOR_WHITEP, str);
				}
				SetPVarInt(ii, "betPlayer", -1);
				DeletePVar(ii, "betAmount");
			}
			EndDuel();
	    }
	    else cmd_leavedm(playerid);
	    return 1;
	}
	else // Race
	{
		if(RaceParticipant[playerid] == false) return SendClientMessage(playerid, 0xFF0000AA, "[ERROR] You are not in the race.");
		if(RaceStarted != 2) return SendClientMessage(playerid,0xFF0000AA, "[ERROR]The race not start yet, wait untill start.");
		JoinCount--;
		RaceParticipant[playerid] = false;
		SetVehicleHealth(GetPlayerVehicleID(playerid),1250.0);
		DisablePlayerRaceCheckpoint(playerid);
		HidePlayerRaceTextdraws(playerid);
		rpInfo[playerid][CPProgess] = 0;
		KillTimer(rpInfo[playerid][InfoTimer]);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		if(JoinCount <= 0) StopRace();
		DisableRemoteVehicleCollisions(playerid, 0);

		format(str, sizeof(str), ""RACE" "RED_E"%s(%i) has left the race.", pName[playerid], playerid);
		SendClientMessageToAll(COLOR_RED, str);
		
	    if(GOD[playerid] == 1) //&& god3D[playerid] == Text3D:-1)
		{
			TextDrawShowForPlayer(playerid, godTD);
			TextDrawShowForPlayer(playerid, godTDBOX);
	    	GameTextForPlayer(playerid,"~y~GODMODE: ~n~~g~ON~y~",3000,3);
		    SendClientMessage(playerid, COLOR_GREEN, ""UFF" "GREY_E"You have enabled god-mode. You will now have infinite health in stunt zones.");
	  		SendClientMessage(playerid, COLOR_RED, "> "YELLOW_E"You will not be able to use weapons with godmode enabled, type /god again to disable.");
		}
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 100);
        GodModeLabel(playerid, true);
        TextDrawShowForPlayer(playerid, TeleTD);
		CarLocked[vID] = false;
		foreach(Player, ii)
	 	{
	  		SetVehicleParamsForPlayer(vID, ii, 0, 0);
	    }
	}
	return 1;
}
stock PlayerInRangeOfPlayer(playerid, targetid, Float:range=10.0)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(targetid, x, y, z);
    if(IsPlayerInRangeOfPoint(playerid, range, x, y, z)) return 1;
    return 0;
}
CMD:exitdm(playerid) return cmd_leavedm(playerid);
CMD:leavedm(playerid)
{
	if(InDM[playerid] >= 1)
	{
		if(InDM[playerid] == 13) // CnR
		{
		    if(GetPVarInt(playerid, "Robber") != 0)
		    {
				foreach(Player, ii)
				{
 				    if(GetPVarInt(ii, "Cop") != 0)
 				    {
 				        if(PlayerInRangeOfPlayer(playerid, ii, 50.0))
 				        {
							return Error(playerid, "You can't type /leave nearby a cop, escape first!");
 				        }
 				    }
  		 		}
	 		}
			RemoveItems(playerid);
			RemovePlayerFromDM(playerid);
			LoadPlayerPosition(playerid);
		}
		else
		{
			if(InDM[playerid] == 3 || InDM[playerid] == 4 || InDM[playerid] == 7) // Minigun and Rocket
			{
				ResetPlayerWeapons(playerid);
			    SetPlayerArmedWeapon(playerid, 0);
			    pSpawned[playerid] = 0;
			    SetPlayerHealth(playerid, 99999);
			    TogglePlayerControllable(playerid, false);
				SetTimerEx("RemoveFromDeathmatch", 2500, false, "i", playerid);
				InfoTD_MSG(playerid, 3000, "You are being removed from the deathmatch. Please wait..");
			}
			else
			{
				RemovePlayerFromDM(playerid);
	        	LoadPlayerPosition(playerid);
	        	UpdateDMText();
	  		}
	 	}
 		if(GetPVarInt(playerid, "killCamSpectator"))
		{
		    new watcherid = GetPVarInt(playerid, "killCamSpectator");
		    KillTimer(killCamTimer[watcherid]);
			TogglePlayerSpectating(watcherid, 0);
			killCamON[watcherid] = false;
		    DeletePVar(playerid, "killCamSpectator");
		}
 	 	if(playerSpectated[playerid] != 0)
	 	{
			format(str, sizeof(str), ""YELLOW_E"SPEC: "WHITEP_E"%s(%i) has left the deathmatch.", pName[playerid], playerid);
			foreach(Player, ii)
			{
				if(pSpectating[ii] == playerid && GetPlayerState(ii) == PLAYER_STATE_SPECTATING)
			    {
			   		SetPlayerVirtualWorld(ii, GetPlayerVirtualWorld(playerid));
			   		SetPlayerInterior(ii, GetPlayerInterior(playerid));
			   		PlayerSpectatePlayer(ii, playerid);
	     			SendClientMessage(ii, COLOR_WHITEP, str);
	   			}
		    }
		}
	}
	else Error(playerid, "You are not currently in a deathmatch!");
	return 1;
}




//========Shooter Count===
function ShooterCD()
{
	if(IsShooterRunning == false)
	{
		IsShooterRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 97)
			{
				ShooterWinner[ii] = true;
				bShooterPlayers++;
				TextDrawShowForPlayer(ii, SHCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m1s = 0; m1s < sizeof(Shooter_Map1Spawns); m1s++)
			   	{
					if(!Shooter_Map1Spawns[m1s][m1sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Shooter_Map1Spawns[m1s][m1sX], Shooter_Map1Spawns[m1s][m1sY], Shooter_Map1Spawns[m1s][m1sZ]);
		    			SetPlayerPos(ii, Shooter_Map1Spawns[m1s][m1sX], Shooter_Map1Spawns[m1s][m1sY], Shooter_Map1Spawns[m1s][m1sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Shooter_Map1Spawns[m1s][m1sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(3))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Shooter_Map1Spawns[m1s][m1sX], Shooter_Map1Spawns[m1s][m1sY], floatadd(Shooter_Map1Spawns[m1s][m1sZ], 0.5), Shooter_Map1Spawns[m1s][m1sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, SHOOTER_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], SHOOTER_WORLD);
						SetTimerEx("unfreezePutInShooterVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Shooter_Map1Spawns[m1s][m1sX], Shooter_Map1Spawns[m1s][m1sY], Shooter_Map1Spawns[m1s][m1sZ]+1, Shooter_Map1Spawns[m1s][m1sA]);

						Shooter_Map1Spawns[m1s][m1sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(shootercd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", shootercd);
			TextDrawSetString(SHCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 97)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(ShooterCountdown);
			ShooterCountdown = -1;
			if(CurrentShooterPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 97)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(SHCT, "~w~Shooter Started");
		   			}
	   			}
				SetTimer("unshowShooterCT", 1200, false);
				StartShooterMap1();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 97)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, SHOOTER_WORLD);
		       			SetPlayerShooterStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowShooterVotingDialog(ii);
					}
				}
				SendShooterMessage(COLOR_WHITEP, ""SHOOTER" Shooter has ended due to lack of participants.");
			}
		}
	}
	shootercd--;
}
function ShooterCD2()
{
	if(IsShooterRunning == false)
	{
		IsShooterRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 97)
			{
				ShooterWinner[ii] = true;
				bShooterPlayers++;
				TextDrawShowForPlayer(ii, SHCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m2s = 0; m2s < sizeof(Shooter_Map2Spawns); m2s++)
			   	{
					if(!Shooter_Map2Spawns[m2s][m2sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Shooter_Map2Spawns[m2s][m2sX], Shooter_Map2Spawns[m2s][m2sY], Shooter_Map2Spawns[m2s][m2sZ]);
		    			SetPlayerPos(ii, Shooter_Map2Spawns[m2s][m2sX], Shooter_Map2Spawns[m2s][m2sY], Shooter_Map2Spawns[m2s][m2sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Shooter_Map2Spawns[m2s][m2sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(2))
						{
							case 0: vd = 411;
							case 1: vd = 415;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Shooter_Map2Spawns[m2s][m2sX], Shooter_Map2Spawns[m2s][m2sY], floatadd(Shooter_Map2Spawns[m2s][m2sZ], 0.5), Shooter_Map2Spawns[m2s][m2sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, SHOOTER_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], SHOOTER_WORLD);
						SetTimerEx("unfreezePutInShooterVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Shooter_Map2Spawns[m2s][m2sX], Shooter_Map2Spawns[m2s][m2sY], Shooter_Map2Spawns[m2s][m2sZ]+1, Shooter_Map2Spawns[m2s][m2sA]);
						Shooter_Map2Spawns[m2s][m2sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(shootercd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", shootercd);
			TextDrawSetString(SHCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 97)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(ShooterCountdown);
			ShooterCountdown = -1;
			if(CurrentShooterPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 97)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(SHCT, "~w~Shooter Started");
		   			}
	   			}
				SetTimer("unshowShooterCT", 1200, false);
				StartShooterMap2();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 97)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, SHOOTER_WORLD);
		       			SetPlayerShooterStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowShooterVotingDialog(ii);
					}
				}
				SendShooterMessage(COLOR_WHITEP, ""SHOOTER" Shooter has been cancelled due to lack of participants.");
			}
		}
	}
	shootercd--;
}
//====================Shooter count
function derbyCD()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m1s = 0; m1s < sizeof(Derby_Map1Spawns); m1s++)
			   	{
					if(!Derby_Map1Spawns[m1s][m1sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]);
		    			SetPlayerPos(ii, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map1Spawns[m1s][m1sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
							case 3: vd = 415;
							case 4: vd = 411;
							case 5: vd = 506;
						}
						//SpawnPlayerVehicle(ii, vd, false);
						//SetPlayerVehiclePosition(ii, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ], Derby_Map1Spawns[m1s][m1sA]);
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], floatadd(Derby_Map1Spawns[m1s][m1sZ], 0.5), Derby_Map1Spawns[m1s][m1sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Derby_Map1Spawns[m1s][m1sX], Derby_Map1Spawns[m1s][m1sY], Derby_Map1Spawns[m1s][m1sZ]+1, Derby_Map1Spawns[m1s][m1sA]);

						Derby_Map1Spawns[m1s][m1sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap1();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has ended due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD2()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m2s = 0; m2s < sizeof(Derby_Map2Spawns); m2s++)
			   	{
					if(!Derby_Map2Spawns[m2s][m2sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]);
		    			SetPlayerPos(ii, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map2Spawns[m2s][m2sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 494;
							case 1: vd = 495;
							case 2: vd = 504;
							case 3: vd = 504;
							case 4: vd = 573;
							case 5: vd = 402;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], floatadd(Derby_Map2Spawns[m2s][m2sZ], 0.5), Derby_Map2Spawns[m2s][m2sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Derby_Map2Spawns[m2s][m2sX], Derby_Map2Spawns[m2s][m2sY], Derby_Map2Spawns[m2s][m2sZ]+1, Derby_Map2Spawns[m2s][m2sA]);
						Derby_Map2Spawns[m2s][m2sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap2();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has been cancelled due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD3()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m3s = 0; m3s < sizeof(Derby_Map3Spawns); m3s++)
			   	{
					if(!Derby_Map3Spawns[m3s][m3sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]);
		    			SetPlayerPos(ii, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map3Spawns[m3s][m3sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
							case 3: vd = 494;
							case 4: vd = 579;
							case 5: vd = 470;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], floatadd(Derby_Map3Spawns[m3s][m3sZ], 0.5), Derby_Map3Spawns[m3s][m3sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Derby_Map3Spawns[m3s][m3sX], Derby_Map3Spawns[m3s][m3sY], Derby_Map3Spawns[m3s][m3sZ]+1, Derby_Map3Spawns[m3s][m3sA]);
      					Derby_Map3Spawns[m3s][m3sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap3();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has been cancelled due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD4()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m4s = 0; m4s < sizeof(Derby_Map4Spawns); m4s++)
			   	{
					if(!Derby_Map4Spawns[m4s][m4sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]);
		    			SetPlayerPos(ii, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map4Spawns[m4s][m4sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 424;
							case 1: vd = 579;
							case 2: vd = 495;
							case 3: vd = 429;
							case 4: vd = 402;
							case 5: vd = 541;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], floatadd(Derby_Map4Spawns[m4s][m4sZ], 0.5), Derby_Map4Spawns[m4s][m4sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii], Derby_Map4Spawns[m4s][m4sX], Derby_Map4Spawns[m4s][m4sY], Derby_Map4Spawns[m4s][m4sZ]+1, Derby_Map4Spawns[m4s][m4sA]);
						Derby_Map4Spawns[m4s][m4sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap4();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has been cancelled due to lack of participants.");
			}
		}
	}
	derbycd--;
}

function derbyCD5()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m5s = 0; m5s < sizeof(Derby_Map5Spawns); m5s++)
			   	{
					if(!Derby_Map5Spawns[m5s][m5sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]);
		    			SetPlayerPos(ii, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map5Spawns[m5s][m5sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 427;
							case 1: vd = 601;
							case 2: vd = 573;
							case 3: vd = 556;
							case 4: vd = 433;
							case 5: vd = 416;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], floatadd(Derby_Map5Spawns[m5s][m5sZ], 0.5), Derby_Map5Spawns[m5s][m5sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii], Derby_Map5Spawns[m5s][m5sX], Derby_Map5Spawns[m5s][m5sY], Derby_Map5Spawns[m5s][m5sZ]+1, Derby_Map5Spawns[m5s][m5sA]);
						Derby_Map5Spawns[m5s][m5sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap5();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has been cancelled due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD6()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m6s = 0; m6s < sizeof(Derby_Map6Spawns); m6s++)
			   	{
					if(!Derby_Map6Spawns[m6s][m6sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]);
		    			SetPlayerPos(ii, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map6Spawns[m6s][m6sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
							case 3: vd = 415;
							case 4: vd = 411;
							case 5: vd = 506;
						}
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], floatadd(Derby_Map6Spawns[m6s][m6sZ], 0.5), Derby_Map6Spawns[m6s][m6sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii], Derby_Map6Spawns[m6s][m6sX], Derby_Map6Spawns[m6s][m6sY], Derby_Map6Spawns[m6s][m6sZ]+1, Derby_Map6Spawns[m6s][m6sA]);
						Derby_Map6Spawns[m6s][m6sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap6();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has been cancelled due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD7()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m7s = 0; m7s < sizeof(Derby_Map7Spawns); m7s++)
			   	{
					if(!Derby_Map7Spawns[m7s][m7sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]);
		    			SetPlayerPos(ii, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map7Spawns[m7s][m7sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
						switch(random(6))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
							case 3: vd = 415;
							case 4: vd = 411;
							case 5: vd = 506;
						}
						//SpawnPlayerVehicle(ii, vd, false);
						//SetPlayerVehiclePosition(ii, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ], Derby_Map7Spawns[m7s][m7sA]);
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], floatadd(Derby_Map7Spawns[m7s][m7sZ], 0.5), Derby_Map7Spawns[m7s][m7sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Derby_Map7Spawns[m7s][m7sX], Derby_Map7Spawns[m7s][m7sY], Derby_Map7Spawns[m7s][m7sZ]+1, Derby_Map7Spawns[m7s][m7sA]);

						Derby_Map7Spawns[m7s][m7sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap7();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has ended due to lack of participants.");
			}
		}
	}
	derbycd--;
}
function derbyCD8()
{
	if(IsDerbyRunning == false)
	{
		IsDerbyRunning = true;
		foreach(Player, ii)
		{
			if(doingStunt[ii] == 19)
			{
				DerbyWinner[ii] = true;
				bDerbyPlayers++;
				TextDrawShowForPlayer(ii, derbyCT);
				TextDrawHideForPlayer(ii, TeleTD);
				InfoTD_MSG(ii, 500, " ");
			   	for(new m8s = 0; m8s < sizeof(Derby_Map8Spawns); m8s++)
			   	{
					if(!Derby_Map8Spawns[m8s][m8sUsed])
			 		{
			 			Streamer_UpdateEx(ii, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]);
		    			SetPlayerPos(ii, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]+2.0);
		    			SetPlayerFacingAngle(ii, Derby_Map8Spawns[m8s][m8sA]);
						SetCameraBehindPlayer(ii);
		    		    SetPlayerHealth(ii, 98);
		    		    ResetPlayerWeapons(ii);
		    		    ShowPlayerDialog(ii, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");

		    		    new vd;
      					switch(random(6))
						{
							case 0: vd = 429;
							case 1: vd = 402;
							case 2: vd = 541;
							case 3: vd = 415;
							case 4: vd = 411;
							case 5: vd = 506;
						}
						//SpawnPlayerVehicle(ii, vd, false);
						//SetPlayerVehiclePosition(ii, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ], Derby_Map8Spawns[m8s][m8sA]);
						if(pSpawnVehicle[ii] != -1)
						{
							DestroyVehicle(pSpawnVehicle[ii]);
							RemoveComponents(ii);
						}
						pSpawnVehicle[ii] = CreateVehicle(vd, Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], floatadd(Derby_Map8Spawns[m8s][m8sZ], 0.5), Derby_Map8Spawns[m8s][m8sA], (random(128) + 127), (random(128) + 127), -1);
						SetPlayerVirtualWorld(ii, DERBY_WORLD);
						SetVehicleVirtualWorld(pSpawnVehicle[ii], DERBY_WORLD);
						SetTimerEx("unfreezePutInDerbyVehicle", 2000, false, "idffff", ii, pSpawnVehicle[ii],  Derby_Map8Spawns[m8s][m8sX], Derby_Map8Spawns[m8s][m8sY], Derby_Map8Spawns[m8s][m8sZ]+1, Derby_Map8Spawns[m8s][m8sA]);

						Derby_Map8Spawns[m8s][m8sUsed] = true;
						break;
					}
	 			}
			}
		}
	}
	switch(derbycd)
	{
	    case 5, 4, 3, 2, 1:
	    {
	    	format(str, sizeof(str), "%d", derbycd);
			TextDrawSetString(derbyCT, str);

			foreach(Player, ii)
			{
				if(doingStunt[ii] == 19)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
		}
		case 0:
		{
			KillTimer(derbyCountdown);
			derbyCountdown = -1;
			if(CurrentDerbyPlayers > 1)
			{
			    foreach(Player, ii)
				{
					if(doingStunt[ii] == 19)
					{
						TogglePlayerControllable(ii, true);
						RepairVehicle(GetPlayerVehicleID(ii));
						PlayerPlaySound(ii, 3200, 0, 0, 0);
					   	TextDrawSetString(derbyCT, "~g~~h~GO!");
		   			}
	   			}
				SetTimer("unshowDerbyCT", 1200, false);
				StartDerbyMap8();
			}
			else
			{
				foreach(Player, ii)
    			{
		  			if(doingStunt[ii] == 19)
					{
					    RemovePlayerFromVehicle(ii);
					    if(pSpawnVehicle[ii] != -1)
					    {
					    	DestroyVehicle(pSpawnVehicle[ii]);
					    	pSpawnVehicle[ii] = -1;
						}
		       			SetPlayerVirtualWorld(ii, DERBY_WORLD);
		       			SetPlayerDerbyStaticMeshes(ii);
						TogglePlayerControllable(ii, false);
						ShowDerbyVotingDialog(ii);
					}
				}
				SendDerbyMessage(COLOR_WHITEP, ""DERBY" Derby has ended due to lack of participants.");
			}
		}
	}
	derbycd--;
}

forward EventCD();
public EventCD()
{
	foreach(Player, ii)
	{
		if(InEvent[ii] == 0) continue;
		if(evcd == 5)
		{
			if(pAdmin[ii] == 0) TogglePlayerControllable(ii, false);
			GameTextForPlayer(ii, " ", 500, 6);
			SetCameraBehindPlayer(ii);
			TextDrawShowForPlayer(ii, raceCT);
		}
	}
	switch(evcd)
	{
	    case 5, 4, 3, 2, 1:
	    {
			format(str, sizeof(str), "%d", evcd);
			TextDrawSetString(raceCT, str);

			foreach(Player, ii)
			{
				if(InEvent[ii] != 0)
				{
					PlayerPlaySound(ii, 1056, 0.0, 0.0, 0.0);
			   	}
		   	}
	  	}
	  	case 0:
		{

		    SendClientMessageToAll(COLOR_LB,""EVENT" "WHITEP_E"Event has started! Watch the event using "WHITE_E"/watchevent!");
		    KillTimer(eCountdown);
		    foreach(Player, ii)
		    {
		        if(InEvent[ii] != 0)
		    	{
		    		TextDrawHideForPlayer(ii, raceCT);
					TogglePlayerControllable(ii, true);
					GameTextForPlayer(ii, "~r~~h~fight!", 5000, 3);
					SendClientMessage(ii, COLOR_YELLOW, ""EVENT" "YELLOW_E"You must eliminate all the other contenders and be the last man standing to win this event. Good luck!");
					PlayerPlaySound(ii, 3200, 0, 0, 0);
				}
			}
		}
	}
	evcd--;
}
function unshowRaceCT()
{
	foreach(Player, ii)
	{
		if(RaceParticipant[ii] == false) continue;
	   	TextDrawHideForPlayer(ii, raceCT);
	}
}


function unshowDerbyCT()
{
	foreach(Player, ii)
	{
		if(doingStunt[ii] == 19) TextDrawHideForPlayer(ii, derbyCT);
	}
}
function unshowShooterCT()
{
	foreach(Player, ii)
	{
		if(doingStunt[ii] == 97) TextDrawHideForPlayer(ii, SHCT);
	}
}
stock SetRaceCheckpoint(playerid, target, next)
{
	if(next == -1 && Airrace == 0)
	{
		SetPlayerRaceCheckpoint(playerid, 1, RaceCheckpoints[target][0], RaceCheckpoints[target][1], RaceCheckpoints[target][2], 0.0, 0.0, 0.0, 14.0);
	}
	else if(next == -1 && Airrace == 1)
	{
		SetPlayerRaceCheckpoint(playerid, 4, RaceCheckpoints[target][0], RaceCheckpoints[target][1], RaceCheckpoints[target][2], 0.0, 0.0, 0.0, 14.0);
	}
	else if(Airrace == 1)
	{
		SetPlayerRaceCheckpoint(playerid, 3, RaceCheckpoints[target][0], RaceCheckpoints[target][1], RaceCheckpoints[target][2], RaceCheckpoints[next][0], RaceCheckpoints[next][1], RaceCheckpoints[next][2], 14.0);
	}
	else
	{
		SetPlayerRaceCheckpoint(playerid, 0, RaceCheckpoints[target][0], RaceCheckpoints[target][1], RaceCheckpoints[target][2], RaceCheckpoints[next][0], RaceCheckpoints[next][1], RaceCheckpoints[next][2], 14.0);
	}
}

stock SetBRaceCheckpoint(playerid,target,next)
{
	if(next == -1 && BAirrace == 0)
	{
		SetPlayerRaceCheckpoint(playerid, 1, BRaceCheckpoints[target][0], BRaceCheckpoints[target][1], BRaceCheckpoints[target][2], 0.0, 0.0, 0.0,BCPsize);
	}
	else if(next == -1 && BAirrace == 1)
	{
		SetPlayerRaceCheckpoint(playerid, 4, BRaceCheckpoints[target][0], BRaceCheckpoints[target][1], BRaceCheckpoints[target][2], 0.0, 0.0, 0.0, BCPsize);
	}
	else if(BAirrace == 1)
	{
		SetPlayerRaceCheckpoint(playerid, 3, BRaceCheckpoints[target][0], BRaceCheckpoints[target][1], BRaceCheckpoints[target][2], BRaceCheckpoints[next][0], BRaceCheckpoints[next][1], BRaceCheckpoints[next][2], BCPsize);
	}
	else
	{
		SetPlayerRaceCheckpoint(playerid, 0, BRaceCheckpoints[target][0], BRaceCheckpoints[target][1], BRaceCheckpoints[target][2], BRaceCheckpoints[next][0], BRaceCheckpoints[next][1], BRaceCheckpoints[next][2], BCPsize);
	}
}



stock BActiveCP(playerid, sele)
{
	if(BCurrentCheckpoints -1 == sele)
	{
		SetBRaceCheckpoint(playerid, sele, -1);
	}
	else
	{
		SetBRaceCheckpoint(playerid, sele, sele + 1);
	}
}




stock clearrace(playerid)
{
	for(new ii = 0; ii < BCurrentCheckpoints; ii++)
	{
		BRaceCheckpoints[ii][0] = 0.0;
		BRaceCheckpoints[ii][1] = 0.0;
		BRaceCheckpoints[ii][2] = 0.0;
	}
	BCurrentCheckpoints = 0;
	DisablePlayerRaceCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_GREY, ""UFF" "GREY_E"Your race has been cleared! Use /buildrace to start a new one.");

	RaceBuilders[playerid] = 0;
}



// Ban System
function CheckBan(playerid)
{
	if(MySQL_rowCount())
	{
	    new Reason[40];
	    new banTime_Int, banDate, banTime[30], banIP[16];
		MySQL_getString(0, 0, PlayerName);
		MySQL_getString(0, 1, Reason);
		banTime_Int = MySQL_getInt(0, 2);
		banDate = MySQL_getInt(0, 3);
        MySQL_getString(0, 4, banIP);

		new currentTime = gettime();
		if(banTime_Int == 0)
  		{
    		banTime = "Permanent";
  		}
  		else
  		{
            if(currentTime > banTime_Int) // Unban the player.
			{
			    format(query, sizeof(query), "DELETE FROM bans WHERE bIP = '%s'", banIP);
				MySQL_updateQuery(query);
				SetPVarInt(playerid, "PlayerUnbanned", 1);
			}
			else
			{
  				new tmp_banTime = banTime_Int - gettime();
	   			if(tmp_banTime > 86400)
		   		{
					tmp_banTime = tmp_banTime/86400;
			    	format(banTime, sizeof(banTime), "%d days left.", tmp_banTime);
	   			}
			   	else banTime = "Few hours";
	   		}
  		}
    	if(!GetPVarType(playerid, "PlayerUnbanned"))
    	{
			localtime(banDate, tmParam);
			strftime(tmp, sizeof(tmp), "%d/%m/%Y", tmParam);

			pLogged[playerid] = false; // Don't save banned player stats.
			doingStunt[playerid] = 99;
			printf("DEBUG: Ban Getting Called on %s", pName[playerid]);
			GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
			format(str, sizeof(str), ""RED_E"Server: "GREY2_E"%s(%i) has been auto-kicked for ban evading.", pName[playerid], playerid);
			SendClientMessageToAll(COLOR_GREY2, str);
			format(str, sizeof(str), "2Server:3 %s(%i)4 has been auto-kicked for ban evading.", pName[playerid], playerid);
			IRC_GroupSay(ircGroup, IRC_aCHANNEL, str), IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			HideConnectTD(playerid, false);
			InfoTD_MSG(playerid, 5000, "~r~~h~You are banned from this server!");
			for(new l; l < 20; l++) SendClientMessage(playerid, COLOR_DARK, "\n");
			SendClientMessage(playerid, COLOR_RED, "You are banned from this server!");
			format(line, sizeof(line), ""RED_E"You are banned from this server!\n\n"LB2_E"Ban Info:\n"RED_E"Name: "GREY2_E"%s\n"RED_E"IP: "GREY2_E"%s\n"RED_E"Admin: "GREY2_E"%s\n"RED_E"Ban Date: "GREY2_E"%s\n"RED_E"Ban Reason: "GREY2_E"%s\n"RED_E"Ban Time: "GREY2_E"%s\n\n"WHITE_E"Feel that you were wrongfully banned? Appeal at uffserver.com/forum", pName[playerid], PlayerIP, PlayerName, tmp, Reason, banTime);
			ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"BANNED", line, "Exit", "");
			KickEx(playerid);
			return 1;
		}
	}

	if(pLogged[playerid] == true)
	{
	    foreach(Player, ii)
		{
			if(pRegID[playerid] == pRegID[ii] && ii != playerid)
			{
			    if(pSpawned[playerid] == 0)
	   			{
	            	SendClientMessage(playerid, COLOR_RED, "Server: You have an account that's already on the server!");
	            	format(str, sizeof(str), "2Server:3 %s(%i)4 has been kicked for having an account that's already on the server.", pName[playerid], playerid);
					IRC_GroupSay(ircGroup, IRC_aCHANNEL, str), IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
			    	KickEx(playerid);
			    	return 1;
    			}
  			}
		}
		OnUserLogin(playerid);
		MySQL_LoadPlayerToys(playerid);
		MySQL_LoadPlayerVehicle(playerid);
		MySQL_LoadPlayerGroup(playerid);
		MySQL_LoadPlayerAchivements(playerid);
		MySQL_LoadPlayerHouse(playerid);
	}
    return 1;
}

MySQL_LoadPlayerHouse(playerid)
{
	format(query, sizeof(query), "SELECT hID,hbuyer,hprice FROM soldhouses WHERE name='%s'", pName[playerid]);
	MySQL_query(query, true, "LoadPlayerHouse", "i", playerid);
}

function LoadPlayerHouse(playerid)
{
	if(MySQL_rowCount())
	{
	    new houseid, housebuyer[24], hprice;
	    houseid = MySQL_getInt(0, 0);
		MySQL_getString(0, 1, housebuyer);
		hprice = MySQL_getInt(0, 2);

		GivePlayerCash(playerid, hprice);
		ShowInfoBox(playerid, ""ORANGE_E"Your house (ID: %d) has been purchased!\n\n"WHITEP_E"%s has purchased your house for "GREEN_E"$"WHITE_E"%s", houseid, housebuyer, ToCurrency(hprice));
        format(query, sizeof(query), "UPDATE players SET house_id=-1 WHERE house_id=%d", houseid);
		MySQL_updateQuery(query);
		if(houseID[playerid] == houseid) houseID[playerid] = -1;
		if(GetOwnedHouses(playerid) == 0)
		{
			if(pSpawnPlace[playerid] == 1)
			{
	  			format(query, sizeof(query), "UPDATE players SET spawnplace=-1 WHERE reg_id=%d", pRegID[playerid]);
				MySQL_updateQuery(query);
			}
		}
		// Get rid of info
		format(query, sizeof(query), "DELETE FROM soldhouses WHERE name='%s'", pName[playerid]);
		MySQL_updateQuery(query);
	}
}

forward CheckManualBan(playerid);
public CheckManualBan(playerid)
{
	if(MySQL_rowCount())
	{
		new Reason[40];
		new banTime_Int, banDate, banTime[30];
		MySQL_getString(0, 0, giveplayer);
		MySQL_getString(0, 1, Reason);
		banTime_Int = MySQL_getInt(0, 2);
		banDate = MySQL_getInt(0, 3);

		if(banTime_Int == 0)
  		{
    		banTime = "Permanent";
  		}
  		else
  		{
	   		new tmp_banTime = banTime_Int - gettime();
   			if(tmp_banTime > 86400)
	   		{
				tmp_banTime = tmp_banTime/86400;
		    	format(banTime, sizeof(banTime), "%d days left.", tmp_banTime);
   			}
		   	else banTime = "Few hours";
  		}

  		localtime(banDate, tmParam);
		strftime(tmp, sizeof(tmp), "%d/%m/%Y", tmParam);

  		// DEBUG
  		pLogged[playerid] = false; // Don't save banned player stats.
		doingStunt[playerid] = 99;
		printf("DEBUG: Ban Getting Called on %s", pName[playerid]);
		GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
		format(str, sizeof(str), ""RED_E"Server: "GREY2_E"%s(%i) has been auto-kicked for ban evading.", pName[playerid], playerid);
		SendClientMessageToAll(COLOR_GREY2, str);
		format(str, sizeof(str), "2Server:3 %s(%i)4 has been auto-kicked for ban evading.", pName[playerid], playerid);
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, str), IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
		HideConnectTD(playerid, false);
		InfoTD_MSG(playerid, 5000, "~r~~h~You are banned from this server!");
		for(new l; l < 20; l++) SendClientMessage(playerid, COLOR_DARK, "\n");
		SendClientMessage(playerid, COLOR_RED, "You are banned from this server!");
		format(line, sizeof(line), ""RED_E"You are banned from this server!\n\n"LB2_E"Ban Info:\n"RED_E"Name: "GREY2_E"%s\n"RED_E"IP: "GREY2_E"%s\n"RED_E"Admin: "GREY2_E"%s\n"RED_E"Ban Date: "GREY2_E"%s\n"RED_E"Ban Reason: "GREY2_E"%s\n"RED_E"Ban Time: "GREY2_E"%s\n\n"WHITE_E"Feel that you were wrongfully banned? Appeal at uffserver.com/forum", pName[playerid], PlayerIP, giveplayer, tmp, Reason, banTime);
		ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""RED_E"BANNED", line, "Exit", "");

		// Update Banned IP
		format(query, sizeof(query), "UPDATE bans SET bIP ='%s' WHERE user_banned='%s'", PlayerIP, pName[playerid]);
		MySQL_updateQuery(query);
		KickEx(playerid);
		return true;
	}
	return true;
}

CMD:baninfo(playerid, params[]) return cmd_baninfo(playerid, params);
CMD:checkban(playerid, params[])
{
	if(sscanf(params, "s[24]", tmp))
	{
	    Usage(playerid, "/checkban <ban name/IP>");
	    return true;
	}
	if(strfind(tmp, "%", true) != -1) return Error(playerid, "Invalid characters in ban name!");

	new numCount;
 	for(new i = 0; i < strlen(tmp); i++)
  	{
         if(tmp[i] >= '0' && tmp[i] <= '9')
      	{
       		numCount++;
      	}
  	}
  	new escaped_tmp[24];
	mysql_real_escape_string(tmp, escaped_tmp);
   	if(numCount > 8) // IP
	{
	    format(query, sizeof(query), "SELECT user_banner,ban_reason,user_banned,ban_timestamp,ban_time,bIP FROM bans WHERE bIP = '%s'", escaped_tmp);
	}
	else format(query, sizeof(query), "SELECT user_banner,ban_reason,user_banned,ban_timestamp,ban_time,bIP FROM bans WHERE user_banned = '%s'", escaped_tmp); // Name
	MySQL_query(query, true, "CheckPlayerBanned", "is", playerid, escaped_tmp);
	return true;
}

function CheckPlayerBanned(adminid, BannedName[])
{
	if(!MySQL_rowCount())
	{
 		format(str, sizeof(str), ""RED_E"[ERROR] "GREY_E"No player with name or IP '%s' found on the ban list.", BannedName);
		SendClientMessage(adminid, COLOR_GREY, str);
	}
	else
	{
		new BannedPlayer[24], Reason[40];
		new banTime_Int, banTime[15], banIP[16];
		new dateBanned;
		MySQL_getString(0, 0, PlayerName);
		MySQL_getString(0, 1, Reason);
		MySQL_getString(0, 2, BannedPlayer);
		dateBanned = MySQL_getInt(0, 3);
		banTime_Int = MySQL_getInt(0, 4);
		MySQL_getString(0, 5, banIP);

		if(banTime_Int == 0)
  		{
    		banTime = "Permanent";
  		}
  		else
  		{
	   		new tmp_banTime = banTime_Int - gettime();
   			if(tmp_banTime > 86400)
	   		{
				tmp_banTime = tmp_banTime/86400;
		    	format(banTime, sizeof(banTime), "%d days left.", tmp_banTime);
   			}
		   	else banTime = "Few hours";
  		}
		localtime(dateBanned, tmParam);
		strftime(tmp, sizeof(tmp), "%d/%m/%Y", tmParam);

		SendClientMessage(adminid, COLOR_RED, "Ban Info:");
		if(pAdmin[adminid] != 0)
		{
		    format(line, sizeof(line), "Player: %s || Admin: %s || Ban Date: %s || Ban IP: %s || Time Left: %s", BannedPlayer, PlayerName, tmp, banIP, banTime);
			SendClientMessage(adminid, COLOR_WHITEP, line);
			format(line, sizeof(line), "Ban Reason: %s", Reason);
			SendClientMessage(adminid, COLOR_WHITEP, line);
		}
		else
  		{
			format(line, sizeof(line), "Player: %s || Admin: %s || Ban Date: %s || Time Left: %s", BannedPlayer, PlayerName, tmp, banTime);
			SendClientMessage(adminid, COLOR_WHITEP, line);
			format(line, sizeof(line), "Ban Reason: %s", Reason);
			SendClientMessage(adminid, COLOR_WHITEP, line);
   		}
	}
	return true;
}

forward OnUnbanQueryData(adminid, BannedName[]);
public OnUnbanQueryData(adminid, BannedName[])
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "[ERROR] "GREY_E"No player named '%s' found on the ban list.", BannedName);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	else
	{
	    new banIP[16];
		MySQL_getString(0, 1, banIP);
		format(query, sizeof(query), "DELETE FROM bans WHERE bIP = '%s'", banIP);
		MySQL_updateQuery(query);

		format(str, sizeof(str), "4Server:3 %s(%i) has unbanned %s from the server.", pName[adminid], adminid, BannedName);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		if(pHidden[adminid] == 0)
			format(str, sizeof(str), ""UFF" "GREY2_E"%s(%i) has unbanned %s from the server.", pName[adminid], adminid, BannedName);
		else
  			format(str, sizeof(str), ""UFF" "GREY2_E"%s has been unbanned by an Administrator", BannedName);
		SendClientMessageToAll(COLOR_GREY, str);

		format(str, sizeof(str), ""UFF" "GREY2_E"You have unbanned %s (IP: %s) from the server.", BannedName, banIP);
		SendClientMessage(adminid, COLOR_WHITE, str);
	}
	return true;
}

/*function changeWeather()
{
	foreach(Player, ii)
	{
	    if(pTime[ii] == -1 && pWeather[ii] == -1)
	 	{
			switch(TW_Update)
			{
		    	case 0: // Dawn
				{
					SetPlayerTime(ii, 6, 0);
					SetPlayerWeather(ii, 1);
					TW_Update = 1;
				}
				case 1: // Day
				{
	    			SetPlayerTime(ii, 10, 0);
					SetPlayerWeather(ii, 24);
					TW_Update = 0;
				}
			}
			SendClientMessage(ii, COLOR_LB, ""RED_E"Server: "LB2_E"The weather has been automatically changed!");
		}
	}
	return true;
}*/

/*==============================================================================
         					  IRC SYSTEM
===============================================================================*/
stock IRC_SetUp()
{
    ircName[0] = IRC_BOT_1_NAME;
	ircName[1] = IRC_BOT_2_NAME;
	ircName[2] = IRC_BOT_3_NAME;
	ircName[3] = IRC_BOT_4_NAME;
	ircName[4] = IRC_BOT_5_NAME;
	ircName[5] = IRC_BOT_6_NAME;
	ircName[6] = IRC_BOT_7_NAME;
	ircName[7] = IRC_BOT_8_NAME;
	SetTimerEx("IRC_ConnectDelay", 2000, 0, "d", 1); // Connect the first bot with a one-second delay
	SetTimerEx("IRC_ConnectDelay", 3000, 0, "d", 2); // Connect the second bot with a two-second delay
	SetTimerEx("IRC_ConnectDelay", 4000, 0, "d", 3); // Connect the third bot with a three-second delay
	SetTimerEx("IRC_ConnectDelay", 5000, 0, "d", 4); // Connect the 4th bot with a four-second delay
	SetTimerEx("IRC_ConnectDelay", 6000, 0, "d", 5); // Connect the 5th bot with a five-second delay
	SetTimerEx("IRC_ConnectDelay", 7000, 0, "d", 6); // Connect the 6th bot with a three-second delay
	SetTimerEx("IRC_ConnectDelay", 7000, 0, "d", 7); // Connect the 7th bot with a four-second delay
	SetTimerEx("IRC_ConnectDelay", 9000, 0, "d", 8); // Connect the 8th bot with a five-second delay

	// Create the IRC groups
	ircGroup = IRC_CreateGroup();
}

forward IRC_ConnectDelay(tempid);
public IRC_ConnectDelay(tempid)
{
	switch (tempid)
	{
		case 1:
		{
			ircBot[0] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_1_NAME, IRC_REALNAME, IRC_HOSTNAME);
		}
		case 2:
		{
			ircBot[1] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_2_NAME, IRC_REALNAME, IRC_HOSTNAME);
		}
		case 3:
		{
			ircBot[2] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_3_NAME, IRC_REALNAME, IRC_HOSTNAME);
		}
		case 4:
		{
			ircBot[3] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_4_NAME, IRC_REALNAME, IRC_REALNAME);
		}
		case 5:
		{
			ircBot[4] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_5_NAME, IRC_REALNAME, IRC_REALNAME);
		}
		case 6:
		{
			ircBot[5] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_6_NAME, IRC_REALNAME, IRC_HOSTNAME);
		}
		case 7:
		{
			ircBot[6] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_7_NAME, IRC_REALNAME, IRC_REALNAME);
		}
		case 8:
		{
			ircBot[7] = IRC_Connect(IRC_SERVER, IRC_PORT, IRC_BOT_8_NAME, IRC_REALNAME, IRC_REALNAME);
		}
	}
	return 1;
}

stock IRC_QuitBots()
{
	IRC_Quit(ircBot[0], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[1], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[2], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[3], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[4], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[6], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[7], "uffserver.com (server restarting)");
	IRC_Quit(ircBot[8], "uffserver.com (server restarting)");
}

public IRC_OnConnect(botid)
{
	ircBotConnected[botid] = true;
	IRC_JoinChannel(botid, "#UFF.user");
	IRC_JoinChannel(botid, "#UFF.staff");
	printf("IRC_OnConnect(%d): Bot ircBot[%d] has connected.", botid, botid);
	IRC_AddToGroup(ircGroup, botid);
}

public IRC_OnDisconnect(botid)
{
    ircBotConnected[botid] = false;
	IRC_RemoveFromGroup(ircGroup, botid);
}

public IRC_OnJoinChannel(botid, channel[])
{
    printf("IRC_OnJoinChannel(%d): Bot ircBot[%d] has joined %s.", botid, botid, channel);

	ircBotInChannel[botid] = true;
   	IRC_SendRaw(botid, IRC_IDENTIFY_RAW);

	if(botid == ircBot[0] && !strcmp(channel, IRC_CHANNEL, true))
	{
		IRC_GroupSay(ircGroup, IRC_CHANNEL, "2Visit our forums at 3uffserver.com/forum//!");
		IRC_GroupSay(ircGroup, IRC_CHANNEL, "3UFF2,0 is running at 34.228.165.73:7777");
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, "2This is the staff only IRC channel.");
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, "3UFF2,0 is running at Hosted Tab");
  	}
}

public IRC_OnLeaveChannel(botid, channel[], message[])
{
    printf("IRC_OnLeaveChannel(%d): Bot ircBot[%d] has left %s (message: %s).", botid, botid, channel, message);

	if(!strcmp(channel, IRC_CHANNEL, true))
	{
	   	ircBotInChannel[botid] = false;
	}
}

public IRC_OnUserSay(botid, recipient[], user[], host[], message[])
{
	if(botid == ircBot[0])
	{
		if(!strcmp(user, ircName[0], true) || !strcmp(user, ircName[1], true) || !strcmp(user, ircName[2], true))
			return true;
		if(message[0] == '#' && IRC_IsHalfop(botid, recipient, user))
		{
		    new character;
			while(message[++character]) if(message[character] == '%') message[character] = ' ';

			format(str, sizeof(str), "4[ADMIN CHAT]3 %s(IRC): 2%s", user, message[1]);
			IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			format(str, sizeof(str), "[ADMIN CHAT] "LG_E"%s(IRC): "LB_E"%s", user, message[1]);
			SendAdminMessage(COLOR_RED, str);

		}
		if(message[0] == '*' && message[1] != '*')
		{
		    if(!IRC_IsVoice(botid, recipient, user))
		    {
				IRC_Notice(botid, user, "4You must have voice(+v) to be able to talk on the IRC channel!");
			 	return false;
	 		}
		    new character;
			while(message[++character]) if(message[character] == '%') message[character] = ' ';

			if(strfind(message, "/q", true) != -1)
			{
				IRC_GroupSay(ircGroup, IRC_CHANNEL, "4Server:2 You can't use /q on the IRC channel!");
  				return false;
	  		}
            new numCount;
			for(new i = 0; i < strlen(message); i++)
			{
	  			if(message[i] >= '0' && message[i] <= '9')
		    	{
	      			numCount++;
			    }
			}

			if(numCount > 8)
			{
	  			if(strfind(message, "34.228.165.73:7777") == -1)
	   			{
					IRC_GroupSay(ircGroup, IRC_CHANNEL, "4Server:2 You can't post IP's on the IRC channel!");
	    			return true;
				}
			}

  			if(message[1] != ' ')
			{
				format(line, sizeof(line), ""BLUE_E"[IRC] "YELLOW_E"%s: "WHITE_E"%s", user, message[1]);
				format(str, sizeof(str), "0,1%s(IRC):2 %s", user, message[1]);
			}
			else
			{
				format(line, sizeof(line), ""BLUE_E"[IRC] "YELLOW_E"%s: "WHITE_E"%s", user, message[2]);
				format(str, sizeof(str), "0,1%s(IRC):2 %s", user, message[2]);
			}
			SendClientMessageToAll(COLOR_WHITE, line);
			IRC_GroupSay(ircGroup, recipient, str);
		}
	}
	return true;
}

public IRC_OnUserSetChannelMode(botid, channel[], user[], host[], mode[])
{
	if(botid == ircBot[0])
	{
		printf("IRC_OnUserSetChannelMode(%d): %s(%s) changed channel %s mode to %s.", botid, user, host, channel, mode);

		format(str, sizeof(str), ""BLUE_E"[IRC]"WHITE_E" %s set %s channel mode to %s. ("IRC_SERVER")", user, channel, mode);
		SendClientMessageToAll(COLOR_WHITE, str);
	}
	return true;
}

public IRC_OnUserNotice(botid, recipient[], user[], host[], message[])
{
	if(!strcmp(user, IRC_NICKSERV, true))
	{
	    if(ircIdentified[botid] == false)
	    {
			if(strfind(message, IRC_NOTICE_REGISTER, true) != -1)
		    {
				IRC_SendRaw(botid, IRC_IDENTIFY_RAW);
			}
			else if(strfind(message, IRC_NOTICE_PASSWORD_OK, true) != -1)
			{
			    ircIdentified[botid] = true;
				return true;
			}
			else if(strfind(message, IRC_NOTICE_NOREGISTER, true) != -1)
			{
			    IRC_SendRaw(botid, IRC_REGISTER_RAW);
			    IRC_SendRaw(botid, IRC_IDENTIFY_RAW);
			}
  		}
	}
    return true;
}

public IRC_OnUserJoinChannel(botid, channel[], user[], host[])
{
	if(botid == ircBot[0])
	{
	  	format(str, sizeof(str), ""BLUE_E"[IRC]"WHITE_E" %s has joined %s. ("IRC_SERVER")", user, channel);
		SendClientMessageToAll(COLOR_WHITE, str);
	}
	return true;
}

public IRC_OnUserLeaveChannel(botid, channel[], user[], host[])
{
	if(botid == ircBot[0])
	{
		format(str, sizeof(str), ""BLUE_E"[IRC]"WHITE_E" %s has left %s. ("IRC_SERVER")", user, channel);
		SendClientMessageToAll(COLOR_WHITE, str);
	}
	return true;
}

public IRC_OnUserDisconnect(botid, user[], host[], message[])
{
/*	if(botid == ircBot[0])
	{
		format(str, sizeof(str), ""BLUE_E"[IRC]"WHITE_E" %s has disconnected from IRC.", user);
		SendClientMessageToAll(COLOR_WHITE, str);
	}*/
	return true;
}

public IRC_OnUserNickChange(botid, oldnick[], newnick[], host[])
{
	if(botid == ircBot[0])
	{
		format(str, sizeof(str), ""BLUE_E"[IRC]"WHITE_E" %s has changed nick to %s. ("IRC_CHANNEL" on "IRC_SERVER")", oldnick, newnick);
 		SendClientMessageToAll(COLOR_WHITE, str);
 	}
 	return true;
}
IRCCMD:cmds(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user))
	{
		IRC_Notice(botid, user, "7+ (Voice Commands)1: 2!say !pm !info !players !getid !checkban");
	}
	else
	{
		IRC_Notice(botid, user, "7~ (owner)1: 2!rcon !die !gmx !saveallstats !setpassword");
		IRC_Notice(botid, user, "7& (sOP)1:   2!botjoin !botpart !botmsg !botnick !reconnectbots");
		IRC_Notice(botid, user, "7@ (OP)1:    2!banip !unbanip !throw !explode !sethealth !setname !cc !oban !crash !day !night");
	    IRC_Notice(botid, user, "7% (hOP)1:   2!(un)ban !kick !aka !akaip !ann !amsg !(un)mute !(un)freeze !slap !getip !akill !playerinfo !warn");
		IRC_Notice(botid, user, "7% (hOP)1:   2!loadrace !respawnvehicles !caps !pweaps !spectators !check");
		IRC_Notice(botid, user, "7+ (voice)1: 2!say !pm !info !players !getid !checkban");
	}


    #pragma unused botid, user, host, params
    return true;
}
IRCCMD:aka(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "4Usage: 2!aka <ID/Name>");
	    return true;
	}
	if(otherid == INVALID_PLAYER_ID)
        return IRC_GroupSay(ircGroup, channel, "4Player not connected!");
	if(pAdmin[otherid] == 5)
 	{
  		IRC_GroupSay(ircGroup, channel, "4ERROR: 2You can't AKA the Executive Administrator.");
  		format(str, 90, "*** "RED_E"%s(IRC) tried to AKA you!", user);
		SendClientMessage(otherid, COLOR_YELLOW, str);
  		return 1;
    }
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	format(query, sizeof(query), "SELECT name FROM players WHERE IP='%s'", PlayerIP);
	MySQL_query(query, true, "CheckPlayerIP_IRC", "ss", channel, PlayerIP);
	return true;
}

IRCCMD:setpassword(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;

	new cname[24];
	if(sscanf(params, "s[21]s[20]", cname, tmp))
	{
 		IRC_GroupSay(ircGroup, channel, "4Usage: 2!setpassword <name> <new password>");
	   	return true;
	}

	format(query, sizeof(query), "SELECT pass FROM players WHERE name='%s'", cname);
	MySQL_query(query, true, "ChangePlayerPassword_IRC", "sss", channel, cname, tmp);
	return true;
}

IRCCMD:setlevel(botid, channel[], user[], host[], params[])
{
/*
	if(pAdmin[playerid] < 4)
		if(!IsPlayerAdmin(playerid))
	    	return Error(playerid, "You are not authorized to use this command!");

	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    Usage(playerid, "/setlevel <ID/Name> <level 0 - 4>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
		return Error(playerid, "Player not connected!");
	if(alevel > 5)
		return Error(playerid, "Level can't be higher than 5!");
	if(alevel < 0)
		return Error(playerid, "Level can't be lower than 0!");
	if(pAdmin[playerid] == 4)
	{
		if(alevel > 4)
			return Error(playerid, "You can't promote yourself or other players to owner as an head admin.");
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
		SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}
	if(pAdmin[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d!", giveplayer, otherid, alevel);
	    SendClientMessage(playerid, COLOR_RED, str);
		return true;
	}

	new levelstr[12];
	levelstr = (alevel > pAdmin[otherid]) ? ("promoted") : ("demoted");

	switch(alevel)
	{
	    case 0:
		{
			tmp = "Regular Player";
			pHidden[otherid] = 0;
   			format(query, sizeof(query), "UPDATE players SET hidden=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			if(admin3D[otherid] != Text3D:-1) DestroyDynamic3DTextLabel(admin3D[otherid]);
		}
	   	case 1: tmp = "Moderator";
		case 2: tmp = "Administrator";
		case 3: tmp = "Lead Admin";
		case 4: tmp = "Head Administrator";
		case 5: tmp = "Server Owner";
	}

	format(query, sizeof(query), "UPDATE players SET adminlevel=%d WHERE reg_id=%d", alevel, pRegID[otherid]);
	MySQL_updateQuery(query);

	pAdmin[otherid] = alevel;
	SendClientMessageToAll(COLOR_LB, " ");
	format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"Server Owner %s(%i) has %s %s(%i) to %s.", pName[playerid], playerid, levelstr, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_SBLUE, str);
	SendClientMessageToAll(COLOR_LB, " ");
	format(str, sizeof(str), "4Server: 2Server Owner %s(%i) has %s %s(%i) to %s.", pName[playerid], playerid, levelstr, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), "~y~~h~You have been %s to %s!", levelstr, tmp);
	InfoTD_MSG(otherid, 5000, str);
	
*/
	if(!IRC_IsOwner(botid, channel, user)) return false;

	new cname[24];
	if(sscanf(params, "s[21]s[20]", cname, tmp))
	{
 		IRC_GroupSay(ircGroup, channel, "4Usage: 2!setpassword <name> <new password>");
	   	return true;
	}

	format(query, sizeof(query), "SELECT pass FROM players WHERE name='%s'", cname);
	MySQL_query(query, true, "ChangePlayerPassword_IRC", "sss", channel, cname, tmp);
	return true;
}


// SetPassword Callback
function ChangePlayerPassword_IRC(channel[], cPlayer[], newpass[])
{
	if(MySQL_rowCount())
	{
		format(str, sizeof(str), "4Server: 2Password for %s has been set to '%s'", cPlayer, newpass);
		IRC_GroupSay(ircGroup, channel, str);
		format(query, sizeof(query), "UPDATE players SET pass=SHA1('%s') WHERE name='%s'", newpass, cPlayer);
		MySQL_updateQuery(query);
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), "4ERROR: 2The name '%s' doesn't exist in the database!", cPlayer);
		IRC_GroupSay(ircGroup, channel, str);
	}
    return true;
}

IRCCMD:reconnectbots(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;

	format(str, sizeof(str), "4Server: 2%s(IRC) has re-connected all IRC bots.", user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"s(IRC) re-connected all IRC bots.", user);
	SendClientMessageToAll(COLOR_RED, str);
	IRC_QuitBots(); //Disconnect Old bots

	// Set the IRC names
	ircName[0] = IRC_BOT_1_NAME;
	ircName[1] = IRC_BOT_2_NAME;
	ircName[2] = IRC_BOT_3_NAME;
	ircName[3] = IRC_BOT_4_NAME;
	ircName[4] = IRC_BOT_5_NAME;
	SetTimerEx("IRC_ConnectDelay", 3000, 0, "d", 1); // Connect the first bot with a one-second delay
	SetTimerEx("IRC_ConnectDelay", 5000, 0, "d", 2); // Connect the second bot with a two-second delay
	SetTimerEx("IRC_ConnectDelay", 7000, 0, "d", 3); // Connect the third bot with a three-second delay
	SetTimerEx("IRC_ConnectDelay", 9000, 0, "d", 4); // Connect the 4th bot with a four-second delay
	SetTimerEx("IRC_ConnectDelay", 11000, 0, "d", 5); // Connect the 5th bot with a five-second delay

	// Create the IRC groups
	ircGroup = IRC_CreateGroup();
	return 1;
}

function CheckPlayerIP_IRC(echochannel[], zplayerIP[])
{
    new rows = MySQL_rowCount();
	if(!rows)
	{
		IRC_GroupSay(ircGroup, echochannel, "4Server:3 No accounts exist with this IP!");
	}
	else
 	{
 		format(tmp, sizeof(tmp), "4Names matching IP: %s:", zplayerIP);
		IRC_GroupSay(ircGroup, echochannel, tmp);
 		for(new i = 0; i != rows; i++)
		{
			// Get the name from the cache and append it
			MySQL_getString(i, 0, str);
			format(line, sizeof(line), "2%s", str);
			IRC_GroupSay(ircGroup, echochannel, line);
		}
	}
	return 1;
}
IRCCMD:akaip(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!akaip <ip>");
		return false;
	}

	format(query, sizeof(query), "SELECT name FROM players WHERE IP='%s'", params);
	MySQL_query(query, true, "CheckPlayerIP2_IRC", "ss", channel, params);
	return true;
}

function CheckPlayerIP2_IRC(echochannel[], zplayerIP[])
{
    new rows = MySQL_rowCount();
	if(!rows)
	{
		IRC_GroupSay(ircGroup, echochannel, "4Server:3 No accounts exist with this IP!");
	}
	else
 	{
 		format(tmp, sizeof(tmp), "4Names matching IP: %s:", zplayerIP);
		IRC_GroupSay(ircGroup, echochannel, tmp);
 		for(new i = 0; i != rows; i++)
		{
			// Get the name from the cache and append it
			MySQL_getString(i, 0, str);
			format(line, sizeof(line), "2%s", str);
			IRC_GroupSay(ircGroup, echochannel, line);
		}
	}
	return 1;
}
IRCCMD:check(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
    new count = 0;
    IRC_GroupSay(ircGroup, channel,  "4* Possible hacker's:");
    foreach(Player, ii)
	{
		if(pAdmin[ii] == 0 && pPremium[ii] == 0 && InDM[ii] == 0 && InEvent[ii] == 0 && GetPVarInt(ii, "PurchasedWeapons") == 0)
		{
 			new w = GetPlayerWeapon(ii);
    		new Float:armour;
      		GetPlayerArmour(ii, armour);
        	if (armour > 1 || w==16 || w==18 || w==35 || w==36 || w==37 || w==38 || w==39 || w==44 || w==45)
			{
   				format(str, sizeof(str), "3Name: 1%s3, ID: 1%d", pName[ii], ii);
       			IRC_GroupSay(ircGroup, channel,  str);
          		count++;
			}
    	}
    }
    if (count == 0) IRC_GroupSay(ircGroup, channel,  "4HCv4 2found no possible hackers in the server.");
    return 1;
}

IRCCMD:checkban(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "s[24]", tmp))
	{
	    IRC_GroupSay(ircGroup, channel,  "4Usage: 2!checkban <ban name>");
	    return true;
	}
	if(strfind(tmp, "%", true) != -1)
		return IRC_GroupSay(ircGroup, channel,  "4Invalid characters in ban name!");

	new numCount;
 	for(new i = 0; i < strlen(tmp); i++)
  	{
        if(tmp[i] >= '0' && tmp[i] <= '9')
      	{
       		numCount++;
      	}
  	}
  	new escaped_tmp[24];
	mysql_real_escape_string(tmp, escaped_tmp);
   	if(numCount > 8) // IP
	{
	    format(query, sizeof(query), "SELECT user_banner,ban_reason,user_banned,ban_timestamp,ban_time FROM bans WHERE bIP = '%s'", escaped_tmp);
	}
	else format(query, sizeof(query), "SELECT user_banner,ban_reason,user_banned,ban_timestamp,ban_time FROM bans WHERE user_banned = '%s'", escaped_tmp); // Name
	MySQL_query(query, true, "CheckPlayerBanned_IRC", "sis", user, botid, tmp);
	return true;
}

function CheckPlayerBanned_IRC(ircAdmin[], ircpBot, BannedName[])
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "4Error:3 No player with name or IP '%s' found on the ban list.", BannedName);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
		new BannedPlayer[24], Reason[40];
		new dateBanned;
		new banTime[40], banTime_Int;
		MySQL_getString(0, 0, PlayerName);
		MySQL_getString(0, 1, Reason);
		MySQL_getString(0, 2, BannedPlayer);
		dateBanned = MySQL_getInt(0, 3);
		banTime_Int = MySQL_getInt(0, 4);

		if(banTime_Int == 0)
  		{
    		banTime = "Permanent";
  		}
  		else
  		{
	   		new tmp_banTime = banTime_Int - gettime();
   			if(tmp_banTime > 86400)
	   		{
				tmp_banTime = tmp_banTime/86400;
		    	format(banTime, sizeof(banTime), "%d days left.", tmp_banTime);
   			}
		   	else banTime = "Few hours";
  		}

		localtime(dateBanned, tmParam);
		strftime(tmp, sizeof(tmp), "%d/%m/%Y", tmParam);

		format(line, sizeof(line), "4Player:3 %s 1|| 4Admin:3 %s 1|| 4Ban Reason:3 %s 1|| 4Ban Date:3 %s 1|| 4Time Left:3 %s", BannedPlayer, PlayerName, Reason, tmp, banTime);
		IRC_Notice(ircpBot, ircAdmin, line);
	}
	return true;
}

IRCCMD:uptime(botid, channel[], user[], host[], params[])
{
	format(str, sizeof(str), "4The server has been online for2 %s.", Uptime());
	IRC_GroupSay(ircGroup, channel,  str);
	return 1;
}
/*
IRCCMD:startmb(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	IRC_GroupSay(ircGroup, channel,  "4Server 2You have started a moneybag hunt!");
	EndMBHunt();
 	return 1;
}*/
IRCCMD:saveallstats(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;
	foreach(Player, ii)
 	{
		SavePlayerStats(ii);
	}
	format(tmp, sizeof(tmp), ""UFF" %s(IRC) has manually saved your stats.", user);
	SendClientMessageToAll(COLOR_YELLOW, tmp);
	IRC_GroupSay(ircGroup, channel,  "4* 3All server player stats have been saved!");
	GameTextForAll("~b~~h~Server Restarting~w~!", 6500, 3);
	for(new l; l < 4; l++) SendClientMessageToAll(COLOR_GREY2, "\n");
	SendClientMessageToAll(COLOR_LB, ""RED_E"*** "LB2_E"Server Is Restarting, reconnect if you get disconnected!");
	SendClientMessageToAll(COLOR_LB, ""RED_E"*** "LB2_E"Please re-join the server if you get a ban message upon connection!");
	return true;
}
IRCCMD:gmx(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;
	SetTimer("RestartServer", 1000, true);
	format(str, sizeof(str), "4Server:3 %s(IRC) is restarting the server in 10 seconds!", user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), ""UFF" "GREY2_E"Server restarting in 10 seconds, /savestats to save your data!", user);
	SendClientMessageToAll(COLOR_RED, str);
    #pragma unused botid, user, host, params
    return true;
}
IRCCMD:spectators(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;

	new speccers;
	foreach(Player, ii)
	{
	    if(pAdmin[ii] == 0) continue;
	    if(pSpectating[ii] != -1)
	    {
	        speccers = speccers + 1;
		}
	}

	if(speccers == 0)
		return IRC_GroupSay(ircGroup, channel, "4"UFF"3 There aren't any spectators!");

	format(str, sizeof(str), "2Displaying a list of %d admin(s)/VIP(s) spectating:", speccers);
	IRC_GroupSay(ircGroup, channel, str);

	speccers = 0;
	foreach(Player, ii)
	{
	    if(pSpectating[ii] != -1)
	    {
		    speccers = speccers + 1;
			GetPlayerName(pSpectating[ii], giveplayer, sizeof(giveplayer));
			format(str, sizeof(str), " 2%d. 3%s(%i) spectating %s(%i).", speccers, pName[ii], ii, giveplayer, pSpectating[ii]);
		    IRC_GroupSay(ircGroup, channel, str);
		}
	}
	return true;
}
IRCCMD:caps(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!caps <ID>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	if(!GetPVarType(otherid, "Caps"))
	{
	    //Disable Caps
	    SetPVarInt(otherid, "Caps", 1);
	    format(str, sizeof(str), ""UFF" "RED_E"Administrator %s(IRC) has disabled your caps in chat.", user);
		SendClientMessage(otherid, COLOR_GREY, str);
		format(str, sizeof(str), "* "GREY2_E"Administrator %s(IRC) has disabled %s(%i) caps in chat.", user, pName[otherid], otherid);
		SendClientMessageToAll(COLOR_RED, str);
		format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has disabled %s(%i) caps in chat.", user, pName[otherid], otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
	    //Enable Caps
		DeletePVar(otherid, "Caps");
	    format(str, sizeof(str), ""UFF" "GREY2_E"Administrator %s(IRC) has enabled your caps in chat. Do not constantly use it.", user);
		SendClientMessage(otherid, COLOR_GREY, str);
		format(str, sizeof(str), "4Server: 2%s(%i) has enabled %s(%i) caps in chat.", user, pName[otherid], otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	#pragma unused botid, host
	return true;
}

IRCCMD:pweaps(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
	if (sscanf(params, "u", otherid))
	{
        IRC_GroupSay(ircGroup, channel, "7Usage: 2!pweaps <ID>");
        return 1;
    }

    if(otherid == INVALID_PLAYER_ID) return IRC_GroupSay(ircGroup, channel, "4Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "Showing a list of %s(%i)'s weapons:", giveplayer, otherid);
 	IRC_GroupSay(ircGroup, channel, str);

	line[0] = EOS;
	#define weapons_processed hour
	#define weapons_total minute
	#define weapon_id second
	#define weapon_ammo_raw day
	#define weapon_ammo_str giveplayer

	for(new i = 1; i != 12; i++)
	{
		GetPlayerWeaponData(otherid, i, weapon_id, weapon_ammo_raw);

		if(!weapon_id) continue;

		weapons_processed ++;
		weapons_total ++;

		GetWeaponName(weapon_id, str, 48);

		if(weapon_ammo_raw < 0) weapon_ammo_str = "MAX";
		else valstr(weapon_ammo_str, weapon_ammo_raw);

		format(tmp, sizeof(tmp), ""GREEN_E"%s(%s){FFFFFF}%s", str, weapon_ammo_str, (i != 11 ? (", ") : ("")));
		strcat(line, tmp);

		if(weapons_processed == 4)
		{
	 		IRC_GroupSay(ircGroup, channel, line);
			weapons_processed = 0, line[0] = EOS;
		}
	}

	if(weapons_total == 0)
	{
		IRC_GroupSay(ircGroup, channel, "4This player has no weapons!");
	}
	else if(1 <= weapons_processed <= 4)
	{
		IRC_GroupSay(ircGroup, channel, line);
	}

	#undef weapons_total
	#undef weapons_processed
	#undef weapon_id
	#undef weapon_ammo_raw
	#undef weapon_ammo_str
	return true;
}
IRCCMD:getid(botid, channel[], user[], host[], params[])
{
	if(isnull(params))
	{
		IRC_GroupSay(ircGroup, channel, "7Usage: 2!getid <part of name>");
		return true;
	}

	if(!(2 <= strlen(params) <= 15))
	{
	    IRC_GroupSay(ircGroup, channel, "4Error: 2Name length invalid");
	    return true;
	}

	format(str, sizeof(str), "2Searching for 4'%s' 2in names...", params);
	IRC_GroupSay(ircGroup, channel, str);
	new found;
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);
		new namelen = strlen(PlayerName);
		new bool:searched=false;
 		for(new pos=0; pos <= namelen; pos++)
		{
			if(searched != true)
			{
				if(strfind(PlayerName, params, true) == pos)
				{
					found ++;
					format(str,sizeof(str),"7%d. 2%s 4(ID: %d)", found, PlayerName, ii);
					IRC_GroupSay(ircGroup, channel, str);
					searched = true;
				}
			}
		}
	}
	if(found == 0) IRC_GroupSay(ircGroup, channel, "2No players found matching that name!");
	return true;
}

IRCCMD:a(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(isnull(params))
    {
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!a <message>");
	    return false;
	}
	format(line, sizeof(line), "4[ADMIN CHAT]3 %s(IRC):2 %s", user, params);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);
	format(line, sizeof(line), ""RED_E"[ADMIN CHAT] "LG_E"%s(IRC): "LB_E"%s", user, params);
	SendAdminMessage(COLOR_LB, line);

	#pragma unused botid, host
	return true;
}


IRCCMD:h(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(isnull(params))
    {
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!a <message>");
	    return false;
	}
 	format(str, sizeof(str), "2[Mapper CHAT]3 %s(IRC): 2%s", user, params);
	IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), ""SBLUE_E"[Mapper CHAT] "WHITEP_E"%s(IRC): "LB_E"%s", user, params);
	foreach(Player, ii) if(pAdmin[ii] > 0 || Mapper[ii] == 1) SendClientMessage(ii, COLOR_LB, str);

	#pragma unused botid, host
	return true;
}

IRCCMD:day(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOp(botid, channel, user)) return false;

    SetWorldTime(12);
    format(str, sizeof(str), ""LB_E"Administrator "YELLOW_E"%s(IRC) "LB_E"has changed the time to day.", user);
	SendClientMessageToAll(COLOR_GREY, str);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has changed the time to day.", user);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

IRCCMD:night(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOp(botid, channel, user)) return false;

    SetWorldTime(2);
    format(str, sizeof(str), ""LB_E"Administrator "YELLOW_E"%s(IRC) "LB_E"has changed the time to night.", user);
	SendClientMessageToAll(COLOR_GREY, str);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has changed the time to night.", user);
    IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
   	return true;
}

IRCCMD:respawnvehicles(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	for(new itt=0; itt<MAX_VEHICLES; itt++)
 	{
  		new vehs;
    	foreach(Player, ii)
     	{
			if(GetPlayerVehicleID(ii) == itt || PlayerVehicle[ii] == itt)
          	{
          		vehs = 1;
           	}
		}
		if(!vehs)
		{
  			SetVehicleToRespawn(itt);
     	}
      	vehs = 0;
	}
 	foreach(Player, ii)
	{
		if(!IsPlayerInAnyVehicle(ii))
	    {
	    	if(!IsPlayerInAnyVehicle(ii))
		    {
		    	RemoveComponents(ii, true);
		    	DestroyVehicle(pSpawnVehicle[ii]);
				pSpawnVehicle[ii] = -1;
			}
	    }
	}
	format(str, sizeof(str), ""YELLOW_E"** "RED_E"Administrator %s(IRC) has respawned all unoccupied vehicles.", user);
	SendClientMessageToAll(COLOR_RED, str);
	format(tmp, sizeof(tmp), "4Server: 2Administrator %s(IRC) has respawned all unoccupied vehicles.", user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return true;
}

IRCCMD:cc(botid, channel[], user[], host[], params[])
{
   	if(!IRC_IsHalfop(botid, channel, user)) return false;

	for(new ii = 0; ii < 100; ii++)
	{
	    SendClientMessageToAll(COLOR_SYSTEM, " ");
		GameTextForAll("~p~Chat cleared!", 1000, 1);
	}
	format(str, sizeof(str), "Administrator %s(IRC) has cleared the chat!", user);
	SendClientMessageToAll(COLOR_GREY, str);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) cleared the chat", user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

IRCCMD:players(botid, channel[], user[], host[], params[])
{
 	if(!IRC_IsVoice(botid, channel, user)) return false;

	new charsPerLine = 0;
	new playersOnline = 0;
	line[0] = EOS;

	foreach(Player, ii)
	{
		playersOnline ++;
		GetPlayerName(ii, PlayerName, sizeof(PlayerName));

		format(tmp, sizeof(tmp), "%d.6 %s(%i)1 ", playersOnline, PlayerName, ii);
		charsPerLine += strlen(tmp);
		if(charsPerLine >= 420)
		{
			// Send the currently formatted IRC line and empty it!
			IRC_GroupSay(ircGroup, channel, line);
			charsPerLine = 0;
			line[0] = EOS;
		}
		strcat(line, tmp);
	}
	// If we still have something in the message buffer, send it
	if(charsPerLine != 0)
	{
		IRC_GroupSay(ircGroup, channel, line);
	}
	if(playersOnline == 0) return IRC_GroupSay(ircGroup, IRC_CHANNEL, "3There aren't any players online!");

	if(playersOnline == 1)
	{
		format(str, sizeof(str), "3There is 1 player online.");
	}
	else format(str, sizeof(str), "3There are %d players online.", playersOnline);
	IRC_GroupSay(ircGroup, channel, str);
	return true;
}

IRCCMD:admins(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsVoice(botid, channel, user)) return false;
	new count;
	foreach(Player, ii)
	{
		if(pAdmin[ii] > 0)
		{
		    count = count + 1;
		}
	}

	if(count == 0)
 	{
	 	IRC_GroupSay(ircGroup, IRC_CHANNEL, "4Server:3 There are no administrators online!");
	 	IRC_GroupSay(ircGroup, IRC_aCHANNEL, "4Server:3 There are no administrators online!");
		return true;
	}

	if(count == 1)
	{
		format(str, sizeof(str), "4Server:3 Displaying the one admin online:");
	}
	else
	{
	    format(str, sizeof(str), "4Server:3 Displaying the list of %d admins online:", count);
	}
	IRC_GroupSay(ircGroup, channel, str);

	foreach(Player, ii)
	{
	    if(pAdmin[ii] > 0)
	    {
	    	switch(pAdmin[ii])
	        {
	            case 1: tmp = "Junior Admin";
	            case 2: tmp = "General Admin";
	            case 3: tmp = "Lead Admin";
	            case 4: tmp = "Head Admin";
	            case 5: tmp = "Executive Administrator";
			}
	    	GetPlayerName(ii, PlayerName, sizeof(PlayerName));
			if(cAFK[ii] > 20)
			{
 				format(str, sizeof(str), "5%s 2(ID: %i) (%s) 1(AFK)", PlayerName, ii, tmp);
			}
 			else format(str, sizeof(str), "5%s 2(ID: %i) (%s)", PlayerName, ii, tmp);
 			IRC_GroupSay(ircGroup, channel, str);
		}
	}

	#pragma unused botid, user, params, channel
	return true;
}


IRCCMD:setname(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	if(sscanf(params, "is[20]", otherid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!setname <ID/Name> <newname>");
	    return false;
	}
	if(pLogged[otherid] == false)
		return IRC_GroupSay(ircGroup, channel, "4Server:3 Player not logged in!");

	if(!IsPlayerConnected(otherid))
	{
	    format(str, sizeof(str), "4Server:3 Invalid PlayerID (%d)", otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}
	if(strlen(tmp) > 20)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 New name can't be longer than 20 characters!");
		return true;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(!IsValidPassword(tmp))
	{
		format(str, sizeof(str), "4Server:3 %s(%i)'s name has not been changed to \"%s\". Please doublecheck the name!", giveplayer, otherid, tmp);
		IRC_GroupSay(ircGroup, channel, str);
		return true;
	}

	format(query, sizeof(query), "SELECT name FROM players WHERE name='%s'", tmp);
	MySQL_query(query, true, "ChangePlayerName_IRC", "iss", otherid, user, tmp);
	#pragma unused botid
	return true;
}
forward ChangePlayerName_IRC(otherplayer, ircAdmin[], nname[]);
public ChangePlayerName_IRC(otherplayer, ircAdmin[], nname[])
{
	if(!MySQL_rowCount())
	{
		//Good
		new oldname[24], newname[24];
		GetPlayerName(otherplayer, oldname, sizeof(oldname));
		format(query, sizeof(query), "UPDATE players SET name='%s' WHERE reg_id=%d", nname, pRegID[otherplayer]);
		MySQL_updateQuery(query);
		format(str, sizeof(str), ""UFF" "LB2_E"%s(IRC) has changed your name to '%s'", ircAdmin, nname);
		SendClientMessage(otherplayer, COLOR_LB, str);
		Info(otherplayer, "Make sure you log in with this new name on every connect!");
		format(str, sizeof(str), "4Server:3 %s(IRC) has changed %s's name to '%s'", ircAdmin, oldname, nname);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		SetPlayerName(otherplayer, nname);
		GetPlayerName(otherplayer, newname, sizeof(newname));
		pName[otherplayer] = newname;
		// Private Vehicle
		if(BoughtVehicle[otherplayer] == true)
		{
			format(query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", newname, oldname);
			MySQL_updateQuery(query);
		}
		// House
		foreach(Houses, h)
		{
			if(!strcmp(hInfo[h][HouseOwner], oldname, CASE_SENSETIVE))
   			{
   			    // Has House
   			    format(hInfo[h][HouseOwner], MAX_PLAYER_NAME, "%s", newname);
          		format(query, sizeof(query), "UPDATE houses SET howner='%s' WHERE house_id=%d", newname, h);
				MySQL_updateQuery(query);
				UpdateHouseText(h);
			}
		}
		if(PurchasedToy[otherplayer] == true)
		{
			format(query, sizeof(query), "UPDATE toys SET Name='%s' WHERE Name='%s'", newname, oldname);
			MySQL_updateQuery(query);
		}
		// Update group founder
		if(pGroupRank[otherplayer] == 6)
		{
			format(query, sizeof(query), "UPDATE groups SET gFounder='%s' WHERE gFounder='%s'", newname, oldname);
			MySQL_updateQuery(query);
		}
		format(query, sizeof(query), "UPDATE racetimes SET holder='%s' WHERE holder='%s'", newname, oldname);
		MySQL_updateQuery(query);
	}
	else
	{
	    // Name Exists
		format(str, sizeof(str), "4ERROR:3 The name '%s' already exists in the database, please use a different name!", nname);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
    return true;
}

IRCCMD:crash(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOp(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!crash <ID/Name>");
	    return true;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
        IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	SetPVarInt(otherid, "pBugged", 1);
    new IP[24];
    GetPlayerIp(otherid, IP,sizeof(IP));
    format(IP,sizeof(IP), "banip %s", IP);
    SendRconCommand(IP);

	format(str, sizeof(str), ""YELLOW_E"** "RED_E"Administrator %s(IRC) has crashed %s(%i)", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "4Server:3 Administrator %s(IRC) has crashed %s(%i)", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	#pragma unused botid
	return true;
}

IRCCMD:slap(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
        IRC_GroupSay(ircGroup, channel, "7Usage: 2!slap <ID/Name>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
		return IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	SetPlayerPos(otherid, POS[0], POS[1], POS[2] + 10);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) slapped %s(%i).", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	#pragma unused botid
	return true;
}
ReturnVehicleID(vName[])
{
	Looop(x, 211)
	{
	    if(strfind(g_arrVehicleNames[x], vName, true) != -1)
		return x + 400;
	}
	return -1;
}

GetVehicleName(model)
{
	new name[32] = "None";
	if (model < 400 || model > 611) return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

UpdateRRecord(rAcenAme[], pos, TimeTaken, racerName[])
{
	new consult[256];
	format(consult, sizeof (consult), "INSERT INTO RACE_TIME	(RACE_ID, RACE_POS, TIME_RECORD, RACER_NAME) VALUES ((SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q'), %i, %i, '%s')", rAcenAme, pos, TimeTaken, racerName);
	db_query(Database, consult);
}

UpdateRaceTime(rAcenAme[], pos, TimeTaken, racerName[])
{
	new consult[256];
	db_query(Database,"BEGIN");
	format(consult, sizeof (consult), "UPDATE RACE_TIME SET TIME_RECORD = %i, RACER_NAME = '%q' WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q') AND RACE_POS = %i", TimeTaken, racerName, rAcenAme, pos);
	db_query(Database, consult);
	db_query(Database,"COMMIT");
}

IsNewRecord(rAcenAme[], pos, TimeTaken)
{
	new bool:NewRecord = false, consult[256];

	format(consult, sizeof (consult), "SELECT 1 FROM RACE_TIME WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q') AND RACE_POS = %i AND TIME_RECORD < %i LIMIT 1", rAcenAme, pos, TimeTaken);
	new DBResult:result = db_query(Database,consult);
	NewRecord = db_num_rows(result) == 0;
	return NewRecord;
}

AreTimeRegisterd(rAcenAme[], pos)
{
	new bool:TimeRegisterd = true, consult[168];
	format(consult, sizeof (consult), "SELECT 1 FROM RACE_TIME WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q') AND RACE_POS = %i LIMIT 1", rAcenAme, pos);
	new DBResult:result = db_query(Database,consult);
	TimeRegisterd = db_num_rows(result) > 0;
	return TimeRegisterd;
}

CheckLastRecord(rAcenAme[], pos, TimeTaken, RacerNameRP[], &TimeRP)
{
	new consult[256];

	format(consult, sizeof (consult), "SELECT RACER_NAME, TIME_RECORD FROM RACE_TIME WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q') AND RACE_POS = %i AND TIME_RECORD	>= %i ORDER BY TIME_RECORD ASC LIMIT 1", rAcenAme, pos, TimeTaken);
	new DBResult:result = db_query(Database,consult);
	if(db_num_rows(result))
	{
	    db_get_field(result, 0,RacerNameRP, 25);
 		TimeRP = db_get_field_int(result, 1);
	}
}

CheckRecords(race_name[], pos, time_taken, playerid) //Change ur fucking function for this.
{
    new fmat[250];
    format(fmat, sizeof(fmat), "SELECT RACER_NAME, TIME_RECORD FROM RACE_TIME WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q') AND RACE_POS = %i AND TIME_RECORD >= %i ORDER BY TIME_RECORD LIMIT 3", race_name, pos, time_taken);
    new DBResult:cr_r = db_query(Database, fmat);
    new rcount = 0, RacerNameLastRecord[24];
    if(db_num_rows(cr_r))
    {
        do
        {
            if(db_get_field_int(cr_r, 1) != 0)
            {
                db_get_field(cr_r, 0, RacerNameLastRecord, 24);
                new racems = db_get_field_int(cr_r, 1), racemin, racesec;
                racemin = racems / 60000;
                racems = racems - (racemin * 60000);
                racesec = racems / 1000;
                racems = racems - (racesec * 1000);

                if(racemin == 0) format(tmp, sizeof(tmp), "\n"YELLOW_E"%i)"LB2_E" %s "YELLOW_E"- "LB2_E"%02d.%03d", rcount + 1, RacerNameLastRecord, racesec, racems);
                else format(tmp, sizeof(tmp), "\n"YELLOW_E"%i)"LB2_E" %s "YELLOW_E"- "LB2_E"%d:%02d.%03d", rcount + 1, RacerNameLastRecord, racemin, racesec, racems);

                SendClientMessage(playerid, COLOR_WHITE, tmp);
                rcount++;
            }
        }
        while(db_next_row(cr_r));
    }
    else
    {
        SendClientMessage(playerid,COLOR_YELLOW, ""YELLOW_E"»» No records found");
    }
}

DeleteRace(rAcenAme[])
{
	new consult[256];

	format(consult, sizeof (consult), "SELECT 1 FROM RACES WHERE RACE_NAME = '%q' LIMIT 1", rAcenAme);
	new DBResult:result = db_query(Database,consult);

	if(db_num_rows(result))
	{
		format(consult, sizeof (consult), "DELETE FROM RACE_TIME	WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q'",rAcenAme);
		db_query(Database,consult);

		format(consult, sizeof (consult), "DELETE FROM RACE_CHECKPOINT WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q')", rAcenAme);
		db_query(Database,consult);

		format(consult, sizeof (consult), "DELETE FROM RACE_POSITIONS WHERE RACE_ID = (SELECT RACE_ID	FROM RACES WHERE RACE_NAME = '%q')", rAcenAme);
		db_query(Database,consult);

		format(consult, sizeof (consult), "DELETE FROM RACES WHERE RACE_NAME = '%q'", rAcenAme);
		db_query(Database,consult);
	}
	db_free_result(result);
}

AddRace(rAcenAme[], veh_type, Race_Type)
{
	new consult[256];
	DeleteRace(rAcenAme);

	format(consult, sizeof (consult), "INSERT INTO RACES (RACE_NAME, VEH_MODEL, RACE_TYPE) VALUES ('%q', %i, %i)", rAcenAme, veh_type, Race_Type);
	db_query(Database,consult);
}

AddRacePos(rAcenAme[], pos, Float:x, Float:y, Float:z, Float:r)
{
	new consult[512];
	format(consult, sizeof (consult), "INSERT INTO RACE_POSITIONS (RACE_ID, RACE_POS, R_POSX, R_POSY, R_POSZ, ANGLE) VALUES ((SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q'), %i, %f, %f, %f, %f)", rAcenAme, pos, x, y, z, r);
	db_query(Database,consult);
}

AddRaceCP(rAcenAme[], CPCount, Float:x, Float:y, Float:z)
{
	new consult[512];
	format(consult, sizeof (consult), "INSERT INTO RACE_CHECKPOINT (RACE_ID, RACE_CP_ID, R_POSX, R_POSY, R_POSZ) VALUES ((SELECT RACE_ID FROM RACES WHERE RACE_NAME = '%q'), %i, %f, %f, %f)", rAcenAme, CPCount, x, y, z);
	db_query(Database,consult);
}

CountSavedRaces()
{
	new RaceCount = 0;
	new DBResult:result = db_query(Database, "SELECT 1 FROM RACES");
	RaceCount = db_num_rows(result);
	db_free_result(result);
	return RaceCount;
}

ThisRaceExists(idRace)
{
	new bool:RaceExists = false, consult[256];

	format(consult, sizeof (consult), "SELECT 1 FROM RACES WHERE RACE_ID = '%d' LIMIT 1", idRace);
	new DBResult:result = db_query(Database,consult);
	RaceExists = db_num_rows(result) > 0;
	db_free_result(result);
	return RaceExists;
}

LoadRaceData(idRace, &vehType, &raceType)
{
	new consult[256];
	format(consult, sizeof (consult), "SELECT VEH_MODEL, RACE_TYPE FROM RACES WHERE RACE_ID = '%d' LIMIT 1", idRace);
	new DBResult:result = db_query(Database,consult);

	if(db_num_rows(result))
	{
		vehType = db_get_field_int(result, 0);
		raceType = db_get_field_int(result,1);
	}
	db_free_result(result);
}

CountRaceCP(idRace)
{
	new CPCount = 0, consult[256];

	format(consult, sizeof (consult), "SELECT 1 FROM RACE_CHECKPOINT WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_ID = '%d')", idRace);
	new DBResult:result = db_query(Database,consult);
	CPCount = db_num_rows(result);
	db_free_result(result);
	return CPCount;
}

LoadRacePos(idRace, position, &Float:posX, &Float:posY, &Float:posZ, &Float:angle)
{
	new consult[512];
	format(consult, sizeof (consult), "SELECT R_POSX, R_POSY, R_POSZ, ANGLE FROM RACE_POSITIONS WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_ID = '%d') AND RACE_POS = %i LIMIT 1", idRace, position);
	new DBResult:result = db_query(Database,consult);

	if (db_num_rows(result))
	{
		posX = db_get_field_float(result, 0);
		posY = db_get_field_float(result, 1);
		posZ = db_get_field_float(result, 2);
		angle = db_get_field_float(result, 3);
	}
	db_free_result(result);
}

LoadRaceCP(idRace, idCP, &Float:posX, &Float:posY, &Float:posZ)
{
	new consult[512];
	format(consult, sizeof (consult), "SELECT R_POSX, R_POSY, R_POSZ FROM RACE_CHECKPOINT WHERE RACE_ID = (SELECT RACE_ID FROM RACES WHERE RACE_ID = '%d') AND RACE_CP_ID = %i LIMIT 1", idRace, idCP);
	new DBResult:result = db_query(Database,consult);
	if (db_num_rows(result))
	{
		posX = db_get_field_int(result, 0);
		posY = db_get_field_int(result, 1);
		posZ = db_get_field_int(result, 2);
	}
	db_free_result(result);
}
IRCCMD:takemoney(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOp(botid, channel, user)) return false;
	new money;
	if(sscanf(params, "ud", otherid, money))
	{
        IRC_GroupSay(ircGroup, channel, "7Usage: 2!takemoney <ID/Name> <amount>");
	    return false;
	}
	if(otherid == INVALID_PLAYER_ID)
		return IRC_GroupSay(ircGroup, channel, "4Error:3 Player not connected!");

 	if(money > pCash[otherid])
		return IRC_GroupSay(ircGroup, channel, "4Error:3 Player does not have enough to deduct from!");

 	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GivePlayerCash(otherid, -money);
	format(str, sizeof(str), ""UFF" "RED_E"Administrator %s(IRC) has taken "GREEN_E"$%d "RED_E"from you.", user, money);
	SendClientMessage(otherid, COLOR_RED, str);
	format(str, sizeof(str), "4Server:3Administrator %s(IRC) has taken $%d from %s(%i) ", user, money, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

IRCCMD:throw(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
        IRC_GroupSay(ircGroup, channel, "7Usage: 2!throw <ID/Name>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	SetPlayerPos(otherid, POS[0], POS[1], POS[2] + 40);

	format(str, sizeof(str), ""UFF" %s(IRC) has thrown %s(%i).", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_GREY, str);
	format(str, sizeof(str), "4Server:3 %s(IRC) has thrown %s(%i).", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    #pragma unused botid
	return true;
}

IRCCMD:msg(botid, channel[], user[], host[], params[])
{
    irccmd_say(botid, channel, user, host, params);
	return true;
}

IRCCMD:say(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsVoice(botid, channel, user))
 	{
		IRC_Notice(botid, user, "4You must have voice(+v) to be able to talk on the IRC channel!");
 		return false;
	}
	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!say <message>");
	    return false;
	}

    new character;
	while(params[++character]) if(params[character] == '%') params[character] = ' ';

	format(line, sizeof(line), ""BLUE_E"[IRC] "YELLOW_E"%s: "WHITE_E"%s", user, params);
	SendClientMessageToAll(COLOR_WHITE, line);

	format(line, sizeof(line), "0,1%s(IRC):2 %s", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, line), IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);

    #pragma unused botid
	return true;
}


IRCCMD:rcon(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;
	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!rcon <RCON command>");
	    return false;
	}

	if(strcmp(params, "login", true) == 0)
	{
		IRC_GroupSay(ircGroup, channel, "7Server: 2RCON doesn't require logging in from IRC!");
	    return false;
	}

	format(str, sizeof(str), "4Server:3 %s(IRC) sent RCON CMD: %s", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), ""UFF" %s(IRC) sent RCON CMD: %s", user, params);
	SendClientMessageToAll(COLOR_GREY, str);

	SendRconCommand(params);
    #pragma unused botid
	return true;
}

IRCCMD:makeMapper(botid, channel[], user[], host[], params[])
{
/*
	if(pAdmin[playerid] < 4) return Error(playerid, "You are not authorized to use this command!");

	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    Usage(playerid, "/makeMapper <ID/Name> <0/1>");
	    return true;
	}







	Mapper[otherid] = alevel;
*/
	if(!IRC_IsOwner(botid, channel, user)) return false;
	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!makeMapper <ID> <Admin Level>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
		return IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
	if(alevel > 1)
		return IRC_GroupSay(ircGroup, channel, "4Server: 2Level can't be higher than 1!");
	if(alevel < 0)
		return IRC_GroupSay(ircGroup, channel, "4Server: 2Level can't be lower than 0!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) isn't logged in!", giveplayer, otherid);
        IRC_GroupSay(ircGroup, channel, str);
		return true;
	}
	if(Mapper[otherid] == alevel)
	{
	    format(str, sizeof(str), "ERROR: "GREY2_E"Player %s(%i) is already level %d!", giveplayer, otherid, alevel);
	    IRC_GroupSay(ircGroup, channel, str);
		return true;
	}

	new levelstr[12];
	levelstr = (alevel > pAdmin[otherid]) ? ("promoted") : ("demoted");


	switch(alevel)
	{
	    case 0:
		{
			format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"%IRC Administrator has removed %s(%d)'s Mapper status.", giveplayer, otherid);
			SendClientMessageToAll(COLOR_SBLUE, str);
			format(str, sizeof(str), "4Server: 2IRC Administrator has removed %s(%d)'s Mapper status.", giveplayer, otherid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		  	format(query, sizeof(query), "UPDATE players SET mapper=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			DestroyDynamic3DTextLabel(mapper3D[otherid]);
		}
	   	case 1:
	   	{
	   		format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"IRC Administrator has given %s(%d) Mapper status.", giveplayer, otherid);
			SendClientMessageToAll(COLOR_SBLUE, str);
			format(str, sizeof(str), "4IRC Administrator has given %s(%d) Mapper status.", giveplayer, otherid);
			IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		 	format(query, sizeof(query), "UPDATE players SET mapper=%d WHERE reg_id=%d", alevel, pRegID[otherid]);
			MySQL_updateQuery(query);
			tmp = "Mapper";
   			mapper3D[otherid] = CreateDynamic3DTextLabel(tmp, 0x87CEFA88, 0, 0, -0.41, 50.0, otherid, _, 1);

	   	}
	}
	Mapper[otherid] = alevel;
	format(str, sizeof(str), "~y~~h~You have been %s to %s!", levelstr, tmp);
	InfoTD_MSG(otherid, 5000, str);
	return true;
}

IRCCMD:makeadmin(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsOwner(botid, channel, user)) return false;
	new alevel;
	if(sscanf(params, "ud", otherid, alevel))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!makeadmin <ID> <Admin Level>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
		return IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
	if(alevel > 5)
		return IRC_GroupSay(ircGroup, channel, "4Server: 2Level can't be higher than 5!");
	if(alevel < 0)
		return IRC_GroupSay(ircGroup, channel, "4Server: 2Level can't be lower than 0!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pLogged[otherid] == false)
	{
		format(str, sizeof(str), "4Server: 2Player %s(%i) isn't logged in!", giveplayer, otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return true;
	}

	new levelstr[12];
	levelstr = (alevel > pAdmin[otherid]) ? ("promoted") : ("demoted");


	switch(alevel)
	{
	    case 0:
		{
			tmp = "Regular Player";
			pHidden[otherid] = 0;
   			format(query, sizeof(query), "UPDATE players SET hidden=0 WHERE reg_id=%d", pRegID[otherid]);
			MySQL_updateQuery(query);
			if(admin3D[otherid] != Text3D:-1) DestroyDynamic3DTextLabel(admin3D[otherid]);
		}
	   	case 1: tmp = "Moderator";
		case 2: tmp = "Administrator";
		case 3: tmp = "Lead Admin";
		case 4: tmp = "Head Administrator";
		case 5: tmp = "Executive Administrator";
	}

	format(query, sizeof(query), "UPDATE players SET adminlevel=%d WHERE reg_id=%d", alevel, pRegID[otherid]);
	MySQL_updateQuery(query);

	pAdmin[otherid] = alevel;
	SendClientMessageToAll(COLOR_LB, " ");
	format(str, sizeof(str), ""YELLOW_E"** "SBLUE_E"Executive Administrator %s has %s %s(%i) to %s.", user, levelstr, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_SBLUE, str);
	SendClientMessageToAll(COLOR_LB, " ");
	format(str, sizeof(str), "4Server: 2Executive Administrator %s(IRC) has %s %s(%i) to %s.", user, levelstr, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), "~y~~h~You have been %s to %s!", levelstr, tmp);
	InfoTD_MSG(otherid, 5000, str);
	return true;
}
IRCCMD:die(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOwner(botid, channel, user)) return false;

	format(str, sizeof(str), "4Server:3 %s(IRC) has disconnected the IRC echo bots.", user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), ""UFF" %s(IRC) has disconnected the IRC echo bots.", user);
	SendClientMessageToAll(COLOR_GREY, str);

	IRC_Quit(ircBot[0], "" "uffserver.com/forum (!die)");
	IRC_Quit(ircBot[1], "" "uffserver.com/forum (!die)");
	IRC_Quit(ircBot[2], "" "uffserver.com/forum (!die)");
	IRC_Quit(ircBot[3], "" "uffserver.com/forum (!die)");

    #pragma unused botid, params, channel
	return true;
}

IRCCMD:botjoin(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsAdmin(botid, channel, user)) return false;
	if(sscanf(params, "ds[20]", botid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!botjoin <bot ID> <channel>");
	    return false;
	}

	if(botid < 1 || botid > 3)
	{
	    IRC_GroupSay(ircGroup, channel, "4Error: 2Bot IDs go from 1 to 3!");
	    return true;
	}

	IRC_JoinChannel(ircBot[botid - 1], tmp);

	format(str, sizeof(str), "4Server:3 BOT %s(%d) joining \"%s\" (commanded by %s)", ircName[botid], botid, tmp, user);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	#pragma unused botid
	return true;
}

IRCCMD:botmsg(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsAdmin(botid, channel, user)) return false;
	if(sscanf(params, "ds[32]s[256]", botid, str, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!botmsg <bot ID> <channel> <message>");
	    return false;
	}

	if(botid < 1 || botid > 3)
	{
	    IRC_GroupSay(ircGroup, channel, "4Error: 2Bot IDs go from 1 to 3!");
	    return true;
	}

	format(str, sizeof(str), "NOTICE %s :BOT %s(%d) -> \"%s\": %s", user, ircName[botid], botid, str, tmp);
	IRC_SendRaw(ircBot[botid - 1], str);

	#pragma unused botid
	return true;
}

IRCCMD:asay(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
 	if(!strlen(params))
	 	return IRC_GroupSay(ircGroup, channel, "4Usage: !asay <message>");

	new character;
	while(params[++character]) if(params[character] == '%') params[character] = ' ';

	format(str, sizeof(str), ""RED_E"* "YELLOW_E"Administrator %s on IRC: "WHITEP_E"%s", user, params);
	SendClientMessageToAll(COLOR_RED, str);

	format(str, sizeof(str), "2UFF3 IRC Admin (%s): 4%s", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    #pragma unused botid
	return true;
}

IRCCMD:aban(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
    if(sscanf(params, "us[128]", otherid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!ban <ID/Name> <reason>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    format(str, sizeof(str), "4Server3 Invalid PlayerID (%d)", otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}
	if(GetPVarInt(otherid, "pRemoved")) return true;
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
   	gettime(hour, minute, second);
	getdate(year, month, day);

	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";
	else if(!strcmp(tmp, "rh", true)) tmp = "Ram Hacks";
	else if(!strcmp(tmp, "ah", true)) tmp = "Ammo Hacks";

	format(str, sizeof(str), "** "RED_E"Administrator %s(IRC) has banned %s(%i) "RED_E"[Reason: %s]", user, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_YELLOW, str);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) banned %s(%i) [Reason: %s]", user, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    for(new ii = 0; ii < 10; ii++)
	{
	    SendClientMessage(otherid, COLOR_SYSTEM, " ");
	}

	SendClientMessage(otherid, COLOR_RED, "YOU HAVE BEEN BANNED!");
	format(str, sizeof(str), "Admin: %s(IRC)", user);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "Reason: %s", tmp);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "The time is %02d/%02d/%d %02d:%02d", day, month, year, hour, minute);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "Go to uffserver.com/forum/ to appeal your ban. Include a screenshot of your ban.");
	SendClientMessage(otherid, COLOR_GREY2, str);
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	SetPVarInt(otherid, "pRemoved", 1);
	format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s(IRC)', '%s', UNIX_TIMESTAMP(), 0)", giveplayer, PlayerIP, user, tmp);
	MySQL_updateQuery(query);
	GameTextForPlayer(otherid, "~r~~h~Banned!", 4000, 5);
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	KickEx(otherid);
   	return true;
}

IRCCMD:tempban(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;

    new ban_time;
	if(sscanf(params, "uds[128]", otherid, datez, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!tempban <ID/Name> <time(in days)> <reason>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    format(str, sizeof(str), "4Server3 Invalid PlayerID (%d)", otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
   	gettime(hour, minute, second);
	getdate(year, month, day);

	if(!strcmp(tmp, "ab", true)) tmp = "Airbreak";
	else if(!strcmp(tmp, "ad", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "ads", true)) tmp = "Advertising";
	else if(!strcmp(tmp, "hh", true)) tmp = "Health Hacks";
	else if(!strcmp(tmp, "wh", true)) tmp = "Weapon Hacks";
	else if(!strcmp(tmp, "sh", true)) tmp = "Speed Hacks";
	else if(!strcmp(tmp, "mh", true)) tmp = "Money Hacks";
	else if(!strcmp(tmp, "rh", true)) tmp = "Ram Hacks";
	else if(!strcmp(tmp, "ah", true)) tmp = "Ammo Hacks";

	format(str, sizeof(str), "* Administrator %s(IRC) has temp-banned %s(%i) for %d days. "RED_E"[Reason: %s]", user, giveplayer, otherid, datez, tmp);
	SendClientMessageToAll(COLOR_RED, str);
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) temp-banned %s(%i) for %d days. [Reason: %s]", user, giveplayer, otherid, datez, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

    for(new ii = 0; ii < 10; ii++)
	{
	    SendClientMessage(otherid, COLOR_SYSTEM, " ");
	}

	SendClientMessage(otherid, COLOR_RED, "YOU HAVE BEEN BANNED!");
	format(str, sizeof(str), "Admin: %s(IRC)", user);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "Reason: %s", tmp);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "The time is %02d/%02d/%d %02d:%02d", day, month, year, hour, minute);
	SendClientMessage(otherid, COLOR_GREY2, str);
	format(str, sizeof(str), "Go to uffserver.com/forum to appeal your ban. Include a screenshot of your ban.");
	SendClientMessage(otherid, COLOR_GREY2, str);
	if(datez != 0)
    {
		format(str, sizeof(str), ""RED_E"Server: "GREY2_E"This is a "RED_E"TEMP-BAN "GREY2_E"that will last for %d days.", datez);
		SendClientMessage(otherid, COLOR_GREY2, str);
	}
	ban_time = gettime() + (datez * 86400);
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);

	format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s(IRC)', '%s', UNIX_TIMESTAMP(), %d)", giveplayer, PlayerIP, user, tmp, ban_time);
	MySQL_updateQuery(query);
	GameTextForPlayer(otherid, "~r~~h~Temp-Banned!", 4000, 5);
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	KickEx(otherid);
	return true;
}

IRCCMD:oban(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	new player[24];
	if(sscanf(params, "s[24]D(0)s[50]", player, datez, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!oban <account name> <time in days (0 for permanent ban)> <reason> ");
	    return true;
	}
	if(strlen(tmp) > 50) return IRC_GroupSay(ircGroup, channel, "4Reason must be under 50 characters.");
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			IRC_GroupSay(ircGroup, channel, "4Player is online, you can use /ban on him.");
	  		return true;
	  	}
	}
	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);
	format(query, sizeof(query), "SELECT ip FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnIRCBanData", "sssi", user, escaped_player, tmp, datez);
	return true;
}

function OnIRCBanData(admin[], NameToBan[], banReason[], banTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "4Server3 Account '%s' does not exist!", NameToBan);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
		MySQL_getString(0, 0, PlayerIP);
		if(banTime != 0)
	    {
			banTime= gettime() + (datez * 86400);
		}
		format(query, sizeof(query), "INSERT INTO bans(user_banned, bIP, user_banner, ban_reason, ban_timestamp, ban_time) VALUES ('%s', '%s', '%s', '%s' '%s', UNIX_TIMESTAMP(), %d)", NameToBan, PlayerIP, admin, tmp, banTime);
		MySQL_updateQuery(query);

		format(str, sizeof(str), "4Server:3 %s(IRC) has banned %s from the server.", admin, NameToBan);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(str, sizeof(str), ""UFF" "RED_E"%s(IRC) has banned %s from the server.", admin, NameToBan);
		SendClientMessageToAll(COLOR_GREY, str);
	}
	return true;
}

IRCCMD:akick(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "us[90]", otherid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!kick <ID/Name> <reason>");
	    return false;
	}

    if(otherid == INVALID_PLAYER_ID)
	{
	    format(str, sizeof(str), "4Server:3 Invalid PlayerID (%d)", otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has kicked %s(%i) [Reason: %s]", user, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "Administrator %s(IRC) has kicked %s(%i) "RED_E"[Reason: %s]", user, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);
	GameTextForPlayer(otherid, "~r~~h~Kicked!", 4000, 5);
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	KickEx(otherid);
	SetPVarInt(otherid, "pRemoved", 1);
	#pragma unused botid
	return true;
}

IRCCMD:warn(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "us[90]", otherid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!warn <ID/Name> <reason>");
	    return false;
	}

    if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has warned %s(%i) [Reason: %s]", user, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "Administrator %s(IRC) has warned %s(%i) "RED_E"[Reason: %s]", user, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_RED, str);
	SendClientMessage(otherid, COLOR_RED, ">> You have been warned by an administrator, read the /rules, too many warnings will result in a kick or ban!");
	PlayerPlaySound(otherid, 1186, 0.0, 0.0, 0.0);
	pWarns[otherid] ++;
	if(pWarns[otherid] >= 3)
	{
		format(str, sizeof(str), "4Server: %s(%i) has been kicked for excessive warnings.", giveplayer, otherid);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
		format(str, sizeof(str), ""RED_E""UFF" "GREY_E"%s(%i) has been kicked for excessive warnings.", giveplayer, otherid);
		SendClientMessageToAll(COLOR_WHITE, str);
		KickEx(otherid);
		return true;
	}

	#pragma unused botid
	return true;
}
IRCCMD:botnick(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsAdmin(botid, channel, user)) return false;
 	if(sscanf(params, "is[31]", botid, str))
 	{
  		IRC_GroupSay(ircGroup, channel, "7Usage: 2!nick <bot ID> <nickname>");
		return false;
	}

	if(strlen(str) > 30)
		return IRC_GroupSay(ircGroup, channel, "4Error: 2Name too long!");

	if(botid < 1 || botid > 3)
		return IRC_GroupSay(ircGroup, channel, "4Error: 2Bot IDs go from 1 to 3!");

	IRC_ChangeNick(ircBot[botid - 1], str);

	#pragma unused botid,user
	return true;
}

IRCCMD:info(botid, channel[], user[], host[], params[])
{
	IRC_GroupSay(ircGroup, channel, "7- Server Information -");
	IRC_GroupSay(ircGroup, channel, "4IP Address:17 198.245.51.214:7767");
	format(str, sizeof(str), "4Players:17 %d/%d", Iter_Count(Player), GetMaxPlayers());
	IRC_GroupSay(ircGroup, channel, str);

    #pragma unused params, botid, user
	return true;
}

IRCCMD:getip(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
 	{
  		IRC_GroupSay(ircGroup, channel, "7Usage: 2!getip <ID/Name>");
		return false;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));

	if(otherid == INVALID_PLAYER_ID)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}
	if(pAdmin[otherid] == 5)
 	{
  		IRC_GroupSay(ircGroup, channel, "4Server:3 You can't use getip on the Executive Administrator!");
  		return 1;
    }

	format(str, 256, "4Server:3 %s(%i)'s IP: %s", giveplayer, otherid, PlayerIP);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

 	#pragma unused botid, user
	return true;
}

IRCCMD:sethealth(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	new health;
    if(sscanf(params, "u", otherid, health))
 	{
  		IRC_GroupSay(ircGroup, channel, "7Usage: 2!sethealth <ID/Name> <health>");
		return false;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(otherid == INVALID_PLAYER_ID)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return false;
	}

	if(health > 100 || health < 0)
	{
		format(str, sizeof(str), "4Server:3 %s, you have specified an invalid health amount (%d.0).", user, health);
		IRC_GroupSay(ircGroup, channel, str);
		return false;
	}
	if(health > 98)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 You can't set anyone's health over 98 due to the anti-cheat system.");
		return false;
	}
	SetPlayerHealth(otherid, health);
	format(str, sizeof(str), "4Server:3 %s(IRC) set %s(%i)'s health to %d.", user, giveplayer, otherid, health);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return 1;
}

IRCCMD:ann(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	irccmd_announce(botid, channel, user, host, params);
	return true;
}

IRCCMD:announce(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!announce <message>");
		return false;
	}

	if(strfind(params, "~x~", true) != -1)
		return IRC_GroupSay(ircGroup, channel, "4ERROR: 2~x~ is not allowed in announce.");
	if(strfind(params, "#k~", true) != -1)
		return IRC_GroupSay(ircGroup, channel, "4ERROR: 2The constant key is not allowed in announce.");

	// Count tildes (uneven number = faulty input)
	iTemp = 0;
	for(new i = (strlen(params)-1); i != -1; i--)
	{
		if(params[i] == '~')
			iTemp ++;
	}
	if(iTemp % 2 == 1)
		return IRC_GroupSay(ircGroup, channel, "4ERROR: 2You either have an extra ~ or one is missing in the announcement!");

	format(str, 256, "4Announcement:3 %s(IRC) announced %s", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "~w~%s", params);
	GameTextForAll(str, 6500, 3);

    #pragma unused botid
	return true;
}

IRCCMD:pm(botid, channel[], user[], host[], params[])
{
	if(sscanf(params, "us[128]", otherid, tmp))
	{
        IRC_GroupSay(ircGroup, channel, "7Usage: 2!pm <ID/Name> <message>");
		return false;
	}
	if(otherid == INVALID_PLAYER_ID)
	{
		IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "PM from %s(IRC): "WHITE_E"%s", user, tmp);
	SendClientMessage(otherid, COLOR_YELLOW, str);
	format(str, sizeof(str), "4PM: 3%s(IRC) -> %s(%i): %s", user, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
    if(GetPVarInt(otherid, "FirstPM_IRC") == 0)
	{
		format(str, sizeof(str), ""ORANGE_E"* "LB2_E"Use "ORANGE_E"/ircpm %s "LB2_E"to reply to the IRC user", user);
		SendClientMessage(otherid, COLOR_LB, str);
		SetPVarInt(otherid, "FirstPM_IRC", 1);
	}

	format(str, sizeof(str), "PM From %s(IRC): %s", user, tmp);
	for(new ir = 1; ir < MAX_PMS - 1; ir++)
	{
		PMs[otherid][ir] = PMs[otherid][ir + 1];
	}
	PMs[otherid][MAX_PMS - 1] = str;

	#pragma unused botid
	return true;
}

IRCCMD:banip(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!banip <ip> ");
		return false;
	}
	if(strfind(params, "*", true) != -1)
	{
		IRC_GroupSay(ircGroup, channel, "4Error: 2You are not authorized to ban ranges. ");
  		return true;
  	}
	format(str, sizeof(str), "4Server:3 %s has IP banned address %s.", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), ""UFF" "GREY2_E"%s(IRC) IP banned address %s.", user, params);
	SendClientMessageToAll(COLOR_GREY2, str);

	format(str, sizeof(str), "banip %s", params);
	SendRconCommand(str);

	#pragma unused botid
	return true;
}

IRCCMD:unbanip(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	if(isnull(params))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!unbanip <ip>");
		return false;
	}

	format(str, sizeof(str), "4Server:3 %s has IP un-banned address %s", user, params);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "unbanip %s", params);
	SendRconCommand(str);
	format(str, sizeof(str), "reloadbans");
	SendRconCommand(str);

	#pragma unused botid
	return true;
}

IRCCMD:unban(botid, channel[], user[], host[], params[])
{
   	if(!IRC_IsHalfop(botid, channel, user)) return false;

   	if(sscanf(params, "s[24]", tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!unban <playername (3-21 chars)>");
	    return true;
	}
	new escaped_tmp[24];
	mysql_real_escape_string(tmp, escaped_tmp);

	format(query, sizeof(query), "SELECT user_banned,bIP FROM bans WHERE user_banned = '%s'", escaped_tmp);
	MySQL_query(query, true, "OnIRCUnbanData", "sss", channel, user, escaped_tmp);
 	return true;
}

function OnIRCUnbanData(channel, admin[], BannedName[])
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "4[ERROR] 2No player named '%s' found on the ban list.", BannedName);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
	    new banIP[16];
		MySQL_getString(0, 1, banIP);
		format(query, sizeof(query), "DELETE FROM bans WHERE bIP = '%s'", banIP);
		MySQL_updateQuery(query);

		format(str, sizeof(str), "4Server:3 %s(IRC) has unbanned %s from the server.", admin, BannedName);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(str, sizeof(str), ""UFF" "GREY2_E"%s(IRC) has unbanned %s from the server.", admin, BannedName);
		SendClientMessageToAll(COLOR_GREY, str);
	}
	return true;
}

IRCCMD:mute(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	new timeSec, reason[80];
    if(sscanf(params, "udS[60]", otherid, timeSec, reason))
 	{
  		IRC_GroupSay(ircGroup, channel, "4Usage: !mute <ID/Name> <time in seconds> <reason>");
		return false;
	}

	if(otherid == INVALID_PLAYER_ID) return IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
	if(strlen(reason) > 60) return IRC_GroupSay(ircGroup, channel, "4Server:3 Reason too long! Must be shorter than 60 characters!");

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(timeSec < 10 || timeSec > 600) return IRC_GroupSay(ircGroup, channel, "4Server:3 The mute-time must remain between 10-600 seconds.");

	if(pMute[otherid] > 1)
	{
	    format(str, sizeof(str), "4Server:3 %s(%i) is already muted (mute lifted in %d seconds)", giveplayer, otherid, pMute[otherid]);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}

    pMute[otherid] = timeSec;

	if(!isnull(reason))
	{
		format(str, sizeof(str), "Administrator %s(IRC) muted %s(%i) for %s (%d seconds)", user, giveplayer, otherid, reason, timeSec);
        format(tmp, sizeof(tmp), "4Server: 2Administrator %s(IRC) muted %s(%i) for %s (%d seconds).", user, giveplayer, otherid, reason, timeSec);
	}
	else
	{
		format(str, sizeof(str), "Administrator %s(IRC) muted %s(%i) (%d seconds)", user, giveplayer, otherid, timeSec);
        format(tmp, sizeof(tmp), "4Server: 2Administrator %s(IRC) muted %s(%i) (%d seconds).", user, giveplayer, otherid, timeSec);
	}
	SendClientMessageToAll(COLOR_YELLOW, str);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	#pragma unused botid,user
	return true;
}
IRCCMD:omute(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;

	new player[24];
	if(sscanf(params, "s[24]ds[60]", player, datez, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "4Usage: !omute <ID/Name> <time in seconds> <reason>");
		return false;
	}
	if(strlen(tmp) > 80)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Reason too long! Must be shorter than 60 characters!");
	    return true;
	}
	if(datez < 10 || datez > 1000) return IRC_GroupSay(ircGroup, channel, "4Server:3 The mute-time must remain between 10-600 seconds.");

	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			IRC_GroupSay(ircGroup, channel, "4Server:3 Player is online, you can use !mute on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT reg_id FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnIRCOMuteQueryData", "sssi", user, escaped_player, tmp, datez);
	return true;
}

function OnIRCOMuteQueryData(adminid[], NameToMute[], muteReason[], muteTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "4Error:3 Account '%s' does not exist.", NameToMute);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
	    new RegID;
		RegID = MySQL_getInt(0, 0);
		format(str, sizeof(str), "4Server:3 You have muted %s for %d seconds. (Mute will take affect as soon as player logs in)", NameToMute, muteTime);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		format(str, sizeof(str), "4Server:3 %s(IRC) has offline muted %s for %d seconds (Reason: %s)", adminid, NameToMute, muteTime, muteReason);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		format(str, sizeof(str), "** "RED_E"%s(IRC) has offline muted %s for %d seconds. "RED_E"[Reason: %s]", adminid, NameToMute, muteTime, muteReason);
		SendClientMessageToAll(COLOR_YELLOW, str);

		format(query, sizeof(query), "UPDATE players SET Muted=%d WHERE reg_id=%d", muteTime, RegID);
		MySQL_updateQuery(query);
	}
	return true;
}
IRCCMD:unmute(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
    if(sscanf(params, "u", otherid))
 	{
  		IRC_GroupSay(ircGroup, channel, "4Usage: !unmute <ID/Name>");
		return false;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}
	if(pMute[otherid] == 0)
	{
	    format(str, sizeof(str), "4Server:3 Player %s(%i) is not muted.", giveplayer, otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}

	format(str, sizeof(str), "4Server:3 %s(IRC) has unmuted %s(%i).",user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), ""UFF" %s(IRC) has unmuted %s(%i).", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_GREY, str);
	pMute[otherid] = 0;

	#pragma unused botid,user
	return true;
}
IRCCMD:jail(botid, channel[], user[], host[], params[])
{
   	if(!IRC_IsHalfop(botid, channel, user)) return false;

	new reason[100], timeSec;
	if(sscanf(params, "udS[99]", otherid, timeSec, reason))
 	{
  		IRC_GroupSay(ircGroup, channel, "4Usage: !jail <ID/Name> <time in seconds> <reason>");
		return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    format(str, sizeof(str), "4Server:3 Jail: Invalid Player ID (%d).", otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}

    GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	if(pJail[otherid] > 0)
	{
	    format(str, sizeof(str), "4Server:3 %s(%i) is already jailed (gets out in %d seconds)", giveplayer, otherid, pJail[otherid]);
		IRC_GroupSay(ircGroup, channel, str);
	    return true;
	}


	if(strlen(reason) > 60) return IRC_GroupSay(ircGroup, channel, "4Server:3 Reason too long! Must be shorter than 60 characters!");
	if(timeSec < 10 || timeSec > 600) return IRC_GroupSay(ircGroup, channel, "4Server:3 The mute-time must remain between 10-600 seconds.");

	if(InDuel[otherid] != 0)
	{
		format(str, sizeof(str), ""DUEL" "GREY_E"%s has been eliminated.", pName[otherid], otherid);
		SendClientMessageToAll(COLOR_GREY, str);
	 	EndDuel();
	}
	pJail[otherid] = timeSec;
	SetPlayerPosition(otherid, 405.1100,2474.0784,35.7369,360.0000);
	SetPlayerWorldBounds(otherid, 20000.0, -20000.0, 20000.0, -20000.0);
	ResetPlayerWeapons(otherid);
	SetPVarInt(otherid, "JailedByAdmin", 1);
	ShowPlayerDialog(otherid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
	if(reason[0] == '*')
	{
		format(str, sizeof(str), ""RED_E"* Administrator %s(IRC) jailed "GREY_E"%s(%i) "RED_E"for %d seconds.", user, giveplayer, otherid, timeSec);
        format(tmp, sizeof(tmp), "4Server: 2Administrator %s(IRC) jailed %s(%i) for %d seconds.", user, giveplayer, otherid, timeSec);
	}
	else
	{
		format(str, sizeof(str), ""RED_E"* Administrator %s(IRC) jailed %s(%i) for "GREY_E"%s "RED_E"(%d seconds)", user, giveplayer, otherid, reason, timeSec);
        #if defined IRC
		format(tmp, sizeof(tmp), "4Server: 2Administrator %s(IRC) jailed %s(%i) for %s (%d seconds)", user, giveplayer, otherid, reason, timeSec);
		#endif
	}
	SendClientMessageToAll(COLOR_GREY, str);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, tmp), IRC_GroupSay(ircGroup, IRC_aCHANNEL, tmp);
	return true;
}
IRCCMD:ojail(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;

	new player[24];
	if(sscanf(params, "s[24]ds[60]", player, datez, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "4Usage: !ojail <ID/Name> <time in seconds> <reason>");
		return false;
	}
	if(strlen(tmp) > 60)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Reason too long! Must be shorter than 60 characters!");
	    return true;
	}
	if(datez < 10 || datez > 1000) return IRC_GroupSay(ircGroup, channel, "4Server:3 The mute-time must remain between 10-600 seconds.");
	foreach(Player, ii)
	{
		GetPlayerName(ii, PlayerName, MAX_PLAYER_NAME);

	    if(strfind(PlayerName, player, true) != -1)
		{
			IRC_GroupSay(ircGroup, channel, "4Server:3 Player is online, you can use !mute on him.");
	  		return true;
	  	}
	}

	new escaped_player[24];
	mysql_real_escape_string(player, escaped_player);

	format(query, sizeof(query), "SELECT reg_id FROM players WHERE name='%s'", escaped_player);
	MySQL_query(query, true, "OnOJailQueryData", "sssi", user, escaped_player, tmp, datez);
	return true;
}

function OnIRCOJailQueryData(adminid, NameToJail[], jailReason[], jailTime)
{
	if(!MySQL_rowCount())
	{
		format(str, sizeof(str), "4Error:3 Account '%s' does not exist.", NameToJail);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	}
	else
	{
	    new RegID;
		RegID = MySQL_getInt(0, 0);
		format(str, sizeof(str), "4Server:3 You have jailed %s for %d seconds. (Time will take affect as soon as player logs in)", NameToJail, jailTime);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		format(str, sizeof(str), "4Server:3 %s(%i) has offline jailed %s for %d seconds. [Reason: %s]", adminid, NameToJail, jailTime, jailReason);
		IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

		format(str, sizeof(str), "** "RED_E"%s(IRC) has offline jailed %s for %d seconds. "RED_E"[Reason: %s]", adminid, NameToJail, jailTime, jailReason);
		SendClientMessageToAll(COLOR_YELLOW, str);

		format(query, sizeof(query), "UPDATE players SET Jailed=%d WHERE reg_id=%d", jailTime, RegID);
		MySQL_updateQuery(query);
	}
	return true;
}
IRCCMD:unjail(botid, channel[], user[], host[], params[])
{
	if(!IRC_IsHalfop(botid, channel, user)) return false;
    if(sscanf(params, "u", otherid))
 	{
  		IRC_GroupSay(ircGroup, channel, "4Usage: !unjail <ID/Name>");
		return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	if(pJail[otherid] == 0)
	{
	    format(str, sizeof(str), "4Server:3 Player %s(%i) is not in jail.", giveplayer, otherid);
		IRC_GroupSay(ircGroup, channel, str);
		return 1;
	}


	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	pJail[otherid] = 0;
	SetPlayerInterior(otherid, 0);
	SetPlayerVirtualWorld(otherid, 0);
	SpawnPlayer(otherid);

	format(str, sizeof(str), "Administrator %s(IRC) has unjailed %s(%i)", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_GREY, str);

    format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has unjailed %s(%i)", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	return true;
}

IRCCMD:freeze(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "us[90]", otherid, tmp))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!freeze <ID/Name> <reason>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server: 2%s(IRC) has frozen %s(%i) for: %s", user, giveplayer, otherid, tmp);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "Administrator %s(IRC) has frozen %s(%i) for: %s", user, giveplayer, otherid, tmp);
	SendClientMessageToAll(COLOR_GREY, str);

	TogglePlayerControllable(otherid, false);
	#pragma unused botid,user
	return true;
}

IRCCMD:unfreeze(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!unfreeze <ID/Name> ");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has unfrozen %s(%i).", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "Administrator %s(IRC) has unfrozen %s(%i).", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_GREY, str);

	TogglePlayerControllable(otherid, true);
	#pragma unused botid,user
	return true;
}

IRCCMD:akill(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!akill <ID/Name>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));
	format(str, sizeof(str), "4Server: 2Administrator %s(IRC) has killed %s(%i).", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	format(str, sizeof(str), "* Administrator %s(IRC) has killed %s(%i).", user, giveplayer, otherid);
	SendClientMessageToAll(COLOR_YELLOW, str);

	SetPlayerHealth(otherid, 0.0);
	#pragma unused botid
	return true;
}
IRCCMD:stats(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsVoice(botid, channel, user)) return false;
    if(sscanf(params, "r", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!stats <ID/Name>");
	    return false;
	}
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "7,1Player Stats: 8%s(%i)", giveplayer, otherid);
	IRC_GroupSay(ircGroup, channel, str);

	new adm_str[50];
	switch(pAdmin[otherid])
	{
		case 0: adm_str = "Regular player";
		case 1: adm_str = "Moderator";
		case 2: adm_str = "Administrator";
		case 3: adm_str = "Lead administrator";
		case 4: adm_str = "Head administrator";
		case 5: adm_str = "Executive Administrator";
	}

	format(str, sizeof(str), "%s is a 8,1%s", giveplayer, adm_str);
	IRC_GroupSay(ircGroup, channel, str);

	format(str, sizeof(str), "8,1Member since:1,0 %s", pRegDate[otherid]);
    IRC_GroupSay(ircGroup, channel, str);

	format(str, sizeof(str), "8,1Time online:1,0 %d 8,1hours,1,0 %d 8,1minutes,1,0 %d 8,1seconds1,0", pTotalHours[otherid], pTotalMinutes[otherid], pTotalSeconds[otherid]);
    IRC_GroupSay(ircGroup, channel, str);

	format(str, sizeof(str), "8,1Kills:1,0 %d 8,1Deaths:1,0 %d 8,1KDR:1,0 %0.2f 8,1Money:1,0 $%d 8,1Score:1,0 %d", pInfo[otherid][pKills], pInfo[otherid][pDeaths], Float:pInfo[otherid][pKills]/Float:pInfo[otherid][pDeaths], pCash[otherid], GetPlayerScore(otherid));
    IRC_GroupSay(ircGroup, channel, str);
	#pragma unused botid, user
	return true;
}

IRCCMD:playerinfo(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsHalfop(botid, channel, user)) return false;
    if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!playerinfo <ID/Name>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	new Float:pArmour,
		Float:pHealth,
		adm_str[40];

	GetPlayerIp(otherid, PlayerIP, sizeof(PlayerIP));
	GetPlayerArmour(otherid, pArmour);
	GetPlayerHealth(otherid, pHealth);
	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	switch(pAdmin[otherid])
	{
		case 0: adm_str = "Regular player";
		case 1: adm_str = "Moderator";
		case 2: adm_str = "Administrator";
		case 3: adm_str = "Lead administrator";
		case 4: adm_str = "Head administrator";
		case 5: adm_str = "Executive Administrator";
	}

	format(str, sizeof(str), "7,1Playerinfo: 8%s(%i)", giveplayer, otherid);
	IRC_GroupSay(ircGroup, channel, str);
	format(str, sizeof(str), "%s is a 8,1%s", giveplayer, adm_str);
	IRC_GroupSay(ircGroup, channel, str);
	format(str, sizeof(str), "8,1Health:1,0 %3.f 8,1Armour:1,0 %3.f", pHealth, pArmour);
	IRC_GroupSay(ircGroup, channel, str);
	if(IsPlayerInAnyVehicle(otherid))
	{
	    new Float:vpHealth;
	    vID = GetPlayerVehicleID(otherid);
	    vv = GetVehicleModel(vID);

	    GetVehicleHealth(GetPlayerVehicleID(otherid), vpHealth);
	    format(str, sizeof(str), "8,1Vehicle:1,0 %s (8,1ID1,0: %d) (8,1MODEL:1,0: %d) 8,1Vehicle Health:1,0 %3.f", vehName[vv - 400], vID, vv, vpHealth);
        IRC_GroupSay(ircGroup, channel, str);
	}
	format(str, sizeof(str), "8,1Time online:1,0 %d 8,1hours,1,0 %d 8,1minutes,1,0 %d 8,1seconds1,0", pTotalHours[otherid], pTotalMinutes[otherid], pTotalSeconds[otherid]);
    IRC_GroupSay(ircGroup, channel, str);
	format(str, sizeof(str), "8,1Kills:1,0 %d 8,1Deaths:1,0 %d 8,1Money:1,0 $%d 8,1Interior:1,0 %d", pInfo[otherid][pKills], pInfo[otherid][pDeaths], pCash[otherid], GetPlayerInterior(otherid));
    IRC_GroupSay(ircGroup, channel, str);
	format(str, sizeof(str), "8,1IP address:1,0 %s 8,1Ping:1,0 %d", PlayerIP, GetPlayerPing(otherid));
    IRC_GroupSay(ircGroup, channel, str);

	#pragma unused botid,user
	return true;
}

IRCCMD:explode(botid, channel[], user[], host[], params[])
{
    if(!IRC_IsOp(botid, channel, user)) return false;
	if(sscanf(params, "u", otherid))
	{
	    IRC_GroupSay(ircGroup, channel, "7Usage: 2!explode <ID/Name>");
	    return false;
	}

	if(otherid == INVALID_PLAYER_ID)
	{
	    IRC_GroupSay(ircGroup, channel, "4Server:3 Player not connected!");
		return 1;
	}

	GetPlayerName(otherid, giveplayer, sizeof(giveplayer));

	format(str, sizeof(str), "4Server:3 %s(IRC) has exploded %s(%i).", user, giveplayer, otherid);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);

	GetPlayerPos(otherid, POS[0], POS[1], POS[2]);
	CreateExplosion(POS[0], POS[1], POS[2], 7, 3.0);

	#pragma unused botid,user
	return true;
}

CMD:ircpm(playerid, params[])
{
  	new ircPlayer[24];
	if(sscanf(params, "s[24]s[90]", ircPlayer, tmp))
	{
	    Usage(playerid, "/ircpm <user> <message>");
	    return true;
	}

	format(str, sizeof(str), "2*** 3%s(%i) (In-Game): 4%s", pName[playerid], playerid, tmp);
	IRC_Notice(ircBot[0], ircPlayer, str);
	format(str, sizeof(str), "* "LB_E"PM sent to %s on IRC: "WHITEP_E"%s", ircPlayer, tmp);
	SendClientMessage(playerid, COLOR_WHITEP, str);
	return true;
}

CMD:irc(playerid, params[])
{
  	if(isnull(params))
	{
	    Usage(playerid, "/irc <message> - Sends a message to the IRC channel.");
	    return true;
	}

	format(str, sizeof(str), "2*** 3%s(%i) to IRC: 4%s", pName[playerid], playerid, params);


	IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	format(str, sizeof(str), "* "RED_E"Message sent to IRC: "YELLOW_E"%s", params);
	SendClientMessage(playerid, COLOR_YELLOW, str);
	return true;
}

stock IsVehicleRcTram(vehicleid) {
	switch(GetVehicleModel(vehicleid)) {
		case 449, 501, 464, 441, 465, 564: return 1;
	}
	return 0;
}

stock Uptime()
{
	new uptime[40];
	switch(up_days)
	{
	    case 0:
	    {
			if(up_hours)
			{
				if(up_minutes)
					format(uptime, sizeof(uptime), "%d hour%s and %d minute%s", up_hours, (up_hours != 1 ?("s") : ("")), up_minutes, (up_minutes != 1 ? ("s") : ("")));
				else
					format(uptime, sizeof(uptime), "%d hour%s", up_hours, (up_hours != 1 ? ("s") : ("")));
			}
			else
			{
				if(up_minutes)
					format(uptime, sizeof(uptime), "%d minute%s and %d second%s", up_minutes, (up_minutes != 1 ? ("s") : ("")), up_seconds, (up_seconds != 1 ? ("s") : ("")));
				else
					format(uptime, sizeof(uptime), "%d seconds", up_seconds);
			}
		}
		case 1:
		{
			switch(up_hours)
			{
				case 0: uptime = "24 hours";
				case 1: uptime = "one day and 1 hour";
				default: format(uptime, sizeof(uptime), "one day and %d hours", up_hours);
			}
		}
		default:
		{
			switch(up_hours)
			{
				case 0: format(uptime, sizeof(uptime), "%d days", up_days);
				case 1: format(uptime, sizeof(uptime), "%d days and 1 hour", up_days);
				default: format(uptime, sizeof(uptime), "%d days and %d hours", up_days, up_hours);
			}
		}
	}
	return uptime;
}

function RemoveHealth(damagedid)
{
	if(IsPlayerConnected(damagedid))
	{
	    PlayerHit[damagedid] = false;
	}
	return 1;
}

IsVehicleOneSeater(playerid, vehicleid)
{
	vehicleid = GetPlayerVehicleID(playerid);
	switch(GetVehicleModel(vehicleid))
	{
		case 406, 425, 430, 432, 435, 441, 446, 448, 449, 450, 452, 453, 454, 460, 464, 465, 472,
		473, 476, 481, 484, 485, 486, 493, 501, 509, 510, 512, 513, 519, 520, 530, 531, 532,
	 	539, 553, 564, 568, 571, 572, 574, 577, 584, 590, 591, 592, 593, 594, 595, 606,
	 	607, 608, 610, 611: return true;
	}
	return false;
}

stock HoldObjects(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_HOLD+20, DIALOG_STYLE_LIST, ""BLUE_E"UFF: "WHITE_E"Holding Objects",
	"Animals\nWeapons and Tools\nCop Gear\nHeadGear\nGlasses\nBandanna\nMasks\nWatches\nSanta Hat\nOthers "PINK_E"(New!)\n"ORANGE_E"Toys "WHITE_E"(Permanent)\n"RED_E"Remove Objects\n\
	","Select", "Exit");
}

stock RemoveItems(playerid)
{
	for(new i = 0; i < 7; i ++)
		if (IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
 	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)

{
	new Float:oldX, Float:oldY, Float:oldZ,
		Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

 	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);


	if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
		SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	}
}

public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	if(response)
    {
		GameTextForPlayer(playerid, "~g~~h~Toy Position Updated~y~!", 4000, 5);

        pToys[playerid][index][toy_x] = fOffsetX;
        pToys[playerid][index][toy_y] = fOffsetY;
        pToys[playerid][index][toy_z] = fOffsetZ;
        pToys[playerid][index][toy_rx] = fRotX;
        pToys[playerid][index][toy_ry] = fRotY;
        pToys[playerid][index][toy_rz] = fRotZ;
        pToys[playerid][index][toy_sx] = fScaleX;
        pToys[playerid][index][toy_sy] = fScaleY;
        pToys[playerid][index][toy_sz] = fScaleZ;
    }
    else
    {
        GameTextForPlayer(playerid, "~r~~h~Selection Cancelled~y~!", 4000, 5);

        SetPlayerAttachedObject(playerid,
			index,
			modelid,
			boneid,
			pToys[playerid][index][toy_x],
			pToys[playerid][index][toy_y],
			pToys[playerid][index][toy_z],
			pToys[playerid][index][toy_rx],
			pToys[playerid][index][toy_ry],
			pToys[playerid][index][toy_rz],
			pToys[playerid][index][toy_sx],
			pToys[playerid][index][toy_sy],
			pToys[playerid][index][toy_sz]);
    }
    SetPVarInt(playerid, "UpdatedToy", 1);
    if(InDuel[playerid] == 0) TogglePlayerControllable(playerid, true);
   	return 1;
}


// Toy System
MySQL_LoadPlayerToys(playerid)
{
	new longquery[1000];
	strcat(longquery, "SELECT Slot0_Model,Slot0_Bone,Slot0_XPos,Slot0_YPos,Slot0_ZPos,Slot0_XRot,Slot0_YRot,Slot0_ZRot,Slot0_XScale,Slot0_YScale,Slot0_ZScale,\
	Slot1_Model,Slot1_Bone,Slot1_XPos,Slot1_YPos,Slot1_ZPos,Slot1_XRot,Slot1_YRot,Slot1_ZRot,Slot1_XScale,Slot1_YScale,Slot1_ZScale,\
	Slot2_Model,Slot2_Bone,Slot2_XPos,Slot2_YPos,Slot2_ZPos,Slot2_XRot,Slot2_YRot,Slot2_ZRot,Slot2_XScale,Slot2_YScale,Slot2_ZScale,");

	strcat(longquery, "Slot3_Model,Slot3_Bone,Slot3_XPos,Slot3_YPos,Slot3_ZPos,Slot3_XRot,Slot3_YRot,Slot3_ZRot,Slot3_XScale,Slot3_YScale,Slot3_ZScale,\
	Slot4_Model,Slot4_Bone,Slot4_XPos,Slot4_YPos,Slot4_ZPos,Slot4_XRot,Slot4_YRot,Slot4_ZRot,Slot4_XScale,Slot4_YScale,Slot4_ZScale,\
	Slot5_Model,Slot5_Bone,Slot5_XPos,Slot5_YPos,Slot5_ZPos,Slot5_XRot,Slot5_YRot,Slot5_ZRot,Slot5_XScale,Slot5_YScale,Slot5_ZScale");

	format(str, sizeof(str), " FROM toys WHERE Name='%s'", pName[playerid]);
	strcat(longquery, str);
	MySQL_query(longquery, true, "LoadPlayerToys", "i", playerid);
}

forward LoadPlayerToys(playerid);
public LoadPlayerToys(playerid)
{
	if(MySQL_rowCount())
	{
		PurchasedToy[playerid] = true;
		SetPVarInt(playerid, "HelmetDisabled", 1);
		// Toy slot 1
		pToys[playerid][0][toy_model] = MySQL_getInt(0, 0);
    	pToys[playerid][0][toy_bone] =  MySQL_getInt(0, 1);
     	pToys[playerid][0][toy_x] =     MySQL_getFloat(0, 2);
     	pToys[playerid][0][toy_y] =     MySQL_getFloat(0, 3);
     	pToys[playerid][0][toy_z] =     MySQL_getFloat(0, 4);
     	pToys[playerid][0][toy_rx] =    MySQL_getFloat(0, 5);
     	pToys[playerid][0][toy_ry] =    MySQL_getFloat(0, 6);
     	pToys[playerid][0][toy_rz] =    MySQL_getFloat(0, 7);
     	pToys[playerid][0][toy_sx] =    MySQL_getFloat(0, 8);
     	pToys[playerid][0][toy_sy] =    MySQL_getFloat(0, 9);
     	pToys[playerid][0][toy_sz] =    MySQL_getFloat(0, 10);

		// Toy slot 2
  		pToys[playerid][1][toy_model] = MySQL_getInt(0, 11);
  		pToys[playerid][1][toy_bone] =  MySQL_getInt(0, 12);
  		pToys[playerid][1][toy_x] =     MySQL_getFloat(0, 13);
  		pToys[playerid][1][toy_y] =     MySQL_getFloat(0, 14);
  		pToys[playerid][1][toy_z] =     MySQL_getFloat(0, 15);
  		pToys[playerid][1][toy_rx] =    MySQL_getFloat(0, 16);
  		pToys[playerid][1][toy_ry] =    MySQL_getFloat(0, 17);
  		pToys[playerid][1][toy_rz] =    MySQL_getFloat(0, 18);
  		pToys[playerid][1][toy_sx] =    MySQL_getFloat(0, 19);
  		pToys[playerid][1][toy_sy] =    MySQL_getFloat(0, 20);
		pToys[playerid][1][toy_sz] =    MySQL_getFloat(0, 21);

		// Toy slot 3
  		pToys[playerid][2][toy_model] = MySQL_getInt(0, 22);
    	pToys[playerid][2][toy_bone] =  MySQL_getInt(0, 23);
    	pToys[playerid][2][toy_x] =     MySQL_getFloat(0, 24);
    	pToys[playerid][2][toy_y] =     MySQL_getFloat(0, 25);
    	pToys[playerid][2][toy_z] =     MySQL_getFloat(0, 26);
    	pToys[playerid][2][toy_rx] =    MySQL_getFloat(0, 27);
    	pToys[playerid][2][toy_ry] =    MySQL_getFloat(0, 28);
    	pToys[playerid][2][toy_rz] =    MySQL_getFloat(0, 29);
    	pToys[playerid][2][toy_sx] =    MySQL_getFloat(0, 30);
    	pToys[playerid][2][toy_sy] =    MySQL_getFloat(0, 31);
    	pToys[playerid][2][toy_sz] =    MySQL_getFloat(0, 32);

		// Toy slot 4
  		pToys[playerid][3][toy_model] = MySQL_getInt(0, 33);
  		pToys[playerid][3][toy_bone] =  MySQL_getInt(0, 34);
  		pToys[playerid][3][toy_x] =     MySQL_getFloat(0, 35);
  		pToys[playerid][3][toy_y] =     MySQL_getFloat(0, 36);
  		pToys[playerid][3][toy_z] =     MySQL_getFloat(0, 37);
  		pToys[playerid][3][toy_rx] =    MySQL_getFloat(0, 38);
  		pToys[playerid][3][toy_ry] =    MySQL_getFloat(0, 39);
  		pToys[playerid][3][toy_rz] =    MySQL_getFloat(0, 40);
  		pToys[playerid][3][toy_sx] =    MySQL_getFloat(0, 41);
  		pToys[playerid][3][toy_sy] =    MySQL_getFloat(0, 42);
  		pToys[playerid][3][toy_sz] =    MySQL_getFloat(0, 43);

		// Toy slot 5
  		pToys[playerid][4][toy_model] = MySQL_getInt(0, 44);
  		pToys[playerid][4][toy_bone] =  MySQL_getInt(0, 45);
  		pToys[playerid][4][toy_x] =     MySQL_getFloat(0, 46);
  		pToys[playerid][4][toy_y] =     MySQL_getFloat(0, 47);
  		pToys[playerid][4][toy_z] =     MySQL_getFloat(0, 48);
  		pToys[playerid][4][toy_rx] =    MySQL_getFloat(0, 49);
  		pToys[playerid][4][toy_ry] =    MySQL_getFloat(0, 50);
  		pToys[playerid][4][toy_rz] =    MySQL_getFloat(0, 51);
  		pToys[playerid][4][toy_sx] =    MySQL_getFloat(0, 52);
  		pToys[playerid][4][toy_sy] =    MySQL_getFloat(0, 53);
  		pToys[playerid][4][toy_sz] =    MySQL_getFloat(0, 54);

  		// Toy slot 6
  		pToys[playerid][5][toy_model] = MySQL_getInt(0, 55);
  		pToys[playerid][5][toy_bone] =  MySQL_getInt(0, 56);
  		pToys[playerid][5][toy_x] =     MySQL_getFloat(0, 57);
  		pToys[playerid][5][toy_y] =     MySQL_getFloat(0, 58);
  		pToys[playerid][5][toy_z] =     MySQL_getFloat(0, 59);
  		pToys[playerid][5][toy_rx] =    MySQL_getFloat(0, 60);
  		pToys[playerid][5][toy_ry] =    MySQL_getFloat(0, 61);
  		pToys[playerid][5][toy_rz] =    MySQL_getFloat(0, 62);
  		pToys[playerid][5][toy_sx] =    MySQL_getFloat(0, 63);
  		pToys[playerid][5][toy_sy] =    MySQL_getFloat(0, 64);
  		pToys[playerid][5][toy_sz] =    MySQL_getFloat(0, 65);
  		AttachPlayerToys(playerid); // Attach player Toys.
	}
	return true;
}

MySQL_CreatePlayerToy(playerid)
{
	format(query, sizeof(query), "INSERT INTO `toys` (`Name`) VALUES ('%s');", pName[playerid]);
	MySQL_updateQuery(query);
	PurchasedToy[playerid] = true;

	for(new i = 0; i < 6; i++)
	{
		pToys[playerid][i][toy_model] = 0;
		pToys[playerid][i][toy_bone] = 1;
		pToys[playerid][i][toy_x] = 0.0;
		pToys[playerid][i][toy_y] = 0.0;
		pToys[playerid][i][toy_z] = 0.0;
		pToys[playerid][i][toy_rx] = 0.0;
		pToys[playerid][i][toy_ry] = 0.0;
		pToys[playerid][i][toy_rz] = 0.0;
		pToys[playerid][i][toy_sx] = 1.0;
		pToys[playerid][i][toy_sy] = 1.0;
		pToys[playerid][i][toy_sz] = 1.0;
	}
}

AttachPlayerToys(playerid)
{
	if(!PurchasedToy[playerid]) return true;

	for(new i = 0; i < 6; i++)
	{
		if(pToys[playerid][i][toy_model] != 0)
		{
	        SetPlayerAttachedObject(playerid,
	            i,
	            pToys[playerid][i][toy_model],
	            pToys[playerid][i][toy_bone],
	            pToys[playerid][i][toy_x],
	            pToys[playerid][i][toy_y],
	            pToys[playerid][i][toy_z],
	            pToys[playerid][i][toy_rx],
	            pToys[playerid][i][toy_ry],
	            pToys[playerid][i][toy_rz],
	            pToys[playerid][i][toy_sx],
	            pToys[playerid][i][toy_sy],
	            pToys[playerid][i][toy_sz]);
  		}
	}
	return true;
}

MySQL_SavePlayerToys(playerid)
{
	if(!PurchasedToy[playerid]) return true;
	if(!GetPVarInt(playerid, "UpdatedToy")) return true;

	new lstr[300];
	new line4[1600];

	format(lstr, sizeof(lstr),
	"UPDATE `toys` SET \
	`Slot0_Model` = %i, `Slot0_Bone` = %i, `Slot0_XPos` = %.3f, `Slot0_YPos` = %.3f, `Slot0_ZPos` = %.3f, `Slot0_XRot` = %.3f, `Slot0_YRot` = %.3f, `Slot0_ZRot` = %.3f, `Slot0_XScale` = %.3f, `Slot0_YScale` = %.3f, `Slot0_ZScale` = %.3f,",
		pToys[playerid][0][toy_model],
        pToys[playerid][0][toy_bone],
        pToys[playerid][0][toy_x],
        pToys[playerid][0][toy_y],
        pToys[playerid][0][toy_z],
        pToys[playerid][0][toy_rx],
        pToys[playerid][0][toy_ry],
        pToys[playerid][0][toy_rz],
        pToys[playerid][0][toy_sx],
        pToys[playerid][0][toy_sy],
        pToys[playerid][0][toy_sz]);
	strcat(line4, lstr);

	format(lstr, sizeof(lstr),
	" `Slot1_Model` = %i, `Slot1_Bone` = %i, `Slot1_XPos` = %.3f, `Slot1_YPos` = %.3f, `Slot1_ZPos` = %.3f, `Slot1_XRot` = %.3f, `Slot1_YRot` = %.3f, `Slot1_ZRot` = %.3f, `Slot1_XScale` = %.3f, `Slot1_YScale` = %.3f, `Slot1_ZScale` = %.3f,",
		pToys[playerid][1][toy_model],
        pToys[playerid][1][toy_bone],
        pToys[playerid][1][toy_x],
        pToys[playerid][1][toy_y],
        pToys[playerid][1][toy_z],
        pToys[playerid][1][toy_rx],
        pToys[playerid][1][toy_ry],
        pToys[playerid][1][toy_rz],
        pToys[playerid][1][toy_sx],
        pToys[playerid][1][toy_sy],
        pToys[playerid][1][toy_sz]);
  	strcat(line4, lstr);

    format(lstr, sizeof(lstr),
	" `Slot2_Model` = %i, `Slot2_Bone` = %i, `Slot2_XPos` = %.3f, `Slot2_YPos` = %.3f, `Slot2_ZPos` = %.3f, `Slot2_XRot` = %.3f, `Slot2_YRot` = %.3f, `Slot2_ZRot` = %.3f, `Slot2_XScale` = %.3f, `Slot2_YScale` = %.3f, `Slot2_ZScale` = %.3f,",
		pToys[playerid][2][toy_model],
        pToys[playerid][2][toy_bone],
        pToys[playerid][2][toy_x],
        pToys[playerid][2][toy_y],
        pToys[playerid][2][toy_z],
        pToys[playerid][2][toy_rx],
        pToys[playerid][2][toy_ry],
        pToys[playerid][2][toy_rz],
        pToys[playerid][2][toy_sx],
        pToys[playerid][2][toy_sy],
        pToys[playerid][2][toy_sz]);
  	strcat(line4, lstr);

    format(lstr, sizeof(lstr),
	" `Slot3_Model` = %i, `Slot3_Bone` = %i, `Slot3_XPos` = %.3f, `Slot3_YPos` = %.3f, `Slot3_ZPos` = %.3f, `Slot3_XRot` = %.3f, `Slot3_YRot` = %.3f, `Slot3_ZRot` = %.3f, `Slot3_XScale` = %.3f, `Slot3_YScale` = %.3f, `Slot3_ZScale` = %.3f,",
		pToys[playerid][3][toy_model],
        pToys[playerid][3][toy_bone],
        pToys[playerid][3][toy_x],
        pToys[playerid][3][toy_y],
        pToys[playerid][3][toy_z],
        pToys[playerid][3][toy_rx],
        pToys[playerid][3][toy_ry],
        pToys[playerid][3][toy_rz],
        pToys[playerid][3][toy_sx],
        pToys[playerid][3][toy_sy],
        pToys[playerid][3][toy_sz]);
  	strcat(line4, lstr);

	format(lstr, sizeof(lstr),
	" `Slot4_Model` = %i, `Slot4_Bone` = %i, `Slot4_XPos` = %.3f, `Slot4_YPos` = %.3f, `Slot4_ZPos` = %.3f, `Slot4_XRot` = %.3f, `Slot4_YRot` = %.3f, `Slot4_ZRot` = %.3f, `Slot4_XScale` = %.3f, `Slot4_YScale` = %.3f, `Slot4_ZScale` = %.3f,",
		pToys[playerid][4][toy_model],
        pToys[playerid][4][toy_bone],
        pToys[playerid][4][toy_x],
        pToys[playerid][4][toy_y],
        pToys[playerid][4][toy_z],
        pToys[playerid][4][toy_rx],
        pToys[playerid][4][toy_ry],
        pToys[playerid][4][toy_rz],
        pToys[playerid][4][toy_sx],
        pToys[playerid][4][toy_sy],
        pToys[playerid][4][toy_sz]);
  	strcat(line4, lstr);

	format(lstr, sizeof(lstr),
	" `Slot5_Model` = %i, `Slot5_Bone` = %i, `Slot5_XPos` = %.3f, `Slot5_YPos` = %.3f, `Slot5_ZPos` = %.3f, `Slot5_XRot` = %.3f, `Slot5_YRot` = %.3f, `Slot5_ZRot` = %.3f, `Slot5_XScale` = %.3f, `Slot5_YScale` = %.3f, `Slot5_ZScale` = %.3f WHERE `Name` = '%s'",
		pToys[playerid][5][toy_model],
        pToys[playerid][5][toy_bone],
        pToys[playerid][5][toy_x],
        pToys[playerid][5][toy_y],
        pToys[playerid][5][toy_z],
        pToys[playerid][5][toy_rx],
        pToys[playerid][5][toy_ry],
        pToys[playerid][5][toy_rz],
        pToys[playerid][5][toy_sx],
        pToys[playerid][5][toy_sy],
        pToys[playerid][5][toy_sz],
		pName[playerid]);
  	strcat(line4, lstr);

    MySQL_updateQuery(line4);
    return true;
}

// Private Vehicle System
MySQL_LoadPlayerVehicle(playerid)
{
	new lquery[600];
	format(lquery, sizeof(lquery), "SELECT Model,Price,PaintJob,Color1,Color2,Plate,Locked,Mod1,Mod2,Mod3,Mod4,Mod5,Mod6,Mod7,Mod8,Mod9,Mod10,Mod11,\
	Mod12,Mod13,Mod14,Mod15,Mod16,Mod17,Model_2,Price_2,PaintJob_2,Color1_2,Color2_2,Model_3,Price_3,PaintJob_3,Color1_3,Color2_3 FROM vehicles WHERE Owner='%s'", pName[playerid]);
	MySQL_query(lquery, true, "LoadPlayerVehicle", "i", playerid);
}

forward LoadPlayerVehicle(playerid);
public LoadPlayerVehicle(playerid)
{
	if(MySQL_rowCount())
	{
	    BoughtVehicle[playerid] = true;
	    PlayerInfoVeh[playerid][Model] = MySQL_getInt(0, 0);
  		PlayerInfoVeh[playerid][Price] = MySQL_getInt(0, 1);
 		PlayerInfoVeh[playerid][PaintJob] = MySQL_getInt(0, 2);
   		PlayerInfoVeh[playerid][Color1] = MySQL_getInt(0, 3);
    	PlayerInfoVeh[playerid][Color2] = MySQL_getInt(0, 4);
     	new plate[13];
     	MySQL_getString(0, 5, plate);
     	strmid(PlayerInfoVeh[playerid][Plate], plate, 0, 13, 13);
     	PlayerInfoVeh[playerid][Locked] = MySQL_getInt(0, 6);
     	PlayerInfoVeh[playerid][Mod1] = MySQL_getInt(0, 7);
     	PlayerInfoVeh[playerid][Mod2] = MySQL_getInt(0, 8);
     	PlayerInfoVeh[playerid][Mod3] = MySQL_getInt(0, 9);
     	PlayerInfoVeh[playerid][Mod4] = MySQL_getInt(0, 10);
     	PlayerInfoVeh[playerid][Mod5] = MySQL_getInt(0, 11);
     	PlayerInfoVeh[playerid][Mod6] = MySQL_getInt(0, 12);
      	PlayerInfoVeh[playerid][Mod7] = MySQL_getInt(0, 13);
     	PlayerInfoVeh[playerid][Mod8] = MySQL_getInt(0, 14);
     	PlayerInfoVeh[playerid][Mod9] = MySQL_getInt(0, 15);
     	PlayerInfoVeh[playerid][Mod10] = MySQL_getInt(0, 16);
     	PlayerInfoVeh[playerid][Mod11] = MySQL_getInt(0, 17);
     	PlayerInfoVeh[playerid][Mod12] = MySQL_getInt(0, 18);
     	PlayerInfoVeh[playerid][Mod13] = MySQL_getInt(0, 19);
     	PlayerInfoVeh[playerid][Mod14] = MySQL_getInt(0, 20);
     	PlayerInfoVeh[playerid][Mod15] = MySQL_getInt(0, 21);
     	PlayerInfoVeh[playerid][Mod16] = MySQL_getInt(0, 22);
     	PlayerInfoVeh[playerid][Mod17] = MySQL_getInt(0, 23);
     	PlayerInfoVeh[playerid][Owner] = pName[playerid];

     	PlayerInfoVeh[playerid][Model2] = MySQL_getInt(0, 24);
  		PlayerInfoVeh[playerid][Price2] = MySQL_getInt(0, 25);
 		PlayerInfoVeh[playerid][PaintJob2] = MySQL_getInt(0, 26);
   		PlayerInfoVeh[playerid][Color12] = MySQL_getInt(0, 27);
    	PlayerInfoVeh[playerid][Color22] = MySQL_getInt(0, 28);

    	PlayerInfoVeh[playerid][Model3] = MySQL_getInt(0, 29);
  		PlayerInfoVeh[playerid][Price3] = MySQL_getInt(0, 30);
 		PlayerInfoVeh[playerid][PaintJob3] = MySQL_getInt(0, 31);
   		PlayerInfoVeh[playerid][Color13] = MySQL_getInt(0, 32);
    	PlayerInfoVeh[playerid][Color23] = MySQL_getInt(0, 33);
	}
	return 1;
}

// Loading Achivements
MySQL_LoadPlayerAchivements(playerid)
{
	new lquery[320];
	format(lquery, sizeof(lquery), "SELECT a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32 FROM achievements WHERE reg_id=%d", pRegID[playerid]);
	MySQL_query(lquery, true, "LoadPlayerAchivements", "i", playerid);
}

forward LoadPlayerAchivements(playerid);
public LoadPlayerAchivements(playerid)
{
	if(MySQL_rowCount())
	{
	    pAch1[playerid] = MySQL_getInt(0, 0);
		pAch2[playerid] = MySQL_getInt(0, 1);
		pAch3[playerid] = MySQL_getInt(0, 2);
		pAch4[playerid] = MySQL_getInt(0, 3);
		pAch5[playerid] = MySQL_getInt(0, 4);
		pAch6[playerid] = MySQL_getInt(0, 5);
		pAch7[playerid] = MySQL_getInt(0, 6);
		pAch8[playerid] = MySQL_getInt(0, 7);
		pAch9[playerid] = MySQL_getInt(0, 8);
		pAch10[playerid] = MySQL_getInt(0, 9);
		pAch11[playerid] = MySQL_getInt(0, 10);
		pAch12[playerid] = MySQL_getInt(0, 11);
		pAch13[playerid] = MySQL_getInt(0, 12);
		pAch14[playerid] = MySQL_getInt(0, 13);
		pAch15[playerid] = MySQL_getInt(0, 14);
		pAch16[playerid] = MySQL_getInt(0, 15);
		pAch17[playerid] = MySQL_getInt(0, 16);
		pAch18[playerid] = MySQL_getInt(0, 17);
		pAch19[playerid] = MySQL_getInt(0, 18);
		pAch20[playerid] = MySQL_getInt(0, 19);
		pAch21[playerid] = MySQL_getInt(0, 20);
		pAch22[playerid] = MySQL_getInt(0, 21);
		pAch23[playerid] = MySQL_getInt(0, 22);
		pAch24[playerid] = MySQL_getInt(0, 23);
		pAch25[playerid] = MySQL_getInt(0, 24);
		pAch26[playerid] = MySQL_getInt(0, 25);
		pAch27[playerid] = MySQL_getInt(0, 26);
		pAch28[playerid] = MySQL_getInt(0, 27);
		pAch29[playerid] = MySQL_getInt(0, 28);
		pAch30[playerid] = MySQL_getInt(0, 29);
		pAch31[playerid] = MySQL_getInt(0, 30);
		pAch32[playerid] = MySQL_getInt(0, 31);
	}
	
	else
 	{
 		MySQL_CreatePlayerAchivements(playerid);
 	}
	return 1;
}

MySQL_CreatePlayerAchivements(playerid)
{
    format(query, sizeof(query), "INSERT INTO `achievements` (`reg_id`, `name`) VALUES (%i, '%s')", pRegID[playerid], pName[playerid]);
	MySQL_updateQuery(query);
}

MySQL_CreateBuyVehicle(playerid)
{
    format(query, sizeof(query), "INSERT INTO `vehicles` (`Owner`, `Price`, `Model`, `Plate`) VALUES ('%s', %i, %i, '%s')", pName[playerid], PlayerInfoVeh[playerid][Price], PlayerInfoVeh[playerid][Model], PlayerInfoVeh[playerid][Plate]);
	MySQL_query(query, true, "OnPlayerBuyVehicle", "i", playerid);
}
forward OnPlayerBuyVehicle(playerid);
public OnPlayerBuyVehicle(playerid)
{
	BoughtVehicle[playerid] = true;
	PlayerInfoVeh[playerid][Owner] = pName[playerid];
	PlayerInfoVeh[playerid][Locked] = 1;
 	MySQL_SavePlayerVeh(playerid);
  	return true;
}

MySQL_DeletePlayerVehicle(playerid)
{
    format(query, sizeof(query), "DELETE FROM `vehicles` WHERE `Owner` = '%s'", pName[playerid]);
	MySQL_query(query, true, "OnPlayerDeleteVehicle", "i", playerid);
}
forward OnPlayerDeleteVehicle(playerid);
public OnPlayerDeleteVehicle(playerid)
{
	BoughtVehicle[playerid] = false;
	if(PlayerVehicle[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(PV_3DLabel[playerid]);
		DestroyVehicle(PlayerVehicle[playerid]);
		PlayerVehicle[playerid]= -1;
	}
	PlayerInfoVeh[playerid][Owner] = 0;
 	PlayerInfoVeh[playerid][Model] = -1;
 	PlayerInfoVeh[playerid][PaintJob] = -1;
 	PlayerInfoVeh[playerid][Color1] = 0;
 	PlayerInfoVeh[playerid][Color2] = 0;
 	strmid(PlayerInfoVeh[playerid][Plate], "UFF", 0, 7, 7);
 	PlayerInfoVeh[playerid][Locked] = 0;
 	PlayerInfoVeh[playerid][Mod1] = 0;
 	PlayerInfoVeh[playerid][Mod2] = 0;
  	PlayerInfoVeh[playerid][Mod3] = 0;
  	PlayerInfoVeh[playerid][Mod4] = 0;
  	PlayerInfoVeh[playerid][Mod5] = 0;
  	PlayerInfoVeh[playerid][Mod6] = 0;
  	PlayerInfoVeh[playerid][Mod7] = 0;
  	PlayerInfoVeh[playerid][Mod8] = 0;
  	PlayerInfoVeh[playerid][Mod9] = 0;
  	PlayerInfoVeh[playerid][Mod10] = 0;
   	PlayerInfoVeh[playerid][Mod11] = 0;
    PlayerInfoVeh[playerid][Mod12] = 0;
  	PlayerInfoVeh[playerid][Mod13] = 0;
	PlayerInfoVeh[playerid][Mod14] = 0;
   	PlayerInfoVeh[playerid][Mod15] = 0;
  	PlayerInfoVeh[playerid][Mod16] = 0;
  	PlayerInfoVeh[playerid][Mod17] = 0;
	GivePlayerCash(playerid, floatround(PlayerInfoVeh[playerid][Price] / 2));
	PlayerInfoVeh[playerid][Price] = -1;

	InfoTD_MSG(playerid, 5000, "~r~~h~You have sold your private vehicle!");
	return true;
}

MySQL_SavePlayerVeh(playerid)
{
	if(!BoughtVehicle[playerid]) return true;
	new lquery[600];
	new line4[1100];

	format(lquery, sizeof(lquery), "UPDATE `vehicles` SET `Model` = %i, `Price` = %i, `PaintJob` = %i, `Color1` = %i, `Color2` = %i, `Plate` = '%s', `Locked` = %i, \
	`Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i, `Mod12` = %i, `Mod13` = %i, `Mod14` = %i, `Mod15` = %i, `Mod16` = %i, `Mod17` = %i, ",\
		PlayerInfoVeh[playerid][Model],
		PlayerInfoVeh[playerid][Price],
		PlayerInfoVeh[playerid][PaintJob],
		PlayerInfoVeh[playerid][Color1],
		PlayerInfoVeh[playerid][Color2],
		PlayerInfoVeh[playerid][Plate],
		PlayerInfoVeh[playerid][Locked],
		PlayerInfoVeh[playerid][Mod1],
		PlayerInfoVeh[playerid][Mod2],
		PlayerInfoVeh[playerid][Mod3],
		PlayerInfoVeh[playerid][Mod4],
		PlayerInfoVeh[playerid][Mod5],
		PlayerInfoVeh[playerid][Mod6],
		PlayerInfoVeh[playerid][Mod7],
		PlayerInfoVeh[playerid][Mod8],
		PlayerInfoVeh[playerid][Mod9],
		PlayerInfoVeh[playerid][Mod10],
		PlayerInfoVeh[playerid][Mod11],
		PlayerInfoVeh[playerid][Mod12],
		PlayerInfoVeh[playerid][Mod13],
		PlayerInfoVeh[playerid][Mod14],
		PlayerInfoVeh[playerid][Mod15],
		PlayerInfoVeh[playerid][Mod16],
		PlayerInfoVeh[playerid][Mod17]);
	strcat(line4, lquery);

	format(lquery, sizeof(lquery), "`Model_2` = %i, `Price_2` = %i, `PaintJob_2` = %i, `Color1_2` = %i, `Color2_2` = %i, `Model_3` = %i, `Price_3` = %i, `PaintJob_3` = %i, `Color1_3` = %i, `Color2_3` = %i WHERE `Owner` = '%s'",
		PlayerInfoVeh[playerid][Model2],
		PlayerInfoVeh[playerid][Price2],
		PlayerInfoVeh[playerid][PaintJob2],
		PlayerInfoVeh[playerid][Color12],
		PlayerInfoVeh[playerid][Color22],
		PlayerInfoVeh[playerid][Model3],
		PlayerInfoVeh[playerid][Price3],
		PlayerInfoVeh[playerid][PaintJob3],
		PlayerInfoVeh[playerid][Color13],
		PlayerInfoVeh[playerid][Color23],
		pName[playerid]);
	strcat(line4, lquery);

    MySQL_updateQuery(line4);
    return true;
}


function PlayerBuyVehicle(playerid, vprice, vmodel)
{
	if(pCash[playerid] < vprice)
	{
		Error(playerid, "You can't afford this vehicle!");
		ShowCarBuyMenu(playerid);
		return 1;
	}
    if(BoughtVehicle[playerid] == true) return Error(playerid, "You have already purchased maximum private vehicles!");
	if(pTotalHours[playerid] < 1) return ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITE_E"Private Vehicle Shop", "{F6F6F6}You must have at least a total of 3 hours of online time to purchase a private vehicle! (/stats)", "OK", "");
	//justSpawnedVehicle[playerid] = true;
	if(PlayerVehicle[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(PV_3DLabel[playerid]);
		DestroyVehicle(PlayerVehicle[playerid]);
		PlayerVehicle[playerid]= -1;
	}
	PlayerInfoVeh[playerid][Model] = vmodel;
	PlayerInfoVeh[playerid][Price] = vprice;

    if(GetPVarInt(playerid, "PVShop") == 1) // Wangs
 	{
 		PlayerVehicle[playerid] = CreateVehicle(vmodel, -1411.6311,1027.0924,1048.9034,228.6992, 1, 0, -1);
 		PutPlayerInVehicle(playerid, PlayerVehicle[playerid], 0);
 		SetPlayerCameraPos(playerid, -1400.8040, 1019.3357, 1054.4485);
		SetPlayerCameraLookAt(playerid, -1411.6311,1027.0924,1048.9034);
    }
  	else // Ottos
  	{
  		PlayerVehicle[playerid] = CreateVehicle(vmodel, -1411.6311,1027.0924,1048.9034,228.6992, 1, 0, -1);
  		PutPlayerInVehicle(playerid, PlayerVehicle[playerid], 0);
 		SetPlayerCameraPos(playerid, -1400.8040, 1019.3357, 1054.4485);
		SetPlayerCameraLookAt(playerid, -1411.6311, 1027.0924, 1048.9034);
	}
	SetTimerEx("ShowColorDialog", 800, false, "i", playerid);

	return 1;
}
function ShowColorDialog(playerid)
{
	ShowPlayerDialog(playerid, CARBUY_DIALOG+7, DIALOG_STYLE_LIST, ""GREEN_E"Choose your car color", "Black\nWhite\nRed\nBlue\nGreen\nYellow\nPink\nBrown\nGrey\nGold", "Next", "");
}
// PV CreateVehicle
CreateFinalCar(playerid)
{
    new vlabel[100];
    if(PlayerVehicle[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(PV_3DLabel[playerid]);
		DestroyVehicle(PlayerVehicle[playerid]);
		PlayerVehicle[playerid]= -1;
	}
	//justSpawnedVehicle[playerid] = true;
	format(vlabel, sizeof(vlabel), "{%06x}%s's\n"WHITE_E"Vehicle", pColor[playerid], pName[playerid]);
	PlayerVehicle[playerid] = CreateVehicle(PlayerInfoVeh[playerid][Model], 1826.9821, -1383.8724, 19.3348, 180.0407, PlayerInfoVeh[playerid][Color1], PlayerInfoVeh[playerid][Color2], -1);
	PV_3DLabel[playerid] = CreateDynamic3DTextLabel(vlabel, -1, 0.0, 0.0, 0.0, 30.0, INVALID_PLAYER_ID, PlayerVehicle[playerid], 0, -1, -1, -1, 45.0);

	GivePlayerCash(playerid, -PlayerInfoVeh[playerid][Price]);

    format(tmp, sizeof(tmp), "~y~~h~Purchased ~n~~w~Private Vehicle");
    GameTextForPlayer(playerid, tmp, 3500, 4);

    SetVehicleNumberPlate(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Plate]);
    SetVehicleToRespawn(PlayerVehicle[playerid]);

    TogglePlayerControllable(playerid, true);
    PutPlayerInVehicle(playerid, PlayerVehicle[playerid], 0);
	if(GetPVarInt(playerid, "PVShop") == 1) // Wangs
 	{
  		SetPlayerVehiclePosition(playerid, -1981.2803,285.6966,34.8096,88.1494);
	}
	else SetPlayerVehiclePosition(playerid, -1644.7314,1213.2747,6.9067,226.3120);
	ShowPlayerDialog(playerid, NO_DIALOG, DIALOG_STYLE_MSGBOX, ""WHITE_E"Private Vehicle Purchased!",
	""WHITE_E"Congrats you have purchased your private vehicle!\n\n"RED_E"- "WHITE_E"This vehicle will Permanently be saved and will be your till you sell it.\n"RED_E"- "WHITE_E"All your modifications to this vehicle will save (use /cc to change carcolor)\n"RED_E"- "WHITE_E"Use "LB_E"/pv "WHITE_E"to access your private vehicle menu.\n\nHave fun with your new car!", "Close", "");
    doingStunt[playerid] = 0;
	MySQL_CreateBuyVehicle(playerid);
    return 1;
}
//
stock ModVehicleColor(playerid)
{
	new color1,
	    color2;

	color1 = PlayerInfoVeh[playerid][Color1] != 0 ? PlayerInfoVeh[playerid][Color1] : 0;
	color2 = PlayerInfoVeh[playerid][Color2] != 0 ? PlayerInfoVeh[playerid][Color2] : 0;

	ChangeVehicleColor(PlayerVehicle[playerid], color1, color2);
	return 1;
}
stock ModVehiclePaintJob(playerid)
{
	if(PlayerInfoVeh[playerid][PaintJob] != -1)
	{
		ChangeVehiclePaintjob(PlayerVehicle[playerid], PlayerInfoVeh[playerid][PaintJob]);
	}
	return 1;
}
stock ModVehicleComponents(playerid)
{
	if(PlayerInfoVeh[playerid][Mod1] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod1]);
	}

	if(PlayerInfoVeh[playerid][Mod2] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod2]);
	}

	if(PlayerInfoVeh[playerid][Mod3] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod3]);
	}

	if(PlayerInfoVeh[playerid][Mod4] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod4]);
	}

	if(PlayerInfoVeh[playerid][Mod5] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod5]);
	}

	if(PlayerInfoVeh[playerid][Mod6] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod6]);
	}

	if(PlayerInfoVeh[playerid][Mod7] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod7]);
	}

	if(PlayerInfoVeh[playerid][Mod8] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod8]);
  	}

	if(PlayerInfoVeh[playerid][Mod9] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod9]);
	}

	if(PlayerInfoVeh[playerid][Mod10] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod10]);
	}

	if(PlayerInfoVeh[playerid][Mod11] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod11]);
	}

	if(PlayerInfoVeh[playerid][Mod12] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod12]);
	}

	if(PlayerInfoVeh[playerid][Mod13] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod13]);
	}

	if(PlayerInfoVeh[playerid][Mod14] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod14]);
	}

	if(PlayerInfoVeh[playerid][Mod15] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod15]);
	}

	if(PlayerInfoVeh[playerid][Mod16] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod16]);
	}

	if(PlayerInfoVeh[playerid][Mod17] != 0)
	{
		AddVehicleComponent(PlayerVehicle[playerid], PlayerInfoVeh[playerid][Mod17]);
	}
}

stock SavePVComponents(playerid, componentid)
{
	for(new s = 0; s < 20; s++)
	{
    	if(componentid == pv_spoiler[s][0])
		{
      		PlayerInfoVeh[playerid][Mod1] = componentid;
   	    }
	}

	for(new s = 0; s < 3; s++)
	{
    	if(componentid == pv_nitro[s][0])
		{
    		PlayerInfoVeh[playerid][Mod2] = componentid;
   		}
	}

	for(new s = 0; s < 23; s++)
	{
    	if(componentid == pv_fbumper[s][0])
		{
    		PlayerInfoVeh[playerid][Mod3] = componentid;
   	 	}
	}

	for(new s = 0; s < 22; s++)
	{
    	if(componentid == pv_rbumper[s][0])
		{
    		PlayerInfoVeh[playerid][Mod4] = componentid;
   		}
	}

	for(new s = 0; s < 28; s++)
	{
     	if(componentid == pv_exhaust[s][0])
		{
       		PlayerInfoVeh[playerid][Mod5] = componentid;
		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventr[s][0])
		{
			PlayerInfoVeh[playerid][Mod6] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
		if(componentid == pv_bventl[s][0])
		{
			PlayerInfoVeh[playerid][Mod7] = componentid;
 		}
	}

	for(new s = 0; s < 4; s++)
	{
		if(componentid == pv_bscoop[s][0])
		{
			PlayerInfoVeh[playerid][Mod8] = componentid;
 		}
	}

	for(new s = 0; s < 17; s++)
	{
		if(componentid == pv_roof[s][0])
		{
			PlayerInfoVeh[playerid][Mod9] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_lskirt[s][0])
		{
			PlayerInfoVeh[playerid][Mod10] = componentid;
		}
	}

	for(new s = 0; s < 21; s++)
	{
		if(componentid == pv_rskirt[s][0])
		{
			PlayerInfoVeh[playerid][Mod11] = componentid;
 		}
	}

	for(new s = 0; s < 1; s++)
	{
		if(componentid == pv_hydraulics[s][0])
		{
			PlayerInfoVeh[playerid][Mod12] = componentid;
		}
	}

	for(new s = 0; s < 1; s++)
	{
     	if(componentid == pv_base[s][0])
 		{
       		PlayerInfoVeh[playerid][Mod13] = componentid;
		}
	}

	for(new s = 0; s < 4; s++)
	{
     	if(componentid == pv_rbbars[s][0])
 		{
       		PlayerInfoVeh[playerid][Mod14] = componentid;
 		}
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_fbbars[s][0])
		{
    		PlayerInfoVeh[playerid][Mod15] = componentid;
		}
	}

	for(new s = 0; s < 17; s++)
	{
    	if(componentid == pv_wheels[s][0])
		{
      		PlayerInfoVeh[playerid][Mod16] = componentid;
   	    }
	}

	for(new s = 0; s < 2; s++)
	{
    	if(componentid == pv_lights[s][0])
		{
			PlayerInfoVeh[playerid][Mod17] = componentid;
 		}
    }
	return 1;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock SavePlayerPosition(playerid)
{
	if(InDM[playerid] != 0) return true;

	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(playerid, A);
	}
	else
	{
  		vID = GetPlayerVehicleID(playerid);
 		GetVehiclePos(vID, POS[0], POS[1], POS[2]);
   		GetVehicleZAngle(vID, A);
	}
	sPOS_X[playerid] = POS[0];
	sPOS_Y[playerid] = POS[1];
	sPOS_Z[playerid] = POS[2];
	sPOS_A[playerid] = A;
	sPOS_Int[playerid] = GetPlayerInterior(playerid);
	sPOS_VW[playerid] = GetPlayerVirtualWorld(playerid);
	return true;
}

stock LoadPlayerPosition(playerid)
{
	//Streamer_UpdateEx(playerid, GetPVarFloat(playerid, "sPOS_X"), GetPVarFloat(playerid, "sPOS_Y"), GetPVarFloat(playerid, "sPOS_Z"));

	SetPlayerWorldBounds(playerid, 20000.0, -20000.0, 20000.0, -20000.0);
	SetPlayerPosition(playerid, sPOS_X[playerid], sPOS_Y[playerid], sPOS_Z[playerid], sPOS_A[playerid], sPOS_Int[playerid]);
	SetPlayerVirtualWorld(playerid, sPOS_VW[playerid]);
	SetPlayerHealth(playerid, 100);
	TogglePlayerControllable(playerid, true);

	if(GOD[playerid] == 0)
 	{
		GiveSpawnWeapons(playerid);
	}
	if(pPremium[playerid] >= 1)
	{
		SetPlayerArmour(playerid, 50.0);
		if(pPremium[playerid] == 1) SetPlayerArmour(playerid, 100.0);
	}
}

stock SavePlayerPositionEx(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
		GetPlayerFacingAngle(playerid, A);
	}
	else
	{
		vID = GetPlayerVehicleID(playerid);
 		GetVehiclePos(vID, POS[0], POS[1], POS[2]);
   		GetVehicleZAngle(vID, A);
	}
	sPOS2_X[playerid] = POS[0];
	sPOS2_Y[playerid] = POS[1];
	sPOS2_Z[playerid] = POS[2];
	sPOS2_A[playerid] = A;
	sPOS2_Int[playerid] = GetPlayerInterior(playerid);
	sPOS2_VW[playerid] = GetPlayerVirtualWorld(playerid);
}

stock LoadPlayerPositionEx(playerid)
{
	//Streamer_UpdateEx(playerid, GetPVarFloat(playerid, "sPOS2_X"), GetPVarFloat(playerid, "sPOS2_Y"), GetPVarFloat(playerid, "sPOS2_Z"));

	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SetPlayerPosition(playerid, sPOS2_X[playerid], sPOS2_Y[playerid], sPOS2_Z[playerid], sPOS2_A[playerid], sPOS2_Int[playerid]);
	}
	else
	{
		vID = GetPlayerVehicleID(playerid);
		SetPlayerVehiclePosition(playerid, sPOS2_X[playerid], sPOS2_Y[playerid], sPOS2_Z[playerid], sPOS2_A[playerid], sPOS2_Int[playerid]);
		LinkVehicleToInterior(vID, sPOS2_Int[playerid]);
		SetVehicleVirtualWorld(vID, sPOS2_VW[playerid]);
	}
	SetPlayerVirtualWorld(playerid, sPOS2_VW[playerid]);
}

stock KillStreak(playerid)
{
	if(killStreak[playerid] != 0)
	{
	    new Float:pHealth, kstdstr[300];
		GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
		if(killStreak[playerid] > TotalKillStreak[playerid])
		{
			TotalKillStreak[playerid] = killStreak[playerid];
					// wanted textdraw update
        }
    	format(kstdstr, sizeof(kstdstr), "~y~] ~w~%d", killStreak[playerid]);
		PlayerTextDrawSetString(playerid, KSTD[playerid], kstdstr);
		switch(killStreak[playerid])
 		{
 			case 3:
		 	{
       			GivePlayerScore(playerid, 2);
  				GivePlayerCash(playerid, 5000);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 3 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is on a kill streak with 3 kills!", pColor[playerid], giveplayer, playerid);
			    SendClientMessageToAll(COLOR_RED, str);
			}
			case 5:
	 		{
				GivePlayerScore(playerid, 3);
  				GivePlayerCash(playerid, 6000);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 5 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is on a kill streak with 5 kills!", pColor[playerid], giveplayer, playerid);
			    SendClientMessageToAll(COLOR_RED, str);
			}
			case 7:
	 		{
				GivePlayerScore(playerid, 3);
  				GivePlayerCash(playerid, 8000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is unstoppable with a 7 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 7 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		 	}
		 	case 10:
		 	{
				GivePlayerScore(playerid, 4);
		  		GivePlayerCash(playerid, 10000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is godlike with a 10 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 10 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
			case 15:
	 		{
				GivePlayerScore(playerid, 5);
		  		GivePlayerCash(playerid, 15000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"can't be stopped with a 15 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 15 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
			case 20:
	 		{
				GivePlayerScore(playerid, 6);
  				GivePlayerCash(playerid, 20000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"shitting on everyone with a 20 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 20 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
				if(pAch2[playerid] == 0)
				{
					pAch2[playerid] = 1;
					format(query, sizeof(query), "UPDATE achievements SET a2=1 WHERE reg_id=%d", pRegID[playerid]);
					MySQL_updateQuery(query);
					GivePlayerAchievement(playerid, "Mass Killer", "Congrats you reached a 20 killstreak!~n~~y~+$100000 and 5 score!~n~~w~Type /ach to view your achievements.");
				}
			}
			case 25:
	 		{
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 30000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is DOMINATING with a 25 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 25 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			}
			case 30:
	 		{
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 50000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is DOMINATING with a 30 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 30 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
				GetPlayerHealth(playerid, pHealth);
				SetPlayerHealth(playerid, pHealth+50);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~~h~+50 ~w~Health", 3500, 5);
			}
			case 40:
	 		{
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 50000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is DOMINATING with a 40 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 40 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	 		}
	 		case 50:
	 		{
				GivePlayerScore(playerid, 6);
		  		GivePlayerCash(playerid, 50000);
				format(str, sizeof(str), ""RED_E"* {%06x}%s(%i) "RED_E"is shitting on everyone with a 50 streak kill!", pColor[playerid], giveplayer, playerid);
				SendClientMessageToAll(COLOR_RED, str);
				format(str, sizeof(str), "3%s(%i)2 is on a kill streak with 50 kills!", giveplayer, playerid);
				IRC_GroupSay(ircGroup, IRC_CHANNEL, str), IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
	 		}
		}

	}
}

ToCurrency(cCash)
{
    new szStr[16];
    format(szStr, sizeof(szStr), "%i", cCash);

    for(new iLen = strlen(szStr) - 3; iLen > 0; iLen -= 3)
    {
        strins(szStr, ",", iLen);
    }
    return szStr;
}

stock ClosePlayerDialog(playerid)
{
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Close", "Close", "Close", "Close");
}
stock ShowHiddenAdmins(playerid)
{
	new count = 0;
	foreach(Player, ii)
	{
		if(pAdmin[ii] > 0 && pHidden[ii] == 1) count++;
	}
	if(count == 0) return true;

	format(str, sizeof(str), ""RED_E"Hidden Admins: "WHITE_E"%d", count);
	SendClientMessage(playerid, COLOR_WHITE, str);
	count = 0;
	foreach(Player, ii)
	{
		if(pAdmin[ii] > 0 && pHidden[ii] == 1)
		{
			count++;
			GetPlayerName(ii, PlayerName, sizeof(PlayerName));
			format(line, sizeof(line), ""LB_E"%d) "WHITEP_E"%s (ID: %i) %s", count, pName[ii], ii, GetPlayerAdminLevelName2(ii));
			SendClientMessage(playerid, COLOR_WHITEP, line);
		}
	}
	return 1;
}

stock SendPlayerPM(p1, p2, msg[])
{
	// Decide about multi-line PMs
	new i = -1;
	if(strlen(msg) > 70)
	{
		i = strfind(msg, " ", false, 60);
		if(i > 80 || i == -1) i = 70;

		// store the second line text
		line = " ";
		strcat(line, msg[i]);

		// delete the rest from msg
		msg[i] = EOS;
	}
	// Anti-Advertisement
	new numCount;
	for(new ii = 0; ii < strlen(msg); ii++)
	{
        if(msg[ii] >= '0' && msg[ii] <= '9')
    	{
			numCount++;
   		}
	}
	if(numCount >= 8)
	{
		if(strfind(msg, "34.228.165.73:7777") == -1)
		{
			format(str, sizeof(str), "*ADMIN-MSG: "GREY_E"%s(%i) has attempted to advertise! (msg: %s)", pName[p1], p1, msg);
			SendAdminMessage(COLOR_RED, str);
			SendClientMessage(p1, COLOR_RED, ""RED_E"Failed to send the message");
			format(str, sizeof(str), "4Server:2 %s(%d) has attempted to advertise! (msg: %s)", pName[p1], p1, msg);
			IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
			return 1;
		}
	}
    if(strfind(LastText[p1], msg, false) != -1)
	{
		RepeatMsg[p1]++;
 		if(RepeatMsg[p1] >= 2)
		{
			GameTextForPlayer(p1, "~y~Do not repeat your message.", 3000, 3);
			return true;
		}
	}
	else RepeatMsg[p1] = 0;
	strmid(LastText[p1], msg, 0, strlen(msg), sizeof(LastText[]));

	// Anti-Caps
	if(GetPVarType(p1, "Caps")) UpperToLower(msg);
	format(str, sizeof(str), ""RED_E"***"WHITE_E"["RED_E"Private Message"WHITE_E"] from {%06x}%s(%i): "WHITE_E"%s", pColor[p1], pName[p1], p1, msg);
	SendClientMessage(p2, COLOR_LB, str);
	if(i != -1) SendClientMessage(p2, 0x15D4EDFF, line);

	format(str, sizeof(str), ""RED_E">>>"WHITE_E"["LB2_E"Private Message"WHITE_E"] to {%06x}%s(%i): "WHITE_E"%s", pColor[p2], pName[p2], p2, msg);
	SendClientMessage(p1, COLOR_LB, str);
	if(i != -1) SendClientMessage(p1, 0x15D4EDFF, line);

	format(str, sizeof(str), "~r~~h~ PM Respond");
	GameTextForPlayer(p2, str, 3500, 4);
	format(str, sizeof(str), "~b~~h~ PM Sent");
	GameTextForPlayer(p1, str, 3500, 4);

	TextDrawShowForPlayer(p1, CheckTD);
	TextDrawShowForPlayer(p2, NewMsgTD);
	SetTimerEx("hideMsgTD", 3500, false, "i", p2);
	SetTimerEx("hideCheck", 3500, false, "i", p1);

	if(GetPVarInt(p2, "FirstPM") == 0)
	{
		SendClientMessage(p2, COLOR_LB, ""LG_E"* "LB2_E"Use "ORANGE_E"@<text> "LB2_E"to quickly reply to messages.");
		SetPVarInt(p2, "FirstPM", 1);
	}
	format(str, sizeof(str), ""RED_E"PM: "DARK_E"%s(%i) -> %s(%i): "GREY_E"%s", pName[p1], p1, pName[p2], p2, msg);
	foreach(Player, ii)
	{
	    if(ii == p2 || ii == p1) continue;
		if(pAdmin[ii] >= 1 && pInfo[ii][pSeePMs] == 1 && pAdmin[p1] != 5)
		{
		    SendClientMessage(ii, COLOR_GREY, str);
		    if(i != -1) SendClientMessage(ii, COLOR_GREY, line);
		}
	}
	if(pAdmin[p1] != 5)
	{
		format(str, sizeof(str), "4PM:2 %s(%i) to %s(%i):1 %s", pName[p1], p1, pName[p2], p2, msg);
		IRC_GroupSay(ircGroup, IRC_aCHANNEL, str);
		if(i != -1) IRC_GroupSay(ircGroup, IRC_aCHANNEL, line);
  	}
	format(str, sizeof(str), ""RED_E"%s(%i): "WHITE_E"%s", pName[p1], p1, msg);
	for(new ir = 1; ir < MAX_PMS - 1; ir++)
	{
		PMs[p2][ir] = PMs[p2][ir + 1];
	}
	PMs[p2][MAX_PMS - 1] = str;
	PlayerPlaySound(p1, 1057, 0.0, 0.0, 0.0);
	PlayerPlaySound(p2, 1057, 0.0, 0.0, 0.0);
	SetPVarInt(p2, "lastPMer", p1);
	if(GetPVarInt(p1, "PMsDisabled") == 1)
	{
  		SendClientMessage(p1, COLOR_LRED, ""UFF" "LRED_E"Your private messages are disabled, type /togpm to enable them.");
	}
	if(cAFK[p2] >= 10)
	{
		format(str, sizeof(str), ""RED_E"> "YELLOW_E"%s(%d) is currently on desktop and may not have received your message.", pName[p2], p2);
		SendClientMessage(p1, COLOR_YELLOW, str);
		SetPVarInt(p2, "recivedPM", 1);
	}
	return 1;
}

GameTimeConvert(seconds)
{
	new etmp[16];
 	new minutes = floatround(seconds / 60);
  	seconds -= minutes * 60;
   	format(etmp, sizeof(etmp), "%i:%02i", minutes, seconds);
   	return etmp;
}

GetDistance(Float:xPos, Float:yPos, Float:zPos, Float:xPos2, Float:yPos2, Float:zPos2)
{
	xPos -= xPos2;
	yPos -= yPos2;
	zPos -= zPos2;
	return floatround(floatpower((xPos * xPos) + (yPos * yPos) + (zPos * zPos), 0.5));
}
ShowPlayerRaceTextdraws(playerid)
{
    TextDrawHideForPlayer(playerid, TeleTD);
    PlayerTextDrawShow(playerid, RaceTD1[playerid]);
    TextDrawShowForPlayer(playerid, RaceTD2);
    PlayerTextDrawShow(playerid, RaceTD3[playerid]);

}

HidePlayerRaceTextdraws(playerid)
{
    TextDrawShowForPlayer(playerid, TeleTD);
    PlayerTextDrawHide(playerid, RaceTD1[playerid]);
	TextDrawHideForPlayer(playerid, RaceTD2);
	PlayerTextDrawHide(playerid, RaceTD3[playerid]);
}
ShowPlayerMSGBox(playerid)
{
	if(hideMSG[playerid] == 0)
	{
    	TextDrawShowForPlayer(playerid, TD_line[0]);
		TextDrawShowForPlayer(playerid, TD_line[1]);
		TextDrawShowForPlayer(playerid, TD_line[2]);
		TextDrawShowForPlayer(playerid, TD_line[3]);
	}
}

HidePlayerMSGBox(playerid)
{
    if(hideMSG[playerid] == 0)
	{
		TextDrawHideForPlayer(playerid, TD_line[0]);
		TextDrawHideForPlayer(playerid, TD_line[1]);
		TextDrawHideForPlayer(playerid, TD_line[2]);
		TextDrawHideForPlayer(playerid, TD_line[3]);
	}
}

function Race_CalculatePosition()
{
	new cp,
	    vehicleid,
		c,
		Float:rPOS[4],
		g_RacePosition[12][e_race_position];

	for(new i; i < sizeof(g_RacePosition); i++)
	{
	    g_RacePosition[i][RP_iPlayer] = INVALID_PLAYER_ID;
	    g_RacePosition[i][RP_iValue] = -(i + 1);
	}
 	foreach(Player, ii)
	{
		if(RaceParticipant[ii] == true)
		{
			vehicleid = GetPlayerVehicleID(ii);
			GetVehiclePos(vehicleid, rPOS[0], rPOS[1], rPOS[2]);

			cp = CurrentCheckpoint[ii] + 1;

			rPOS[3] = GetDistance(rPOS[0], rPOS[1], rPOS[2], RaceCheckpoints[cp][0], RaceCheckpoints[cp][1], RaceCheckpoints[cp][2]);
			if(rPOS[3] > 10000)
			{
   				rPOS[3] = 10000;
			}
			rPOS[3] = (10000 - rPOS[3]);
   			g_RacePosition[c][RP_iPlayer] = ii;
      		g_RacePosition[c][RP_iValue] = (CurrentCheckpoint[ii] * 10000) + floatround(rPOS[3]);
        	c++;
        }
	}
	SortDeepArray(g_RacePosition, RP_iValue, .order = SORT_DESC);
	for(new i; i < sizeof(g_RacePosition); i++)
	{
        if(g_RacePosition[i][RP_iPlayer] != INVALID_PLAYER_ID)
		{
            RacePosition[g_RacePosition[i][RP_iPlayer]] = i + 1;
		}
	}
	return 1;
}


/*JoinMSG(playerid, const minigame[], const cmd[])
{
	format(str, sizeof(str), ""LB_E"[MG] "WHITEP_E"%s(%i) has joined %s. "GREY_E"[/%s]", pName[playerid], playerid, minigame, cmd);
	foreach(Player, i)
	{
		if(hideMSG[i] == false) SendClientMessage(i, COLOR_WHITEP, str);
	}
	format(str, sizeof(str), "4[MG]3 %s(%i) has joined %s. [/%s]", pName[playerid], playerid, minigame, cmd);
	IRC_GroupSay(ircGroup, IRC_CHANNEL, str);
}*/

stock UpdateMinigameBox(playerid, type, const tele[])
{
	if(strlen(pName[playerid]) > 12) return true;
	szString_3 = szString_2;
	szString_2 = szString_1;
	szString_1 = szString_0;
	switch(type)
	{
		case 1: format(szString_0, sizeof(szString_0), "~r~%s(%d) ~W~has gone to ~y~%s", pName[playerid], playerid, tele);
		case 2: format(szString_0, sizeof(szString_0), "~r~%s(%d) ~W~has gone to ~y~%s", pName[playerid], playerid, tele);
		case 3: format(szString_0, sizeof(szString_0), "~r~%s(%d) ~W~has gone to ~y~%s", pName[playerid], playerid, tele);

	}

    //TextDrawSetString(TeleTD, szString_0);
    format(str, sizeof(str), ""LB2_E"[Minigame] "WHITEP_E"%s(%i) has just joined "GREY_E"%s", pName[playerid], playerid, tele);
    SendClientMessageToAll(COLOR_ORANGE, str);
	//TextDrawSetString(TD_line[1], szString_1);
	//TextDrawSetString(TD_line[2], szString_2);
    //TextDrawSetString(TD_line[3], szString_3);

    return true;
}


stock CanPlayerTeleport(playerid)
{
 	if(!pSpawned[playerid])
	{
		Error(playerid, "You must be spawned to teleport!");
		return false;
	}
	else if(pSpectating[playerid] != -1)
	{
		Error(playerid, "You can't use this command while spectating, type /specoff!");
		return false;
	}
	else if(doingStunt[playerid] == 18 || doingStunt[playerid] == 19 || doingStunt[playerid] == 97 || doingStunt[playerid] == 33 || doingStunt[playerid] == 70) // Fallout, Derby LMS
	{
	    if(doingStunt[playerid] == 70)
	    {
	    	SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /stopwatch to stop spectating the event.");
			InfoTD_MSG(playerid, 3500, "~y~~h~Type /stopwatch before teleporting!");
	    }
	    else
	    {
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"You can't use this command while in a minigame!");
			SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /leave to exit the minigame.");
			InfoTD_MSG(playerid, 3500, "~y~~h~Type /leave to exit the minigame.");
   		}
		return false;
	}
	else if(InDuel[playerid] != 0 )
	{
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"You can't use this command while in a duel!");
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /leave to exit the duel.");
		InfoTD_MSG(playerid, 3500, "~b~~h~Type /leave to exit the duel.");
		return false;
	}
	else if(RaceParticipant[playerid] == true)
	{
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"You can't use this command while in a race!");
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /leave to exit the race.");
		Info(playerid, "Spawn a vehicle using /v "RED_E" || "WHITEP_E"Flip your vehicle using /flip "RED_E"|| "WHITEP_E"Change virtual world using /cw");
		InfoTD_MSG(playerid, 2500, "~g~~h~Type /v to spawn a vehicle. Type ~w~/cw ~g~~h~to change your virtual world.");
		return false;
 	}
	else if(InEvent[playerid] != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"You can't use this command while in an event!");
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /leave to exit the event.");
		return false;
	}
	else if(InDM[playerid] == 3 || InDM[playerid] == 4 || InDM[playerid] == 11 || InDM[playerid] == 7) // Minigun and Rocket
	{
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"You can't use this command in this DM!");
		SendClientMessage(playerid, COLOR_GREY, ""RED_E"Server: "GREY_E"Type /leave to exit the DM.");
		InfoTD_MSG(playerid, 3500, "~y~~h~Type /leave to exit this deathmatch.");
		return false;
	}
	else if(GetPVarInt(playerid, "HousePreview") != 0)
	{
 		Error(playerid, "You are currently previewing an interior, please exit the preview before teleporting.");
   		return false;
	}
	return true;
}

forward killCamCD(playerid, killerid);
public killCamCD(playerid, killerid)
{
	killCamCounter[playerid]--;
	if(killCamCounter[playerid] > 0)
	{
		new Float:kHP, Float:kAR;
		GetPlayerHealth(killerid,kHP), GetPlayerArmour(killerid, kAR);
		format(str, sizeof(str), "~g~Player:~w~ : %s", pName[killerid]);
		PlayerTextDrawSetString(playerid, name[playerid], str);
		format(str, sizeof(str), "~r~HEALTH~w~ : %.0f%", kHP);
		PlayerTextDrawSetString(playerid, HealthTD[playerid], str);
		if(kAR >= 0)
		{
			format(str, sizeof(str), "~r~ARMOUR~w~ : %.0f%", kAR);
			PlayerTextDrawSetString(playerid, Armour[playerid], str);
		}
		else
		{
			format(str, sizeof(str), "~r~ARMOUR~w~ : NONE");
			PlayerTextDrawSetString(playerid, Armour[playerid], str);
		}
		format(str, sizeof(str), "~r~KillStreak~w~ : %d", killStreak[killerid]);
		PlayerTextDrawSetString(playerid, killStreakTD[playerid], str);
		format(str, sizeof(str), "You will respawn in ~y~%d ~w~seconds.~n~Press the fire key to respawn at anytime.", killCamCounter[playerid]);
		PlayerTextDrawSetString(playerid, killCamTD8[playerid], str);
  	}
	else if(killCamCounter[playerid] == 0)
	{
	    KillTimer(killCamTimer[playerid]);
		if(killCamON[playerid] != false)
		{
			DeletePVar(killerid, "killCamSpectator");
			TogglePlayerSpectating(playerid, 0);
			killCamON[playerid] = false;

		}
  	}
	return 1;
}

stock UpdateKillCam(playerid, killerid)
{
	new Float:kHP, Float:kAR;
	GetPlayerHealth(killerid,kHP), GetPlayerArmour(killerid, kAR);
	format(str, sizeof(str), "~g~Player:~w~ : %s", pName[killerid]);
	PlayerTextDrawSetString(playerid, name[playerid], str);
	format(str, sizeof(str), "~r~HEALTH~w~ : %.0f%", kHP);
	PlayerTextDrawSetString(playerid, HealthTD[playerid], str);
	if(kAR >= 0)
	{
		format(str, sizeof(str), "~r~ARMOUR~w~ : %.0f%", kAR);
		PlayerTextDrawSetString(playerid, Armour[playerid], str);
	}
	else
	{
		format(str, sizeof(str), "~r~ARMOUR~w~ : NONE");
		PlayerTextDrawSetString(playerid, Armour[playerid], str);
	}
	format(str, sizeof(str), "~r~KillStreak~w~ : %d", killStreak[killerid]);
	PlayerTextDrawSetString(playerid, killStreakTD[playerid], str);
	format(str, sizeof(str), "You will respawn in ~y~%d ~w~seconds.~n~Press the fire key to respawn at anytime.", killCamCounter[playerid]);
	PlayerTextDrawSetString(playerid, killCamTD8[playerid], str);
}


stock AddKickLogEntry(playerid, kickName[], kickIP[], adminID, kickReason[])
{
	new kickReasonEscaped[128];
	mysql_real_escape_string(kickReason, kickReasonEscaped);
	format(query, sizeof(query), "INSERT INTO kicks(player,player_ip,player_regid,admin,reason,time) VALUES('%s','%s',%d,'%s','%s',UNIX_TIMESTAMP())", kickName, kickIP, pRegID[playerid], pName[adminID], pRegID[adminID], kickReasonEscaped);
	MySQL_updateQuery(query);
}/*
AdminCommandLog(const command[], adminid, player = INVALID_PLAYER_ID, logstr[] = '*')
{
	// Get the admin's name
	new logPlayerName[24];
	GetPlayerName(adminid, logPlayerName, sizeof(logPlayerName));

	// Set the logging message to be correct
	new logStrEscaped[128];
	if(logstr[0] == '*')
		logStrEscaped = "*", printf("AdminCommandLog: logstr detected as unnecessary, logStrEscaped = '%s' (must be '*')", logStrEscaped);
	else
		mysql_real_escape_string(logstr, logStrEscaped), printf("AdminCommandLog: logstr detected necessary, escaped from '%s' to '%s'", logstr, logStrEscaped);

	if(player != INVALID_PLAYER_ID)
	{
		// The action involves a player, get their name
		new gName[24];
		GetPlayerName(player, gName, sizeof(gName));
		format(query, sizeof(query), "INSERT INTO adminlog (command,admin,adminid,player,playerid,str,time) VALUES('%s','%s',%d,'%s',%d,'%s',UNIX_TIMESTAMP())", command, logPlayerName, pRegID[adminid], gName, pRegID[player], logStrEscaped);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO adminlog (command,admin,adminid,str,time) VALUES('%s','%s',%d,'%s',UNIX_TIMESTAMP())", command, logPlayerName, pRegID[adminid], logStrEscaped);
	}

	// Send the query!
	MySQL_updateQuery(query);
	return true;
}*/
